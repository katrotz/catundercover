"bundle";
System.registerDynamic("npm:@angular/platform-browser-dynamic@2.0.0-rc.5/core_private.js", ["@angular/core"], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var core_1 = $__require("@angular/core");
  exports.ReflectionCapabilities = core_1.__core_private__.ReflectionCapabilities;
  exports.reflector = core_1.__core_private__.reflector;
  exports.Console = core_1.__core_private__.Console;
  

  return module.exports;
});
System.registerDynamic("npm:@angular/platform-browser-dynamic@2.0.0-rc.5/platform_browser_private.js", ["@angular/platform-browser"], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var platform_browser_1 = $__require("@angular/platform-browser");
  exports.INTERNAL_BROWSER_PLATFORM_PROVIDERS = platform_browser_1.__platform_browser_private__.INTERNAL_BROWSER_PLATFORM_PROVIDERS;
  exports.getDOM = platform_browser_1.__platform_browser_private__.getDOM;
  

  return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser-dynamic@2.0.0-rc.5/src/platform_providers.js', ['@angular/compiler', '@angular/core', '../platform_browser_private', './xhr/xhr_impl', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var compiler_1 = $__require('@angular/compiler');
    var core_1 = $__require('@angular/core');
    var platform_browser_private_1 = $__require('../platform_browser_private');
    var xhr_impl_1 = $__require('./xhr/xhr_impl');
    exports.INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS = [platform_browser_private_1.INTERNAL_BROWSER_PLATFORM_PROVIDERS, {
        provide: core_1.COMPILER_OPTIONS,
        useValue: { providers: [{ provide: compiler_1.XHR, useClass: xhr_impl_1.XHRImpl }] },
        multi: true
    }];
    

    return module.exports;
});
System.registerDynamic("npm:@angular/platform-browser-dynamic@2.0.0-rc.5/src/facade/base_wrapped_exception.js", ["reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * A base class for the WrappedException that can be used to identify
     * a WrappedException from ExceptionHandler without adding circular
     * dependency.
     */
    var BaseWrappedException = function (_super) {
        __extends(BaseWrappedException, _super);
        function BaseWrappedException(message) {
            _super.call(this, message);
        }
        Object.defineProperty(BaseWrappedException.prototype, "wrapperMessage", {
            get: function () {
                return '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseWrappedException.prototype, "wrapperStack", {
            get: function () {
                return null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseWrappedException.prototype, "originalException", {
            get: function () {
                return null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseWrappedException.prototype, "originalStack", {
            get: function () {
                return null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseWrappedException.prototype, "context", {
            get: function () {
                return null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseWrappedException.prototype, "message", {
            get: function () {
                return '';
            },
            enumerable: true,
            configurable: true
        });
        return BaseWrappedException;
    }(Error);
    exports.BaseWrappedException = BaseWrappedException;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/platform-browser-dynamic@2.0.0-rc.5/src/facade/collection.js", ["./lang", "reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var lang_1 = $__require("./lang");
    exports.Map = lang_1.global.Map;
    exports.Set = lang_1.global.Set;
    // Safari and Internet Explorer do not support the iterable parameter to the
    // Map constructor.  We work around that by manually adding the items.
    var createMapFromPairs = function () {
        try {
            if (new exports.Map([[1, 2]]).size === 1) {
                return function createMapFromPairs(pairs) {
                    return new exports.Map(pairs);
                };
            }
        } catch (e) {}
        return function createMapAndPopulateFromPairs(pairs) {
            var map = new exports.Map();
            for (var i = 0; i < pairs.length; i++) {
                var pair = pairs[i];
                map.set(pair[0], pair[1]);
            }
            return map;
        };
    }();
    var createMapFromMap = function () {
        try {
            if (new exports.Map(new exports.Map())) {
                return function createMapFromMap(m) {
                    return new exports.Map(m);
                };
            }
        } catch (e) {}
        return function createMapAndPopulateFromMap(m) {
            var map = new exports.Map();
            m.forEach(function (v, k) {
                map.set(k, v);
            });
            return map;
        };
    }();
    var _clearValues = function () {
        if (new exports.Map().keys().next) {
            return function _clearValues(m) {
                var keyIterator = m.keys();
                var k;
                while (!(k = keyIterator.next()).done) {
                    m.set(k.value, null);
                }
            };
        } else {
            return function _clearValuesWithForeEach(m) {
                m.forEach(function (v, k) {
                    m.set(k, null);
                });
            };
        }
    }();
    // Safari doesn't implement MapIterator.next(), which is used is Traceur's polyfill of Array.from
    // TODO(mlaval): remove the work around once we have a working polyfill of Array.from
    var _arrayFromMap = function () {
        try {
            if (new exports.Map().values().next) {
                return function createArrayFromMap(m, getValues) {
                    return getValues ? Array.from(m.values()) : Array.from(m.keys());
                };
            }
        } catch (e) {}
        return function createArrayFromMapWithForeach(m, getValues) {
            var res = ListWrapper.createFixedSize(m.size),
                i = 0;
            m.forEach(function (v, k) {
                res[i] = getValues ? v : k;
                i++;
            });
            return res;
        };
    }();
    var MapWrapper = function () {
        function MapWrapper() {}
        MapWrapper.clone = function (m) {
            return createMapFromMap(m);
        };
        MapWrapper.createFromStringMap = function (stringMap) {
            var result = new exports.Map();
            for (var prop in stringMap) {
                result.set(prop, stringMap[prop]);
            }
            return result;
        };
        MapWrapper.toStringMap = function (m) {
            var r = {};
            m.forEach(function (v, k) {
                return r[k] = v;
            });
            return r;
        };
        MapWrapper.createFromPairs = function (pairs) {
            return createMapFromPairs(pairs);
        };
        MapWrapper.clearValues = function (m) {
            _clearValues(m);
        };
        MapWrapper.iterable = function (m) {
            return m;
        };
        MapWrapper.keys = function (m) {
            return _arrayFromMap(m, false);
        };
        MapWrapper.values = function (m) {
            return _arrayFromMap(m, true);
        };
        return MapWrapper;
    }();
    exports.MapWrapper = MapWrapper;
    /**
     * Wraps Javascript Objects
     */
    var StringMapWrapper = function () {
        function StringMapWrapper() {}
        StringMapWrapper.create = function () {
            // Note: We are not using Object.create(null) here due to
            // performance!
            // http://jsperf.com/ng2-object-create-null
            return {};
        };
        StringMapWrapper.contains = function (map, key) {
            return map.hasOwnProperty(key);
        };
        StringMapWrapper.get = function (map, key) {
            return map.hasOwnProperty(key) ? map[key] : undefined;
        };
        StringMapWrapper.set = function (map, key, value) {
            map[key] = value;
        };
        StringMapWrapper.keys = function (map) {
            return Object.keys(map);
        };
        StringMapWrapper.values = function (map) {
            return Object.keys(map).map(function (k) {
                return map[k];
            });
        };
        StringMapWrapper.isEmpty = function (map) {
            for (var prop in map) {
                return false;
            }
            return true;
        };
        StringMapWrapper.delete = function (map, key) {
            delete map[key];
        };
        StringMapWrapper.forEach = function (map, callback) {
            for (var _i = 0, _a = Object.keys(map); _i < _a.length; _i++) {
                var k = _a[_i];
                callback(map[k], k);
            }
        };
        StringMapWrapper.merge = function (m1, m2) {
            var m = {};
            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
                var k = _a[_i];
                m[k] = m1[k];
            }
            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
                var k = _c[_b];
                m[k] = m2[k];
            }
            return m;
        };
        StringMapWrapper.equals = function (m1, m2) {
            var k1 = Object.keys(m1);
            var k2 = Object.keys(m2);
            if (k1.length != k2.length) {
                return false;
            }
            var key;
            for (var i = 0; i < k1.length; i++) {
                key = k1[i];
                if (m1[key] !== m2[key]) {
                    return false;
                }
            }
            return true;
        };
        return StringMapWrapper;
    }();
    exports.StringMapWrapper = StringMapWrapper;
    var ListWrapper = function () {
        function ListWrapper() {}
        // JS has no way to express a statically fixed size list, but dart does so we
        // keep both methods.
        ListWrapper.createFixedSize = function (size) {
            return new Array(size);
        };
        ListWrapper.createGrowableSize = function (size) {
            return new Array(size);
        };
        ListWrapper.clone = function (array) {
            return array.slice(0);
        };
        ListWrapper.forEachWithIndex = function (array, fn) {
            for (var i = 0; i < array.length; i++) {
                fn(array[i], i);
            }
        };
        ListWrapper.first = function (array) {
            if (!array) return null;
            return array[0];
        };
        ListWrapper.last = function (array) {
            if (!array || array.length == 0) return null;
            return array[array.length - 1];
        };
        ListWrapper.indexOf = function (array, value, startIndex) {
            if (startIndex === void 0) {
                startIndex = 0;
            }
            return array.indexOf(value, startIndex);
        };
        ListWrapper.contains = function (list, el) {
            return list.indexOf(el) !== -1;
        };
        ListWrapper.reversed = function (array) {
            var a = ListWrapper.clone(array);
            return a.reverse();
        };
        ListWrapper.concat = function (a, b) {
            return a.concat(b);
        };
        ListWrapper.insert = function (list, index, value) {
            list.splice(index, 0, value);
        };
        ListWrapper.removeAt = function (list, index) {
            var res = list[index];
            list.splice(index, 1);
            return res;
        };
        ListWrapper.removeAll = function (list, items) {
            for (var i = 0; i < items.length; ++i) {
                var index = list.indexOf(items[i]);
                list.splice(index, 1);
            }
        };
        ListWrapper.remove = function (list, el) {
            var index = list.indexOf(el);
            if (index > -1) {
                list.splice(index, 1);
                return true;
            }
            return false;
        };
        ListWrapper.clear = function (list) {
            list.length = 0;
        };
        ListWrapper.isEmpty = function (list) {
            return list.length == 0;
        };
        ListWrapper.fill = function (list, value, start, end) {
            if (start === void 0) {
                start = 0;
            }
            if (end === void 0) {
                end = null;
            }
            list.fill(value, start, end === null ? list.length : end);
        };
        ListWrapper.equals = function (a, b) {
            if (a.length != b.length) return false;
            for (var i = 0; i < a.length; ++i) {
                if (a[i] !== b[i]) return false;
            }
            return true;
        };
        ListWrapper.slice = function (l, from, to) {
            if (from === void 0) {
                from = 0;
            }
            if (to === void 0) {
                to = null;
            }
            return l.slice(from, to === null ? undefined : to);
        };
        ListWrapper.splice = function (l, from, length) {
            return l.splice(from, length);
        };
        ListWrapper.sort = function (l, compareFn) {
            if (lang_1.isPresent(compareFn)) {
                l.sort(compareFn);
            } else {
                l.sort();
            }
        };
        ListWrapper.toString = function (l) {
            return l.toString();
        };
        ListWrapper.toJSON = function (l) {
            return JSON.stringify(l);
        };
        ListWrapper.maximum = function (list, predicate) {
            if (list.length == 0) {
                return null;
            }
            var solution = null;
            var maxValue = -Infinity;
            for (var index = 0; index < list.length; index++) {
                var candidate = list[index];
                if (lang_1.isBlank(candidate)) {
                    continue;
                }
                var candidateValue = predicate(candidate);
                if (candidateValue > maxValue) {
                    solution = candidate;
                    maxValue = candidateValue;
                }
            }
            return solution;
        };
        ListWrapper.flatten = function (list) {
            var target = [];
            _flattenArray(list, target);
            return target;
        };
        ListWrapper.addAll = function (list, source) {
            for (var i = 0; i < source.length; i++) {
                list.push(source[i]);
            }
        };
        return ListWrapper;
    }();
    exports.ListWrapper = ListWrapper;
    function _flattenArray(source, target) {
        if (lang_1.isPresent(source)) {
            for (var i = 0; i < source.length; i++) {
                var item = source[i];
                if (lang_1.isArray(item)) {
                    _flattenArray(item, target);
                } else {
                    target.push(item);
                }
            }
        }
        return target;
    }
    function isListLikeIterable(obj) {
        if (!lang_1.isJsObject(obj)) return false;
        return lang_1.isArray(obj) || !(obj instanceof exports.Map) && lang_1.getSymbolIterator() in obj; // JS Iterable have a Symbol.iterator prop
    }
    exports.isListLikeIterable = isListLikeIterable;
    function areIterablesEqual(a, b, comparator) {
        var iterator1 = a[lang_1.getSymbolIterator()]();
        var iterator2 = b[lang_1.getSymbolIterator()]();
        while (true) {
            var item1 = iterator1.next();
            var item2 = iterator2.next();
            if (item1.done && item2.done) return true;
            if (item1.done || item2.done) return false;
            if (!comparator(item1.value, item2.value)) return false;
        }
    }
    exports.areIterablesEqual = areIterablesEqual;
    function iterateListLike(obj, fn) {
        if (lang_1.isArray(obj)) {
            for (var i = 0; i < obj.length; i++) {
                fn(obj[i]);
            }
        } else {
            var iterator = obj[lang_1.getSymbolIterator()]();
            var item;
            while (!(item = iterator.next()).done) {
                fn(item.value);
            }
        }
    }
    exports.iterateListLike = iterateListLike;
    // Safari and Internet Explorer do not support the iterable parameter to the
    // Set constructor.  We work around that by manually adding the items.
    var createSetFromList = function () {
        var test = new exports.Set([1, 2, 3]);
        if (test.size === 3) {
            return function createSetFromList(lst) {
                return new exports.Set(lst);
            };
        } else {
            return function createSetAndPopulateFromList(lst) {
                var res = new exports.Set(lst);
                if (res.size !== lst.length) {
                    for (var i = 0; i < lst.length; i++) {
                        res.add(lst[i]);
                    }
                }
                return res;
            };
        }
    }();
    var SetWrapper = function () {
        function SetWrapper() {}
        SetWrapper.createFromList = function (lst) {
            return createSetFromList(lst);
        };
        SetWrapper.has = function (s, key) {
            return s.has(key);
        };
        SetWrapper.delete = function (m, k) {
            m.delete(k);
        };
        return SetWrapper;
    }();
    exports.SetWrapper = SetWrapper;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser-dynamic@2.0.0-rc.5/src/facade/exception_handler.js', ['./base_wrapped_exception', './collection', './lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var base_wrapped_exception_1 = $__require('./base_wrapped_exception');
    var collection_1 = $__require('./collection');
    var lang_1 = $__require('./lang');
    var _ArrayLogger = function () {
        function _ArrayLogger() {
            this.res = [];
        }
        _ArrayLogger.prototype.log = function (s) {
            this.res.push(s);
        };
        _ArrayLogger.prototype.logError = function (s) {
            this.res.push(s);
        };
        _ArrayLogger.prototype.logGroup = function (s) {
            this.res.push(s);
        };
        _ArrayLogger.prototype.logGroupEnd = function () {};
        ;
        return _ArrayLogger;
    }();
    /**
     * Provides a hook for centralized exception handling.
     *
     * The default implementation of `ExceptionHandler` prints error messages to the `Console`. To
     * intercept error handling,
     * write a custom exception handler that replaces this default as appropriate for your app.
     *
     * ### Example
     *
     * ```javascript
     *
     * class MyExceptionHandler implements ExceptionHandler {
     *   call(error, stackTrace = null, reason = null) {
     *     // do something with the exception
     *   }
     * }
     *
     * bootstrap(MyApp, [{provide: ExceptionHandler, useClass: MyExceptionHandler}])
     *
     * ```
     * @stable
     */
    var ExceptionHandler = function () {
        function ExceptionHandler(_logger, _rethrowException) {
            if (_rethrowException === void 0) {
                _rethrowException = true;
            }
            this._logger = _logger;
            this._rethrowException = _rethrowException;
        }
        ExceptionHandler.exceptionToString = function (exception, stackTrace, reason) {
            if (stackTrace === void 0) {
                stackTrace = null;
            }
            if (reason === void 0) {
                reason = null;
            }
            var l = new _ArrayLogger();
            var e = new ExceptionHandler(l, false);
            e.call(exception, stackTrace, reason);
            return l.res.join('\n');
        };
        ExceptionHandler.prototype.call = function (exception, stackTrace, reason) {
            if (stackTrace === void 0) {
                stackTrace = null;
            }
            if (reason === void 0) {
                reason = null;
            }
            var originalException = this._findOriginalException(exception);
            var originalStack = this._findOriginalStack(exception);
            var context = this._findContext(exception);
            this._logger.logGroup("EXCEPTION: " + this._extractMessage(exception));
            if (lang_1.isPresent(stackTrace) && lang_1.isBlank(originalStack)) {
                this._logger.logError('STACKTRACE:');
                this._logger.logError(this._longStackTrace(stackTrace));
            }
            if (lang_1.isPresent(reason)) {
                this._logger.logError("REASON: " + reason);
            }
            if (lang_1.isPresent(originalException)) {
                this._logger.logError("ORIGINAL EXCEPTION: " + this._extractMessage(originalException));
            }
            if (lang_1.isPresent(originalStack)) {
                this._logger.logError('ORIGINAL STACKTRACE:');
                this._logger.logError(this._longStackTrace(originalStack));
            }
            if (lang_1.isPresent(context)) {
                this._logger.logError('ERROR CONTEXT:');
                this._logger.logError(context);
            }
            this._logger.logGroupEnd();
            // We rethrow exceptions, so operations like 'bootstrap' will result in an error
            // when an exception happens. If we do not rethrow, bootstrap will always succeed.
            if (this._rethrowException) throw exception;
        };
        /** @internal */
        ExceptionHandler.prototype._extractMessage = function (exception) {
            return exception instanceof base_wrapped_exception_1.BaseWrappedException ? exception.wrapperMessage : exception.toString();
        };
        /** @internal */
        ExceptionHandler.prototype._longStackTrace = function (stackTrace) {
            return collection_1.isListLikeIterable(stackTrace) ? stackTrace.join('\n\n-----async gap-----\n') : stackTrace.toString();
        };
        /** @internal */
        ExceptionHandler.prototype._findContext = function (exception) {
            try {
                if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
                return lang_1.isPresent(exception.context) ? exception.context : this._findContext(exception.originalException);
            } catch (e) {
                // exception.context can throw an exception. if it happens, we ignore the context.
                return null;
            }
        };
        /** @internal */
        ExceptionHandler.prototype._findOriginalException = function (exception) {
            if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
            var e = exception.originalException;
            while (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
                e = e.originalException;
            }
            return e;
        };
        /** @internal */
        ExceptionHandler.prototype._findOriginalStack = function (exception) {
            if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
            var e = exception;
            var stack = exception.originalStack;
            while (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
                e = e.originalException;
                if (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
                    stack = e.originalStack;
                }
            }
            return stack;
        };
        return ExceptionHandler;
    }();
    exports.ExceptionHandler = ExceptionHandler;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser-dynamic@2.0.0-rc.5/src/facade/exceptions.js', ['./base_wrapped_exception', './exception_handler', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var base_wrapped_exception_1 = $__require('./base_wrapped_exception');
    var exception_handler_1 = $__require('./exception_handler');
    var exception_handler_2 = $__require('./exception_handler');
    exports.ExceptionHandler = exception_handler_2.ExceptionHandler;
    /**
     * @stable
     */
    var BaseException = function (_super) {
        __extends(BaseException, _super);
        function BaseException(message) {
            if (message === void 0) {
                message = '--';
            }
            _super.call(this, message);
            this.message = message;
            this.stack = new Error(message).stack;
        }
        BaseException.prototype.toString = function () {
            return this.message;
        };
        return BaseException;
    }(Error);
    exports.BaseException = BaseException;
    /**
     * Wraps an exception and provides additional context or information.
     * @stable
     */
    var WrappedException = function (_super) {
        __extends(WrappedException, _super);
        function WrappedException(_wrapperMessage, _originalException /** TODO #9100 */, _originalStack /** TODO #9100 */, _context /** TODO #9100 */) {
            _super.call(this, _wrapperMessage);
            this._wrapperMessage = _wrapperMessage;
            this._originalException = _originalException;
            this._originalStack = _originalStack;
            this._context = _context;
            this._wrapperStack = new Error(_wrapperMessage).stack;
        }
        Object.defineProperty(WrappedException.prototype, "wrapperMessage", {
            get: function () {
                return this._wrapperMessage;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WrappedException.prototype, "wrapperStack", {
            get: function () {
                return this._wrapperStack;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WrappedException.prototype, "originalException", {
            get: function () {
                return this._originalException;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WrappedException.prototype, "originalStack", {
            get: function () {
                return this._originalStack;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WrappedException.prototype, "context", {
            get: function () {
                return this._context;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WrappedException.prototype, "message", {
            get: function () {
                return exception_handler_1.ExceptionHandler.exceptionToString(this);
            },
            enumerable: true,
            configurable: true
        });
        WrappedException.prototype.toString = function () {
            return this.message;
        };
        return WrappedException;
    }(base_wrapped_exception_1.BaseWrappedException);
    exports.WrappedException = WrappedException;
    function makeTypeError(message) {
        return new TypeError(message);
    }
    exports.makeTypeError = makeTypeError;
    function unimplemented() {
        throw new BaseException('unimplemented');
    }
    exports.unimplemented = unimplemented;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser-dynamic@2.0.0-rc.5/src/xhr/xhr_cache.js', ['@angular/compiler', '../facade/exceptions', '../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var compiler_1 = $__require('@angular/compiler');
    var exceptions_1 = $__require('../facade/exceptions');
    var lang_1 = $__require('../facade/lang');
    /**
     * An implementation of XHR that uses a template cache to avoid doing an actual
     * XHR.
     *
     * The template cache needs to be built and loaded into window.$templateCache
     * via a separate mechanism.
     */
    var CachedXHR = function (_super) {
        __extends(CachedXHR, _super);
        function CachedXHR() {
            _super.call(this);
            this._cache = lang_1.global.$templateCache;
            if (this._cache == null) {
                throw new exceptions_1.BaseException('CachedXHR: Template cache was not found in $templateCache.');
            }
        }
        CachedXHR.prototype.get = function (url) {
            if (this._cache.hasOwnProperty(url)) {
                return Promise.resolve(this._cache[url]);
            } else {
                return Promise.reject('CachedXHR: Did not find cached template for ' + url);
            }
        };
        return CachedXHR;
    }(compiler_1.XHR);
    exports.CachedXHR = CachedXHR;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/compiler@2.0.0-rc.5/src/i18n/digest.js", ["reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function digestMessage(message) {
        return strHash(serializeNodes(message.nodes).join('') + ("[" + message.meaning + "]"));
    }
    exports.digestMessage = digestMessage;
    /**
     * String hash function similar to java.lang.String.hashCode().
     * The hash code for a string is computed as
     * s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],
     * where s[i] is the ith character of the string and n is the length of
     * the string. We mod the result to make it between 0 (inclusive) and 2^32 (exclusive).
     *
     * Based on goog.string.hashCode from the Google Closure library
     * https://github.com/google/closure-library/
     *
     * @internal
     */
    // TODO(vicb): better algo (less collisions) ?
    function strHash(str) {
        var result = 0;
        for (var i = 0; i < str.length; ++i) {
            // Normalize to 4 byte range, 0 ... 2^32.
            result = 31 * result + str.charCodeAt(i) >>> 0;
        }
        return result.toString(16);
    }
    exports.strHash = strHash;
    /**
     * Serialize the i18n ast to something xml-like in order to generate an UID.
     *
     * The visitor is also used in the i18n parser tests
     *
     * @internal
     */
    var _SerializerVisitor = function () {
        function _SerializerVisitor() {}
        _SerializerVisitor.prototype.visitText = function (text, context) {
            return text.value;
        };
        _SerializerVisitor.prototype.visitContainer = function (container, context) {
            var _this = this;
            return "[" + container.children.map(function (child) {
                return child.visit(_this);
            }).join(', ') + "]";
        };
        _SerializerVisitor.prototype.visitIcu = function (icu, context) {
            var _this = this;
            var strCases = Object.keys(icu.cases).map(function (k) {
                return k + " {" + icu.cases[k].visit(_this) + "}";
            });
            return "{" + icu.expression + ", " + icu.type + ", " + strCases.join(', ') + "}";
        };
        _SerializerVisitor.prototype.visitTagPlaceholder = function (ph, context) {
            var _this = this;
            return ph.isVoid ? "<ph tag name=\"" + ph.startName + "\"/>" : "<ph tag name=\"" + ph.startName + "\">" + ph.children.map(function (child) {
                return child.visit(_this);
            }).join(', ') + "</ph name=\"" + ph.closeName + "\">";
        };
        _SerializerVisitor.prototype.visitPlaceholder = function (ph, context) {
            return "<ph name=\"" + ph.name + "\">" + ph.value + "</ph>";
        };
        _SerializerVisitor.prototype.visitIcuPlaceholder = function (ph, context) {
            return "<ph icu name=\"" + ph.name + "\">" + ph.value.visit(this) + "</ph>";
        };
        return _SerializerVisitor;
    }();
    var serializerVisitor = new _SerializerVisitor();
    function serializeNodes(nodes) {
        return nodes.map(function (a) {
            return a.visit(serializerVisitor, null);
        });
    }
    exports.serializeNodes = serializeNodes;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/i18n/i18n_ast.js', ['reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var Message = function () {
        function Message(nodes, placeholders, meaning, description) {
            this.nodes = nodes;
            this.placeholders = placeholders;
            this.meaning = meaning;
            this.description = description;
        }
        return Message;
    }();
    exports.Message = Message;
    var Text = function () {
        function Text(value, sourceSpan) {
            this.value = value;
            this.sourceSpan = sourceSpan;
        }
        Text.prototype.visit = function (visitor, context) {
            return visitor.visitText(this, context);
        };
        return Text;
    }();
    exports.Text = Text;
    var Container = function () {
        function Container(children, sourceSpan) {
            this.children = children;
            this.sourceSpan = sourceSpan;
        }
        Container.prototype.visit = function (visitor, context) {
            return visitor.visitContainer(this, context);
        };
        return Container;
    }();
    exports.Container = Container;
    var Icu = function () {
        function Icu(expression, type, cases, sourceSpan) {
            this.expression = expression;
            this.type = type;
            this.cases = cases;
            this.sourceSpan = sourceSpan;
        }
        Icu.prototype.visit = function (visitor, context) {
            return visitor.visitIcu(this, context);
        };
        return Icu;
    }();
    exports.Icu = Icu;
    var TagPlaceholder = function () {
        function TagPlaceholder(tag, attrs, startName, closeName, children, isVoid, sourceSpan) {
            this.tag = tag;
            this.attrs = attrs;
            this.startName = startName;
            this.closeName = closeName;
            this.children = children;
            this.isVoid = isVoid;
            this.sourceSpan = sourceSpan;
        }
        TagPlaceholder.prototype.visit = function (visitor, context) {
            return visitor.visitTagPlaceholder(this, context);
        };
        return TagPlaceholder;
    }();
    exports.TagPlaceholder = TagPlaceholder;
    var Placeholder = function () {
        function Placeholder(value, name, sourceSpan) {
            if (name === void 0) {
                name = '';
            }
            this.value = value;
            this.name = name;
            this.sourceSpan = sourceSpan;
        }
        Placeholder.prototype.visit = function (visitor, context) {
            return visitor.visitPlaceholder(this, context);
        };
        return Placeholder;
    }();
    exports.Placeholder = Placeholder;
    var IcuPlaceholder = function () {
        function IcuPlaceholder(value, name, sourceSpan) {
            if (name === void 0) {
                name = '';
            }
            this.value = value;
            this.name = name;
            this.sourceSpan = sourceSpan;
        }
        IcuPlaceholder.prototype.visit = function (visitor, context) {
            return visitor.visitIcuPlaceholder(this, context);
        };
        return IcuPlaceholder;
    }();
    exports.IcuPlaceholder = IcuPlaceholder;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/i18n/serializers/placeholder.js', ['reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var TAG_TO_PLACEHOLDER_NAMES = {
        'A': 'LINK',
        'B': 'BOLD_TEXT',
        'BR': 'LINE_BREAK',
        'EM': 'EMPHASISED_TEXT',
        'H1': 'HEADING_LEVEL1',
        'H2': 'HEADING_LEVEL2',
        'H3': 'HEADING_LEVEL3',
        'H4': 'HEADING_LEVEL4',
        'H5': 'HEADING_LEVEL5',
        'H6': 'HEADING_LEVEL6',
        'HR': 'HORIZONTAL_RULE',
        'I': 'ITALIC_TEXT',
        'LI': 'LIST_ITEM',
        'LINK': 'MEDIA_LINK',
        'OL': 'ORDERED_LIST',
        'P': 'PARAGRAPH',
        'Q': 'QUOTATION',
        'S': 'STRIKETHROUGH_TEXT',
        'SMALL': 'SMALL_TEXT',
        'SUB': 'SUBSTRIPT',
        'SUP': 'SUPERSCRIPT',
        'TBODY': 'TABLE_BODY',
        'TD': 'TABLE_CELL',
        'TFOOT': 'TABLE_FOOTER',
        'TH': 'TABLE_HEADER_CELL',
        'THEAD': 'TABLE_HEADER',
        'TR': 'TABLE_ROW',
        'TT': 'MONOSPACED_TEXT',
        'U': 'UNDERLINED_TEXT',
        'UL': 'UNORDERED_LIST'
    };
    /**
     * Creates unique names for placeholder with different content
     *
     * @internal
     */
    var PlaceholderRegistry = function () {
        function PlaceholderRegistry() {
            // Count the occurrence of the base name top generate a unique name
            this._placeHolderNameCounts = {};
            // Maps signature to placeholder names
            this._signatureToName = {};
        }
        PlaceholderRegistry.prototype.getStartTagPlaceholderName = function (tag, attrs, isVoid) {
            var signature = this._hashTag(tag, attrs, isVoid);
            if (this._signatureToName[signature]) {
                return this._signatureToName[signature];
            }
            var upperTag = tag.toUpperCase();
            var baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag;
            var name = this._generateUniqueName(isVoid ? baseName : "START_" + baseName);
            this._signatureToName[signature] = name;
            return name;
        };
        PlaceholderRegistry.prototype.getCloseTagPlaceholderName = function (tag) {
            var signature = this._hashClosingTag(tag);
            if (this._signatureToName[signature]) {
                return this._signatureToName[signature];
            }
            var upperTag = tag.toUpperCase();
            var baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag;
            var name = this._generateUniqueName("CLOSE_" + baseName);
            this._signatureToName[signature] = name;
            return name;
        };
        PlaceholderRegistry.prototype.getPlaceholderName = function (name, content) {
            var upperName = name.toUpperCase();
            var signature = "PH: " + upperName + "=" + content;
            if (this._signatureToName[signature]) {
                return this._signatureToName[signature];
            }
            var uniqueName = this._generateUniqueName(upperName);
            this._signatureToName[signature] = uniqueName;
            return uniqueName;
        };
        // Generate a hash for a tag - does not take attribute order into account
        PlaceholderRegistry.prototype._hashTag = function (tag, attrs, isVoid) {
            var start = "<" + tag;
            var strAttrs = Object.keys(attrs).sort().map(function (name) {
                return " " + name + "=" + attrs[name];
            }).join('');
            var end = isVoid ? '/>' : "></" + tag + ">";
            return start + strAttrs + end;
        };
        PlaceholderRegistry.prototype._hashClosingTag = function (tag) {
            return this._hashTag("/" + tag, {}, false);
        };
        PlaceholderRegistry.prototype._generateUniqueName = function (base) {
            var name = base;
            var next = this._placeHolderNameCounts[name];
            if (!next) {
                next = 1;
            } else {
                name += "_" + next;
                next++;
            }
            this._placeHolderNameCounts[base] = next;
            return name;
        };
        return PlaceholderRegistry;
    }();
    exports.PlaceholderRegistry = PlaceholderRegistry;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/i18n/i18n_parser.js', ['../expression_parser/lexer', '../expression_parser/parser', '../ml_parser/ast', '../ml_parser/html_tags', './i18n_ast', './serializers/placeholder', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var lexer_1 = $__require('../expression_parser/lexer');
    var parser_1 = $__require('../expression_parser/parser');
    var html = $__require('../ml_parser/ast');
    var html_tags_1 = $__require('../ml_parser/html_tags');
    var i18n = $__require('./i18n_ast');
    var placeholder_1 = $__require('./serializers/placeholder');
    var _expParser = new parser_1.Parser(new lexer_1.Lexer());
    /**
     * Returns a function converting html Messages to i18n Messages given an interpolationConfig
     */
    function createI18nMessageFactory(interpolationConfig) {
        var visitor = new _I18nVisitor(_expParser, interpolationConfig);
        return function (nodes, meaning, description) {
            return visitor.toI18nMessage(nodes, meaning, description);
        };
    }
    exports.createI18nMessageFactory = createI18nMessageFactory;
    var _I18nVisitor = function () {
        function _I18nVisitor(_expressionParser, _interpolationConfig) {
            this._expressionParser = _expressionParser;
            this._interpolationConfig = _interpolationConfig;
        }
        _I18nVisitor.prototype.toI18nMessage = function (nodes, meaning, description) {
            this._isIcu = nodes.length == 1 && nodes[0] instanceof html.Expansion;
            this._icuDepth = 0;
            this._placeholderRegistry = new placeholder_1.PlaceholderRegistry();
            this._placeholderToContent = {};
            var i18nodes = html.visitAll(this, nodes, {});
            return new i18n.Message(i18nodes, this._placeholderToContent, meaning, description);
        };
        _I18nVisitor.prototype.visitElement = function (el, context) {
            var children = html.visitAll(this, el.children);
            var attrs = {};
            el.attrs.forEach(function (attr) {
                // Do not visit the attributes, translatable ones are top-level ASTs
                attrs[attr.name] = attr.value;
            });
            var isVoid = html_tags_1.getHtmlTagDefinition(el.name).isVoid;
            var startPhName = this._placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);
            this._placeholderToContent[startPhName] = el.sourceSpan.toString();
            var closePhName = '';
            if (!isVoid) {
                closePhName = this._placeholderRegistry.getCloseTagPlaceholderName(el.name);
                this._placeholderToContent[closePhName] = "</" + el.name + ">";
            }
            return new i18n.TagPlaceholder(el.name, attrs, startPhName, closePhName, children, isVoid, el.sourceSpan);
        };
        _I18nVisitor.prototype.visitAttribute = function (attribute, context) {
            return this._visitTextWithInterpolation(attribute.value, attribute.sourceSpan);
        };
        _I18nVisitor.prototype.visitText = function (text, context) {
            return this._visitTextWithInterpolation(text.value, text.sourceSpan);
        };
        _I18nVisitor.prototype.visitComment = function (comment, context) {
            return null;
        };
        _I18nVisitor.prototype.visitExpansion = function (icu, context) {
            var _this = this;
            this._icuDepth++;
            var i18nIcuCases = {};
            var i18nIcu = new i18n.Icu(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);
            icu.cases.forEach(function (caze) {
                i18nIcuCases[caze.value] = new i18n.Container(caze.expression.map(function (node) {
                    return node.visit(_this, {});
                }), caze.expSourceSpan);
            });
            this._icuDepth--;
            if (this._isIcu || this._icuDepth > 0) {
                // If the message (vs a part of the message) is an ICU message returns it
                return i18nIcu;
            }
            // else returns a placeholder
            var phName = this._placeholderRegistry.getPlaceholderName('ICU', icu.sourceSpan.toString());
            this._placeholderToContent[phName] = icu.sourceSpan.toString();
            return new i18n.IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);
        };
        _I18nVisitor.prototype.visitExpansionCase = function (icuCase, context) {
            throw new Error('Unreachable code');
        };
        _I18nVisitor.prototype._visitTextWithInterpolation = function (text, sourceSpan) {
            var splitInterpolation = this._expressionParser.splitInterpolation(text, sourceSpan.start.toString(), this._interpolationConfig);
            if (!splitInterpolation) {
                // No expression, return a single text
                return new i18n.Text(text, sourceSpan);
            }
            // Return a group of text + expressions
            var nodes = [];
            var container = new i18n.Container(nodes, sourceSpan);
            var _a = this._interpolationConfig,
                sDelimiter = _a.start,
                eDelimiter = _a.end;
            for (var i = 0; i < splitInterpolation.strings.length - 1; i++) {
                var expression = splitInterpolation.expressions[i];
                var baseName = _extractPlaceholderName(expression) || 'INTERPOLATION';
                var phName = this._placeholderRegistry.getPlaceholderName(baseName, expression);
                if (splitInterpolation.strings[i].length) {
                    // No need to add empty strings
                    nodes.push(new i18n.Text(splitInterpolation.strings[i], sourceSpan));
                }
                nodes.push(new i18n.Placeholder(expression, phName, sourceSpan));
                this._placeholderToContent[phName] = sDelimiter + expression + eDelimiter;
            }
            // The last index contains no expression
            var lastStringIdx = splitInterpolation.strings.length - 1;
            if (splitInterpolation.strings[lastStringIdx].length) {
                nodes.push(new i18n.Text(splitInterpolation.strings[lastStringIdx], sourceSpan));
            }
            return container;
        };
        return _I18nVisitor;
    }();
    var _CUSTOM_PH_EXP = /\/\/[\s\S]*i18n[\s\S]*\([\s\S]*ph[\s\S]*=[\s\S]*"([\s\S]*?)"[\s\S]*\)/g;
    function _extractPlaceholderName(input) {
        return input.split(_CUSTOM_PH_EXP)[1];
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/i18n/extractor_merger.js', ['../ml_parser/ast', './digest', './i18n_ast', './i18n_parser', './parse_util', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var html = $__require('../ml_parser/ast');
    var digest_1 = $__require('./digest');
    var i18n = $__require('./i18n_ast');
    var i18n_parser_1 = $__require('./i18n_parser');
    var parse_util_1 = $__require('./parse_util');
    var _I18N_ATTR = 'i18n';
    var _I18N_ATTR_PREFIX = 'i18n-';
    var _I18N_COMMENT_PREFIX_REGEXP = /^i18n:?/;
    /**
     * Extract translatable messages from an html AST
     */
    function extractMessages(nodes, interpolationConfig, implicitTags, implicitAttrs) {
        var visitor = new _Visitor(implicitTags, implicitAttrs);
        return visitor.extract(nodes, interpolationConfig);
    }
    exports.extractMessages = extractMessages;
    function mergeTranslations(nodes, translations, interpolationConfig, implicitTags, implicitAttrs) {
        var visitor = new _Visitor(implicitTags, implicitAttrs);
        return visitor.merge(nodes, translations, interpolationConfig);
    }
    exports.mergeTranslations = mergeTranslations;
    var ExtractionResult = function () {
        function ExtractionResult(messages, errors) {
            this.messages = messages;
            this.errors = errors;
        }
        return ExtractionResult;
    }();
    exports.ExtractionResult = ExtractionResult;
    var _VisitorMode;
    (function (_VisitorMode) {
        _VisitorMode[_VisitorMode["Extract"] = 0] = "Extract";
        _VisitorMode[_VisitorMode["Merge"] = 1] = "Merge";
    })(_VisitorMode || (_VisitorMode = {}));
    /**
     * This Visitor is used:
     * 1. to extract all the translatable strings from an html AST (see `extract()`),
     * 2. to replace the translatable strings with the actual translations (see `merge()`)
     *
     * @internal
     */
    var _Visitor = function () {
        function _Visitor(_implicitTags, _implicitAttrs) {
            this._implicitTags = _implicitTags;
            this._implicitAttrs = _implicitAttrs;
            // <el i18n>...</el>
            this._inI18nNode = false;
            this._depth = 0;
            // {<icu message>}
            this._inIcu = false;
        }
        /**
         * Extracts the messages from the tree
         */
        _Visitor.prototype.extract = function (nodes, interpolationConfig) {
            var _this = this;
            this._init(_VisitorMode.Extract, interpolationConfig);
            nodes.forEach(function (node) {
                return node.visit(_this, null);
            });
            if (this._inI18nBlock) {
                this._reportError(nodes[nodes.length - 1], 'Unclosed block');
            }
            return new ExtractionResult(this._messages, this._errors);
        };
        /**
         * Returns a tree where all translatable nodes are translated
         */
        _Visitor.prototype.merge = function (nodes, translations, interpolationConfig) {
            this._init(_VisitorMode.Merge, interpolationConfig);
            this._translations = translations;
            // Construct a single fake root element
            var wrapper = new html.Element('wrapper', [], nodes, null, null, null);
            var translatedNode = wrapper.visit(this, null);
            if (this._inI18nBlock) {
                this._reportError(nodes[nodes.length - 1], 'Unclosed block');
            }
            return translatedNode.children;
        };
        _Visitor.prototype.visitExpansionCase = function (icuCase, context) {
            // Parse cases for translatable html attributes
            var expression = html.visitAll(this, icuCase.expression, context);
            if (this._mode === _VisitorMode.Merge) {
                return new html.ExpansionCase(icuCase.value, expression, icuCase.sourceSpan, icuCase.valueSourceSpan, icuCase.expSourceSpan);
            }
        };
        _Visitor.prototype.visitExpansion = function (icu, context) {
            this._mayBeAddBlockChildren(icu);
            var wasInIcu = this._inIcu;
            if (!this._inIcu) {
                // nested ICU messages should not be extracted but top-level translated as a whole
                if (this._isInTranslatableSection) {
                    this._addMessage([icu]);
                }
                this._inIcu = true;
            }
            var cases = html.visitAll(this, icu.cases, context);
            if (this._mode === _VisitorMode.Merge) {
                icu = new html.Expansion(icu.switchValue, icu.type, cases, icu.sourceSpan, icu.switchValueSourceSpan);
            }
            this._inIcu = wasInIcu;
            return icu;
        };
        _Visitor.prototype.visitComment = function (comment, context) {
            var isOpening = _isOpeningComment(comment);
            if (isOpening && this._isInTranslatableSection) {
                this._reportError(comment, 'Could not start a block inside a translatable section');
                return;
            }
            var isClosing = _isClosingComment(comment);
            if (isClosing && !this._inI18nBlock) {
                this._reportError(comment, 'Trying to close an unopened block');
                return;
            }
            if (!this._inI18nNode && !this._inIcu) {
                if (!this._inI18nBlock) {
                    if (isOpening) {
                        this._inI18nBlock = true;
                        this._blockStartDepth = this._depth;
                        this._blockChildren = [];
                        this._blockMeaningAndDesc = comment.value.replace(_I18N_COMMENT_PREFIX_REGEXP, '').trim();
                        this._openTranslatableSection(comment);
                    }
                } else {
                    if (isClosing) {
                        if (this._depth == this._blockStartDepth) {
                            this._closeTranslatableSection(comment, this._blockChildren);
                            this._inI18nBlock = false;
                            var message = this._addMessage(this._blockChildren, this._blockMeaningAndDesc);
                            return this._translateMessage(comment, message);
                        } else {
                            this._reportError(comment, 'I18N blocks should not cross element boundaries');
                            return;
                        }
                    }
                }
            }
        };
        _Visitor.prototype.visitText = function (text, context) {
            if (this._isInTranslatableSection) {
                this._mayBeAddBlockChildren(text);
            }
            return text;
        };
        _Visitor.prototype.visitElement = function (el, context) {
            var _this = this;
            this._mayBeAddBlockChildren(el);
            this._depth++;
            var wasInI18nNode = this._inI18nNode;
            var childNodes;
            // Extract only top level nodes with the (implicit) "i18n" attribute if not in a block or an ICU
            // message
            var i18nAttr = _getI18nAttr(el);
            var isImplicitI18n = this._implicitTags.some(function (tag) {
                return el.name === tag;
            });
            if (!this._isInTranslatableSection && !this._inIcu) {
                if (i18nAttr) {
                    // explicit translation
                    this._inI18nNode = true;
                    var message = this._addMessage(el.children, i18nAttr.value);
                    childNodes = this._translateMessage(el, message);
                } else if (isImplicitI18n) {
                    // implicit translation
                    this._inI18nNode = true;
                    var message = this._addMessage(el.children);
                    childNodes = this._translateMessage(el, message);
                }
                if (this._mode == _VisitorMode.Extract) {
                    var isTranslatable = i18nAttr || isImplicitI18n;
                    if (isTranslatable) {
                        this._openTranslatableSection(el);
                    }
                    html.visitAll(this, el.children);
                    if (isTranslatable) {
                        this._closeTranslatableSection(el, el.children);
                    }
                }
                if (this._mode === _VisitorMode.Merge && !i18nAttr && !isImplicitI18n) {
                    childNodes = [];
                    el.children.forEach(function (child) {
                        var visited = child.visit(_this, context);
                        if (visited && !_this._isInTranslatableSection) {
                            // Do not add the children from translatable sections (= i18n blocks here)
                            // They will be added when the section is close (i.e. on `<!-- /i18n -->`)
                            childNodes = childNodes.concat(visited);
                        }
                    });
                }
            } else {
                if (i18nAttr || isImplicitI18n) {
                    // TODO(vicb): we should probably allow nested implicit element (ie <div>)
                    this._reportError(el, 'Could not mark an element as translatable inside a translatable section');
                }
                if (this._mode == _VisitorMode.Extract) {
                    // Descend into child nodes for extraction
                    html.visitAll(this, el.children);
                }
                if (this._mode == _VisitorMode.Merge) {
                    // Translate attributes in ICU messages
                    childNodes = [];
                    el.children.forEach(function (child) {
                        var visited = child.visit(_this, context);
                        if (visited && !_this._isInTranslatableSection) {
                            // Do not add the children from translatable sections (= i18n blocks here)
                            // They will be added when the section is close (i.e. on `<!-- /i18n -->`)
                            childNodes = childNodes.concat(visited);
                        }
                    });
                }
            }
            this._visitAttributesOf(el);
            this._depth--;
            this._inI18nNode = wasInI18nNode;
            if (this._mode === _VisitorMode.Merge) {
                // There are no childNodes in translatable sections - those nodes will be replace anyway
                var translatedAttrs = this._translateAttributes(el);
                return new html.Element(el.name, translatedAttrs, childNodes, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
            }
        };
        _Visitor.prototype.visitAttribute = function (attribute, context) {
            throw new Error('unreachable code');
        };
        _Visitor.prototype._init = function (mode, interpolationConfig) {
            this._mode = mode;
            this._inI18nBlock = false;
            this._inI18nNode = false;
            this._depth = 0;
            this._inIcu = false;
            this._msgCountAtSectionStart = void 0;
            this._errors = [];
            this._messages = [];
            this._createI18nMessage = i18n_parser_1.createI18nMessageFactory(interpolationConfig);
        };
        // looks for translatable attributes
        _Visitor.prototype._visitAttributesOf = function (el) {
            var _this = this;
            var explicitAttrNameToValue = {};
            var implicitAttrNames = this._implicitAttrs[el.name] || [];
            el.attrs.filter(function (attr) {
                return attr.name.startsWith(_I18N_ATTR_PREFIX);
            }).forEach(function (attr) {
                return explicitAttrNameToValue[attr.name.slice(_I18N_ATTR_PREFIX.length)] = attr.value;
            });
            el.attrs.forEach(function (attr) {
                if (attr.name in explicitAttrNameToValue) {
                    _this._addMessage([attr], explicitAttrNameToValue[attr.name]);
                } else if (implicitAttrNames.some(function (name) {
                    return attr.name === name;
                })) {
                    _this._addMessage([attr]);
                }
            });
        };
        // add a translatable message
        _Visitor.prototype._addMessage = function (ast, meaningAndDesc) {
            if (ast.length == 0 || ast.length == 1 && ast[0] instanceof html.Attribute && !ast[0].value) {
                // Do not create empty messages
                return;
            }
            var _a = _splitMeaningAndDesc(meaningAndDesc),
                meaning = _a[0],
                description = _a[1];
            var message = this._createI18nMessage(ast, meaning, description);
            this._messages.push(message);
            return message;
        };
        // translate the given message given the `TranslationBundle`
        _Visitor.prototype._translateMessage = function (el, message) {
            if (message && this._mode === _VisitorMode.Merge) {
                var id = digest_1.digestMessage(message);
                var nodes = this._translations.get(id);
                if (nodes) {
                    return nodes;
                }
                this._reportError(el, "Translation unavailable for message id=\"" + id + "\"");
            }
            return [];
        };
        // translate the attributes of an element and remove i18n specific attributes
        _Visitor.prototype._translateAttributes = function (el) {
            var _this = this;
            var attributes = el.attrs;
            var i18nAttributeMeanings = {};
            attributes.forEach(function (attr) {
                if (attr.name.startsWith(_I18N_ATTR_PREFIX)) {
                    i18nAttributeMeanings[attr.name.slice(_I18N_ATTR_PREFIX.length)] = _splitMeaningAndDesc(attr.value)[0];
                }
            });
            var translatedAttributes = [];
            attributes.forEach(function (attr) {
                if (attr.name === _I18N_ATTR || attr.name.startsWith(_I18N_ATTR_PREFIX)) {
                    // strip i18n specific attributes
                    return;
                }
                if (i18nAttributeMeanings.hasOwnProperty(attr.name)) {
                    var meaning = i18nAttributeMeanings[attr.name];
                    var message = _this._createI18nMessage([attr], meaning, '');
                    var id = digest_1.digestMessage(message);
                    var nodes = _this._translations.get(id);
                    if (nodes) {
                        if (nodes[0] instanceof html.Text) {
                            var value = nodes[0].value;
                            translatedAttributes.push(new html.Attribute(attr.name, value, attr.sourceSpan));
                        } else {
                            _this._reportError(el, "Unexpected translation for attribute \"" + attr.name + "\" (id=\"" + id + "\")");
                        }
                    } else {
                        _this._reportError(el, "Translation unavailable for attribute \"" + attr.name + "\" (id=\"" + id + "\")");
                    }
                } else {
                    translatedAttributes.push(attr);
                }
            });
            return translatedAttributes;
        };
        /**
         * Add the node as a child of the block when:
         * - we are in a block,
         * - we are not inside a ICU message (those are handled separately),
         * - the node is a "direct child" of the block
         */
        _Visitor.prototype._mayBeAddBlockChildren = function (node) {
            if (this._inI18nBlock && !this._inIcu && this._depth == this._blockStartDepth) {
                this._blockChildren.push(node);
            }
        };
        /**
         * Marks the start of a section, see `_endSection`
         */
        _Visitor.prototype._openTranslatableSection = function (node) {
            if (this._isInTranslatableSection) {
                this._reportError(node, 'Unexpected section start');
            } else {
                this._msgCountAtSectionStart = this._messages.length;
            }
        };
        Object.defineProperty(_Visitor.prototype, "_isInTranslatableSection", {
            /**
             * A translatable section could be:
             * - a translatable element,
             * - nodes between `<!-- i18n -->` and `<!-- /i18n -->` comments
             */
            get: function () {
                return this._msgCountAtSectionStart !== void 0;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Terminates a section.
         *
         * If a section has only one significant children (comments not significant) then we should not
         * keep the message from this children:
         *
         * `<p i18n="meaning|description">{ICU message}</p>` would produce two messages:
         * - one for the <p> content with meaning and description,
         * - another one for the ICU message.
         *
         * In this case the last message is discarded as it contains less information (the AST is
         * otherwise identical).
         *
         * Note that we should still keep messages extracted from attributes inside the section (ie in the
         * ICU message here)
         */
        _Visitor.prototype._closeTranslatableSection = function (node, directChildren) {
            if (!this._isInTranslatableSection) {
                this._reportError(node, 'Unexpected section end');
                return;
            }
            var startIndex = this._msgCountAtSectionStart;
            var significantChildren = directChildren.reduce(function (count, node) {
                return count + (node instanceof html.Comment ? 0 : 1);
            }, 0);
            if (significantChildren == 1) {
                for (var i = this._messages.length - 1; i >= startIndex; i--) {
                    var ast = this._messages[i].nodes;
                    if (!(ast.length == 1 && ast[0] instanceof i18n.Text)) {
                        this._messages.splice(i, 1);
                        break;
                    }
                }
            }
            this._msgCountAtSectionStart = void 0;
        };
        _Visitor.prototype._reportError = function (node, msg) {
            this._errors.push(new parse_util_1.I18nError(node.sourceSpan, msg));
        };
        return _Visitor;
    }();
    function _isOpeningComment(n) {
        return n instanceof html.Comment && n.value && n.value.startsWith('i18n');
    }
    function _isClosingComment(n) {
        return n instanceof html.Comment && n.value && n.value === '/i18n';
    }
    function _getI18nAttr(p) {
        return p.attrs.find(function (attr) {
            return attr.name === _I18N_ATTR;
        }) || null;
    }
    function _splitMeaningAndDesc(i18n) {
        if (!i18n) return ['', ''];
        var pipeIndex = i18n.indexOf('|');
        return pipeIndex == -1 ? ['', i18n] : [i18n.slice(0, pipeIndex), i18n.slice(pipeIndex + 1)];
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/i18n/message_bundle.js', ['./digest', './extractor_merger', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var digest_1 = $__require('./digest');
    var extractor_merger_1 = $__require('./extractor_merger');
    /**
     * A container for message extracted from the templates.
     */
    var MessageBundle = function () {
        function MessageBundle(_htmlParser, _implicitTags, _implicitAttrs) {
            this._htmlParser = _htmlParser;
            this._implicitTags = _implicitTags;
            this._implicitAttrs = _implicitAttrs;
            this._messageMap = {};
        }
        MessageBundle.prototype.updateFromTemplate = function (html, url, interpolationConfig) {
            var _this = this;
            var htmlParserResult = this._htmlParser.parse(html, url, true, interpolationConfig);
            if (htmlParserResult.errors.length) {
                return htmlParserResult.errors;
            }
            var i18nParserResult = extractor_merger_1.extractMessages(htmlParserResult.rootNodes, interpolationConfig, this._implicitTags, this._implicitAttrs);
            if (i18nParserResult.errors.length) {
                return i18nParserResult.errors;
            }
            i18nParserResult.messages.forEach(function (message) {
                _this._messageMap[digest_1.digestMessage(message)] = message;
            });
        };
        MessageBundle.prototype.write = function (serializer) {
            return serializer.write(this._messageMap);
        };
        return MessageBundle;
    }();
    exports.MessageBundle = MessageBundle;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/compiler@2.0.0-rc.5/src/i18n/serializers/xml_helper.js", ["reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var _Visitor = function () {
        function _Visitor() {}
        _Visitor.prototype.visitTag = function (tag) {
            var _this = this;
            var strAttrs = this._serializeAttributes(tag.attrs);
            if (tag.children.length == 0) {
                return "<" + tag.name + strAttrs + "/>";
            }
            var strChildren = tag.children.map(function (node) {
                return node.visit(_this);
            });
            return "<" + tag.name + strAttrs + ">" + strChildren.join('') + "</" + tag.name + ">";
        };
        _Visitor.prototype.visitText = function (text) {
            return text.value;
        };
        _Visitor.prototype.visitDeclaration = function (decl) {
            return "<? xml" + this._serializeAttributes(decl.attrs) + " ?>";
        };
        _Visitor.prototype._serializeAttributes = function (attrs) {
            var strAttrs = Object.keys(attrs).map(function (name) {
                return name + "=\"" + attrs[name] + "\"";
            }).join(' ');
            return strAttrs.length > 0 ? ' ' + strAttrs : '';
        };
        _Visitor.prototype.visitDoctype = function (doctype) {
            return "<!DOCTYPE " + doctype.rootTag + " [\n" + doctype.dtd + "\n]>";
        };
        return _Visitor;
    }();
    var _visitor = new _Visitor();
    function serialize(nodes) {
        return nodes.map(function (node) {
            return node.visit(_visitor);
        }).join('');
    }
    exports.serialize = serialize;
    var Declaration = function () {
        function Declaration(unescapedAttrs) {
            var _this = this;
            this.attrs = {};
            Object.keys(unescapedAttrs).forEach(function (k) {
                _this.attrs[k] = _escapeXml(unescapedAttrs[k]);
            });
        }
        Declaration.prototype.visit = function (visitor) {
            return visitor.visitDeclaration(this);
        };
        return Declaration;
    }();
    exports.Declaration = Declaration;
    var Doctype = function () {
        function Doctype(rootTag, dtd) {
            this.rootTag = rootTag;
            this.dtd = dtd;
        }
        ;
        Doctype.prototype.visit = function (visitor) {
            return visitor.visitDoctype(this);
        };
        return Doctype;
    }();
    exports.Doctype = Doctype;
    var Tag = function () {
        function Tag(name, unescapedAttrs, children) {
            var _this = this;
            if (unescapedAttrs === void 0) {
                unescapedAttrs = {};
            }
            if (children === void 0) {
                children = [];
            }
            this.name = name;
            this.children = children;
            this.attrs = {};
            Object.keys(unescapedAttrs).forEach(function (k) {
                _this.attrs[k] = _escapeXml(unescapedAttrs[k]);
            });
        }
        Tag.prototype.visit = function (visitor) {
            return visitor.visitTag(this);
        };
        return Tag;
    }();
    exports.Tag = Tag;
    var Text = function () {
        function Text(unescapedValue) {
            this.value = _escapeXml(unescapedValue);
        }
        ;
        Text.prototype.visit = function (visitor) {
            return visitor.visitText(this);
        };
        return Text;
    }();
    exports.Text = Text;
    var _ESCAPED_CHARS = [[/&/g, '&amp;'], [/"/g, '&quot;'], [/'/g, '&apos;'], [/</g, '&lt;'], [/>/g, '&gt;']];
    function _escapeXml(text) {
        return _ESCAPED_CHARS.reduce(function (text, entry) {
            return text.replace(entry[0], entry[1]);
        }, text);
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/i18n/serializers/xmb.js', ['../../facade/collection', './xml_helper', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var collection_1 = $__require('../../facade/collection');
    var xml = $__require('./xml_helper');
    var _MESSAGES_TAG = 'messagebundle';
    var _MESSAGE_TAG = 'msg';
    var _PLACEHOLDER_TAG = 'ph';
    var _EXEMPLE_TAG = 'ex';
    var _DOCTYPE = "<!ELEMENT messagebundle (msg)*>\n<!ATTLIST messagebundle class CDATA #IMPLIED>\n\n<!ELEMENT msg (#PCDATA|ph|source)*>\n<!ATTLIST msg id CDATA #IMPLIED>\n<!ATTLIST msg seq CDATA #IMPLIED>\n<!ATTLIST msg name CDATA #IMPLIED>\n<!ATTLIST msg desc CDATA #IMPLIED>\n<!ATTLIST msg meaning CDATA #IMPLIED>\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\n<!ATTLIST msg xml:space (default|preserve) \"default\">\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\n\n<!ELEMENT source (#PCDATA)>\n\n<!ELEMENT ph (#PCDATA|ex)*>\n<!ATTLIST ph name CDATA #REQUIRED>\n\n<!ELEMENT ex (#PCDATA)>";
    var Xmb = function () {
        function Xmb() {}
        Xmb.prototype.write = function (messageMap) {
            var visitor = new _Visitor();
            var rootNode = new xml.Tag(_MESSAGES_TAG);
            rootNode.children.push(new xml.Text('\n'));
            Object.keys(messageMap).forEach(function (id) {
                var message = messageMap[id];
                var attrs = { id: id };
                if (message.description) {
                    attrs['desc'] = message.description;
                }
                if (message.meaning) {
                    attrs['meaning'] = message.meaning;
                }
                rootNode.children.push(new xml.Text('  '), new xml.Tag(_MESSAGE_TAG, attrs, visitor.serialize(message.nodes)), new xml.Text('\n'));
            });
            return xml.serialize([new xml.Declaration({ version: '1.0', encoding: 'UTF-8' }), new xml.Text('\n'), new xml.Doctype(_MESSAGES_TAG, _DOCTYPE), new xml.Text('\n'), rootNode]);
        };
        Xmb.prototype.load = function (content, url, placeholders) {
            throw new Error('Unsupported');
        };
        return Xmb;
    }();
    exports.Xmb = Xmb;
    var _Visitor = function () {
        function _Visitor() {}
        _Visitor.prototype.visitText = function (text, context) {
            return [new xml.Text(text.value)];
        };
        _Visitor.prototype.visitContainer = function (container, context) {
            var _this = this;
            var nodes = [];
            container.children.forEach(function (node) {
                return nodes.push.apply(nodes, node.visit(_this));
            });
            return nodes;
        };
        _Visitor.prototype.visitIcu = function (icu, context) {
            var _this = this;
            var nodes = [new xml.Text("{" + icu.expression + ", " + icu.type + ", ")];
            Object.keys(icu.cases).forEach(function (c) {
                nodes.push.apply(nodes, [new xml.Text(c + " {")].concat(icu.cases[c].visit(_this), [new xml.Text("}")]));
            });
            nodes.push(new xml.Text("}"));
            return nodes;
        };
        _Visitor.prototype.visitTagPlaceholder = function (ph, context) {
            var startEx = new xml.Tag(_EXEMPLE_TAG, {}, [new xml.Text("<" + ph.tag + ">")]);
            var startTagPh = new xml.Tag(_PLACEHOLDER_TAG, { name: ph.startName }, [startEx]);
            if (ph.isVoid) {
                // void tags have no children nor closing tags
                return [startTagPh];
            }
            var closeEx = new xml.Tag(_EXEMPLE_TAG, {}, [new xml.Text("</" + ph.tag + ">")]);
            var closeTagPh = new xml.Tag(_PLACEHOLDER_TAG, { name: ph.closeName }, [closeEx]);
            return [startTagPh].concat(this.serialize(ph.children), [closeTagPh]);
        };
        _Visitor.prototype.visitPlaceholder = function (ph, context) {
            return [new xml.Tag(_PLACEHOLDER_TAG, { name: ph.name })];
        };
        _Visitor.prototype.visitIcuPlaceholder = function (ph, context) {
            return [new xml.Tag(_PLACEHOLDER_TAG, { name: ph.name })];
        };
        _Visitor.prototype.serialize = function (nodes) {
            var _this = this;
            return collection_1.ListWrapper.flatten(nodes.map(function (node) {
                return node.visit(_this);
            }));
        };
        return _Visitor;
    }();
    

    return module.exports;
});
System.registerDynamic("npm:@angular/compiler@2.0.0-rc.5/src/ml_parser/xml_tags.js", ["./tags", "reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var tags_1 = $__require("./tags");
    var XmlTagDefinition = function () {
        function XmlTagDefinition() {
            this.closedByParent = false;
            this.contentType = tags_1.TagContentType.PARSABLE_DATA;
            this.isVoid = false;
            this.ignoreFirstLf = false;
            this.canSelfClose = true;
        }
        XmlTagDefinition.prototype.requireExtraParent = function (currentParent) {
            return false;
        };
        XmlTagDefinition.prototype.isClosedByChild = function (name) {
            return false;
        };
        return XmlTagDefinition;
    }();
    exports.XmlTagDefinition = XmlTagDefinition;
    var _TAG_DEFINITION = new XmlTagDefinition();
    function getXmlTagDefinition(tagName) {
        return _TAG_DEFINITION;
    }
    exports.getXmlTagDefinition = getXmlTagDefinition;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/ml_parser/xml_parser.js', ['./parser', './xml_tags', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var parser_1 = $__require('./parser');
    var xml_tags_1 = $__require('./xml_tags');
    var parser_2 = $__require('./parser');
    exports.ParseTreeResult = parser_2.ParseTreeResult;
    exports.TreeError = parser_2.TreeError;
    var XmlParser = function (_super) {
        __extends(XmlParser, _super);
        function XmlParser() {
            _super.call(this, xml_tags_1.getXmlTagDefinition);
        }
        XmlParser.prototype.parse = function (source, url, parseExpansionForms) {
            if (parseExpansionForms === void 0) {
                parseExpansionForms = false;
            }
            return _super.prototype.parse.call(this, source, url, parseExpansionForms, null);
        };
        return XmlParser;
    }(parser_1.Parser);
    exports.XmlParser = XmlParser;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/compiler@2.0.0-rc.5/src/i18n/parse_util.js", ["../parse_util", "reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var parse_util_1 = $__require("../parse_util");
    /**
     * An i18n error.
     */
    var I18nError = function (_super) {
        __extends(I18nError, _super);
        function I18nError(span, msg) {
            _super.call(this, span, msg);
        }
        return I18nError;
    }(parse_util_1.ParseError);
    exports.I18nError = I18nError;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/i18n/serializers/xtb.js', ['../../ml_parser/ast', '../../ml_parser/xml_parser', '../parse_util', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var ml = $__require('../../ml_parser/ast');
    var xml_parser_1 = $__require('../../ml_parser/xml_parser');
    var parse_util_1 = $__require('../parse_util');
    var _TRANSLATIONS_TAG = 'translationbundle';
    var _TRANSLATION_TAG = 'translation';
    var _PLACEHOLDER_TAG = 'ph';
    var Xtb = function () {
        function Xtb(_htmlParser, _interpolationConfig) {
            this._htmlParser = _htmlParser;
            this._interpolationConfig = _interpolationConfig;
        }
        Xtb.prototype.write = function (messageMap) {
            throw new Error('Unsupported');
        };
        Xtb.prototype.load = function (content, url, placeholders) {
            var _this = this;
            // Parse the xtb file into xml nodes
            var result = new xml_parser_1.XmlParser().parse(content, url);
            if (result.errors.length) {
                throw new Error("xtb parse errors:\n" + result.errors.join('\n'));
            }
            // Replace the placeholders, messages are now string
            var _a = new _Serializer().parse(result.rootNodes, placeholders),
                messages = _a.messages,
                errors = _a.errors;
            if (errors.length) {
                throw new Error("xtb parse errors:\n" + errors.join('\n'));
            }
            // Convert the string messages to html ast
            // TODO(vicb): map error message back to the original message in xtb
            var messageMap = {};
            var parseErrors = [];
            Object.keys(messages).forEach(function (id) {
                var res = _this._htmlParser.parse(messages[id], url, true, _this._interpolationConfig);
                parseErrors.push.apply(parseErrors, res.errors);
                messageMap[id] = res.rootNodes;
            });
            if (parseErrors.length) {
                throw new Error("xtb parse errors:\n" + parseErrors.join('\n'));
            }
            return messageMap;
        };
        return Xtb;
    }();
    exports.Xtb = Xtb;
    var _Serializer = function () {
        function _Serializer() {}
        _Serializer.prototype.parse = function (nodes, _placeholders) {
            this._messages = {};
            this._bundleDepth = 0;
            this._translationDepth = 0;
            this._errors = [];
            this._placeholders = _placeholders;
            ml.visitAll(this, nodes, null);
            return { messages: this._messages, errors: this._errors };
        };
        _Serializer.prototype.visitElement = function (element, context) {
            switch (element.name) {
                case _TRANSLATIONS_TAG:
                    this._bundleDepth++;
                    if (this._bundleDepth > 1) {
                        this._addError(element, "<" + _TRANSLATIONS_TAG + "> elements can not be nested");
                    }
                    ml.visitAll(this, element.children, null);
                    this._bundleDepth--;
                    break;
                case _TRANSLATION_TAG:
                    this._translationDepth++;
                    if (this._translationDepth > 1) {
                        this._addError(element, "<" + _TRANSLATION_TAG + "> elements can not be nested");
                    }
                    var idAttr = element.attrs.find(function (attr) {
                        return attr.name === 'id';
                    });
                    if (!idAttr) {
                        this._addError(element, "<" + _TRANSLATION_TAG + "> misses the \"id\" attribute");
                    } else {
                        this._currentPlaceholders = this._placeholders[idAttr.value] || {};
                        this._messages[idAttr.value] = ml.visitAll(this, element.children).join('');
                    }
                    this._translationDepth--;
                    break;
                case _PLACEHOLDER_TAG:
                    var nameAttr = element.attrs.find(function (attr) {
                        return attr.name === 'name';
                    });
                    if (!nameAttr) {
                        this._addError(element, "<" + _PLACEHOLDER_TAG + "> misses the \"name\" attribute");
                    } else {
                        if (this._currentPlaceholders.hasOwnProperty(nameAttr.value)) {
                            return this._currentPlaceholders[nameAttr.value];
                        }
                        this._addError(element, "The placeholder \"" + nameAttr.value + "\" does not exists in the source message");
                    }
                    break;
                default:
                    this._addError(element, 'Unexpected tag');
            }
        };
        _Serializer.prototype.visitAttribute = function (attribute, context) {
            throw new Error('unreachable code');
        };
        _Serializer.prototype.visitText = function (text, context) {
            return text.value;
        };
        _Serializer.prototype.visitComment = function (comment, context) {
            return '';
        };
        _Serializer.prototype.visitExpansion = function (expansion, context) {
            var _this = this;
            var strCases = expansion.cases.map(function (c) {
                return c.visit(_this, null);
            });
            return "{" + expansion.switchValue + ", " + expansion.type + ", strCases.join(' ')}";
        };
        _Serializer.prototype.visitExpansionCase = function (expansionCase, context) {
            return expansionCase.value + " {" + ml.visitAll(this, expansionCase.expression, null) + "}";
        };
        _Serializer.prototype._addError = function (node, message) {
            this._errors.push(new parse_util_1.I18nError(node.sourceSpan, message));
        };
        return _Serializer;
    }();
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/i18n/index.js', ['./message_bundle', './serializers/xmb', './serializers/xtb', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var message_bundle_1 = $__require('./message_bundle');
  exports.MessageBundle = message_bundle_1.MessageBundle;
  var xmb_1 = $__require('./serializers/xmb');
  exports.Xmb = xmb_1.Xmb;
  var xtb_1 = $__require('./serializers/xtb');
  exports.Xtb = xtb_1.Xtb;
  

  return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/offline_compiler.js', ['./compile_metadata', './facade/collection', './facade/exceptions', './identifiers', './output/output_ast', './view_compiler/view_compiler', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var compile_metadata_1 = $__require('./compile_metadata');
    var collection_1 = $__require('./facade/collection');
    var exceptions_1 = $__require('./facade/exceptions');
    var identifiers_1 = $__require('./identifiers');
    var o = $__require('./output/output_ast');
    var view_compiler_1 = $__require('./view_compiler/view_compiler');
    var SourceModule = function () {
        function SourceModule(moduleUrl, source) {
            this.moduleUrl = moduleUrl;
            this.source = source;
        }
        return SourceModule;
    }();
    exports.SourceModule = SourceModule;
    var NgModulesSummary = function () {
        function NgModulesSummary(ngModuleByComponent) {
            this.ngModuleByComponent = ngModuleByComponent;
        }
        return NgModulesSummary;
    }();
    exports.NgModulesSummary = NgModulesSummary;
    var OfflineCompiler = function () {
        function OfflineCompiler(_metadataResolver, _directiveNormalizer, _templateParser, _styleCompiler, _viewCompiler, _ngModuleCompiler, _outputEmitter) {
            this._metadataResolver = _metadataResolver;
            this._directiveNormalizer = _directiveNormalizer;
            this._templateParser = _templateParser;
            this._styleCompiler = _styleCompiler;
            this._viewCompiler = _viewCompiler;
            this._ngModuleCompiler = _ngModuleCompiler;
            this._outputEmitter = _outputEmitter;
        }
        OfflineCompiler.prototype.analyzeModules = function (ngModules) {
            var _this = this;
            var ngModuleByComponent = new Map();
            ngModules.forEach(function (ngModule) {
                var ngModuleMeta = _this._metadataResolver.getNgModuleMetadata(ngModule);
                ngModuleMeta.declaredDirectives.forEach(function (dirMeta) {
                    if (dirMeta.isComponent) {
                        ngModuleByComponent.set(dirMeta.type.runtime, ngModuleMeta);
                    }
                });
            });
            return new NgModulesSummary(ngModuleByComponent);
        };
        OfflineCompiler.prototype.clearCache = function () {
            this._directiveNormalizer.clearCache();
            this._metadataResolver.clearCache();
        };
        OfflineCompiler.prototype.compile = function (moduleUrl, ngModulesSummary, components, ngModules) {
            var _this = this;
            var fileSuffix = _splitLastSuffix(moduleUrl)[1];
            var statements = [];
            var exportedVars = [];
            var outputSourceModules = [];
            // compile all ng modules
            exportedVars.push.apply(exportedVars, ngModules.map(function (ngModuleType) {
                return _this._compileModule(ngModuleType, statements);
            }));
            // compile components
            return Promise.all(components.map(function (compType) {
                var compMeta = _this._metadataResolver.getDirectiveMetadata(compType);
                var ngModule = ngModulesSummary.ngModuleByComponent.get(compType);
                if (!ngModule) {
                    throw new exceptions_1.BaseException("Cannot determine the module for component " + compMeta.type.name + "!");
                }
                return Promise.all([compMeta].concat(ngModule.transitiveModule.directives).map(function (dirMeta) {
                    return _this._directiveNormalizer.normalizeDirective(dirMeta).asyncResult;
                })).then(function (normalizedCompWithDirectives) {
                    var compMeta = normalizedCompWithDirectives[0];
                    var dirMetas = normalizedCompWithDirectives.slice(1);
                    _assertComponent(compMeta);
                    // compile styles
                    var stylesCompileResults = _this._styleCompiler.compileComponent(compMeta);
                    stylesCompileResults.externalStylesheets.forEach(function (compiledStyleSheet) {
                        outputSourceModules.push(_this._codgenStyles(compiledStyleSheet, fileSuffix));
                    });
                    // compile components
                    exportedVars.push(_this._compileComponentFactory(compMeta, fileSuffix, statements));
                    exportedVars.push(_this._compileComponent(compMeta, dirMetas, ngModule.transitiveModule.pipes, ngModule.schemas, stylesCompileResults.componentStylesheet, fileSuffix, statements));
                });
            })).then(function () {
                if (statements.length > 0) {
                    outputSourceModules.unshift(_this._codegenSourceModule(_ngfactoryModuleUrl(moduleUrl), statements, exportedVars));
                }
                return outputSourceModules;
            });
        };
        OfflineCompiler.prototype._compileModule = function (ngModuleType, targetStatements) {
            var ngModule = this._metadataResolver.getNgModuleMetadata(ngModuleType);
            var appCompileResult = this._ngModuleCompiler.compile(ngModule, []);
            appCompileResult.dependencies.forEach(function (dep) {
                dep.placeholder.name = _componentFactoryName(dep.comp);
                dep.placeholder.moduleUrl = _ngfactoryModuleUrl(dep.comp.moduleUrl);
            });
            targetStatements.push.apply(targetStatements, appCompileResult.statements);
            return appCompileResult.ngModuleFactoryVar;
        };
        OfflineCompiler.prototype._compileComponentFactory = function (compMeta, fileSuffix, targetStatements) {
            var hostMeta = compile_metadata_1.createHostComponentMeta(compMeta);
            var hostViewFactoryVar = this._compileComponent(hostMeta, [compMeta], [], [], null, fileSuffix, targetStatements);
            var compFactoryVar = _componentFactoryName(compMeta.type);
            targetStatements.push(o.variable(compFactoryVar).set(o.importExpr(identifiers_1.Identifiers.ComponentFactory, [o.importType(compMeta.type)]).instantiate([o.literal(compMeta.selector), o.variable(hostViewFactoryVar), o.importExpr(compMeta.type)], o.importType(identifiers_1.Identifiers.ComponentFactory, [o.importType(compMeta.type)], [o.TypeModifier.Const]))).toDeclStmt(null, [o.StmtModifier.Final]));
            return compFactoryVar;
        };
        OfflineCompiler.prototype._compileComponent = function (compMeta, directives, pipes, schemas, componentStyles, fileSuffix, targetStatements) {
            var parsedTemplate = this._templateParser.parse(compMeta, compMeta.template.template, directives, pipes, schemas, compMeta.type.name);
            var stylesExpr = componentStyles ? o.variable(componentStyles.stylesVar) : o.literalArr([]);
            var viewResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, stylesExpr, pipes);
            if (componentStyles) {
                collection_1.ListWrapper.addAll(targetStatements, _resolveStyleStatements(componentStyles, fileSuffix));
            }
            collection_1.ListWrapper.addAll(targetStatements, _resolveViewStatements(viewResult));
            return viewResult.viewFactoryVar;
        };
        OfflineCompiler.prototype._codgenStyles = function (stylesCompileResult, fileSuffix) {
            _resolveStyleStatements(stylesCompileResult, fileSuffix);
            return this._codegenSourceModule(_stylesModuleUrl(stylesCompileResult.meta.moduleUrl, stylesCompileResult.isShimmed, fileSuffix), stylesCompileResult.statements, [stylesCompileResult.stylesVar]);
        };
        OfflineCompiler.prototype._codegenSourceModule = function (moduleUrl, statements, exportedVars) {
            return new SourceModule(moduleUrl, this._outputEmitter.emitStatements(moduleUrl, statements, exportedVars));
        };
        return OfflineCompiler;
    }();
    exports.OfflineCompiler = OfflineCompiler;
    function _resolveViewStatements(compileResult) {
        compileResult.dependencies.forEach(function (dep) {
            if (dep instanceof view_compiler_1.ViewFactoryDependency) {
                var vfd = dep;
                vfd.placeholder.moduleUrl = _ngfactoryModuleUrl(vfd.comp.moduleUrl);
            } else if (dep instanceof view_compiler_1.ComponentFactoryDependency) {
                var cfd = dep;
                cfd.placeholder.name = _componentFactoryName(cfd.comp);
                cfd.placeholder.moduleUrl = _ngfactoryModuleUrl(cfd.comp.moduleUrl);
            }
        });
        return compileResult.statements;
    }
    function _resolveStyleStatements(compileResult, fileSuffix) {
        compileResult.dependencies.forEach(function (dep) {
            dep.valuePlaceholder.moduleUrl = _stylesModuleUrl(dep.moduleUrl, dep.isShimmed, fileSuffix);
        });
        return compileResult.statements;
    }
    function _ngfactoryModuleUrl(compUrl) {
        var urlWithSuffix = _splitLastSuffix(compUrl);
        return urlWithSuffix[0] + ".ngfactory" + urlWithSuffix[1];
    }
    function _componentFactoryName(comp) {
        return comp.name + "NgFactory";
    }
    function _stylesModuleUrl(stylesheetUrl, shim, suffix) {
        return shim ? stylesheetUrl + ".shim" + suffix : "" + stylesheetUrl + suffix;
    }
    function _assertComponent(meta) {
        if (!meta.isComponent) {
            throw new exceptions_1.BaseException("Could not compile '" + meta.type.name + "' because it is not a component.");
        }
    }
    function _splitLastSuffix(path) {
        var lastDot = path.lastIndexOf('.');
        if (lastDot !== -1) {
            return [path.substring(0, lastDot), path.substring(lastDot)];
        } else {
            return [path, ''];
        }
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/output/output_interpreter.js', ['../facade/collection', '../facade/exceptions', '../facade/lang', './output_ast', './ts_emitter', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var collection_1 = $__require('../facade/collection');
    var exceptions_1 = $__require('../facade/exceptions');
    var lang_1 = $__require('../facade/lang');
    var o = $__require('./output_ast');
    var ts_emitter_1 = $__require('./ts_emitter');
    function interpretStatements(statements, resultVar) {
        var stmtsWithReturn = statements.concat([new o.ReturnStatement(o.variable(resultVar))]);
        var ctx = new _ExecutionContext(null, null, null, new Map());
        var visitor = new StatementInterpreter();
        var result = visitor.visitAllStatements(stmtsWithReturn, ctx);
        return lang_1.isPresent(result) ? result.value : null;
    }
    exports.interpretStatements = interpretStatements;
    function _executeFunctionStatements(varNames, varValues, statements, ctx, visitor) {
        var childCtx = ctx.createChildWihtLocalVars();
        for (var i = 0; i < varNames.length; i++) {
            childCtx.vars.set(varNames[i], varValues[i]);
        }
        var result = visitor.visitAllStatements(statements, childCtx);
        return lang_1.isPresent(result) ? result.value : null;
    }
    var _ExecutionContext = function () {
        function _ExecutionContext(parent, instance, className, vars) {
            this.parent = parent;
            this.instance = instance;
            this.className = className;
            this.vars = vars;
        }
        _ExecutionContext.prototype.createChildWihtLocalVars = function () {
            return new _ExecutionContext(this, this.instance, this.className, new Map());
        };
        return _ExecutionContext;
    }();
    var ReturnValue = function () {
        function ReturnValue(value) {
            this.value = value;
        }
        return ReturnValue;
    }();
    function createDynamicClass(_classStmt, _ctx, _visitor) {
        var propertyDescriptors = {};
        _classStmt.getters.forEach(function (getter) {
            // Note: use `function` instead of arrow function to capture `this`
            propertyDescriptors[getter.name] = {
                configurable: false,
                get: function () {
                    var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
                    return _executeFunctionStatements([], [], getter.body, instanceCtx, _visitor);
                }
            };
        });
        _classStmt.methods.forEach(function (method) {
            var paramNames = method.params.map(function (param) {
                return param.name;
            });
            // Note: use `function` instead of arrow function to capture `this`
            propertyDescriptors[method.name] = {
                writable: false,
                configurable: false,
                value: function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i - 0] = arguments[_i];
                    }
                    var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
                    return _executeFunctionStatements(paramNames, args, method.body, instanceCtx, _visitor);
                }
            };
        });
        var ctorParamNames = _classStmt.constructorMethod.params.map(function (param) {
            return param.name;
        });
        // Note: use `function` instead of arrow function to capture `this`
        var ctor = function () {
            var _this = this;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
            _classStmt.fields.forEach(function (field) {
                _this[field.name] = undefined;
            });
            _executeFunctionStatements(ctorParamNames, args, _classStmt.constructorMethod.body, instanceCtx, _visitor);
        };
        var superClass = _classStmt.parent.visitExpression(_visitor, _ctx);
        ctor.prototype = Object.create(superClass.prototype, propertyDescriptors);
        return ctor;
    }
    var StatementInterpreter = function () {
        function StatementInterpreter() {}
        StatementInterpreter.prototype.debugAst = function (ast) {
            return ts_emitter_1.debugOutputAstAsTypeScript(ast);
        };
        StatementInterpreter.prototype.visitDeclareVarStmt = function (stmt, ctx) {
            ctx.vars.set(stmt.name, stmt.value.visitExpression(this, ctx));
            return null;
        };
        StatementInterpreter.prototype.visitWriteVarExpr = function (expr, ctx) {
            var value = expr.value.visitExpression(this, ctx);
            var currCtx = ctx;
            while (currCtx != null) {
                if (currCtx.vars.has(expr.name)) {
                    currCtx.vars.set(expr.name, value);
                    return value;
                }
                currCtx = currCtx.parent;
            }
            throw new exceptions_1.BaseException("Not declared variable " + expr.name);
        };
        StatementInterpreter.prototype.visitReadVarExpr = function (ast, ctx) {
            var varName = ast.name;
            if (lang_1.isPresent(ast.builtin)) {
                switch (ast.builtin) {
                    case o.BuiltinVar.Super:
                        return ctx.instance.__proto__;
                    case o.BuiltinVar.This:
                        return ctx.instance;
                    case o.BuiltinVar.CatchError:
                        varName = CATCH_ERROR_VAR;
                        break;
                    case o.BuiltinVar.CatchStack:
                        varName = CATCH_STACK_VAR;
                        break;
                    default:
                        throw new exceptions_1.BaseException("Unknown builtin variable " + ast.builtin);
                }
            }
            var currCtx = ctx;
            while (currCtx != null) {
                if (currCtx.vars.has(varName)) {
                    return currCtx.vars.get(varName);
                }
                currCtx = currCtx.parent;
            }
            throw new exceptions_1.BaseException("Not declared variable " + varName);
        };
        StatementInterpreter.prototype.visitWriteKeyExpr = function (expr, ctx) {
            var receiver = expr.receiver.visitExpression(this, ctx);
            var index = expr.index.visitExpression(this, ctx);
            var value = expr.value.visitExpression(this, ctx);
            receiver[index] = value;
            return value;
        };
        StatementInterpreter.prototype.visitWritePropExpr = function (expr, ctx) {
            var receiver = expr.receiver.visitExpression(this, ctx);
            var value = expr.value.visitExpression(this, ctx);
            receiver[expr.name] = value;
            return value;
        };
        StatementInterpreter.prototype.visitInvokeMethodExpr = function (expr, ctx) {
            var receiver = expr.receiver.visitExpression(this, ctx);
            var args = this.visitAllExpressions(expr.args, ctx);
            var result;
            if (lang_1.isPresent(expr.builtin)) {
                switch (expr.builtin) {
                    case o.BuiltinMethod.ConcatArray:
                        result = collection_1.ListWrapper.concat(receiver, args[0]);
                        break;
                    case o.BuiltinMethod.SubscribeObservable:
                        result = receiver.subscribe({ next: args[0] });
                        break;
                    case o.BuiltinMethod.bind:
                        result = receiver.bind(args[0]);
                        break;
                    default:
                        throw new exceptions_1.BaseException("Unknown builtin method " + expr.builtin);
                }
            } else {
                result = receiver[expr.name].apply(receiver, args);
            }
            return result;
        };
        StatementInterpreter.prototype.visitInvokeFunctionExpr = function (stmt, ctx) {
            var args = this.visitAllExpressions(stmt.args, ctx);
            var fnExpr = stmt.fn;
            if (fnExpr instanceof o.ReadVarExpr && fnExpr.builtin === o.BuiltinVar.Super) {
                ctx.instance.constructor.prototype.constructor.apply(ctx.instance, args);
                return null;
            } else {
                var fn = stmt.fn.visitExpression(this, ctx);
                return fn.apply(null, args);
            }
        };
        StatementInterpreter.prototype.visitReturnStmt = function (stmt, ctx) {
            return new ReturnValue(stmt.value.visitExpression(this, ctx));
        };
        StatementInterpreter.prototype.visitDeclareClassStmt = function (stmt, ctx) {
            var clazz = createDynamicClass(stmt, ctx, this);
            ctx.vars.set(stmt.name, clazz);
            return null;
        };
        StatementInterpreter.prototype.visitExpressionStmt = function (stmt, ctx) {
            return stmt.expr.visitExpression(this, ctx);
        };
        StatementInterpreter.prototype.visitIfStmt = function (stmt, ctx) {
            var condition = stmt.condition.visitExpression(this, ctx);
            if (condition) {
                return this.visitAllStatements(stmt.trueCase, ctx);
            } else if (lang_1.isPresent(stmt.falseCase)) {
                return this.visitAllStatements(stmt.falseCase, ctx);
            }
            return null;
        };
        StatementInterpreter.prototype.visitTryCatchStmt = function (stmt, ctx) {
            try {
                return this.visitAllStatements(stmt.bodyStmts, ctx);
            } catch (e) {
                var childCtx = ctx.createChildWihtLocalVars();
                childCtx.vars.set(CATCH_ERROR_VAR, e);
                childCtx.vars.set(CATCH_STACK_VAR, e.stack);
                return this.visitAllStatements(stmt.catchStmts, childCtx);
            }
        };
        StatementInterpreter.prototype.visitThrowStmt = function (stmt, ctx) {
            throw stmt.error.visitExpression(this, ctx);
        };
        StatementInterpreter.prototype.visitCommentStmt = function (stmt, context) {
            return null;
        };
        StatementInterpreter.prototype.visitInstantiateExpr = function (ast, ctx) {
            var args = this.visitAllExpressions(ast.args, ctx);
            var clazz = ast.classExpr.visitExpression(this, ctx);
            return new (clazz.bind.apply(clazz, [void 0].concat(args)))();
        };
        StatementInterpreter.prototype.visitLiteralExpr = function (ast, ctx) {
            return ast.value;
        };
        StatementInterpreter.prototype.visitExternalExpr = function (ast, ctx) {
            return ast.value.runtime;
        };
        StatementInterpreter.prototype.visitConditionalExpr = function (ast, ctx) {
            if (ast.condition.visitExpression(this, ctx)) {
                return ast.trueCase.visitExpression(this, ctx);
            } else if (lang_1.isPresent(ast.falseCase)) {
                return ast.falseCase.visitExpression(this, ctx);
            }
            return null;
        };
        StatementInterpreter.prototype.visitNotExpr = function (ast, ctx) {
            return !ast.condition.visitExpression(this, ctx);
        };
        StatementInterpreter.prototype.visitCastExpr = function (ast, ctx) {
            return ast.value.visitExpression(this, ctx);
        };
        StatementInterpreter.prototype.visitFunctionExpr = function (ast, ctx) {
            var paramNames = ast.params.map(function (param) {
                return param.name;
            });
            return _declareFn(paramNames, ast.statements, ctx, this);
        };
        StatementInterpreter.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {
            var paramNames = stmt.params.map(function (param) {
                return param.name;
            });
            ctx.vars.set(stmt.name, _declareFn(paramNames, stmt.statements, ctx, this));
            return null;
        };
        StatementInterpreter.prototype.visitBinaryOperatorExpr = function (ast, ctx) {
            var _this = this;
            var lhs = function () {
                return ast.lhs.visitExpression(_this, ctx);
            };
            var rhs = function () {
                return ast.rhs.visitExpression(_this, ctx);
            };
            switch (ast.operator) {
                case o.BinaryOperator.Equals:
                    return lhs() == rhs();
                case o.BinaryOperator.Identical:
                    return lhs() === rhs();
                case o.BinaryOperator.NotEquals:
                    return lhs() != rhs();
                case o.BinaryOperator.NotIdentical:
                    return lhs() !== rhs();
                case o.BinaryOperator.And:
                    return lhs() && rhs();
                case o.BinaryOperator.Or:
                    return lhs() || rhs();
                case o.BinaryOperator.Plus:
                    return lhs() + rhs();
                case o.BinaryOperator.Minus:
                    return lhs() - rhs();
                case o.BinaryOperator.Divide:
                    return lhs() / rhs();
                case o.BinaryOperator.Multiply:
                    return lhs() * rhs();
                case o.BinaryOperator.Modulo:
                    return lhs() % rhs();
                case o.BinaryOperator.Lower:
                    return lhs() < rhs();
                case o.BinaryOperator.LowerEquals:
                    return lhs() <= rhs();
                case o.BinaryOperator.Bigger:
                    return lhs() > rhs();
                case o.BinaryOperator.BiggerEquals:
                    return lhs() >= rhs();
                default:
                    throw new exceptions_1.BaseException("Unknown operator " + ast.operator);
            }
        };
        StatementInterpreter.prototype.visitReadPropExpr = function (ast, ctx) {
            var result;
            var receiver = ast.receiver.visitExpression(this, ctx);
            result = receiver[ast.name];
            return result;
        };
        StatementInterpreter.prototype.visitReadKeyExpr = function (ast, ctx) {
            var receiver = ast.receiver.visitExpression(this, ctx);
            var prop = ast.index.visitExpression(this, ctx);
            return receiver[prop];
        };
        StatementInterpreter.prototype.visitLiteralArrayExpr = function (ast, ctx) {
            return this.visitAllExpressions(ast.entries, ctx);
        };
        StatementInterpreter.prototype.visitLiteralMapExpr = function (ast, ctx) {
            var _this = this;
            var result = {};
            ast.entries.forEach(function (entry) {
                return result[entry[0]] = entry[1].visitExpression(_this, ctx);
            });
            return result;
        };
        StatementInterpreter.prototype.visitAllExpressions = function (expressions, ctx) {
            var _this = this;
            return expressions.map(function (expr) {
                return expr.visitExpression(_this, ctx);
            });
        };
        StatementInterpreter.prototype.visitAllStatements = function (statements, ctx) {
            for (var i = 0; i < statements.length; i++) {
                var stmt = statements[i];
                var val = stmt.visitStatement(this, ctx);
                if (val instanceof ReturnValue) {
                    return val;
                }
            }
            return null;
        };
        return StatementInterpreter;
    }();
    function _declareFn(varNames, statements, ctx, visitor) {
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            return _executeFunctionStatements(varNames, args, statements, ctx, visitor);
        };
    }
    var CATCH_ERROR_VAR = 'error';
    var CATCH_STACK_VAR = 'stack';
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/output/abstract_js_emitter.js', ['../facade/exceptions', '../facade/lang', './abstract_emitter', './output_ast', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var exceptions_1 = $__require('../facade/exceptions');
    var lang_1 = $__require('../facade/lang');
    var abstract_emitter_1 = $__require('./abstract_emitter');
    var o = $__require('./output_ast');
    var AbstractJsEmitterVisitor = function (_super) {
        __extends(AbstractJsEmitterVisitor, _super);
        function AbstractJsEmitterVisitor() {
            _super.call(this, false);
        }
        AbstractJsEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) {
            var _this = this;
            ctx.pushClass(stmt);
            this._visitClassConstructor(stmt, ctx);
            if (lang_1.isPresent(stmt.parent)) {
                ctx.print(stmt.name + ".prototype = Object.create(");
                stmt.parent.visitExpression(this, ctx);
                ctx.println(".prototype);");
            }
            stmt.getters.forEach(function (getter) {
                return _this._visitClassGetter(stmt, getter, ctx);
            });
            stmt.methods.forEach(function (method) {
                return _this._visitClassMethod(stmt, method, ctx);
            });
            ctx.popClass();
            return null;
        };
        AbstractJsEmitterVisitor.prototype._visitClassConstructor = function (stmt, ctx) {
            ctx.print("function " + stmt.name + "(");
            if (lang_1.isPresent(stmt.constructorMethod)) {
                this._visitParams(stmt.constructorMethod.params, ctx);
            }
            ctx.println(") {");
            ctx.incIndent();
            if (lang_1.isPresent(stmt.constructorMethod)) {
                if (stmt.constructorMethod.body.length > 0) {
                    ctx.println("var self = this;");
                    this.visitAllStatements(stmt.constructorMethod.body, ctx);
                }
            }
            ctx.decIndent();
            ctx.println("}");
        };
        AbstractJsEmitterVisitor.prototype._visitClassGetter = function (stmt, getter, ctx) {
            ctx.println("Object.defineProperty(" + stmt.name + ".prototype, '" + getter.name + "', { get: function() {");
            ctx.incIndent();
            if (getter.body.length > 0) {
                ctx.println("var self = this;");
                this.visitAllStatements(getter.body, ctx);
            }
            ctx.decIndent();
            ctx.println("}});");
        };
        AbstractJsEmitterVisitor.prototype._visitClassMethod = function (stmt, method, ctx) {
            ctx.print(stmt.name + ".prototype." + method.name + " = function(");
            this._visitParams(method.params, ctx);
            ctx.println(") {");
            ctx.incIndent();
            if (method.body.length > 0) {
                ctx.println("var self = this;");
                this.visitAllStatements(method.body, ctx);
            }
            ctx.decIndent();
            ctx.println("};");
        };
        AbstractJsEmitterVisitor.prototype.visitReadVarExpr = function (ast, ctx) {
            if (ast.builtin === o.BuiltinVar.This) {
                ctx.print('self');
            } else if (ast.builtin === o.BuiltinVar.Super) {
                throw new exceptions_1.BaseException("'super' needs to be handled at a parent ast node, not at the variable level!");
            } else {
                _super.prototype.visitReadVarExpr.call(this, ast, ctx);
            }
            return null;
        };
        AbstractJsEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) {
            ctx.print("var " + stmt.name + " = ");
            stmt.value.visitExpression(this, ctx);
            ctx.println(";");
            return null;
        };
        AbstractJsEmitterVisitor.prototype.visitCastExpr = function (ast, ctx) {
            ast.value.visitExpression(this, ctx);
            return null;
        };
        AbstractJsEmitterVisitor.prototype.visitInvokeFunctionExpr = function (expr, ctx) {
            var fnExpr = expr.fn;
            if (fnExpr instanceof o.ReadVarExpr && fnExpr.builtin === o.BuiltinVar.Super) {
                ctx.currentClass.parent.visitExpression(this, ctx);
                ctx.print(".call(this");
                if (expr.args.length > 0) {
                    ctx.print(", ");
                    this.visitAllExpressions(expr.args, ctx, ',');
                }
                ctx.print(")");
            } else {
                _super.prototype.visitInvokeFunctionExpr.call(this, expr, ctx);
            }
            return null;
        };
        AbstractJsEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) {
            ctx.print("function(");
            this._visitParams(ast.params, ctx);
            ctx.println(") {");
            ctx.incIndent();
            this.visitAllStatements(ast.statements, ctx);
            ctx.decIndent();
            ctx.print("}");
            return null;
        };
        AbstractJsEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {
            ctx.print("function " + stmt.name + "(");
            this._visitParams(stmt.params, ctx);
            ctx.println(") {");
            ctx.incIndent();
            this.visitAllStatements(stmt.statements, ctx);
            ctx.decIndent();
            ctx.println("}");
            return null;
        };
        AbstractJsEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) {
            ctx.println("try {");
            ctx.incIndent();
            this.visitAllStatements(stmt.bodyStmts, ctx);
            ctx.decIndent();
            ctx.println("} catch (" + abstract_emitter_1.CATCH_ERROR_VAR.name + ") {");
            ctx.incIndent();
            var catchStmts = [abstract_emitter_1.CATCH_STACK_VAR.set(abstract_emitter_1.CATCH_ERROR_VAR.prop('stack')).toDeclStmt(null, [o.StmtModifier.Final])].concat(stmt.catchStmts);
            this.visitAllStatements(catchStmts, ctx);
            ctx.decIndent();
            ctx.println("}");
            return null;
        };
        AbstractJsEmitterVisitor.prototype._visitParams = function (params, ctx) {
            this.visitAllObjects(function (param /** TODO #9100 */) {
                return ctx.print(param.name);
            }, params, ctx, ',');
        };
        AbstractJsEmitterVisitor.prototype.getBuiltinMethodName = function (method) {
            var name;
            switch (method) {
                case o.BuiltinMethod.ConcatArray:
                    name = 'concat';
                    break;
                case o.BuiltinMethod.SubscribeObservable:
                    name = 'subscribe';
                    break;
                case o.BuiltinMethod.bind:
                    name = 'bind';
                    break;
                default:
                    throw new exceptions_1.BaseException("Unknown builtin method: " + method);
            }
            return name;
        };
        return AbstractJsEmitterVisitor;
    }(abstract_emitter_1.AbstractEmitterVisitor);
    exports.AbstractJsEmitterVisitor = AbstractJsEmitterVisitor;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/output/output_jit.js', ['../facade/lang', '../util', './abstract_emitter', './abstract_js_emitter', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var lang_1 = $__require('../facade/lang');
    var util_1 = $__require('../util');
    var abstract_emitter_1 = $__require('./abstract_emitter');
    var abstract_js_emitter_1 = $__require('./abstract_js_emitter');
    function jitStatements(sourceUrl, statements, resultVar) {
        var converter = new JitEmitterVisitor();
        var ctx = abstract_emitter_1.EmitterVisitorContext.createRoot([resultVar]);
        converter.visitAllStatements(statements, ctx);
        return lang_1.evalExpression(sourceUrl, resultVar, ctx.toSource(), converter.getArgs());
    }
    exports.jitStatements = jitStatements;
    var JitEmitterVisitor = function (_super) {
        __extends(JitEmitterVisitor, _super);
        function JitEmitterVisitor() {
            _super.apply(this, arguments);
            this._evalArgNames = [];
            this._evalArgValues = [];
        }
        JitEmitterVisitor.prototype.getArgs = function () {
            var result = {};
            for (var i = 0; i < this._evalArgNames.length; i++) {
                result[this._evalArgNames[i]] = this._evalArgValues[i];
            }
            return result;
        };
        JitEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) {
            var value = ast.value.runtime;
            var id = this._evalArgValues.indexOf(value);
            if (id === -1) {
                id = this._evalArgValues.length;
                this._evalArgValues.push(value);
                var name = lang_1.isPresent(ast.value.name) ? util_1.sanitizeIdentifier(ast.value.name) : 'val';
                this._evalArgNames.push(util_1.sanitizeIdentifier("jit_" + name + id));
            }
            ctx.print(this._evalArgNames[id]);
            return null;
        };
        return JitEmitterVisitor;
    }(abstract_js_emitter_1.AbstractJsEmitterVisitor);
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/runtime_compiler.js', ['@angular/core', '../core_private', './compile_metadata', './config', './directive_normalizer', './facade/exceptions', './facade/lang', './metadata_resolver', './ng_module_compiler', './output/output_ast', './output/output_interpreter', './output/output_jit', './style_compiler', './template_parser/template_parser', './util', './view_compiler/view_compiler', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var core_private_1 = $__require('../core_private');
    var compile_metadata_1 = $__require('./compile_metadata');
    var config_1 = $__require('./config');
    var directive_normalizer_1 = $__require('./directive_normalizer');
    var exceptions_1 = $__require('./facade/exceptions');
    var lang_1 = $__require('./facade/lang');
    var metadata_resolver_1 = $__require('./metadata_resolver');
    var ng_module_compiler_1 = $__require('./ng_module_compiler');
    var ir = $__require('./output/output_ast');
    var output_interpreter_1 = $__require('./output/output_interpreter');
    var output_jit_1 = $__require('./output/output_jit');
    var style_compiler_1 = $__require('./style_compiler');
    var template_parser_1 = $__require('./template_parser/template_parser');
    var util_1 = $__require('./util');
    var view_compiler_1 = $__require('./view_compiler/view_compiler');
    var RuntimeCompiler = function () {
        function RuntimeCompiler(_injector, _metadataResolver, _templateNormalizer, _templateParser, _styleCompiler, _viewCompiler, _ngModuleCompiler, _compilerConfig, _console) {
            this._injector = _injector;
            this._metadataResolver = _metadataResolver;
            this._templateNormalizer = _templateNormalizer;
            this._templateParser = _templateParser;
            this._styleCompiler = _styleCompiler;
            this._viewCompiler = _viewCompiler;
            this._ngModuleCompiler = _ngModuleCompiler;
            this._compilerConfig = _compilerConfig;
            this._console = _console;
            this._compiledTemplateCache = new Map();
            this._compiledHostTemplateCache = new Map();
            this._compiledNgModuleCache = new Map();
        }
        Object.defineProperty(RuntimeCompiler.prototype, "injector", {
            get: function () {
                return this._injector;
            },
            enumerable: true,
            configurable: true
        });
        RuntimeCompiler.prototype.compileModuleSync = function (moduleType) {
            return this._compileModuleAndComponents(moduleType, true).syncResult;
        };
        RuntimeCompiler.prototype.compileModuleAsync = function (moduleType) {
            return this._compileModuleAndComponents(moduleType, false).asyncResult;
        };
        RuntimeCompiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
            return this._compileModuleAndAllComponents(moduleType, true).syncResult;
        };
        RuntimeCompiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
            return this._compileModuleAndAllComponents(moduleType, false).asyncResult;
        };
        RuntimeCompiler.prototype.compileComponentAsync = function (compType, ngModule) {
            if (ngModule === void 0) {
                ngModule = null;
            }
            if (!ngModule) {
                throw new exceptions_1.BaseException("Calling compileComponentAsync on the root compiler without a module is not allowed! (Compiling component " + lang_1.stringify(compType) + ")");
            }
            return this._compileComponentInModule(compType, false, ngModule).asyncResult;
        };
        RuntimeCompiler.prototype.compileComponentSync = function (compType, ngModule) {
            if (ngModule === void 0) {
                ngModule = null;
            }
            if (!ngModule) {
                throw new exceptions_1.BaseException("Calling compileComponentSync on the root compiler without a module is not allowed! (Compiling component " + lang_1.stringify(compType) + ")");
            }
            return this._compileComponentInModule(compType, true, ngModule).syncResult;
        };
        RuntimeCompiler.prototype._compileModuleAndComponents = function (moduleType, isSync) {
            var componentPromise = this._compileComponents(moduleType, isSync);
            var ngModuleFactory = this._compileModule(moduleType);
            return new util_1.SyncAsyncResult(ngModuleFactory, componentPromise.then(function () {
                return ngModuleFactory;
            }));
        };
        RuntimeCompiler.prototype._compileModuleAndAllComponents = function (moduleType, isSync) {
            var _this = this;
            var componentPromise = this._compileComponents(moduleType, isSync);
            var ngModuleFactory = this._compileModule(moduleType);
            var moduleMeta = this._metadataResolver.getNgModuleMetadata(moduleType);
            var componentFactories = [];
            var templates = new Set();
            moduleMeta.transitiveModule.modules.forEach(function (moduleMeta) {
                moduleMeta.declaredDirectives.forEach(function (dirMeta) {
                    if (dirMeta.isComponent) {
                        var template = _this._createCompiledHostTemplate(dirMeta.type.runtime);
                        templates.add(template);
                        componentFactories.push(template.proxyComponentFactory);
                    }
                });
            });
            var syncResult = new core_1.ModuleWithComponentFactories(ngModuleFactory, componentFactories);
            // Note: host components themselves can always be compiled synchronously as they have an
            // inline template. However, we still need to wait for the components that they
            // reference to be loaded / compiled.
            var compile = function () {
                templates.forEach(function (template) {
                    _this._compileTemplate(template);
                });
                return syncResult;
            };
            var asyncResult = isSync ? Promise.resolve(compile()) : componentPromise.then(compile);
            return new util_1.SyncAsyncResult(syncResult, asyncResult);
        };
        RuntimeCompiler.prototype._compileModule = function (moduleType) {
            var _this = this;
            var ngModuleFactory = this._compiledNgModuleCache.get(moduleType);
            if (!ngModuleFactory) {
                var moduleMeta_1 = this._metadataResolver.getNgModuleMetadata(moduleType);
                var transitiveModuleMeta = moduleMeta_1.transitiveModule;
                var boundCompilerFactory = function (parentResolver) {
                    return new ModuleBoundCompiler(_this, moduleMeta_1.type.runtime, parentResolver, _this._console);
                };
                // Always provide a bound Compiler and ComponentResolver
                var extraProviders = [this._metadataResolver.getProviderMetadata(new core_1.Provider(core_1.Compiler, {
                    useFactory: boundCompilerFactory,
                    deps: [[new core_1.OptionalMetadata(), new core_1.SkipSelfMetadata(), core_1.ComponentResolver]]
                })), this._metadataResolver.getProviderMetadata(new core_1.Provider(core_1.ComponentResolver, { useExisting: core_1.Compiler }))];
                var compileResult = this._ngModuleCompiler.compile(moduleMeta_1, extraProviders);
                compileResult.dependencies.forEach(function (dep) {
                    dep.placeholder.runtime = _this._assertComponentKnown(dep.comp.runtime, true).proxyComponentFactory;
                    dep.placeholder.name = "compFactory_" + dep.comp.name;
                });
                if (!this._compilerConfig.useJit) {
                    ngModuleFactory = output_interpreter_1.interpretStatements(compileResult.statements, compileResult.ngModuleFactoryVar);
                } else {
                    ngModuleFactory = output_jit_1.jitStatements(moduleMeta_1.type.name + ".ngfactory.js", compileResult.statements, compileResult.ngModuleFactoryVar);
                }
                this._compiledNgModuleCache.set(moduleMeta_1.type.runtime, ngModuleFactory);
            }
            return ngModuleFactory;
        };
        RuntimeCompiler.prototype._compileComponentInModule = function (compType, isSync, moduleType) {
            this._metadataResolver.addComponentToModule(moduleType, compType);
            var componentPromise = this._compileComponents(moduleType, isSync);
            var componentFactory = this._assertComponentKnown(compType, true).proxyComponentFactory;
            return new util_1.SyncAsyncResult(componentFactory, componentPromise.then(function () {
                return componentFactory;
            }));
        };
        /**
         * @internal
         */
        RuntimeCompiler.prototype._compileComponents = function (mainModule, isSync) {
            var _this = this;
            var templates = new Set();
            var loadingPromises = [];
            var ngModule = this._metadataResolver.getNgModuleMetadata(mainModule);
            ngModule.transitiveModule.modules.forEach(function (localModuleMeta) {
                localModuleMeta.declaredDirectives.forEach(function (dirMeta) {
                    if (dirMeta.isComponent) {
                        templates.add(_this._createCompiledTemplate(dirMeta, localModuleMeta));
                        dirMeta.entryComponents.forEach(function (entryComponentType) {
                            templates.add(_this._createCompiledHostTemplate(entryComponentType.runtime));
                        });
                    }
                });
                localModuleMeta.entryComponents.forEach(function (entryComponentType) {
                    templates.add(_this._createCompiledHostTemplate(entryComponentType.runtime));
                });
            });
            templates.forEach(function (template) {
                if (template.loading) {
                    if (isSync) {
                        throw new core_1.ComponentStillLoadingError(template.compType.runtime);
                    } else {
                        loadingPromises.push(template.loading);
                    }
                }
            });
            var compile = function () {
                templates.forEach(function (template) {
                    _this._compileTemplate(template);
                });
            };
            if (isSync) {
                compile();
                return Promise.resolve(null);
            } else {
                return Promise.all(loadingPromises).then(compile);
            }
        };
        RuntimeCompiler.prototype.clearCacheFor = function (type) {
            this._compiledNgModuleCache.delete(type);
            this._metadataResolver.clearCacheFor(type);
            this._compiledHostTemplateCache.delete(type);
            var compiledTemplate = this._compiledTemplateCache.get(type);
            if (compiledTemplate) {
                this._templateNormalizer.clearCacheFor(compiledTemplate.normalizedCompMeta);
                this._compiledTemplateCache.delete(type);
            }
        };
        RuntimeCompiler.prototype.clearCache = function () {
            this._metadataResolver.clearCache();
            this._compiledTemplateCache.clear();
            this._compiledHostTemplateCache.clear();
            this._templateNormalizer.clearCache();
            this._compiledNgModuleCache.clear();
        };
        RuntimeCompiler.prototype._createCompiledHostTemplate = function (compType) {
            var compiledTemplate = this._compiledHostTemplateCache.get(compType);
            if (lang_1.isBlank(compiledTemplate)) {
                var compMeta = this._metadataResolver.getDirectiveMetadata(compType);
                assertComponent(compMeta);
                var hostMeta = compile_metadata_1.createHostComponentMeta(compMeta);
                compiledTemplate = new CompiledTemplate(true, compMeta.selector, compMeta.type, [compMeta], [], [], this._templateNormalizer.normalizeDirective(hostMeta));
                this._compiledHostTemplateCache.set(compType, compiledTemplate);
            }
            return compiledTemplate;
        };
        RuntimeCompiler.prototype._createCompiledTemplate = function (compMeta, ngModule) {
            var compiledTemplate = this._compiledTemplateCache.get(compMeta.type.runtime);
            if (lang_1.isBlank(compiledTemplate)) {
                assertComponent(compMeta);
                compiledTemplate = new CompiledTemplate(false, compMeta.selector, compMeta.type, ngModule.transitiveModule.directives, ngModule.transitiveModule.pipes, ngModule.schemas, this._templateNormalizer.normalizeDirective(compMeta));
                this._compiledTemplateCache.set(compMeta.type.runtime, compiledTemplate);
            }
            return compiledTemplate;
        };
        RuntimeCompiler.prototype._assertComponentKnown = function (compType, isHost) {
            var compiledTemplate = isHost ? this._compiledHostTemplateCache.get(compType) : this._compiledTemplateCache.get(compType);
            if (!compiledTemplate) {
                throw new exceptions_1.BaseException("Illegal state: CompiledTemplate for " + lang_1.stringify(compType) + " (isHost: " + isHost + ") does not exist!");
            }
            return compiledTemplate;
        };
        RuntimeCompiler.prototype._assertComponentLoaded = function (compType, isHost) {
            var compiledTemplate = this._assertComponentKnown(compType, isHost);
            if (compiledTemplate.loading) {
                throw new exceptions_1.BaseException("Illegal state: CompiledTemplate for " + lang_1.stringify(compType) + " (isHost: " + isHost + ") is still loading!");
            }
            return compiledTemplate;
        };
        RuntimeCompiler.prototype._compileTemplate = function (template) {
            var _this = this;
            if (template.isCompiled) {
                return;
            }
            var compMeta = template.normalizedCompMeta;
            var externalStylesheetsByModuleUrl = new Map();
            var stylesCompileResult = this._styleCompiler.compileComponent(compMeta);
            stylesCompileResult.externalStylesheets.forEach(function (r) {
                externalStylesheetsByModuleUrl.set(r.meta.moduleUrl, r);
            });
            this._resolveStylesCompileResult(stylesCompileResult.componentStylesheet, externalStylesheetsByModuleUrl);
            var viewCompMetas = template.viewComponentTypes.map(function (compType) {
                return _this._assertComponentLoaded(compType, false).normalizedCompMeta;
            });
            var parsedTemplate = this._templateParser.parse(compMeta, compMeta.template.template, template.viewDirectives.concat(viewCompMetas), template.viewPipes, template.schemas, compMeta.type.name);
            var compileResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, ir.variable(stylesCompileResult.componentStylesheet.stylesVar), template.viewPipes);
            compileResult.dependencies.forEach(function (dep) {
                var depTemplate;
                if (dep instanceof view_compiler_1.ViewFactoryDependency) {
                    var vfd = dep;
                    depTemplate = _this._assertComponentLoaded(vfd.comp.runtime, false);
                    vfd.placeholder.runtime = depTemplate.proxyViewFactory;
                    vfd.placeholder.name = "viewFactory_" + vfd.comp.name;
                } else if (dep instanceof view_compiler_1.ComponentFactoryDependency) {
                    var cfd = dep;
                    depTemplate = _this._assertComponentLoaded(cfd.comp.runtime, true);
                    cfd.placeholder.runtime = depTemplate.proxyComponentFactory;
                    cfd.placeholder.name = "compFactory_" + cfd.comp.name;
                }
            });
            var statements = stylesCompileResult.componentStylesheet.statements.concat(compileResult.statements);
            var factory;
            if (!this._compilerConfig.useJit) {
                factory = output_interpreter_1.interpretStatements(statements, compileResult.viewFactoryVar);
            } else {
                factory = output_jit_1.jitStatements(template.compType.name + ".ngfactory.js", statements, compileResult.viewFactoryVar);
            }
            template.compiled(factory);
        };
        RuntimeCompiler.prototype._resolveStylesCompileResult = function (result, externalStylesheetsByModuleUrl) {
            var _this = this;
            result.dependencies.forEach(function (dep, i) {
                var nestedCompileResult = externalStylesheetsByModuleUrl.get(dep.moduleUrl);
                var nestedStylesArr = _this._resolveAndEvalStylesCompileResult(nestedCompileResult, externalStylesheetsByModuleUrl);
                dep.valuePlaceholder.runtime = nestedStylesArr;
                dep.valuePlaceholder.name = "importedStyles" + i;
            });
        };
        RuntimeCompiler.prototype._resolveAndEvalStylesCompileResult = function (result, externalStylesheetsByModuleUrl) {
            this._resolveStylesCompileResult(result, externalStylesheetsByModuleUrl);
            if (!this._compilerConfig.useJit) {
                return output_interpreter_1.interpretStatements(result.statements, result.stylesVar);
            } else {
                return output_jit_1.jitStatements(result.meta.moduleUrl + ".css.js", result.statements, result.stylesVar);
            }
        };
        /** @nocollapse */
        RuntimeCompiler.decorators = [{ type: core_1.Injectable }];
        /** @nocollapse */
        RuntimeCompiler.ctorParameters = [{ type: core_1.Injector }, { type: metadata_resolver_1.CompileMetadataResolver }, { type: directive_normalizer_1.DirectiveNormalizer }, { type: template_parser_1.TemplateParser }, { type: style_compiler_1.StyleCompiler }, { type: view_compiler_1.ViewCompiler }, { type: ng_module_compiler_1.NgModuleCompiler }, { type: config_1.CompilerConfig }, { type: core_private_1.Console }];
        return RuntimeCompiler;
    }();
    exports.RuntimeCompiler = RuntimeCompiler;
    var CompiledTemplate = function () {
        function CompiledTemplate(isHost, selector, compType, viewDirectivesAndComponents, viewPipes, schemas, _normalizeResult) {
            var _this = this;
            this.isHost = isHost;
            this.compType = compType;
            this.viewPipes = viewPipes;
            this.schemas = schemas;
            this._viewFactory = null;
            this.loading = null;
            this._normalizedCompMeta = null;
            this.isCompiled = false;
            this.isCompiledWithDeps = false;
            this.viewComponentTypes = [];
            this.viewDirectives = [];
            viewDirectivesAndComponents.forEach(function (dirMeta) {
                if (dirMeta.isComponent) {
                    _this.viewComponentTypes.push(dirMeta.type.runtime);
                } else {
                    _this.viewDirectives.push(dirMeta);
                }
            });
            this.proxyViewFactory = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                if (!_this._viewFactory) {
                    throw new exceptions_1.BaseException("Illegal state: CompiledTemplate for " + lang_1.stringify(_this.compType) + " is not compiled yet!");
                }
                return _this._viewFactory.apply(null, args);
            };
            this.proxyComponentFactory = isHost ? new core_1.ComponentFactory(selector, this.proxyViewFactory, compType.runtime) : null;
            if (_normalizeResult.syncResult) {
                this._normalizedCompMeta = _normalizeResult.syncResult;
            } else {
                this.loading = _normalizeResult.asyncResult.then(function (normalizedCompMeta) {
                    _this._normalizedCompMeta = normalizedCompMeta;
                    _this.loading = null;
                });
            }
        }
        Object.defineProperty(CompiledTemplate.prototype, "normalizedCompMeta", {
            get: function () {
                if (this.loading) {
                    throw new exceptions_1.BaseException("Template is still loading for " + this.compType.name + "!");
                }
                return this._normalizedCompMeta;
            },
            enumerable: true,
            configurable: true
        });
        CompiledTemplate.prototype.compiled = function (viewFactory) {
            this._viewFactory = viewFactory;
            this.isCompiled = true;
        };
        CompiledTemplate.prototype.depsCompiled = function () {
            this.isCompiledWithDeps = true;
        };
        return CompiledTemplate;
    }();
    function assertComponent(meta) {
        if (!meta.isComponent) {
            throw new exceptions_1.BaseException("Could not compile '" + meta.type.name + "' because it is not a component.");
        }
    }
    /**
     * Implements `Compiler` and `ComponentResolver` by delegating
     * to the RuntimeCompiler using a known module.
     */
    var ModuleBoundCompiler = function () {
        function ModuleBoundCompiler(_delegate, _ngModule, _parentComponentResolver, _console) {
            this._delegate = _delegate;
            this._ngModule = _ngModule;
            this._parentComponentResolver = _parentComponentResolver;
            this._console = _console;
            this._warnOnComponentResolver = true;
        }
        Object.defineProperty(ModuleBoundCompiler.prototype, "_injector", {
            get: function () {
                return this._delegate.injector;
            },
            enumerable: true,
            configurable: true
        });
        ModuleBoundCompiler.prototype.resolveComponent = function (component) {
            if (lang_1.isString(component)) {
                if (this._parentComponentResolver) {
                    return this._parentComponentResolver.resolveComponent(component);
                } else {
                    return Promise.reject(new exceptions_1.BaseException("Cannot resolve component using '" + component + "'."));
                }
            }
            if (this._warnOnComponentResolver) {
                this._console.warn(core_1.ComponentResolver.DynamicCompilationDeprecationMsg);
                this._warnOnComponentResolver = false;
            }
            return this.compileComponentAsync(component);
        };
        ModuleBoundCompiler.prototype.compileComponentAsync = function (compType, ngModule) {
            if (ngModule === void 0) {
                ngModule = null;
            }
            return this._delegate.compileComponentAsync(compType, ngModule ? ngModule : this._ngModule);
        };
        ModuleBoundCompiler.prototype.compileComponentSync = function (compType, ngModule) {
            if (ngModule === void 0) {
                ngModule = null;
            }
            return this._delegate.compileComponentSync(compType, ngModule ? ngModule : this._ngModule);
        };
        ModuleBoundCompiler.prototype.compileModuleSync = function (moduleType) {
            return this._delegate.compileModuleSync(moduleType);
        };
        ModuleBoundCompiler.prototype.compileModuleAsync = function (moduleType) {
            return this._delegate.compileModuleAsync(moduleType);
        };
        ModuleBoundCompiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
            return this._delegate.compileModuleAndAllComponentsSync(moduleType);
        };
        ModuleBoundCompiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
            return this._delegate.compileModuleAndAllComponentsAsync(moduleType);
        };
        /**
         * Clears all caches
         */
        ModuleBoundCompiler.prototype.clearCache = function () {
            this._delegate.clearCache();
            if (this._parentComponentResolver) {
                this._parentComponentResolver.clearCache();
            }
        };
        /**
         * Clears the cache for the given component/ngModule.
         */
        ModuleBoundCompiler.prototype.clearCacheFor = function (type) {
            this._delegate.clearCacheFor(type);
        };
        return ModuleBoundCompiler;
    }();
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/compiler.js', ['@angular/core', './template_parser/template_ast', './template_parser/template_parser', './config', './compile_metadata', './offline_compiler', './runtime_compiler', './url_resolver', './xhr', './directive_resolver', './pipe_resolver', './ng_module_resolver', './facade/lang', './facade/collection', './ml_parser/html_parser', './directive_normalizer', './metadata_resolver', './style_compiler', './view_compiler/view_compiler', './ng_module_compiler', './schema/element_schema_registry', './schema/dom_element_schema_registry', './expression_parser/parser', './expression_parser/lexer', '../core_private', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    var core_1 = $__require('@angular/core');
    __export($__require('./template_parser/template_ast'));
    var template_parser_1 = $__require('./template_parser/template_parser');
    exports.TEMPLATE_TRANSFORMS = template_parser_1.TEMPLATE_TRANSFORMS;
    var config_1 = $__require('./config');
    exports.CompilerConfig = config_1.CompilerConfig;
    exports.RenderTypes = config_1.RenderTypes;
    __export($__require('./compile_metadata'));
    __export($__require('./offline_compiler'));
    var runtime_compiler_1 = $__require('./runtime_compiler');
    exports.RuntimeCompiler = runtime_compiler_1.RuntimeCompiler;
    __export($__require('./url_resolver'));
    __export($__require('./xhr'));
    var directive_resolver_1 = $__require('./directive_resolver');
    exports.DirectiveResolver = directive_resolver_1.DirectiveResolver;
    var pipe_resolver_1 = $__require('./pipe_resolver');
    exports.PipeResolver = pipe_resolver_1.PipeResolver;
    var ng_module_resolver_1 = $__require('./ng_module_resolver');
    exports.NgModuleResolver = ng_module_resolver_1.NgModuleResolver;
    var lang_1 = $__require('./facade/lang');
    var collection_1 = $__require('./facade/collection');
    var template_parser_2 = $__require('./template_parser/template_parser');
    var html_parser_1 = $__require('./ml_parser/html_parser');
    var directive_normalizer_1 = $__require('./directive_normalizer');
    var metadata_resolver_1 = $__require('./metadata_resolver');
    var style_compiler_1 = $__require('./style_compiler');
    var view_compiler_1 = $__require('./view_compiler/view_compiler');
    var ng_module_compiler_1 = $__require('./ng_module_compiler');
    var config_2 = $__require('./config');
    var runtime_compiler_2 = $__require('./runtime_compiler');
    var element_schema_registry_1 = $__require('./schema/element_schema_registry');
    var dom_element_schema_registry_1 = $__require('./schema/dom_element_schema_registry');
    var url_resolver_2 = $__require('./url_resolver');
    var parser_1 = $__require('./expression_parser/parser');
    var lexer_1 = $__require('./expression_parser/lexer');
    var directive_resolver_2 = $__require('./directive_resolver');
    var pipe_resolver_2 = $__require('./pipe_resolver');
    var ng_module_resolver_2 = $__require('./ng_module_resolver');
    var core_private_1 = $__require('../core_private');
    var xhr_2 = $__require('./xhr');
    var _NO_XHR = {
        get: function (url) {
            throw new Error("No XHR implementation has been provided. Can't read the url \"" + url + "\"");
        }
    };
    /**
     * A set of providers that provide `RuntimeCompiler` and its dependencies to use for
     * template compilation.
     */
    exports.COMPILER_PROVIDERS = [{ provide: core_private_1.Reflector, useValue: core_private_1.reflector }, { provide: core_private_1.ReflectorReader, useExisting: core_private_1.Reflector }, { provide: xhr_2.XHR, useValue: _NO_XHR }, core_private_1.Console, lexer_1.Lexer, parser_1.Parser, html_parser_1.HtmlParser, template_parser_2.TemplateParser, directive_normalizer_1.DirectiveNormalizer, metadata_resolver_1.CompileMetadataResolver, url_resolver_2.DEFAULT_PACKAGE_URL_PROVIDER, style_compiler_1.StyleCompiler, view_compiler_1.ViewCompiler, ng_module_compiler_1.NgModuleCompiler, { provide: config_2.CompilerConfig, useValue: new config_2.CompilerConfig() }, runtime_compiler_2.RuntimeCompiler, { provide: core_1.Compiler, useExisting: runtime_compiler_2.RuntimeCompiler }, dom_element_schema_registry_1.DomElementSchemaRegistry, { provide: element_schema_registry_1.ElementSchemaRegistry, useExisting: dom_element_schema_registry_1.DomElementSchemaRegistry }, url_resolver_2.UrlResolver, directive_resolver_2.DirectiveResolver, pipe_resolver_2.PipeResolver, ng_module_resolver_2.NgModuleResolver];
    function analyzeAppProvidersForDeprecatedConfiguration(appProviders) {
        if (appProviders === void 0) {
            appProviders = [];
        }
        var platformDirectives = [];
        var platformPipes = [];
        var compilerProviders = [];
        var useDebug;
        var useJit;
        var defaultEncapsulation;
        var deprecationMessages = [];
        // Note: This is a hack to still support the old way
        // of configuring platform directives / pipes and the compiler xhr.
        // This will soon be deprecated!
        var tempInj = core_1.ReflectiveInjector.resolveAndCreate(appProviders);
        var compilerConfig = tempInj.get(config_2.CompilerConfig, null);
        if (compilerConfig) {
            platformDirectives = compilerConfig.platformDirectives;
            platformPipes = compilerConfig.platformPipes;
            useJit = compilerConfig.useJit;
            useDebug = compilerConfig.genDebugInfo;
            defaultEncapsulation = compilerConfig.defaultEncapsulation;
            deprecationMessages.push("Passing CompilerConfig as a regular provider is deprecated. Use the \"compilerOptions\" parameter of \"bootstrap()\" or use a custom \"CompilerFactory\" platform provider instead.");
        } else {
            // If nobody provided a CompilerConfig, use the
            // PLATFORM_DIRECTIVES / PLATFORM_PIPES values directly if existing
            platformDirectives = tempInj.get(core_1.PLATFORM_DIRECTIVES, []);
            platformPipes = tempInj.get(core_1.PLATFORM_PIPES, []);
        }
        platformDirectives = collection_1.ListWrapper.flatten(platformDirectives);
        platformPipes = collection_1.ListWrapper.flatten(platformPipes);
        var xhr = tempInj.get(xhr_2.XHR, null);
        if (xhr) {
            compilerProviders.push([{ provide: xhr_2.XHR, useValue: xhr }]);
            deprecationMessages.push("Passing XHR as regular provider is deprecated. Pass the provider via \"compilerOptions\" instead.");
        }
        if (platformDirectives.length > 0) {
            deprecationMessages.push("The PLATFORM_DIRECTIVES provider and CompilerConfig.platformDirectives is deprecated. Add the directives to an NgModule instead! " + ("(Directives: " + platformDirectives.map(function (type) {
                return lang_1.stringify(type);
            }) + ")"));
        }
        if (platformPipes.length > 0) {
            deprecationMessages.push("The PLATFORM_PIPES provider and CompilerConfig.platformPipes is deprecated. Add the pipes to an NgModule instead! " + ("(Pipes: " + platformPipes.map(function (type) {
                return lang_1.stringify(type);
            }) + ")"));
        }
        var compilerOptions = {
            useJit: useJit,
            useDebug: useDebug,
            defaultEncapsulation: defaultEncapsulation,
            providers: compilerProviders
        };
        var DynamicComponent = function () {
            function DynamicComponent() {}
            /** @nocollapse */
            DynamicComponent.decorators = [{ type: core_1.Component, args: [{ directives: platformDirectives, pipes: platformPipes, template: '' }] }];
            return DynamicComponent;
        }();
        return {
            compilerOptions: compilerOptions,
            moduleDeclarations: [DynamicComponent],
            deprecationMessages: deprecationMessages
        };
    }
    exports.analyzeAppProvidersForDeprecatedConfiguration = analyzeAppProvidersForDeprecatedConfiguration;
    var RuntimeCompilerFactory = function () {
        function RuntimeCompilerFactory(defaultOptions) {
            this._defaultOptions = [{
                useDebug: core_1.isDevMode(),
                useJit: true,
                defaultEncapsulation: core_1.ViewEncapsulation.Emulated
            }].concat(defaultOptions);
        }
        RuntimeCompilerFactory.prototype.createCompiler = function (options) {
            if (options === void 0) {
                options = [];
            }
            var mergedOptions = _mergeOptions(this._defaultOptions.concat(options));
            var injector = core_1.ReflectiveInjector.resolveAndCreate([exports.COMPILER_PROVIDERS, {
                provide: config_2.CompilerConfig,
                useFactory: function () {
                    return new config_2.CompilerConfig({
                        // let explicit values from the compiler options overwrite options
                        // from the app providers. E.g. important for the testing platform.
                        genDebugInfo: mergedOptions.useDebug,
                        // let explicit values from the compiler options overwrite options
                        // from the app providers
                        useJit: mergedOptions.useJit,
                        // let explicit values from the compiler options overwrite options
                        // from the app providers
                        defaultEncapsulation: mergedOptions.defaultEncapsulation,
                        logBindingUpdate: mergedOptions.useDebug
                    });
                },
                deps: []
            }, mergedOptions.providers]);
            return injector.get(core_1.Compiler);
        };
        /** @nocollapse */
        RuntimeCompilerFactory.decorators = [{ type: core_1.Injectable }];
        /** @nocollapse */
        RuntimeCompilerFactory.ctorParameters = [{ type: Array, decorators: [{ type: core_1.Inject, args: [core_1.COMPILER_OPTIONS] }] }];
        return RuntimeCompilerFactory;
    }();
    exports.RuntimeCompilerFactory = RuntimeCompilerFactory;
    function _initReflector() {
        core_private_1.reflector.reflectionCapabilities = new core_private_1.ReflectionCapabilities();
    }
    /**
     * A platform that included corePlatform and the compiler.
     *
     * @experimental
     */
    exports.platformCoreDynamic = core_1.createPlatformFactory(core_1.platformCore, 'coreDynamic', [{ provide: core_1.COMPILER_OPTIONS, useValue: {}, multi: true }, { provide: core_1.CompilerFactory, useClass: RuntimeCompilerFactory }, { provide: core_1.PLATFORM_INITIALIZER, useValue: _initReflector, multi: true }]);
    function _mergeOptions(optionsArr) {
        return {
            useDebug: _lastDefined(optionsArr.map(function (options) {
                return options.useDebug;
            })),
            useJit: _lastDefined(optionsArr.map(function (options) {
                return options.useJit;
            })),
            defaultEncapsulation: _lastDefined(optionsArr.map(function (options) {
                return options.defaultEncapsulation;
            })),
            providers: _mergeArrays(optionsArr.map(function (options) {
                return options.providers;
            }))
        };
    }
    function _lastDefined(args) {
        for (var i = args.length - 1; i >= 0; i--) {
            if (args[i] !== undefined) {
                return args[i];
            }
        }
        return undefined;
    }
    function _mergeArrays(parts) {
        var result = [];
        parts.forEach(function (part) {
            return part && result.push.apply(result, part);
        });
        return result;
    }
    

    return module.exports;
});
System.registerDynamic("npm:@angular/compiler@2.0.0-rc.5/src/xhr.js", ["reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";
  // TODO: vsavkin rename it into TemplateLoader
  /**
   * An interface for retrieving documents by URL that the compiler uses
   * to load templates.
   */

  var define,
      global = this || self,
      GLOBAL = global;
  var XHR = function () {
    function XHR() {}
    XHR.prototype.get = function (url) {
      return null;
    };
    return XHR;
  }();
  exports.XHR = XHR;
  

  return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/directive_normalizer.js', ['@angular/core', './compile_metadata', './config', './facade/collection', './facade/exceptions', './facade/lang', './ml_parser/ast', './ml_parser/html_parser', './ml_parser/interpolation_config', './style_url_resolver', './template_parser/template_preparser', './url_resolver', './util', './xhr', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var compile_metadata_1 = $__require('./compile_metadata');
    var config_1 = $__require('./config');
    var collection_1 = $__require('./facade/collection');
    var exceptions_1 = $__require('./facade/exceptions');
    var lang_1 = $__require('./facade/lang');
    var html = $__require('./ml_parser/ast');
    var html_parser_1 = $__require('./ml_parser/html_parser');
    var interpolation_config_1 = $__require('./ml_parser/interpolation_config');
    var style_url_resolver_1 = $__require('./style_url_resolver');
    var template_preparser_1 = $__require('./template_parser/template_preparser');
    var url_resolver_1 = $__require('./url_resolver');
    var util_1 = $__require('./util');
    var xhr_1 = $__require('./xhr');
    var DirectiveNormalizer = function () {
        function DirectiveNormalizer(_xhr, _urlResolver, _htmlParser, _config) {
            this._xhr = _xhr;
            this._urlResolver = _urlResolver;
            this._htmlParser = _htmlParser;
            this._config = _config;
            this._xhrCache = new Map();
        }
        DirectiveNormalizer.prototype.clearCache = function () {
            this._xhrCache.clear();
        };
        DirectiveNormalizer.prototype.clearCacheFor = function (normalizedDirective) {
            var _this = this;
            if (!normalizedDirective.isComponent) {
                return;
            }
            this._xhrCache.delete(normalizedDirective.template.templateUrl);
            normalizedDirective.template.externalStylesheets.forEach(function (stylesheet) {
                _this._xhrCache.delete(stylesheet.moduleUrl);
            });
        };
        DirectiveNormalizer.prototype._fetch = function (url) {
            var result = this._xhrCache.get(url);
            if (!result) {
                result = this._xhr.get(url);
                this._xhrCache.set(url, result);
            }
            return result;
        };
        DirectiveNormalizer.prototype.normalizeDirective = function (directive) {
            var _this = this;
            if (!directive.isComponent) {
                // For non components there is nothing to be normalized yet.
                return new util_1.SyncAsyncResult(directive, Promise.resolve(directive));
            }
            var normalizedTemplateSync = null;
            var normalizedTemplateAsync;
            if (lang_1.isPresent(directive.template.template)) {
                normalizedTemplateSync = this.normalizeTemplateSync(directive.type, directive.template);
                normalizedTemplateAsync = Promise.resolve(normalizedTemplateSync);
            } else if (directive.template.templateUrl) {
                normalizedTemplateAsync = this.normalizeTemplateAsync(directive.type, directive.template);
            } else {
                throw new exceptions_1.BaseException("No template specified for component " + directive.type.name);
            }
            if (normalizedTemplateSync && normalizedTemplateSync.styleUrls.length === 0) {
                // sync case
                var normalizedDirective = _cloneDirectiveWithTemplate(directive, normalizedTemplateSync);
                return new util_1.SyncAsyncResult(normalizedDirective, Promise.resolve(normalizedDirective));
            } else {
                // async case
                return new util_1.SyncAsyncResult(null, normalizedTemplateAsync.then(function (normalizedTemplate) {
                    return _this.normalizeExternalStylesheets(normalizedTemplate);
                }).then(function (normalizedTemplate) {
                    return _cloneDirectiveWithTemplate(directive, normalizedTemplate);
                }));
            }
        };
        DirectiveNormalizer.prototype.normalizeTemplateSync = function (directiveType, template) {
            return this.normalizeLoadedTemplate(directiveType, template, template.template, directiveType.moduleUrl);
        };
        DirectiveNormalizer.prototype.normalizeTemplateAsync = function (directiveType, template) {
            var _this = this;
            var templateUrl = this._urlResolver.resolve(directiveType.moduleUrl, template.templateUrl);
            return this._fetch(templateUrl).then(function (value) {
                return _this.normalizeLoadedTemplate(directiveType, template, value, templateUrl);
            });
        };
        DirectiveNormalizer.prototype.normalizeLoadedTemplate = function (directiveType, templateMeta, template, templateAbsUrl) {
            var interpolationConfig = interpolation_config_1.InterpolationConfig.fromArray(templateMeta.interpolation);
            var rootNodesAndErrors = this._htmlParser.parse(template, directiveType.name, false, interpolationConfig);
            if (rootNodesAndErrors.errors.length > 0) {
                var errorString = rootNodesAndErrors.errors.join('\n');
                throw new exceptions_1.BaseException("Template parse errors:\n" + errorString);
            }
            var templateMetadataStyles = this.normalizeStylesheet(new compile_metadata_1.CompileStylesheetMetadata({
                styles: templateMeta.styles,
                styleUrls: templateMeta.styleUrls,
                moduleUrl: directiveType.moduleUrl
            }));
            var visitor = new TemplatePreparseVisitor();
            html.visitAll(visitor, rootNodesAndErrors.rootNodes);
            var templateStyles = this.normalizeStylesheet(new compile_metadata_1.CompileStylesheetMetadata({ styles: visitor.styles, styleUrls: visitor.styleUrls, moduleUrl: templateAbsUrl }));
            var allStyles = templateMetadataStyles.styles.concat(templateStyles.styles);
            var allStyleUrls = templateMetadataStyles.styleUrls.concat(templateStyles.styleUrls);
            var encapsulation = templateMeta.encapsulation;
            if (lang_1.isBlank(encapsulation)) {
                encapsulation = this._config.defaultEncapsulation;
            }
            if (encapsulation === core_1.ViewEncapsulation.Emulated && allStyles.length === 0 && allStyleUrls.length === 0) {
                encapsulation = core_1.ViewEncapsulation.None;
            }
            return new compile_metadata_1.CompileTemplateMetadata({
                encapsulation: encapsulation,
                template: template,
                templateUrl: templateAbsUrl,
                styles: allStyles,
                styleUrls: allStyleUrls,
                externalStylesheets: templateMeta.externalStylesheets,
                ngContentSelectors: visitor.ngContentSelectors,
                animations: templateMeta.animations,
                interpolation: templateMeta.interpolation
            });
        };
        DirectiveNormalizer.prototype.normalizeExternalStylesheets = function (templateMeta) {
            return this._loadMissingExternalStylesheets(templateMeta.styleUrls).then(function (externalStylesheets) {
                return new compile_metadata_1.CompileTemplateMetadata({
                    encapsulation: templateMeta.encapsulation,
                    template: templateMeta.template,
                    templateUrl: templateMeta.templateUrl,
                    styles: templateMeta.styles,
                    styleUrls: templateMeta.styleUrls,
                    externalStylesheets: externalStylesheets,
                    ngContentSelectors: templateMeta.ngContentSelectors,
                    animations: templateMeta.animations,
                    interpolation: templateMeta.interpolation
                });
            });
        };
        DirectiveNormalizer.prototype._loadMissingExternalStylesheets = function (styleUrls, loadedStylesheets) {
            var _this = this;
            if (loadedStylesheets === void 0) {
                loadedStylesheets = new Map();
            }
            return Promise.all(styleUrls.filter(function (styleUrl) {
                return !loadedStylesheets.has(styleUrl);
            }).map(function (styleUrl) {
                return _this._fetch(styleUrl).then(function (loadedStyle) {
                    var stylesheet = _this.normalizeStylesheet(new compile_metadata_1.CompileStylesheetMetadata({ styles: [loadedStyle], moduleUrl: styleUrl }));
                    loadedStylesheets.set(styleUrl, stylesheet);
                    return _this._loadMissingExternalStylesheets(stylesheet.styleUrls, loadedStylesheets);
                });
            })).then(function (_) {
                return collection_1.MapWrapper.values(loadedStylesheets);
            });
        };
        DirectiveNormalizer.prototype.normalizeStylesheet = function (stylesheet) {
            var _this = this;
            var allStyleUrls = stylesheet.styleUrls.filter(style_url_resolver_1.isStyleUrlResolvable).map(function (url) {
                return _this._urlResolver.resolve(stylesheet.moduleUrl, url);
            });
            var allStyles = stylesheet.styles.map(function (style) {
                var styleWithImports = style_url_resolver_1.extractStyleUrls(_this._urlResolver, stylesheet.moduleUrl, style);
                allStyleUrls.push.apply(allStyleUrls, styleWithImports.styleUrls);
                return styleWithImports.style;
            });
            return new compile_metadata_1.CompileStylesheetMetadata({ styles: allStyles, styleUrls: allStyleUrls, moduleUrl: stylesheet.moduleUrl });
        };
        /** @nocollapse */
        DirectiveNormalizer.decorators = [{ type: core_1.Injectable }];
        /** @nocollapse */
        DirectiveNormalizer.ctorParameters = [{ type: xhr_1.XHR }, { type: url_resolver_1.UrlResolver }, { type: html_parser_1.HtmlParser }, { type: config_1.CompilerConfig }];
        return DirectiveNormalizer;
    }();
    exports.DirectiveNormalizer = DirectiveNormalizer;
    var TemplatePreparseVisitor = function () {
        function TemplatePreparseVisitor() {
            this.ngContentSelectors = [];
            this.styles = [];
            this.styleUrls = [];
            this.ngNonBindableStackCount = 0;
        }
        TemplatePreparseVisitor.prototype.visitElement = function (ast, context) {
            var preparsedElement = template_preparser_1.preparseElement(ast);
            switch (preparsedElement.type) {
                case template_preparser_1.PreparsedElementType.NG_CONTENT:
                    if (this.ngNonBindableStackCount === 0) {
                        this.ngContentSelectors.push(preparsedElement.selectAttr);
                    }
                    break;
                case template_preparser_1.PreparsedElementType.STYLE:
                    var textContent = '';
                    ast.children.forEach(function (child) {
                        if (child instanceof html.Text) {
                            textContent += child.value;
                        }
                    });
                    this.styles.push(textContent);
                    break;
                case template_preparser_1.PreparsedElementType.STYLESHEET:
                    this.styleUrls.push(preparsedElement.hrefAttr);
                    break;
                default:
                    break;
            }
            if (preparsedElement.nonBindable) {
                this.ngNonBindableStackCount++;
            }
            html.visitAll(this, ast.children);
            if (preparsedElement.nonBindable) {
                this.ngNonBindableStackCount--;
            }
            return null;
        };
        TemplatePreparseVisitor.prototype.visitComment = function (ast, context) {
            return null;
        };
        TemplatePreparseVisitor.prototype.visitAttribute = function (ast, context) {
            return null;
        };
        TemplatePreparseVisitor.prototype.visitText = function (ast, context) {
            return null;
        };
        TemplatePreparseVisitor.prototype.visitExpansion = function (ast, context) {
            return null;
        };
        TemplatePreparseVisitor.prototype.visitExpansionCase = function (ast, context) {
            return null;
        };
        return TemplatePreparseVisitor;
    }();
    function _cloneDirectiveWithTemplate(directive, template) {
        return new compile_metadata_1.CompileDirectiveMetadata({
            type: directive.type,
            isComponent: directive.isComponent,
            selector: directive.selector,
            exportAs: directive.exportAs,
            changeDetection: directive.changeDetection,
            inputs: directive.inputs,
            outputs: directive.outputs,
            hostListeners: directive.hostListeners,
            hostProperties: directive.hostProperties,
            hostAttributes: directive.hostAttributes,
            providers: directive.providers,
            viewProviders: directive.viewProviders,
            queries: directive.queries,
            viewQueries: directive.viewQueries,
            entryComponents: directive.entryComponents,
            template: template
        });
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/directive_resolver.js', ['@angular/core', '../core_private', './facade/collection', './facade/exceptions', './facade/lang', './util', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var core_private_1 = $__require('../core_private');
    var collection_1 = $__require('./facade/collection');
    var exceptions_1 = $__require('./facade/exceptions');
    var lang_1 = $__require('./facade/lang');
    var util_1 = $__require('./util');
    function _isDirectiveMetadata(type) {
        return type instanceof core_1.DirectiveMetadata;
    }
    var DirectiveResolver = function () {
        function DirectiveResolver(_reflector) {
            if (_reflector === void 0) {
                _reflector = core_private_1.reflector;
            }
            this._reflector = _reflector;
        }
        /**
         * Return {@link DirectiveMetadata} for a given `Type`.
         */
        DirectiveResolver.prototype.resolve = function (type, throwIfNotFound) {
            if (throwIfNotFound === void 0) {
                throwIfNotFound = true;
            }
            var typeMetadata = this._reflector.annotations(core_1.resolveForwardRef(type));
            if (lang_1.isPresent(typeMetadata)) {
                var metadata = typeMetadata.find(_isDirectiveMetadata);
                if (lang_1.isPresent(metadata)) {
                    var propertyMetadata = this._reflector.propMetadata(type);
                    return this._mergeWithPropertyMetadata(metadata, propertyMetadata, type);
                }
            }
            if (throwIfNotFound) {
                throw new exceptions_1.BaseException("No Directive annotation found on " + lang_1.stringify(type));
            }
            return null;
        };
        DirectiveResolver.prototype._mergeWithPropertyMetadata = function (dm, propertyMetadata, directiveType) {
            var inputs = [];
            var outputs = [];
            var host = {};
            var queries = {};
            collection_1.StringMapWrapper.forEach(propertyMetadata, function (metadata, propName) {
                metadata.forEach(function (a) {
                    if (a instanceof core_1.InputMetadata) {
                        if (lang_1.isPresent(a.bindingPropertyName)) {
                            inputs.push(propName + ": " + a.bindingPropertyName);
                        } else {
                            inputs.push(propName);
                        }
                    } else if (a instanceof core_1.OutputMetadata) {
                        if (lang_1.isPresent(a.bindingPropertyName)) {
                            outputs.push(propName + ": " + a.bindingPropertyName);
                        } else {
                            outputs.push(propName);
                        }
                    } else if (a instanceof core_1.HostBindingMetadata) {
                        if (lang_1.isPresent(a.hostPropertyName)) {
                            host["[" + a.hostPropertyName + "]"] = propName;
                        } else {
                            host["[" + propName + "]"] = propName;
                        }
                    } else if (a instanceof core_1.HostListenerMetadata) {
                        var args = lang_1.isPresent(a.args) ? a.args.join(', ') : '';
                        host["(" + a.eventName + ")"] = propName + "(" + args + ")";
                    } else if (a instanceof core_1.QueryMetadata) {
                        queries[propName] = a;
                    }
                });
            });
            return this._merge(dm, inputs, outputs, host, queries, directiveType);
        };
        DirectiveResolver.prototype._extractPublicName = function (def) {
            return util_1.splitAtColon(def, [null, def])[1].trim();
        };
        DirectiveResolver.prototype._merge = function (dm, inputs, outputs, host, queries, directiveType) {
            var _this = this;
            var mergedInputs;
            if (lang_1.isPresent(dm.inputs)) {
                var inputNames_1 = dm.inputs.map(function (def) {
                    return _this._extractPublicName(def);
                });
                inputs.forEach(function (inputDef) {
                    var publicName = _this._extractPublicName(inputDef);
                    if (inputNames_1.indexOf(publicName) > -1) {
                        throw new exceptions_1.BaseException("Input '" + publicName + "' defined multiple times in '" + lang_1.stringify(directiveType) + "'");
                    }
                });
                mergedInputs = dm.inputs.concat(inputs);
            } else {
                mergedInputs = inputs;
            }
            var mergedOutputs;
            if (lang_1.isPresent(dm.outputs)) {
                var outputNames_1 = dm.outputs.map(function (def) {
                    return _this._extractPublicName(def);
                });
                outputs.forEach(function (outputDef) {
                    var publicName = _this._extractPublicName(outputDef);
                    if (outputNames_1.indexOf(publicName) > -1) {
                        throw new exceptions_1.BaseException("Output event '" + publicName + "' defined multiple times in '" + lang_1.stringify(directiveType) + "'");
                    }
                });
                mergedOutputs = dm.outputs.concat(outputs);
            } else {
                mergedOutputs = outputs;
            }
            var mergedHost = lang_1.isPresent(dm.host) ? collection_1.StringMapWrapper.merge(dm.host, host) : host;
            var mergedQueries = lang_1.isPresent(dm.queries) ? collection_1.StringMapWrapper.merge(dm.queries, queries) : queries;
            if (dm instanceof core_1.ComponentMetadata) {
                return new core_1.ComponentMetadata({
                    selector: dm.selector,
                    inputs: mergedInputs,
                    outputs: mergedOutputs,
                    host: mergedHost,
                    exportAs: dm.exportAs,
                    moduleId: dm.moduleId,
                    queries: mergedQueries,
                    changeDetection: dm.changeDetection,
                    providers: dm.providers,
                    viewProviders: dm.viewProviders,
                    entryComponents: dm.entryComponents,
                    directives: dm.directives,
                    pipes: dm.pipes,
                    template: dm.template,
                    templateUrl: dm.templateUrl,
                    styles: dm.styles,
                    styleUrls: dm.styleUrls,
                    encapsulation: dm.encapsulation,
                    animations: dm.animations,
                    interpolation: dm.interpolation
                });
            } else {
                return new core_1.DirectiveMetadata({
                    selector: dm.selector,
                    inputs: mergedInputs,
                    outputs: mergedOutputs,
                    host: mergedHost,
                    exportAs: dm.exportAs,
                    queries: mergedQueries,
                    providers: dm.providers
                });
            }
        };
        /** @nocollapse */
        DirectiveResolver.decorators = [{ type: core_1.Injectable }];
        /** @nocollapse */
        DirectiveResolver.ctorParameters = [{ type: core_private_1.ReflectorReader }];
        return DirectiveResolver;
    }();
    exports.DirectiveResolver = DirectiveResolver;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/lifecycle_reflector.js', ['@angular/core', '../core_private', './facade/collection', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var core_private_1 = $__require('../core_private');
    var collection_1 = $__require('./facade/collection');
    var LIFECYCLE_INTERFACES = collection_1.MapWrapper.createFromPairs([[core_private_1.LifecycleHooks.OnInit, core_1.OnInit], [core_private_1.LifecycleHooks.OnDestroy, core_1.OnDestroy], [core_private_1.LifecycleHooks.DoCheck, core_1.DoCheck], [core_private_1.LifecycleHooks.OnChanges, core_1.OnChanges], [core_private_1.LifecycleHooks.AfterContentInit, core_1.AfterContentInit], [core_private_1.LifecycleHooks.AfterContentChecked, core_1.AfterContentChecked], [core_private_1.LifecycleHooks.AfterViewInit, core_1.AfterViewInit], [core_private_1.LifecycleHooks.AfterViewChecked, core_1.AfterViewChecked]]);
    var LIFECYCLE_PROPS = collection_1.MapWrapper.createFromPairs([[core_private_1.LifecycleHooks.OnInit, 'ngOnInit'], [core_private_1.LifecycleHooks.OnDestroy, 'ngOnDestroy'], [core_private_1.LifecycleHooks.DoCheck, 'ngDoCheck'], [core_private_1.LifecycleHooks.OnChanges, 'ngOnChanges'], [core_private_1.LifecycleHooks.AfterContentInit, 'ngAfterContentInit'], [core_private_1.LifecycleHooks.AfterContentChecked, 'ngAfterContentChecked'], [core_private_1.LifecycleHooks.AfterViewInit, 'ngAfterViewInit'], [core_private_1.LifecycleHooks.AfterViewChecked, 'ngAfterViewChecked']]);
    function hasLifecycleHook(hook, token) {
        var lcInterface = LIFECYCLE_INTERFACES.get(hook);
        var lcProp = LIFECYCLE_PROPS.get(hook);
        return core_private_1.reflector.hasLifecycleHook(token, lcInterface, lcProp);
    }
    exports.hasLifecycleHook = hasLifecycleHook;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/ng_module_resolver.js', ['@angular/core', '../core_private', '../src/facade/exceptions', './facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var core_private_1 = $__require('../core_private');
    var exceptions_1 = $__require('../src/facade/exceptions');
    var lang_1 = $__require('./facade/lang');
    function _isNgModuleMetadata(obj) {
        return obj instanceof core_1.NgModuleMetadata;
    }
    var NgModuleResolver = function () {
        function NgModuleResolver(_reflector) {
            if (_reflector === void 0) {
                _reflector = core_private_1.reflector;
            }
            this._reflector = _reflector;
        }
        NgModuleResolver.prototype.resolve = function (type, throwIfNotFound) {
            if (throwIfNotFound === void 0) {
                throwIfNotFound = true;
            }
            var ngModuleMeta = this._reflector.annotations(type).find(_isNgModuleMetadata);
            if (lang_1.isPresent(ngModuleMeta)) {
                return ngModuleMeta;
            } else {
                if (throwIfNotFound) {
                    throw new exceptions_1.BaseException("No NgModule metadata found for '" + lang_1.stringify(type) + "'.");
                }
                return null;
            }
        };
        /** @nocollapse */
        NgModuleResolver.decorators = [{ type: core_1.Injectable }];
        /** @nocollapse */
        NgModuleResolver.ctorParameters = [{ type: core_private_1.ReflectorReader }];
        return NgModuleResolver;
    }();
    exports.NgModuleResolver = NgModuleResolver;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/pipe_resolver.js', ['@angular/core', '../core_private', './facade/exceptions', './facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var core_private_1 = $__require('../core_private');
    var exceptions_1 = $__require('./facade/exceptions');
    var lang_1 = $__require('./facade/lang');
    function _isPipeMetadata(type) {
        return type instanceof core_1.PipeMetadata;
    }
    var PipeResolver = function () {
        function PipeResolver(_reflector) {
            if (_reflector === void 0) {
                _reflector = core_private_1.reflector;
            }
            this._reflector = _reflector;
        }
        /**
         * Return {@link PipeMetadata} for a given `Type`.
         */
        PipeResolver.prototype.resolve = function (type, throwIfNotFound) {
            if (throwIfNotFound === void 0) {
                throwIfNotFound = true;
            }
            var metas = this._reflector.annotations(core_1.resolveForwardRef(type));
            if (lang_1.isPresent(metas)) {
                var annotation = metas.find(_isPipeMetadata);
                if (lang_1.isPresent(annotation)) {
                    return annotation;
                }
            }
            if (throwIfNotFound) {
                throw new exceptions_1.BaseException("No Pipe decorator found on " + lang_1.stringify(type));
            }
            return null;
        };
        /** @nocollapse */
        PipeResolver.decorators = [{ type: core_1.Injectable }];
        /** @nocollapse */
        PipeResolver.ctorParameters = [{ type: core_private_1.ReflectorReader }];
        return PipeResolver;
    }();
    exports.PipeResolver = PipeResolver;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/metadata_resolver.js', ['@angular/core', '../core_private', '../src/facade/collection', './assertions', './compile_metadata', './config', './directive_resolver', './facade/exceptions', './facade/lang', './identifiers', './lifecycle_reflector', './ng_module_resolver', './pipe_resolver', './schema/element_schema_registry', './url_resolver', './util', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var core_1 = $__require('@angular/core');
    var core_private_1 = $__require('../core_private');
    var collection_1 = $__require('../src/facade/collection');
    var assertions_1 = $__require('./assertions');
    var cpl = $__require('./compile_metadata');
    var config_1 = $__require('./config');
    var directive_resolver_1 = $__require('./directive_resolver');
    var exceptions_1 = $__require('./facade/exceptions');
    var lang_1 = $__require('./facade/lang');
    var identifiers_1 = $__require('./identifiers');
    var lifecycle_reflector_1 = $__require('./lifecycle_reflector');
    var ng_module_resolver_1 = $__require('./ng_module_resolver');
    var pipe_resolver_1 = $__require('./pipe_resolver');
    var element_schema_registry_1 = $__require('./schema/element_schema_registry');
    var url_resolver_1 = $__require('./url_resolver');
    var util_1 = $__require('./util');
    var CompileMetadataResolver = function () {
        function CompileMetadataResolver(_ngModuleResolver, _directiveResolver, _pipeResolver, _config, _console, _schemaRegistry, _reflector) {
            if (_reflector === void 0) {
                _reflector = core_private_1.reflector;
            }
            this._ngModuleResolver = _ngModuleResolver;
            this._directiveResolver = _directiveResolver;
            this._pipeResolver = _pipeResolver;
            this._config = _config;
            this._console = _console;
            this._schemaRegistry = _schemaRegistry;
            this._reflector = _reflector;
            this._directiveCache = new Map();
            this._pipeCache = new Map();
            this._ngModuleCache = new Map();
            this._ngModuleOfTypes = new Map();
            this._anonymousTypes = new Map();
            this._anonymousTypeIndex = 0;
        }
        CompileMetadataResolver.prototype.sanitizeTokenName = function (token) {
            var identifier = lang_1.stringify(token);
            if (identifier.indexOf('(') >= 0) {
                // case: anonymous functions!
                var found = this._anonymousTypes.get(token);
                if (lang_1.isBlank(found)) {
                    this._anonymousTypes.set(token, this._anonymousTypeIndex++);
                    found = this._anonymousTypes.get(token);
                }
                identifier = "anonymous_token_" + found + "_";
            }
            return util_1.sanitizeIdentifier(identifier);
        };
        CompileMetadataResolver.prototype.clearCacheFor = function (type) {
            this._directiveCache.delete(type);
            this._pipeCache.delete(type);
            this._ngModuleOfTypes.delete(type);
            // Clear all of the NgModuleMetadata as they contain transitive information!
            this._ngModuleCache.clear();
        };
        CompileMetadataResolver.prototype.clearCache = function () {
            this._directiveCache.clear();
            this._pipeCache.clear();
            this._ngModuleCache.clear();
            this._ngModuleOfTypes.clear();
        };
        CompileMetadataResolver.prototype.getAnimationEntryMetadata = function (entry) {
            var _this = this;
            var defs = entry.definitions.map(function (def) {
                return _this.getAnimationStateMetadata(def);
            });
            return new cpl.CompileAnimationEntryMetadata(entry.name, defs);
        };
        CompileMetadataResolver.prototype.getAnimationStateMetadata = function (value) {
            if (value instanceof core_1.AnimationStateDeclarationMetadata) {
                var styles = this.getAnimationStyleMetadata(value.styles);
                return new cpl.CompileAnimationStateDeclarationMetadata(value.stateNameExpr, styles);
            } else if (value instanceof core_1.AnimationStateTransitionMetadata) {
                return new cpl.CompileAnimationStateTransitionMetadata(value.stateChangeExpr, this.getAnimationMetadata(value.steps));
            }
            return null;
        };
        CompileMetadataResolver.prototype.getAnimationStyleMetadata = function (value) {
            return new cpl.CompileAnimationStyleMetadata(value.offset, value.styles);
        };
        CompileMetadataResolver.prototype.getAnimationMetadata = function (value) {
            var _this = this;
            if (value instanceof core_1.AnimationStyleMetadata) {
                return this.getAnimationStyleMetadata(value);
            } else if (value instanceof core_1.AnimationKeyframesSequenceMetadata) {
                return new cpl.CompileAnimationKeyframesSequenceMetadata(value.steps.map(function (entry) {
                    return _this.getAnimationStyleMetadata(entry);
                }));
            } else if (value instanceof core_1.AnimationAnimateMetadata) {
                var animateData = this.getAnimationMetadata(value.styles);
                return new cpl.CompileAnimationAnimateMetadata(value.timings, animateData);
            } else if (value instanceof core_1.AnimationWithStepsMetadata) {
                var steps = value.steps.map(function (step) {
                    return _this.getAnimationMetadata(step);
                });
                if (value instanceof core_1.AnimationGroupMetadata) {
                    return new cpl.CompileAnimationGroupMetadata(steps);
                } else {
                    return new cpl.CompileAnimationSequenceMetadata(steps);
                }
            }
            return null;
        };
        CompileMetadataResolver.prototype.getDirectiveMetadata = function (directiveType, throwIfNotFound) {
            var _this = this;
            if (throwIfNotFound === void 0) {
                throwIfNotFound = true;
            }
            directiveType = core_1.resolveForwardRef(directiveType);
            var meta = this._directiveCache.get(directiveType);
            if (lang_1.isBlank(meta)) {
                var dirMeta = this._directiveResolver.resolve(directiveType, throwIfNotFound);
                if (!dirMeta) {
                    return null;
                }
                var templateMeta = null;
                var changeDetectionStrategy = null;
                var viewProviders = [];
                var moduleUrl = staticTypeModuleUrl(directiveType);
                var viewDirectiveTypes = [];
                var viewPipeTypes = [];
                var entryComponentTypes = [];
                var selector = dirMeta.selector;
                if (dirMeta instanceof core_1.ComponentMetadata) {
                    var cmpMeta = dirMeta;
                    assertions_1.assertArrayOfStrings('styles', cmpMeta.styles);
                    assertions_1.assertInterpolationSymbols('interpolation', cmpMeta.interpolation);
                    var animations = lang_1.isPresent(cmpMeta.animations) ? cmpMeta.animations.map(function (e) {
                        return _this.getAnimationEntryMetadata(e);
                    }) : null;
                    assertions_1.assertArrayOfStrings('styles', cmpMeta.styles);
                    assertions_1.assertArrayOfStrings('styleUrls', cmpMeta.styleUrls);
                    templateMeta = new cpl.CompileTemplateMetadata({
                        encapsulation: cmpMeta.encapsulation,
                        template: cmpMeta.template,
                        templateUrl: cmpMeta.templateUrl,
                        styles: cmpMeta.styles,
                        styleUrls: cmpMeta.styleUrls,
                        animations: animations,
                        interpolation: cmpMeta.interpolation
                    });
                    changeDetectionStrategy = cmpMeta.changeDetection;
                    if (lang_1.isPresent(dirMeta.viewProviders)) {
                        viewProviders = this.getProvidersMetadata(verifyNonBlankProviders(directiveType, dirMeta.viewProviders, 'viewProviders'), []);
                    }
                    moduleUrl = componentModuleUrl(this._reflector, directiveType, cmpMeta);
                    if (cmpMeta.entryComponents) {
                        entryComponentTypes = flattenArray(cmpMeta.entryComponents).map(function (type) {
                            return _this.getTypeMetadata(type, staticTypeModuleUrl(type));
                        });
                    }
                    if (cmpMeta.directives) {
                        viewDirectiveTypes = flattenArray(cmpMeta.directives).map(function (type) {
                            if (!type) {
                                throw new exceptions_1.BaseException("Unexpected directive value '" + type + "' on the View of component '" + lang_1.stringify(directiveType) + "'");
                            }
                            return _this.getTypeMetadata(type, staticTypeModuleUrl(type));
                        });
                    }
                    if (cmpMeta.pipes) {
                        viewPipeTypes = flattenArray(cmpMeta.pipes).map(function (type) {
                            if (!type) {
                                throw new exceptions_1.BaseException("Unexpected pipe value '" + type + "' on the View of component '" + lang_1.stringify(directiveType) + "'");
                            }
                            return _this.getTypeMetadata(type, staticTypeModuleUrl(type));
                        });
                    }
                    if (!selector) {
                        selector = this._schemaRegistry.getDefaultComponentElementName();
                    }
                } else {
                    if (!selector) {
                        throw new exceptions_1.BaseException("Directive " + lang_1.stringify(directiveType) + " has no selector, please add it!");
                    }
                }
                var providers = [];
                if (lang_1.isPresent(dirMeta.providers)) {
                    providers = this.getProvidersMetadata(verifyNonBlankProviders(directiveType, dirMeta.providers, 'providers'), entryComponentTypes);
                }
                var queries = [];
                var viewQueries = [];
                if (lang_1.isPresent(dirMeta.queries)) {
                    queries = this.getQueriesMetadata(dirMeta.queries, false, directiveType);
                    viewQueries = this.getQueriesMetadata(dirMeta.queries, true, directiveType);
                }
                meta = cpl.CompileDirectiveMetadata.create({
                    selector: selector,
                    exportAs: dirMeta.exportAs,
                    isComponent: lang_1.isPresent(templateMeta),
                    type: this.getTypeMetadata(directiveType, moduleUrl),
                    template: templateMeta,
                    changeDetection: changeDetectionStrategy,
                    inputs: dirMeta.inputs,
                    outputs: dirMeta.outputs,
                    host: dirMeta.host,
                    providers: providers,
                    viewProviders: viewProviders,
                    queries: queries,
                    viewQueries: viewQueries,
                    viewDirectives: viewDirectiveTypes,
                    viewPipes: viewPipeTypes,
                    entryComponents: entryComponentTypes
                });
                this._directiveCache.set(directiveType, meta);
            }
            return meta;
        };
        CompileMetadataResolver.prototype.getNgModuleMetadata = function (moduleType, throwIfNotFound) {
            var _this = this;
            if (throwIfNotFound === void 0) {
                throwIfNotFound = true;
            }
            moduleType = core_1.resolveForwardRef(moduleType);
            var compileMeta = this._ngModuleCache.get(moduleType);
            if (!compileMeta) {
                var meta = this._ngModuleResolver.resolve(moduleType, throwIfNotFound);
                if (!meta) {
                    return null;
                }
                var declaredDirectives_1 = [];
                var exportedDirectives_1 = [];
                var declaredPipes_1 = [];
                var exportedPipes_1 = [];
                var importedModules_1 = [];
                var exportedModules_1 = [];
                var providers_1 = [];
                var entryComponents_1 = [];
                var bootstrapComponents = [];
                var schemas = [];
                if (meta.imports) {
                    flattenArray(meta.imports).forEach(function (importedType) {
                        var importedModuleType;
                        if (isValidType(importedType)) {
                            importedModuleType = importedType;
                        } else if (importedType && importedType.ngModule) {
                            var moduleWithProviders = importedType;
                            importedModuleType = moduleWithProviders.ngModule;
                            if (moduleWithProviders.providers) {
                                providers_1.push.apply(providers_1, _this.getProvidersMetadata(moduleWithProviders.providers, entryComponents_1));
                            }
                        }
                        if (importedModuleType) {
                            importedModules_1.push(_this.getNgModuleMetadata(importedModuleType, false));
                        } else {
                            throw new exceptions_1.BaseException("Unexpected value '" + lang_1.stringify(importedType) + "' imported by the module '" + lang_1.stringify(moduleType) + "'");
                        }
                    });
                }
                if (meta.exports) {
                    flattenArray(meta.exports).forEach(function (exportedType) {
                        if (!isValidType(exportedType)) {
                            throw new exceptions_1.BaseException("Unexpected value '" + lang_1.stringify(exportedType) + "' exported by the module '" + lang_1.stringify(moduleType) + "'");
                        }
                        var exportedDirMeta;
                        var exportedPipeMeta;
                        var exportedModuleMeta;
                        if (exportedDirMeta = _this.getDirectiveMetadata(exportedType, false)) {
                            exportedDirectives_1.push(exportedDirMeta);
                        } else if (exportedPipeMeta = _this.getPipeMetadata(exportedType, false)) {
                            exportedPipes_1.push(exportedPipeMeta);
                        } else if (exportedModuleMeta = _this.getNgModuleMetadata(exportedType, false)) {
                            exportedModules_1.push(exportedModuleMeta);
                        } else {
                            throw new exceptions_1.BaseException("Unexpected value '" + lang_1.stringify(exportedType) + "' exported by the module '" + lang_1.stringify(moduleType) + "'");
                        }
                    });
                }
                // Note: This will be modified later, so we rely on
                // getting a new instance every time!
                var transitiveModule_1 = this._getTransitiveNgModuleMetadata(importedModules_1, exportedModules_1);
                if (meta.declarations) {
                    flattenArray(meta.declarations).forEach(function (declaredType) {
                        if (!isValidType(declaredType)) {
                            throw new exceptions_1.BaseException("Unexpected value '" + lang_1.stringify(declaredType) + "' declared by the module '" + lang_1.stringify(moduleType) + "'");
                        }
                        var declaredDirMeta;
                        var declaredPipeMeta;
                        if (declaredDirMeta = _this.getDirectiveMetadata(declaredType, false)) {
                            _this._addDirectiveToModule(declaredDirMeta, moduleType, transitiveModule_1, declaredDirectives_1, true);
                        } else if (declaredPipeMeta = _this.getPipeMetadata(declaredType, false)) {
                            _this._addPipeToModule(declaredPipeMeta, moduleType, transitiveModule_1, declaredPipes_1, true);
                        } else {
                            throw new exceptions_1.BaseException("Unexpected value '" + lang_1.stringify(declaredType) + "' declared by the module '" + lang_1.stringify(moduleType) + "'");
                        }
                    });
                }
                // The providers of the module have to go last
                // so that they overwrite any other provider we already added.
                if (meta.providers) {
                    providers_1.push.apply(providers_1, this.getProvidersMetadata(meta.providers, entryComponents_1));
                }
                if (meta.entryComponents) {
                    entryComponents_1.push.apply(entryComponents_1, flattenArray(meta.entryComponents).map(function (type) {
                        return _this.getTypeMetadata(type, staticTypeModuleUrl(type));
                    }));
                }
                if (meta.bootstrap) {
                    bootstrapComponents.push.apply(bootstrapComponents, flattenArray(meta.bootstrap).map(function (type) {
                        return _this.getTypeMetadata(type, staticTypeModuleUrl(type));
                    }));
                }
                entryComponents_1.push.apply(entryComponents_1, bootstrapComponents);
                if (meta.schemas) {
                    schemas.push.apply(schemas, flattenArray(meta.schemas));
                }
                (_a = transitiveModule_1.entryComponents).push.apply(_a, entryComponents_1);
                (_b = transitiveModule_1.providers).push.apply(_b, providers_1);
                compileMeta = new cpl.CompileNgModuleMetadata({
                    type: this.getTypeMetadata(moduleType, staticTypeModuleUrl(moduleType)),
                    providers: providers_1,
                    entryComponents: entryComponents_1,
                    bootstrapComponents: bootstrapComponents,
                    schemas: schemas,
                    declaredDirectives: declaredDirectives_1,
                    exportedDirectives: exportedDirectives_1,
                    declaredPipes: declaredPipes_1,
                    exportedPipes: exportedPipes_1,
                    importedModules: importedModules_1,
                    exportedModules: exportedModules_1,
                    transitiveModule: transitiveModule_1
                });
                transitiveModule_1.modules.push(compileMeta);
                this._verifyModule(compileMeta);
                this._ngModuleCache.set(moduleType, compileMeta);
            }
            return compileMeta;
            var _a, _b;
        };
        CompileMetadataResolver.prototype.addComponentToModule = function (moduleType, compType) {
            var moduleMeta = this.getNgModuleMetadata(moduleType);
            // Collect @Component.directives/pipes/entryComponents into our declared directives/pipes.
            var compMeta = this.getDirectiveMetadata(compType, false);
            this._addDirectiveToModule(compMeta, moduleMeta.type.runtime, moduleMeta.transitiveModule, moduleMeta.declaredDirectives);
            moduleMeta.transitiveModule.entryComponents.push(compMeta.type);
            moduleMeta.entryComponents.push(compMeta.type);
            this._verifyModule(moduleMeta);
        };
        CompileMetadataResolver.prototype._verifyModule = function (moduleMeta) {
            var _this = this;
            moduleMeta.exportedDirectives.forEach(function (dirMeta) {
                if (!moduleMeta.transitiveModule.directivesSet.has(dirMeta.type.runtime)) {
                    throw new exceptions_1.BaseException("Can't export directive " + lang_1.stringify(dirMeta.type.runtime) + " from " + lang_1.stringify(moduleMeta.type.runtime) + " as it was neither declared nor imported!");
                }
            });
            moduleMeta.exportedPipes.forEach(function (pipeMeta) {
                if (!moduleMeta.transitiveModule.pipesSet.has(pipeMeta.type.runtime)) {
                    throw new exceptions_1.BaseException("Can't export pipe " + lang_1.stringify(pipeMeta.type.runtime) + " from " + lang_1.stringify(moduleMeta.type.runtime) + " as it was neither declared nor imported!");
                }
            });
            moduleMeta.entryComponents.forEach(function (entryComponentType) {
                if (!moduleMeta.transitiveModule.directivesSet.has(entryComponentType.runtime)) {
                    _this._addDirectiveToModule(_this.getDirectiveMetadata(entryComponentType.runtime), moduleMeta.type.runtime, moduleMeta.transitiveModule, moduleMeta.declaredDirectives);
                    _this._console.warn("NgModule " + lang_1.stringify(moduleMeta.type.runtime) + " uses " + lang_1.stringify(entryComponentType.runtime) + " via \"entryComponents\" but it was neither declared nor imported! This warning will become an error after final.");
                }
            });
            // Collect @Component.directives/pipes/entryComponents into our declared
            // directives/pipes. Do this last so that directives added by previous steps
            // are considered as well!
            moduleMeta.declaredDirectives.forEach(function (dirMeta) {
                _this._getTransitiveViewDirectivesAndPipes(dirMeta, moduleMeta);
            });
        };
        CompileMetadataResolver.prototype._addTypeToModule = function (type, moduleType) {
            var oldModule = this._ngModuleOfTypes.get(type);
            if (oldModule && oldModule !== moduleType) {
                throw new exceptions_1.BaseException("Type " + lang_1.stringify(type) + " is part of the declarations of 2 modules: " + lang_1.stringify(oldModule) + " and " + lang_1.stringify(moduleType) + "!");
            }
            this._ngModuleOfTypes.set(type, moduleType);
        };
        CompileMetadataResolver.prototype._getTransitiveViewDirectivesAndPipes = function (compMeta, moduleMeta) {
            var _this = this;
            if (!compMeta.isComponent) {
                return;
            }
            var addPipe = function (pipeType) {
                var pipeMeta = _this.getPipeMetadata(pipeType);
                _this._addPipeToModule(pipeMeta, moduleMeta.type.runtime, moduleMeta.transitiveModule, moduleMeta.declaredPipes);
            };
            var addDirective = function (dirType) {
                var dirMeta = _this.getDirectiveMetadata(dirType);
                if (_this._addDirectiveToModule(dirMeta, moduleMeta.type.runtime, moduleMeta.transitiveModule, moduleMeta.declaredDirectives)) {
                    _this._getTransitiveViewDirectivesAndPipes(dirMeta, moduleMeta);
                }
            };
            if (compMeta.viewPipes) {
                compMeta.viewPipes.forEach(function (cplType) {
                    return addPipe(cplType.runtime);
                });
            }
            if (compMeta.viewDirectives) {
                compMeta.viewDirectives.forEach(function (cplType) {
                    return addDirective(cplType.runtime);
                });
            }
            compMeta.entryComponents.forEach(function (entryComponentType) {
                if (!moduleMeta.transitiveModule.directivesSet.has(entryComponentType.runtime)) {
                    _this._console.warn("Component " + lang_1.stringify(compMeta.type.runtime) + " in NgModule " + lang_1.stringify(moduleMeta.type.runtime) + " uses " + lang_1.stringify(entryComponentType.runtime) + " via \"entryComponents\" but it was neither declared nor imported into the module! This warning will become an error after final.");
                    addDirective(entryComponentType.runtime);
                }
            });
        };
        CompileMetadataResolver.prototype._getTransitiveNgModuleMetadata = function (importedModules, exportedModules) {
            // collect `providers` / `entryComponents` from all imported and all exported modules
            var transitiveModules = getTransitiveModules(importedModules.concat(exportedModules), true);
            var providers = flattenArray(transitiveModules.map(function (ngModule) {
                return ngModule.providers;
            }));
            var entryComponents = flattenArray(transitiveModules.map(function (ngModule) {
                return ngModule.entryComponents;
            }));
            var transitiveExportedModules = getTransitiveModules(importedModules, false);
            var directives = flattenArray(transitiveExportedModules.map(function (ngModule) {
                return ngModule.exportedDirectives;
            }));
            var pipes = flattenArray(transitiveExportedModules.map(function (ngModule) {
                return ngModule.exportedPipes;
            }));
            return new cpl.TransitiveCompileNgModuleMetadata(transitiveModules, providers, entryComponents, directives, pipes);
        };
        CompileMetadataResolver.prototype._addDirectiveToModule = function (dirMeta, moduleType, transitiveModule, declaredDirectives, force) {
            if (force === void 0) {
                force = false;
            }
            if (force || !transitiveModule.directivesSet.has(dirMeta.type.runtime)) {
                transitiveModule.directivesSet.add(dirMeta.type.runtime);
                transitiveModule.directives.push(dirMeta);
                declaredDirectives.push(dirMeta);
                this._addTypeToModule(dirMeta.type.runtime, moduleType);
                return true;
            }
            return false;
        };
        CompileMetadataResolver.prototype._addPipeToModule = function (pipeMeta, moduleType, transitiveModule, declaredPipes, force) {
            if (force === void 0) {
                force = false;
            }
            if (force || !transitiveModule.pipesSet.has(pipeMeta.type.runtime)) {
                transitiveModule.pipesSet.add(pipeMeta.type.runtime);
                transitiveModule.pipes.push(pipeMeta);
                declaredPipes.push(pipeMeta);
                this._addTypeToModule(pipeMeta.type.runtime, moduleType);
                return true;
            }
            return false;
        };
        CompileMetadataResolver.prototype.getTypeMetadata = function (type, moduleUrl, dependencies) {
            if (dependencies === void 0) {
                dependencies = null;
            }
            type = core_1.resolveForwardRef(type);
            return new cpl.CompileTypeMetadata({
                name: this.sanitizeTokenName(type),
                moduleUrl: moduleUrl,
                runtime: type,
                diDeps: this.getDependenciesMetadata(type, dependencies),
                lifecycleHooks: core_private_1.LIFECYCLE_HOOKS_VALUES.filter(function (hook) {
                    return lifecycle_reflector_1.hasLifecycleHook(hook, type);
                })
            });
        };
        CompileMetadataResolver.prototype.getFactoryMetadata = function (factory, moduleUrl, dependencies) {
            if (dependencies === void 0) {
                dependencies = null;
            }
            factory = core_1.resolveForwardRef(factory);
            return new cpl.CompileFactoryMetadata({
                name: this.sanitizeTokenName(factory),
                moduleUrl: moduleUrl,
                runtime: factory,
                diDeps: this.getDependenciesMetadata(factory, dependencies)
            });
        };
        CompileMetadataResolver.prototype.getPipeMetadata = function (pipeType, throwIfNotFound) {
            if (throwIfNotFound === void 0) {
                throwIfNotFound = true;
            }
            pipeType = core_1.resolveForwardRef(pipeType);
            var meta = this._pipeCache.get(pipeType);
            if (lang_1.isBlank(meta)) {
                var pipeMeta = this._pipeResolver.resolve(pipeType, throwIfNotFound);
                if (!pipeMeta) {
                    return null;
                }
                meta = new cpl.CompilePipeMetadata({
                    type: this.getTypeMetadata(pipeType, staticTypeModuleUrl(pipeType)),
                    name: pipeMeta.name,
                    pure: pipeMeta.pure
                });
                this._pipeCache.set(pipeType, meta);
            }
            return meta;
        };
        CompileMetadataResolver.prototype.getDependenciesMetadata = function (typeOrFunc, dependencies) {
            var _this = this;
            var hasUnknownDeps = false;
            var params = lang_1.isPresent(dependencies) ? dependencies : this._reflector.parameters(typeOrFunc);
            if (lang_1.isBlank(params)) {
                params = [];
            }
            var dependenciesMetadata = params.map(function (param) {
                var isAttribute = false;
                var isHost = false;
                var isSelf = false;
                var isSkipSelf = false;
                var isOptional = false;
                var query = null;
                var viewQuery = null;
                var token = null;
                if (lang_1.isArray(param)) {
                    param.forEach(function (paramEntry) {
                        if (paramEntry instanceof core_1.HostMetadata) {
                            isHost = true;
                        } else if (paramEntry instanceof core_1.SelfMetadata) {
                            isSelf = true;
                        } else if (paramEntry instanceof core_1.SkipSelfMetadata) {
                            isSkipSelf = true;
                        } else if (paramEntry instanceof core_1.OptionalMetadata) {
                            isOptional = true;
                        } else if (paramEntry instanceof core_1.AttributeMetadata) {
                            isAttribute = true;
                            token = paramEntry.attributeName;
                        } else if (paramEntry instanceof core_1.QueryMetadata) {
                            if (paramEntry.isViewQuery) {
                                viewQuery = paramEntry;
                            } else {
                                query = paramEntry;
                            }
                        } else if (paramEntry instanceof core_1.InjectMetadata) {
                            token = paramEntry.token;
                        } else if (isValidType(paramEntry) && lang_1.isBlank(token)) {
                            token = paramEntry;
                        }
                    });
                } else {
                    token = param;
                }
                if (lang_1.isBlank(token)) {
                    hasUnknownDeps = true;
                    return null;
                }
                return new cpl.CompileDiDependencyMetadata({
                    isAttribute: isAttribute,
                    isHost: isHost,
                    isSelf: isSelf,
                    isSkipSelf: isSkipSelf,
                    isOptional: isOptional,
                    query: lang_1.isPresent(query) ? _this.getQueryMetadata(query, null, typeOrFunc) : null,
                    viewQuery: lang_1.isPresent(viewQuery) ? _this.getQueryMetadata(viewQuery, null, typeOrFunc) : null,
                    token: _this.getTokenMetadata(token)
                });
            });
            if (hasUnknownDeps) {
                var depsTokens = dependenciesMetadata.map(function (dep) {
                    return dep ? lang_1.stringify(dep.token) : '?';
                }).join(', ');
                throw new exceptions_1.BaseException("Can't resolve all parameters for " + lang_1.stringify(typeOrFunc) + ": (" + depsTokens + ").");
            }
            return dependenciesMetadata;
        };
        CompileMetadataResolver.prototype.getTokenMetadata = function (token) {
            token = core_1.resolveForwardRef(token);
            var compileToken;
            if (lang_1.isString(token)) {
                compileToken = new cpl.CompileTokenMetadata({ value: token });
            } else {
                compileToken = new cpl.CompileTokenMetadata({
                    identifier: new cpl.CompileIdentifierMetadata({
                        runtime: token,
                        name: this.sanitizeTokenName(token),
                        moduleUrl: staticTypeModuleUrl(token)
                    })
                });
            }
            return compileToken;
        };
        CompileMetadataResolver.prototype.getProvidersMetadata = function (providers, targetEntryComponents) {
            var _this = this;
            var compileProviders = [];
            providers.forEach(function (provider) {
                provider = core_1.resolveForwardRef(provider);
                if (core_private_1.isProviderLiteral(provider)) {
                    provider = core_private_1.createProvider(provider);
                }
                var compileProvider;
                if (lang_1.isArray(provider)) {
                    compileProvider = _this.getProvidersMetadata(provider, targetEntryComponents);
                } else if (provider instanceof core_1.Provider) {
                    var tokenMeta = _this.getTokenMetadata(provider.token);
                    if (tokenMeta.equalsTo(identifiers_1.identifierToken(identifiers_1.Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS))) {
                        targetEntryComponents.push.apply(targetEntryComponents, _this._getEntryComponentsFromProvider(provider));
                    } else {
                        compileProvider = _this.getProviderMetadata(provider);
                    }
                } else if (isValidType(provider)) {
                    compileProvider = _this.getTypeMetadata(provider, staticTypeModuleUrl(provider));
                } else {
                    throw new exceptions_1.BaseException("Invalid provider - only instances of Provider and Type are allowed, got: " + lang_1.stringify(provider));
                }
                if (compileProvider) {
                    compileProviders.push(compileProvider);
                }
            });
            return compileProviders;
        };
        CompileMetadataResolver.prototype._getEntryComponentsFromProvider = function (provider) {
            var _this = this;
            var components = [];
            var collectedIdentifiers = [];
            if (provider.useFactory || provider.useExisting || provider.useClass) {
                throw new exceptions_1.BaseException("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports useValue!");
            }
            if (!provider.multi) {
                throw new exceptions_1.BaseException("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports 'multi = true'!");
            }
            convertToCompileValue(provider.useValue, collectedIdentifiers);
            collectedIdentifiers.forEach(function (identifier) {
                var dirMeta = _this.getDirectiveMetadata(identifier.runtime, false);
                if (dirMeta) {
                    components.push(dirMeta.type);
                }
            });
            return components;
        };
        CompileMetadataResolver.prototype.getProviderMetadata = function (provider) {
            var compileDeps;
            var compileTypeMetadata = null;
            var compileFactoryMetadata = null;
            if (lang_1.isPresent(provider.useClass)) {
                compileTypeMetadata = this.getTypeMetadata(provider.useClass, staticTypeModuleUrl(provider.useClass), provider.dependencies);
                compileDeps = compileTypeMetadata.diDeps;
            } else if (lang_1.isPresent(provider.useFactory)) {
                compileFactoryMetadata = this.getFactoryMetadata(provider.useFactory, staticTypeModuleUrl(provider.useFactory), provider.dependencies);
                compileDeps = compileFactoryMetadata.diDeps;
            }
            return new cpl.CompileProviderMetadata({
                token: this.getTokenMetadata(provider.token),
                useClass: compileTypeMetadata,
                useValue: convertToCompileValue(provider.useValue, []),
                useFactory: compileFactoryMetadata,
                useExisting: lang_1.isPresent(provider.useExisting) ? this.getTokenMetadata(provider.useExisting) : null,
                deps: compileDeps,
                multi: provider.multi
            });
        };
        CompileMetadataResolver.prototype.getQueriesMetadata = function (queries, isViewQuery, directiveType) {
            var _this = this;
            var res = [];
            collection_1.StringMapWrapper.forEach(queries, function (query, propertyName) {
                if (query.isViewQuery === isViewQuery) {
                    res.push(_this.getQueryMetadata(query, propertyName, directiveType));
                }
            });
            return res;
        };
        CompileMetadataResolver.prototype.getQueryMetadata = function (q, propertyName, typeOrFunc) {
            var _this = this;
            var selectors;
            if (q.isVarBindingQuery) {
                selectors = q.varBindings.map(function (varName) {
                    return _this.getTokenMetadata(varName);
                });
            } else {
                if (!lang_1.isPresent(q.selector)) {
                    throw new exceptions_1.BaseException("Can't construct a query for the property \"" + propertyName + "\" of \"" + lang_1.stringify(typeOrFunc) + "\" since the query selector wasn't defined.");
                }
                selectors = [this.getTokenMetadata(q.selector)];
            }
            return new cpl.CompileQueryMetadata({
                selectors: selectors,
                first: q.first,
                descendants: q.descendants,
                propertyName: propertyName,
                read: lang_1.isPresent(q.read) ? this.getTokenMetadata(q.read) : null
            });
        };
        /** @nocollapse */
        CompileMetadataResolver.decorators = [{ type: core_1.Injectable }];
        /** @nocollapse */
        CompileMetadataResolver.ctorParameters = [{ type: ng_module_resolver_1.NgModuleResolver }, { type: directive_resolver_1.DirectiveResolver }, { type: pipe_resolver_1.PipeResolver }, { type: config_1.CompilerConfig }, { type: core_private_1.Console }, { type: element_schema_registry_1.ElementSchemaRegistry }, { type: core_private_1.ReflectorReader }];
        return CompileMetadataResolver;
    }();
    exports.CompileMetadataResolver = CompileMetadataResolver;
    function getTransitiveModules(modules, includeImports, targetModules, visitedModules) {
        if (targetModules === void 0) {
            targetModules = [];
        }
        if (visitedModules === void 0) {
            visitedModules = new Set();
        }
        modules.forEach(function (ngModule) {
            if (!visitedModules.has(ngModule.type.runtime)) {
                visitedModules.add(ngModule.type.runtime);
                var nestedModules = includeImports ? ngModule.importedModules.concat(ngModule.exportedModules) : ngModule.exportedModules;
                getTransitiveModules(nestedModules, includeImports, targetModules, visitedModules);
                // Add after recursing so imported/exported modules are before the module itself.
                // This is important for overwriting providers of imported modules!
                targetModules.push(ngModule);
            }
        });
        return targetModules;
    }
    function flattenArray(tree, out) {
        if (out === void 0) {
            out = [];
        }
        if (tree) {
            for (var i = 0; i < tree.length; i++) {
                var item = core_1.resolveForwardRef(tree[i]);
                if (lang_1.isArray(item)) {
                    flattenArray(item, out);
                } else {
                    out.push(item);
                }
            }
        }
        return out;
    }
    function verifyNonBlankProviders(directiveType, providersTree, providersType) {
        var flat = [];
        var errMsg;
        flattenArray(providersTree, flat);
        for (var i = 0; i < flat.length; i++) {
            if (lang_1.isBlank(flat[i])) {
                errMsg = flat.map(function (provider) {
                    return lang_1.isBlank(provider) ? '?' : lang_1.stringify(provider);
                }).join(', ');
                throw new exceptions_1.BaseException("One or more of " + providersType + " for \"" + lang_1.stringify(directiveType) + "\" were not defined: [" + errMsg + "].");
            }
        }
        return providersTree;
    }
    function isValidType(value) {
        return cpl.isStaticSymbol(value) || value instanceof lang_1.Type;
    }
    function staticTypeModuleUrl(value) {
        return cpl.isStaticSymbol(value) ? value.filePath : null;
    }
    function componentModuleUrl(reflector, type, cmpMetadata) {
        if (cpl.isStaticSymbol(type)) {
            return staticTypeModuleUrl(type);
        }
        if (lang_1.isPresent(cmpMetadata.moduleId)) {
            var moduleId = cmpMetadata.moduleId;
            var scheme = url_resolver_1.getUrlScheme(moduleId);
            return lang_1.isPresent(scheme) && scheme.length > 0 ? moduleId : "package:" + moduleId + util_1.MODULE_SUFFIX;
        }
        return reflector.importUri(type);
    }
    function convertToCompileValue(value, targetIdentifiers) {
        return util_1.visitValue(value, new _CompileValueConverter(), targetIdentifiers);
    }
    var _CompileValueConverter = function (_super) {
        __extends(_CompileValueConverter, _super);
        function _CompileValueConverter() {
            _super.apply(this, arguments);
        }
        _CompileValueConverter.prototype.visitOther = function (value, targetIdentifiers) {
            var identifier;
            if (cpl.isStaticSymbol(value)) {
                identifier = new cpl.CompileIdentifierMetadata({ name: value.name, moduleUrl: value.filePath, runtime: value });
            } else {
                identifier = new cpl.CompileIdentifierMetadata({ runtime: value });
            }
            targetIdentifiers.push(identifier);
            return identifier;
        };
        return _CompileValueConverter;
    }(util_1.ValueTransformer);
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/ng_module_compiler.js', ['@angular/core', '../core_private', './compile_metadata', './facade/lang', './identifiers', './output/output_ast', './output/value_util', './parse_util', './provider_analyzer', './util', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var core_private_1 = $__require('../core_private');
    var compile_metadata_1 = $__require('./compile_metadata');
    var lang_1 = $__require('./facade/lang');
    var identifiers_1 = $__require('./identifiers');
    var o = $__require('./output/output_ast');
    var value_util_1 = $__require('./output/value_util');
    var parse_util_1 = $__require('./parse_util');
    var provider_analyzer_1 = $__require('./provider_analyzer');
    var util_1 = $__require('./util');
    var ComponentFactoryDependency = function () {
        function ComponentFactoryDependency(comp, placeholder) {
            this.comp = comp;
            this.placeholder = placeholder;
        }
        return ComponentFactoryDependency;
    }();
    exports.ComponentFactoryDependency = ComponentFactoryDependency;
    var NgModuleCompileResult = function () {
        function NgModuleCompileResult(statements, ngModuleFactoryVar, dependencies) {
            this.statements = statements;
            this.ngModuleFactoryVar = ngModuleFactoryVar;
            this.dependencies = dependencies;
        }
        return NgModuleCompileResult;
    }();
    exports.NgModuleCompileResult = NgModuleCompileResult;
    var NgModuleCompiler = function () {
        function NgModuleCompiler() {}
        NgModuleCompiler.prototype.compile = function (ngModuleMeta, extraProviders) {
            var sourceFileName = lang_1.isPresent(ngModuleMeta.type.moduleUrl) ? "in NgModule " + ngModuleMeta.type.name + " in " + ngModuleMeta.type.moduleUrl : "in NgModule " + ngModuleMeta.type.name;
            var sourceFile = new parse_util_1.ParseSourceFile('', sourceFileName);
            var sourceSpan = new parse_util_1.ParseSourceSpan(new parse_util_1.ParseLocation(sourceFile, null, null, null), new parse_util_1.ParseLocation(sourceFile, null, null, null));
            var deps = [];
            var bootstrapComponentFactories = [];
            var entryComponentFactories = ngModuleMeta.transitiveModule.entryComponents.map(function (entryComponent) {
                var id = new compile_metadata_1.CompileIdentifierMetadata({ name: entryComponent.name });
                if (ngModuleMeta.bootstrapComponents.indexOf(entryComponent) > -1) {
                    bootstrapComponentFactories.push(id);
                }
                deps.push(new ComponentFactoryDependency(entryComponent, id));
                return id;
            });
            var builder = new _InjectorBuilder(ngModuleMeta, entryComponentFactories, bootstrapComponentFactories, sourceSpan);
            var providerParser = new provider_analyzer_1.NgModuleProviderAnalyzer(ngModuleMeta, extraProviders, sourceSpan);
            providerParser.parse().forEach(function (provider) {
                return builder.addProvider(provider);
            });
            var injectorClass = builder.build();
            var ngModuleFactoryVar = ngModuleMeta.type.name + "NgFactory";
            var ngModuleFactoryStmt = o.variable(ngModuleFactoryVar).set(o.importExpr(identifiers_1.Identifiers.NgModuleFactory).instantiate([o.variable(injectorClass.name), o.importExpr(ngModuleMeta.type)], o.importType(identifiers_1.Identifiers.NgModuleFactory, [o.importType(ngModuleMeta.type)], [o.TypeModifier.Const]))).toDeclStmt(null, [o.StmtModifier.Final]);
            return new NgModuleCompileResult([injectorClass, ngModuleFactoryStmt], ngModuleFactoryVar, deps);
        };
        /** @nocollapse */
        NgModuleCompiler.decorators = [{ type: core_1.Injectable }];
        return NgModuleCompiler;
    }();
    exports.NgModuleCompiler = NgModuleCompiler;
    var _InjectorBuilder = function () {
        function _InjectorBuilder(_ngModuleMeta, _entryComponentFactories, _bootstrapComponentFactories, _sourceSpan) {
            this._ngModuleMeta = _ngModuleMeta;
            this._entryComponentFactories = _entryComponentFactories;
            this._bootstrapComponentFactories = _bootstrapComponentFactories;
            this._sourceSpan = _sourceSpan;
            this._instances = new compile_metadata_1.CompileIdentifierMap();
            this._fields = [];
            this._createStmts = [];
            this._destroyStmts = [];
            this._getters = [];
        }
        _InjectorBuilder.prototype.addProvider = function (resolvedProvider) {
            var _this = this;
            var providerValueExpressions = resolvedProvider.providers.map(function (provider) {
                return _this._getProviderValue(provider);
            });
            var propName = "_" + resolvedProvider.token.name + "_" + this._instances.size;
            var instance = this._createProviderProperty(propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager);
            if (resolvedProvider.lifecycleHooks.indexOf(core_private_1.LifecycleHooks.OnDestroy) !== -1) {
                this._destroyStmts.push(instance.callMethod('ngOnDestroy', []).toStmt());
            }
            this._instances.add(resolvedProvider.token, instance);
        };
        _InjectorBuilder.prototype.build = function () {
            var _this = this;
            var getMethodStmts = this._instances.keys().map(function (token) {
                var providerExpr = _this._instances.get(token);
                return new o.IfStmt(InjectMethodVars.token.identical(util_1.createDiTokenExpression(token)), [new o.ReturnStatement(providerExpr)]);
            });
            var methods = [new o.ClassMethod('createInternal', [], this._createStmts.concat(new o.ReturnStatement(this._instances.get(identifiers_1.identifierToken(this._ngModuleMeta.type)))), o.importType(this._ngModuleMeta.type)), new o.ClassMethod('getInternal', [new o.FnParam(InjectMethodVars.token.name, o.DYNAMIC_TYPE), new o.FnParam(InjectMethodVars.notFoundResult.name, o.DYNAMIC_TYPE)], getMethodStmts.concat([new o.ReturnStatement(InjectMethodVars.notFoundResult)]), o.DYNAMIC_TYPE), new o.ClassMethod('destroyInternal', [], this._destroyStmts)];
            var ctor = new o.ClassMethod(null, [new o.FnParam(InjectorProps.parent.name, o.importType(identifiers_1.Identifiers.Injector))], [o.SUPER_EXPR.callFn([o.variable(InjectorProps.parent.name), o.literalArr(this._entryComponentFactories.map(function (componentFactory) {
                return o.importExpr(componentFactory);
            })), o.literalArr(this._bootstrapComponentFactories.map(function (componentFactory) {
                return o.importExpr(componentFactory);
            }))]).toStmt()]);
            var injClassName = this._ngModuleMeta.type.name + "Injector";
            return new o.ClassStmt(injClassName, o.importExpr(identifiers_1.Identifiers.NgModuleInjector, [o.importType(this._ngModuleMeta.type)]), this._fields, this._getters, ctor, methods);
        };
        _InjectorBuilder.prototype._getProviderValue = function (provider) {
            var _this = this;
            var result;
            if (lang_1.isPresent(provider.useExisting)) {
                result = this._getDependency(new compile_metadata_1.CompileDiDependencyMetadata({ token: provider.useExisting }));
            } else if (lang_1.isPresent(provider.useFactory)) {
                var deps = lang_1.isPresent(provider.deps) ? provider.deps : provider.useFactory.diDeps;
                var depsExpr = deps.map(function (dep) {
                    return _this._getDependency(dep);
                });
                result = o.importExpr(provider.useFactory).callFn(depsExpr);
            } else if (lang_1.isPresent(provider.useClass)) {
                var deps = lang_1.isPresent(provider.deps) ? provider.deps : provider.useClass.diDeps;
                var depsExpr = deps.map(function (dep) {
                    return _this._getDependency(dep);
                });
                result = o.importExpr(provider.useClass).instantiate(depsExpr, o.importType(provider.useClass));
            } else {
                result = value_util_1.convertValueToOutputAst(provider.useValue);
            }
            return result;
        };
        _InjectorBuilder.prototype._createProviderProperty = function (propName, provider, providerValueExpressions, isMulti, isEager) {
            var resolvedProviderValueExpr;
            var type;
            if (isMulti) {
                resolvedProviderValueExpr = o.literalArr(providerValueExpressions);
                type = new o.ArrayType(o.DYNAMIC_TYPE);
            } else {
                resolvedProviderValueExpr = providerValueExpressions[0];
                type = providerValueExpressions[0].type;
            }
            if (lang_1.isBlank(type)) {
                type = o.DYNAMIC_TYPE;
            }
            if (isEager) {
                this._fields.push(new o.ClassField(propName, type));
                this._createStmts.push(o.THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());
            } else {
                var internalField = "_" + propName;
                this._fields.push(new o.ClassField(internalField, type));
                // Note: Equals is important for JS so that it also checks the undefined case!
                var getterStmts = [new o.IfStmt(o.THIS_EXPR.prop(internalField).isBlank(), [o.THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]), new o.ReturnStatement(o.THIS_EXPR.prop(internalField))];
                this._getters.push(new o.ClassGetter(propName, getterStmts, type));
            }
            return o.THIS_EXPR.prop(propName);
        };
        _InjectorBuilder.prototype._getDependency = function (dep) {
            var result = null;
            if (dep.isValue) {
                result = o.literal(dep.value);
            }
            if (!dep.isSkipSelf) {
                if (dep.token && (dep.token.equalsTo(identifiers_1.identifierToken(identifiers_1.Identifiers.Injector)) || dep.token.equalsTo(identifiers_1.identifierToken(identifiers_1.Identifiers.ComponentFactoryResolver)))) {
                    result = o.THIS_EXPR;
                }
                if (lang_1.isBlank(result)) {
                    result = this._instances.get(dep.token);
                }
            }
            if (lang_1.isBlank(result)) {
                var args = [util_1.createDiTokenExpression(dep.token)];
                if (dep.isOptional) {
                    args.push(o.NULL_EXPR);
                }
                result = InjectorProps.parent.callMethod('get', args);
            }
            return result;
        };
        return _InjectorBuilder;
    }();
    var InjectorProps = function () {
        function InjectorProps() {}
        InjectorProps.parent = o.THIS_EXPR.prop('parent');
        return InjectorProps;
    }();
    var InjectMethodVars = function () {
        function InjectMethodVars() {}
        InjectMethodVars.token = o.variable('token');
        InjectMethodVars.notFoundResult = o.variable('notFoundResult');
        return InjectMethodVars;
    }();
    

    return module.exports;
});
System.registerDynamic("npm:@angular/compiler@2.0.0-rc.5/src/output/path_util.js", ["../facade/exceptions", "reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var exceptions_1 = $__require("../facade/exceptions");
    // asset:<package-name>/<realm>/<path-to-module>
    var _ASSET_URL_RE = /asset:([^\/]+)\/([^\/]+)\/(.+)/;
    /**
     * Interface that defines how import statements should be generated.
     */
    var ImportGenerator = function () {
        function ImportGenerator() {}
        ImportGenerator.parseAssetUrl = function (url) {
            return AssetUrl.parse(url);
        };
        return ImportGenerator;
    }();
    exports.ImportGenerator = ImportGenerator;
    var AssetUrl = function () {
        function AssetUrl(packageName, firstLevelDir, modulePath) {
            this.packageName = packageName;
            this.firstLevelDir = firstLevelDir;
            this.modulePath = modulePath;
        }
        AssetUrl.parse = function (url, allowNonMatching) {
            if (allowNonMatching === void 0) {
                allowNonMatching = true;
            }
            var match = url.match(_ASSET_URL_RE);
            if (match !== null) {
                return new AssetUrl(match[1], match[2], match[3]);
            }
            if (allowNonMatching) {
                return null;
            }
            throw new exceptions_1.BaseException("Url " + url + " is not a valid asset: url");
        };
        return AssetUrl;
    }();
    exports.AssetUrl = AssetUrl;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/output/abstract_emitter.js', ['../facade/exceptions', '../facade/lang', './output_ast', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var exceptions_1 = $__require('../facade/exceptions');
    var lang_1 = $__require('../facade/lang');
    var o = $__require('./output_ast');
    var _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\|\n|\r|\$/g;
    exports.CATCH_ERROR_VAR = o.variable('error');
    exports.CATCH_STACK_VAR = o.variable('stack');
    var OutputEmitter = function () {
        function OutputEmitter() {}
        return OutputEmitter;
    }();
    exports.OutputEmitter = OutputEmitter;
    var _EmittedLine = function () {
        function _EmittedLine(indent) {
            this.indent = indent;
            this.parts = [];
        }
        return _EmittedLine;
    }();
    var EmitterVisitorContext = function () {
        function EmitterVisitorContext(_exportedVars, _indent) {
            this._exportedVars = _exportedVars;
            this._indent = _indent;
            this._classes = [];
            this._lines = [new _EmittedLine(_indent)];
        }
        EmitterVisitorContext.createRoot = function (exportedVars) {
            return new EmitterVisitorContext(exportedVars, 0);
        };
        Object.defineProperty(EmitterVisitorContext.prototype, "_currentLine", {
            get: function () {
                return this._lines[this._lines.length - 1];
            },
            enumerable: true,
            configurable: true
        });
        EmitterVisitorContext.prototype.isExportedVar = function (varName) {
            return this._exportedVars.indexOf(varName) !== -1;
        };
        EmitterVisitorContext.prototype.println = function (lastPart) {
            if (lastPart === void 0) {
                lastPart = '';
            }
            this.print(lastPart, true);
        };
        EmitterVisitorContext.prototype.lineIsEmpty = function () {
            return this._currentLine.parts.length === 0;
        };
        EmitterVisitorContext.prototype.print = function (part, newLine) {
            if (newLine === void 0) {
                newLine = false;
            }
            if (part.length > 0) {
                this._currentLine.parts.push(part);
            }
            if (newLine) {
                this._lines.push(new _EmittedLine(this._indent));
            }
        };
        EmitterVisitorContext.prototype.removeEmptyLastLine = function () {
            if (this.lineIsEmpty()) {
                this._lines.pop();
            }
        };
        EmitterVisitorContext.prototype.incIndent = function () {
            this._indent++;
            this._currentLine.indent = this._indent;
        };
        EmitterVisitorContext.prototype.decIndent = function () {
            this._indent--;
            this._currentLine.indent = this._indent;
        };
        EmitterVisitorContext.prototype.pushClass = function (clazz) {
            this._classes.push(clazz);
        };
        EmitterVisitorContext.prototype.popClass = function () {
            return this._classes.pop();
        };
        Object.defineProperty(EmitterVisitorContext.prototype, "currentClass", {
            get: function () {
                return this._classes.length > 0 ? this._classes[this._classes.length - 1] : null;
            },
            enumerable: true,
            configurable: true
        });
        EmitterVisitorContext.prototype.toSource = function () {
            var lines = this._lines;
            if (lines[lines.length - 1].parts.length === 0) {
                lines = lines.slice(0, lines.length - 1);
            }
            return lines.map(function (line) {
                if (line.parts.length > 0) {
                    return _createIndent(line.indent) + line.parts.join('');
                } else {
                    return '';
                }
            }).join('\n');
        };
        return EmitterVisitorContext;
    }();
    exports.EmitterVisitorContext = EmitterVisitorContext;
    var AbstractEmitterVisitor = function () {
        function AbstractEmitterVisitor(_escapeDollarInStrings) {
            this._escapeDollarInStrings = _escapeDollarInStrings;
        }
        AbstractEmitterVisitor.prototype.visitExpressionStmt = function (stmt, ctx) {
            stmt.expr.visitExpression(this, ctx);
            ctx.println(';');
            return null;
        };
        AbstractEmitterVisitor.prototype.visitReturnStmt = function (stmt, ctx) {
            ctx.print("return ");
            stmt.value.visitExpression(this, ctx);
            ctx.println(';');
            return null;
        };
        AbstractEmitterVisitor.prototype.visitIfStmt = function (stmt, ctx) {
            ctx.print("if (");
            stmt.condition.visitExpression(this, ctx);
            ctx.print(") {");
            var hasElseCase = lang_1.isPresent(stmt.falseCase) && stmt.falseCase.length > 0;
            if (stmt.trueCase.length <= 1 && !hasElseCase) {
                ctx.print(" ");
                this.visitAllStatements(stmt.trueCase, ctx);
                ctx.removeEmptyLastLine();
                ctx.print(" ");
            } else {
                ctx.println();
                ctx.incIndent();
                this.visitAllStatements(stmt.trueCase, ctx);
                ctx.decIndent();
                if (hasElseCase) {
                    ctx.println("} else {");
                    ctx.incIndent();
                    this.visitAllStatements(stmt.falseCase, ctx);
                    ctx.decIndent();
                }
            }
            ctx.println("}");
            return null;
        };
        AbstractEmitterVisitor.prototype.visitThrowStmt = function (stmt, ctx) {
            ctx.print("throw ");
            stmt.error.visitExpression(this, ctx);
            ctx.println(";");
            return null;
        };
        AbstractEmitterVisitor.prototype.visitCommentStmt = function (stmt, ctx) {
            var lines = stmt.comment.split('\n');
            lines.forEach(function (line) {
                ctx.println("// " + line);
            });
            return null;
        };
        AbstractEmitterVisitor.prototype.visitWriteVarExpr = function (expr, ctx) {
            var lineWasEmpty = ctx.lineIsEmpty();
            if (!lineWasEmpty) {
                ctx.print('(');
            }
            ctx.print(expr.name + " = ");
            expr.value.visitExpression(this, ctx);
            if (!lineWasEmpty) {
                ctx.print(')');
            }
            return null;
        };
        AbstractEmitterVisitor.prototype.visitWriteKeyExpr = function (expr, ctx) {
            var lineWasEmpty = ctx.lineIsEmpty();
            if (!lineWasEmpty) {
                ctx.print('(');
            }
            expr.receiver.visitExpression(this, ctx);
            ctx.print("[");
            expr.index.visitExpression(this, ctx);
            ctx.print("] = ");
            expr.value.visitExpression(this, ctx);
            if (!lineWasEmpty) {
                ctx.print(')');
            }
            return null;
        };
        AbstractEmitterVisitor.prototype.visitWritePropExpr = function (expr, ctx) {
            var lineWasEmpty = ctx.lineIsEmpty();
            if (!lineWasEmpty) {
                ctx.print('(');
            }
            expr.receiver.visitExpression(this, ctx);
            ctx.print("." + expr.name + " = ");
            expr.value.visitExpression(this, ctx);
            if (!lineWasEmpty) {
                ctx.print(')');
            }
            return null;
        };
        AbstractEmitterVisitor.prototype.visitInvokeMethodExpr = function (expr, ctx) {
            expr.receiver.visitExpression(this, ctx);
            var name = expr.name;
            if (lang_1.isPresent(expr.builtin)) {
                name = this.getBuiltinMethodName(expr.builtin);
                if (lang_1.isBlank(name)) {
                    // some builtins just mean to skip the call.
                    return null;
                }
            }
            ctx.print("." + name + "(");
            this.visitAllExpressions(expr.args, ctx, ",");
            ctx.print(")");
            return null;
        };
        AbstractEmitterVisitor.prototype.visitInvokeFunctionExpr = function (expr, ctx) {
            expr.fn.visitExpression(this, ctx);
            ctx.print("(");
            this.visitAllExpressions(expr.args, ctx, ',');
            ctx.print(")");
            return null;
        };
        AbstractEmitterVisitor.prototype.visitReadVarExpr = function (ast, ctx) {
            var varName = ast.name;
            if (lang_1.isPresent(ast.builtin)) {
                switch (ast.builtin) {
                    case o.BuiltinVar.Super:
                        varName = 'super';
                        break;
                    case o.BuiltinVar.This:
                        varName = 'this';
                        break;
                    case o.BuiltinVar.CatchError:
                        varName = exports.CATCH_ERROR_VAR.name;
                        break;
                    case o.BuiltinVar.CatchStack:
                        varName = exports.CATCH_STACK_VAR.name;
                        break;
                    default:
                        throw new exceptions_1.BaseException("Unknown builtin variable " + ast.builtin);
                }
            }
            ctx.print(varName);
            return null;
        };
        AbstractEmitterVisitor.prototype.visitInstantiateExpr = function (ast, ctx) {
            ctx.print("new ");
            ast.classExpr.visitExpression(this, ctx);
            ctx.print("(");
            this.visitAllExpressions(ast.args, ctx, ',');
            ctx.print(")");
            return null;
        };
        AbstractEmitterVisitor.prototype.visitLiteralExpr = function (ast, ctx) {
            var value = ast.value;
            if (lang_1.isString(value)) {
                ctx.print(escapeSingleQuoteString(value, this._escapeDollarInStrings));
            } else if (lang_1.isBlank(value)) {
                ctx.print('null');
            } else {
                ctx.print("" + value);
            }
            return null;
        };
        AbstractEmitterVisitor.prototype.visitConditionalExpr = function (ast, ctx) {
            ctx.print("(");
            ast.condition.visitExpression(this, ctx);
            ctx.print('? ');
            ast.trueCase.visitExpression(this, ctx);
            ctx.print(': ');
            ast.falseCase.visitExpression(this, ctx);
            ctx.print(")");
            return null;
        };
        AbstractEmitterVisitor.prototype.visitNotExpr = function (ast, ctx) {
            ctx.print('!');
            ast.condition.visitExpression(this, ctx);
            return null;
        };
        AbstractEmitterVisitor.prototype.visitBinaryOperatorExpr = function (ast, ctx) {
            var opStr;
            switch (ast.operator) {
                case o.BinaryOperator.Equals:
                    opStr = '==';
                    break;
                case o.BinaryOperator.Identical:
                    opStr = '===';
                    break;
                case o.BinaryOperator.NotEquals:
                    opStr = '!=';
                    break;
                case o.BinaryOperator.NotIdentical:
                    opStr = '!==';
                    break;
                case o.BinaryOperator.And:
                    opStr = '&&';
                    break;
                case o.BinaryOperator.Or:
                    opStr = '||';
                    break;
                case o.BinaryOperator.Plus:
                    opStr = '+';
                    break;
                case o.BinaryOperator.Minus:
                    opStr = '-';
                    break;
                case o.BinaryOperator.Divide:
                    opStr = '/';
                    break;
                case o.BinaryOperator.Multiply:
                    opStr = '*';
                    break;
                case o.BinaryOperator.Modulo:
                    opStr = '%';
                    break;
                case o.BinaryOperator.Lower:
                    opStr = '<';
                    break;
                case o.BinaryOperator.LowerEquals:
                    opStr = '<=';
                    break;
                case o.BinaryOperator.Bigger:
                    opStr = '>';
                    break;
                case o.BinaryOperator.BiggerEquals:
                    opStr = '>=';
                    break;
                default:
                    throw new exceptions_1.BaseException("Unknown operator " + ast.operator);
            }
            ctx.print("(");
            ast.lhs.visitExpression(this, ctx);
            ctx.print(" " + opStr + " ");
            ast.rhs.visitExpression(this, ctx);
            ctx.print(")");
            return null;
        };
        AbstractEmitterVisitor.prototype.visitReadPropExpr = function (ast, ctx) {
            ast.receiver.visitExpression(this, ctx);
            ctx.print(".");
            ctx.print(ast.name);
            return null;
        };
        AbstractEmitterVisitor.prototype.visitReadKeyExpr = function (ast, ctx) {
            ast.receiver.visitExpression(this, ctx);
            ctx.print("[");
            ast.index.visitExpression(this, ctx);
            ctx.print("]");
            return null;
        };
        AbstractEmitterVisitor.prototype.visitLiteralArrayExpr = function (ast, ctx) {
            var useNewLine = ast.entries.length > 1;
            ctx.print("[", useNewLine);
            ctx.incIndent();
            this.visitAllExpressions(ast.entries, ctx, ',', useNewLine);
            ctx.decIndent();
            ctx.print("]", useNewLine);
            return null;
        };
        AbstractEmitterVisitor.prototype.visitLiteralMapExpr = function (ast, ctx) {
            var _this = this;
            var useNewLine = ast.entries.length > 1;
            ctx.print("{", useNewLine);
            ctx.incIndent();
            this.visitAllObjects(function (entry /** TODO #9100 */) {
                ctx.print(escapeSingleQuoteString(entry[0], _this._escapeDollarInStrings) + ": ");
                entry[1].visitExpression(_this, ctx);
            }, ast.entries, ctx, ',', useNewLine);
            ctx.decIndent();
            ctx.print("}", useNewLine);
            return null;
        };
        AbstractEmitterVisitor.prototype.visitAllExpressions = function (expressions, ctx, separator, newLine) {
            var _this = this;
            if (newLine === void 0) {
                newLine = false;
            }
            this.visitAllObjects(function (expr /** TODO #9100 */) {
                return expr.visitExpression(_this, ctx);
            }, expressions, ctx, separator, newLine);
        };
        AbstractEmitterVisitor.prototype.visitAllObjects = function (handler, expressions, ctx, separator, newLine) {
            if (newLine === void 0) {
                newLine = false;
            }
            for (var i = 0; i < expressions.length; i++) {
                if (i > 0) {
                    ctx.print(separator, newLine);
                }
                handler(expressions[i]);
            }
            if (newLine) {
                ctx.println();
            }
        };
        AbstractEmitterVisitor.prototype.visitAllStatements = function (statements, ctx) {
            var _this = this;
            statements.forEach(function (stmt) {
                return stmt.visitStatement(_this, ctx);
            });
        };
        return AbstractEmitterVisitor;
    }();
    exports.AbstractEmitterVisitor = AbstractEmitterVisitor;
    function escapeSingleQuoteString(input, escapeDollar) {
        if (lang_1.isBlank(input)) {
            return null;
        }
        var body = lang_1.StringWrapper.replaceAllMapped(input, _SINGLE_QUOTE_ESCAPE_STRING_RE, function (match /** TODO #9100 */) {
            if (match[0] == '$') {
                return escapeDollar ? '\\$' : '$';
            } else if (match[0] == '\n') {
                return '\\n';
            } else if (match[0] == '\r') {
                return '\\r';
            } else {
                return "\\" + match[0];
            }
        });
        return "'" + body + "'";
    }
    exports.escapeSingleQuoteString = escapeSingleQuoteString;
    function _createIndent(count) {
        var res = '';
        for (var i = 0; i < count; i++) {
            res += '  ';
        }
        return res;
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/output/ts_emitter.js', ['../facade/exceptions', '../facade/lang', './abstract_emitter', './output_ast', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var exceptions_1 = $__require('../facade/exceptions');
    var lang_1 = $__require('../facade/lang');
    var abstract_emitter_1 = $__require('./abstract_emitter');
    var o = $__require('./output_ast');
    var _debugModuleUrl = 'asset://debug/lib';
    function debugOutputAstAsTypeScript(ast) {
        var converter = new _TsEmitterVisitor(_debugModuleUrl);
        var ctx = abstract_emitter_1.EmitterVisitorContext.createRoot([]);
        var asts;
        if (lang_1.isArray(ast)) {
            asts = ast;
        } else {
            asts = [ast];
        }
        asts.forEach(function (ast) {
            if (ast instanceof o.Statement) {
                ast.visitStatement(converter, ctx);
            } else if (ast instanceof o.Expression) {
                ast.visitExpression(converter, ctx);
            } else if (ast instanceof o.Type) {
                ast.visitType(converter, ctx);
            } else {
                throw new exceptions_1.BaseException("Don't know how to print debug info for " + ast);
            }
        });
        return ctx.toSource();
    }
    exports.debugOutputAstAsTypeScript = debugOutputAstAsTypeScript;
    var TypeScriptEmitter = function () {
        function TypeScriptEmitter(_importGenerator) {
            this._importGenerator = _importGenerator;
        }
        TypeScriptEmitter.prototype.emitStatements = function (moduleUrl, stmts, exportedVars) {
            var _this = this;
            var converter = new _TsEmitterVisitor(moduleUrl);
            var ctx = abstract_emitter_1.EmitterVisitorContext.createRoot(exportedVars);
            converter.visitAllStatements(stmts, ctx);
            var srcParts = [];
            converter.importsWithPrefixes.forEach(function (prefix, importedModuleUrl) {
                // Note: can't write the real word for import as it screws up system.js auto detection...
                srcParts.push("imp" + ("ort * as " + prefix + " from '" + _this._importGenerator.getImportPath(moduleUrl, importedModuleUrl) + "';"));
            });
            srcParts.push(ctx.toSource());
            return srcParts.join('\n');
        };
        return TypeScriptEmitter;
    }();
    exports.TypeScriptEmitter = TypeScriptEmitter;
    var _TsEmitterVisitor = function (_super) {
        __extends(_TsEmitterVisitor, _super);
        function _TsEmitterVisitor(_moduleUrl) {
            _super.call(this, false);
            this._moduleUrl = _moduleUrl;
            this.importsWithPrefixes = new Map();
        }
        _TsEmitterVisitor.prototype.visitType = function (t, ctx, defaultType) {
            if (defaultType === void 0) {
                defaultType = 'any';
            }
            if (lang_1.isPresent(t)) {
                t.visitType(this, ctx);
            } else {
                ctx.print(defaultType);
            }
        };
        _TsEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) {
            this._visitIdentifier(ast.value, ast.typeParams, ctx);
            return null;
        };
        _TsEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) {
            if (ctx.isExportedVar(stmt.name)) {
                ctx.print("export ");
            }
            if (stmt.hasModifier(o.StmtModifier.Final)) {
                ctx.print("const");
            } else {
                ctx.print("var");
            }
            ctx.print(" " + stmt.name + ":");
            this.visitType(stmt.type, ctx);
            ctx.print(" = ");
            stmt.value.visitExpression(this, ctx);
            ctx.println(";");
            return null;
        };
        _TsEmitterVisitor.prototype.visitCastExpr = function (ast, ctx) {
            ctx.print("(<");
            ast.type.visitType(this, ctx);
            ctx.print(">");
            ast.value.visitExpression(this, ctx);
            ctx.print(")");
            return null;
        };
        _TsEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) {
            var _this = this;
            ctx.pushClass(stmt);
            if (ctx.isExportedVar(stmt.name)) {
                ctx.print("export ");
            }
            ctx.print("class " + stmt.name);
            if (lang_1.isPresent(stmt.parent)) {
                ctx.print(" extends ");
                stmt.parent.visitExpression(this, ctx);
            }
            ctx.println(" {");
            ctx.incIndent();
            stmt.fields.forEach(function (field) {
                return _this._visitClassField(field, ctx);
            });
            if (lang_1.isPresent(stmt.constructorMethod)) {
                this._visitClassConstructor(stmt, ctx);
            }
            stmt.getters.forEach(function (getter) {
                return _this._visitClassGetter(getter, ctx);
            });
            stmt.methods.forEach(function (method) {
                return _this._visitClassMethod(method, ctx);
            });
            ctx.decIndent();
            ctx.println("}");
            ctx.popClass();
            return null;
        };
        _TsEmitterVisitor.prototype._visitClassField = function (field, ctx) {
            if (field.hasModifier(o.StmtModifier.Private)) {
                ctx.print("private ");
            }
            ctx.print(field.name);
            ctx.print(':');
            this.visitType(field.type, ctx);
            ctx.println(";");
        };
        _TsEmitterVisitor.prototype._visitClassGetter = function (getter, ctx) {
            if (getter.hasModifier(o.StmtModifier.Private)) {
                ctx.print("private ");
            }
            ctx.print("get " + getter.name + "()");
            ctx.print(':');
            this.visitType(getter.type, ctx);
            ctx.println(" {");
            ctx.incIndent();
            this.visitAllStatements(getter.body, ctx);
            ctx.decIndent();
            ctx.println("}");
        };
        _TsEmitterVisitor.prototype._visitClassConstructor = function (stmt, ctx) {
            ctx.print("constructor(");
            this._visitParams(stmt.constructorMethod.params, ctx);
            ctx.println(") {");
            ctx.incIndent();
            this.visitAllStatements(stmt.constructorMethod.body, ctx);
            ctx.decIndent();
            ctx.println("}");
        };
        _TsEmitterVisitor.prototype._visitClassMethod = function (method, ctx) {
            if (method.hasModifier(o.StmtModifier.Private)) {
                ctx.print("private ");
            }
            ctx.print(method.name + "(");
            this._visitParams(method.params, ctx);
            ctx.print("):");
            this.visitType(method.type, ctx, 'void');
            ctx.println(" {");
            ctx.incIndent();
            this.visitAllStatements(method.body, ctx);
            ctx.decIndent();
            ctx.println("}");
        };
        _TsEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) {
            ctx.print("(");
            this._visitParams(ast.params, ctx);
            ctx.print("):");
            this.visitType(ast.type, ctx, 'void');
            ctx.println(" => {");
            ctx.incIndent();
            this.visitAllStatements(ast.statements, ctx);
            ctx.decIndent();
            ctx.print("}");
            return null;
        };
        _TsEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {
            if (ctx.isExportedVar(stmt.name)) {
                ctx.print("export ");
            }
            ctx.print("function " + stmt.name + "(");
            this._visitParams(stmt.params, ctx);
            ctx.print("):");
            this.visitType(stmt.type, ctx, 'void');
            ctx.println(" {");
            ctx.incIndent();
            this.visitAllStatements(stmt.statements, ctx);
            ctx.decIndent();
            ctx.println("}");
            return null;
        };
        _TsEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) {
            ctx.println("try {");
            ctx.incIndent();
            this.visitAllStatements(stmt.bodyStmts, ctx);
            ctx.decIndent();
            ctx.println("} catch (" + abstract_emitter_1.CATCH_ERROR_VAR.name + ") {");
            ctx.incIndent();
            var catchStmts = [abstract_emitter_1.CATCH_STACK_VAR.set(abstract_emitter_1.CATCH_ERROR_VAR.prop('stack')).toDeclStmt(null, [o.StmtModifier.Final])].concat(stmt.catchStmts);
            this.visitAllStatements(catchStmts, ctx);
            ctx.decIndent();
            ctx.println("}");
            return null;
        };
        _TsEmitterVisitor.prototype.visitBuiltintType = function (type, ctx) {
            var typeStr;
            switch (type.name) {
                case o.BuiltinTypeName.Bool:
                    typeStr = 'boolean';
                    break;
                case o.BuiltinTypeName.Dynamic:
                    typeStr = 'any';
                    break;
                case o.BuiltinTypeName.Function:
                    typeStr = 'Function';
                    break;
                case o.BuiltinTypeName.Number:
                    typeStr = 'number';
                    break;
                case o.BuiltinTypeName.Int:
                    typeStr = 'number';
                    break;
                case o.BuiltinTypeName.String:
                    typeStr = 'string';
                    break;
                default:
                    throw new exceptions_1.BaseException("Unsupported builtin type " + type.name);
            }
            ctx.print(typeStr);
            return null;
        };
        _TsEmitterVisitor.prototype.visitExternalType = function (ast, ctx) {
            this._visitIdentifier(ast.value, ast.typeParams, ctx);
            return null;
        };
        _TsEmitterVisitor.prototype.visitArrayType = function (type, ctx) {
            this.visitType(type.of, ctx);
            ctx.print("[]");
            return null;
        };
        _TsEmitterVisitor.prototype.visitMapType = function (type, ctx) {
            ctx.print("{[key: string]:");
            this.visitType(type.valueType, ctx);
            ctx.print("}");
            return null;
        };
        _TsEmitterVisitor.prototype.getBuiltinMethodName = function (method) {
            var name;
            switch (method) {
                case o.BuiltinMethod.ConcatArray:
                    name = 'concat';
                    break;
                case o.BuiltinMethod.SubscribeObservable:
                    name = 'subscribe';
                    break;
                case o.BuiltinMethod.bind:
                    name = 'bind';
                    break;
                default:
                    throw new exceptions_1.BaseException("Unknown builtin method: " + method);
            }
            return name;
        };
        _TsEmitterVisitor.prototype._visitParams = function (params, ctx) {
            var _this = this;
            this.visitAllObjects(function (param /** TODO #9100 */) {
                ctx.print(param.name);
                ctx.print(':');
                _this.visitType(param.type, ctx);
            }, params, ctx, ',');
        };
        _TsEmitterVisitor.prototype._visitIdentifier = function (value, typeParams, ctx) {
            var _this = this;
            if (lang_1.isBlank(value.name)) {
                throw new exceptions_1.BaseException("Internal error: unknown identifier " + value);
            }
            if (lang_1.isPresent(value.moduleUrl) && value.moduleUrl != this._moduleUrl) {
                var prefix = this.importsWithPrefixes.get(value.moduleUrl);
                if (lang_1.isBlank(prefix)) {
                    prefix = "import" + this.importsWithPrefixes.size;
                    this.importsWithPrefixes.set(value.moduleUrl, prefix);
                }
                ctx.print(prefix + ".");
            }
            ctx.print(value.name);
            if (lang_1.isPresent(typeParams) && typeParams.length > 0) {
                ctx.print("<");
                this.visitAllObjects(function (type /** TODO #9100 */) {
                    return type.visitType(_this, ctx);
                }, typeParams, ctx, ',');
                ctx.print(">");
            }
        };
        return _TsEmitterVisitor;
    }(abstract_emitter_1.AbstractEmitterVisitor);
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/schema/dom_security_schema.js', ['@angular/core', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    // =================================================================================================
    // =================================================================================================
    // =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========
    // =================================================================================================
    // =================================================================================================
    //
    //        DO NOT EDIT THIS LIST OF SECURITY SENSITIVE PROPERTIES WITHOUT A SECURITY REVIEW!
    //                               Reach out to mprobst for details.
    //
    // =================================================================================================
    /** Map from tagName|propertyName SecurityContext. Properties applying to all tags use '*'. */
    exports.SECURITY_SCHEMA = {};
    function registerContext(ctx, specs) {
        for (var _i = 0, specs_1 = specs; _i < specs_1.length; _i++) {
            var spec = specs_1[_i];
            exports.SECURITY_SCHEMA[spec.toLowerCase()] = ctx;
        }
    }
    // Case is insignificant below, all element and attribute names are lower-cased for lookup.
    registerContext(core_1.SecurityContext.HTML, ['iframe|srcdoc', '*|innerHTML', '*|outerHTML']);
    registerContext(core_1.SecurityContext.STYLE, ['*|style']);
    // NB: no SCRIPT contexts here, they are never allowed due to the parser stripping them.
    registerContext(core_1.SecurityContext.URL, ['*|formAction', 'area|href', 'area|ping', 'audio|src', 'a|href', 'a|ping', 'blockquote|cite', 'body|background', 'del|cite', 'form|action', 'img|src', 'img|srcset', 'input|src', 'ins|cite', 'q|cite', 'source|src', 'source|srcset', 'track|src', 'video|poster', 'video|src']);
    registerContext(core_1.SecurityContext.RESOURCE_URL, ['applet|code', 'applet|codebase', 'base|href', 'embed|src', 'frame|src', 'head|profile', 'html|manifest', 'iframe|src', 'link|href', 'media|src', 'object|codebase', 'object|data', 'script|src']);
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/schema/dom_element_schema_registry.js', ['@angular/core', '../facade/collection', '../facade/lang', './dom_security_schema', './element_schema_registry', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var core_1 = $__require('@angular/core');
    var collection_1 = $__require('../facade/collection');
    var lang_1 = $__require('../facade/lang');
    var dom_security_schema_1 = $__require('./dom_security_schema');
    var element_schema_registry_1 = $__require('./element_schema_registry');
    var EVENT = 'event';
    var BOOLEAN = 'boolean';
    var NUMBER = 'number';
    var STRING = 'string';
    var OBJECT = 'object';
    /**
     * This array represents the DOM schema. It encodes inheritance, properties, and events.
     *
     * ## Overview
     *
     * Each line represents one kind of element. The `element_inheritance` and properties are joined
     * using `element_inheritance|preperties` syntax.
     *
     * ## Element Inheritance
     *
     * The `element_inheritance` can be further subdivided as `element1,element2,...^parentElement`.
     * Here the individual elements are separated by `,` (commas). Every element in the list
     * has identical properties.
     *
     * An `element` may inherit additional properties from `parentElement` If no `^parentElement` is
     * specified then `""` (blank) element is assumed.
     *
     * NOTE: The blank element inherits from root `*` element, the super element of all elements.
     *
     * NOTE an element prefix such as `:svg:` has no special meaning to the schema.
     *
     * ## Properties
     *
     * Each element has a set of properties separated by `,` (commas). Each property can be prefixed
     * by a special character designating its type:
     *
     * - (no prefix): property is a string.
     * - `*`: property represents an event.
     * - `!`: property is a boolean.
     * - `#`: property is a number.
     * - `%`: property is an object.
     *
     * ## Query
     *
     * The class creates an internal squas representaino which allows to easily answer the query of
     * if a given property exist on a given element.
     *
     * NOTE: We don't yet support querying for types or events.
     * NOTE: This schema is auto extracted from `schema_extractor.ts` located in the test folder,
     *       see dom_element_schema_registry_spec.ts
     */
    // =================================================================================================
    // =================================================================================================
    // =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========
    // =================================================================================================
    // =================================================================================================
    //
    //                       DO NOT EDIT THIS DOM SCHEMA WITHOUT A SECURITY REVIEW!
    //
    // Newly added properties must be security reviewed and assigned an appropriate SecurityContext in
    // dom_security_schema.ts. Reach out to mprobst & rjamet for details.
    //
    // =================================================================================================
    var SCHEMA = ['*|textContent,%classList,className,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*copy,*cut,*paste,*search,*selectstart,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerHTML,#scrollLeft,#scrollTop', '^*|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*autocomplete,*autocompleteerror,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate', 'media|!autoplay,!controls,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,#playbackRate,preload,src,#volume', ':svg:^*|*abort,*autocomplete,*autocompleteerror,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,%style,#tabIndex', ':svg:graphics^:svg:|', ':svg:animation^:svg:|*begin,*end,*repeat', ':svg:geometry^:svg:|', ':svg:componentTransferFunction^:svg:|', ':svg:gradient^:svg:|', ':svg:textContent^:svg:graphics|', ':svg:textPositioning^:svg:textContent|', 'a|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerpolicy,rel,rev,search,shape,target,text,type,username', 'area|alt,coords,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerpolicy,search,shape,target,username', 'audio^media|', 'br|clear', 'base|href,target', 'body|aLink,background,bgColor,link,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink', 'button|!autofocus,!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value', 'canvas|#height,#width', 'content|select', 'dl|!compact', 'datalist|', 'details|!open', 'dialog|!open,returnValue', 'dir|!compact', 'div|align', 'embed|align,height,name,src,type,width', 'fieldset|!disabled,name', 'font|color,face,size', 'form|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target', 'frame|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src', 'frameset|cols,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows', 'hr|align,color,!noShade,size,width', 'head|', 'h1,h2,h3,h4,h5,h6|align', 'html|version', 'iframe|align,!allowFullscreen,frameBorder,height,longDesc,marginHeight,marginWidth,name,referrerpolicy,%sandbox,scrolling,src,srcdoc,width', 'img|align,alt,border,%crossOrigin,#height,#hspace,!isMap,longDesc,lowsrc,name,referrerpolicy,sizes,src,srcset,useMap,#vspace,#width', 'input|accept,align,alt,autocapitalize,autocomplete,!autofocus,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width', 'keygen|!autofocus,challenge,!disabled,keytype,name', 'li|type,#value', 'label|htmlFor', 'legend|align', 'link|as,charset,%crossOrigin,!disabled,href,hreflang,integrity,media,rel,%relList,rev,%sizes,target,type', 'map|name', 'marquee|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width', 'menu|!compact', 'meta|content,httpEquiv,name,scheme', 'meter|#high,#low,#max,#min,#optimum,#value', 'ins,del|cite,dateTime', 'ol|!compact,!reversed,#start,type', 'object|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width', 'optgroup|!disabled,label', 'option|!defaultSelected,!disabled,label,!selected,text,value', 'output|defaultValue,%htmlFor,name,value', 'p|align', 'param|name,type,value,valueType', 'picture|', 'pre|#width', 'progress|#max,#value', 'q,blockquote,cite|', 'script|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,src,text,type', 'select|!autofocus,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value', 'shadow|', 'source|media,sizes,src,srcset,type', 'span|', 'style|!disabled,media,type', 'caption|align', 'th,td|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width', 'col,colgroup|align,ch,chOff,#span,vAlign,width', 'table|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width', 'tr|align,bgColor,ch,chOff,vAlign', 'tfoot,thead,tbody|align,ch,chOff,vAlign', 'template|', 'textarea|autocapitalize,!autofocus,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap', 'title|text', 'track|!default,kind,label,src,srclang', 'ul|!compact,type', 'unknown|', 'video^media|#height,poster,#width', ':svg:a^:svg:graphics|', ':svg:animate^:svg:animation|', ':svg:animateMotion^:svg:animation|', ':svg:animateTransform^:svg:animation|', ':svg:circle^:svg:geometry|', ':svg:clipPath^:svg:graphics|', ':svg:cursor^:svg:|', ':svg:defs^:svg:graphics|', ':svg:desc^:svg:|', ':svg:discard^:svg:|', ':svg:ellipse^:svg:geometry|', ':svg:feBlend^:svg:|', ':svg:feColorMatrix^:svg:|', ':svg:feComponentTransfer^:svg:|', ':svg:feComposite^:svg:|', ':svg:feConvolveMatrix^:svg:|', ':svg:feDiffuseLighting^:svg:|', ':svg:feDisplacementMap^:svg:|', ':svg:feDistantLight^:svg:|', ':svg:feDropShadow^:svg:|', ':svg:feFlood^:svg:|', ':svg:feFuncA^:svg:componentTransferFunction|', ':svg:feFuncB^:svg:componentTransferFunction|', ':svg:feFuncG^:svg:componentTransferFunction|', ':svg:feFuncR^:svg:componentTransferFunction|', ':svg:feGaussianBlur^:svg:|', ':svg:feImage^:svg:|', ':svg:feMerge^:svg:|', ':svg:feMergeNode^:svg:|', ':svg:feMorphology^:svg:|', ':svg:feOffset^:svg:|', ':svg:fePointLight^:svg:|', ':svg:feSpecularLighting^:svg:|', ':svg:feSpotLight^:svg:|', ':svg:feTile^:svg:|', ':svg:feTurbulence^:svg:|', ':svg:filter^:svg:|', ':svg:foreignObject^:svg:graphics|', ':svg:g^:svg:graphics|', ':svg:image^:svg:graphics|', ':svg:line^:svg:geometry|', ':svg:linearGradient^:svg:gradient|', ':svg:mpath^:svg:|', ':svg:marker^:svg:|', ':svg:mask^:svg:|', ':svg:metadata^:svg:|', ':svg:path^:svg:geometry|', ':svg:pattern^:svg:|', ':svg:polygon^:svg:geometry|', ':svg:polyline^:svg:geometry|', ':svg:radialGradient^:svg:gradient|', ':svg:rect^:svg:geometry|', ':svg:svg^:svg:graphics|#currentScale,#zoomAndPan', ':svg:script^:svg:|type', ':svg:set^:svg:animation|', ':svg:stop^:svg:|', ':svg:style^:svg:|!disabled,media,title,type', ':svg:switch^:svg:graphics|', ':svg:symbol^:svg:|', ':svg:tspan^:svg:textPositioning|', ':svg:text^:svg:textPositioning|', ':svg:textPath^:svg:textContent|', ':svg:title^:svg:|', ':svg:use^:svg:graphics|', ':svg:view^:svg:|#zoomAndPan'];
    var attrToPropMap = {
        'class': 'className',
        'formaction': 'formAction',
        'innerHtml': 'innerHTML',
        'readonly': 'readOnly',
        'tabindex': 'tabIndex'
    };
    var DomElementSchemaRegistry = function (_super) {
        __extends(DomElementSchemaRegistry, _super);
        function DomElementSchemaRegistry() {
            var _this = this;
            _super.call(this);
            this.schema = {};
            SCHEMA.forEach(function (encodedType) {
                var parts = encodedType.split('|');
                var properties = parts[1].split(',');
                var typeParts = (parts[0] + '^').split('^');
                var typeName = typeParts[0];
                var type = {};
                typeName.split(',').forEach(function (tag) {
                    return _this.schema[tag] = type;
                });
                var superType = _this.schema[typeParts[1]];
                if (lang_1.isPresent(superType)) {
                    collection_1.StringMapWrapper.forEach(superType, function (v /** TODO #9100 */, k /** TODO #9100 */) {
                        return type[k] = v;
                    });
                }
                properties.forEach(function (property) {
                    if (property == '') {} else if (property.startsWith('*')) {} else if (property.startsWith('!')) {
                        type[property.substring(1)] = BOOLEAN;
                    } else if (property.startsWith('#')) {
                        type[property.substring(1)] = NUMBER;
                    } else if (property.startsWith('%')) {
                        type[property.substring(1)] = OBJECT;
                    } else {
                        type[property] = STRING;
                    }
                });
            });
        }
        DomElementSchemaRegistry.prototype.hasProperty = function (tagName, propName, schemaMetas) {
            if (tagName.indexOf('-') !== -1) {
                if (tagName === 'ng-container' || tagName === 'ng-content') {
                    return false;
                }
                if (schemaMetas.some(function (schema) {
                    return schema.name === core_1.CUSTOM_ELEMENTS_SCHEMA.name;
                })) {
                    // Can't tell now as we don't know which properties a custom element will get
                    // once it is instantiated
                    return true;
                }
            }
            var elementProperties = this.schema[tagName.toLowerCase()];
            if (!lang_1.isPresent(elementProperties)) {
                elementProperties = this.schema['unknown'];
            }
            return lang_1.isPresent(elementProperties[propName]);
        };
        /**
         * securityContext returns the security context for the given property on the given DOM tag.
         *
         * Tag and property name are statically known and cannot change at runtime, i.e. it is not
         * possible to bind a value into a changing attribute or tag name.
         *
         * The filtering is white list based. All attributes in the schema above are assumed to have the
         * 'NONE' security context, i.e. that they are safe inert string values. Only specific well known
         * attack vectors are assigned their appropriate context.
         */
        DomElementSchemaRegistry.prototype.securityContext = function (tagName, propName) {
            // Make sure comparisons are case insensitive, so that case differences between attribute and
            // property names do not have a security impact.
            tagName = tagName.toLowerCase();
            propName = propName.toLowerCase();
            var ctx = dom_security_schema_1.SECURITY_SCHEMA[tagName + '|' + propName];
            if (ctx !== undefined) return ctx;
            ctx = dom_security_schema_1.SECURITY_SCHEMA['*|' + propName];
            return ctx !== undefined ? ctx : core_1.SecurityContext.NONE;
        };
        DomElementSchemaRegistry.prototype.getMappedPropName = function (propName) {
            var mappedPropName = collection_1.StringMapWrapper.get(attrToPropMap, propName);
            return lang_1.isPresent(mappedPropName) ? mappedPropName : propName;
        };
        DomElementSchemaRegistry.prototype.getDefaultComponentElementName = function () {
            return 'ng-component';
        };
        /** @nocollapse */
        DomElementSchemaRegistry.decorators = [{ type: core_1.Injectable }];
        /** @nocollapse */
        DomElementSchemaRegistry.ctorParameters = [];
        return DomElementSchemaRegistry;
    }(element_schema_registry_1.ElementSchemaRegistry);
    exports.DomElementSchemaRegistry = DomElementSchemaRegistry;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/shadow_css.js', ['./facade/collection', './facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var collection_1 = $__require('./facade/collection');
    var lang_1 = $__require('./facade/lang');
    /**
     * This file is a port of shadowCSS from webcomponents.js to TypeScript.
     *
     * Please make sure to keep to edits in sync with the source file.
     *
     * Source:
     * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js
     *
     * The original file level comment is reproduced below
     */
    /*
      This is a limited shim for ShadowDOM css styling.
      https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#styles
    
      The intention here is to support only the styling features which can be
      relatively simply implemented. The goal is to allow users to avoid the
      most obvious pitfalls and do so without compromising performance significantly.
      For ShadowDOM styling that's not covered here, a set of best practices
      can be provided that should allow users to accomplish more complex styling.
    
      The following is a list of specific ShadowDOM styling features and a brief
      discussion of the approach used to shim.
    
      Shimmed features:
    
      * :host, :host-context: ShadowDOM allows styling of the shadowRoot's host
      element using the :host rule. To shim this feature, the :host styles are
      reformatted and prefixed with a given scope name and promoted to a
      document level stylesheet.
      For example, given a scope name of .foo, a rule like this:
    
        :host {
            background: red;
          }
        }
    
      becomes:
    
        .foo {
          background: red;
        }
    
      * encapsultion: Styles defined within ShadowDOM, apply only to
      dom inside the ShadowDOM. Polymer uses one of two techniques to implement
      this feature.
    
      By default, rules are prefixed with the host element tag name
      as a descendant selector. This ensures styling does not leak out of the 'top'
      of the element's ShadowDOM. For example,
    
      div {
          font-weight: bold;
        }
    
      becomes:
    
      x-foo div {
          font-weight: bold;
        }
    
      becomes:
    
    
      Alternatively, if WebComponents.ShadowCSS.strictStyling is set to true then
      selectors are scoped by adding an attribute selector suffix to each
      simple selector that contains the host element tag name. Each element
      in the element's ShadowDOM template is also given the scope attribute.
      Thus, these rules match only elements that have the scope attribute.
      For example, given a scope name of x-foo, a rule like this:
    
        div {
          font-weight: bold;
        }
    
      becomes:
    
        div[x-foo] {
          font-weight: bold;
        }
    
      Note that elements that are dynamically added to a scope must have the scope
      selector added to them manually.
    
      * upper/lower bound encapsulation: Styles which are defined outside a
      shadowRoot should not cross the ShadowDOM boundary and should not apply
      inside a shadowRoot.
    
      This styling behavior is not emulated. Some possible ways to do this that
      were rejected due to complexity and/or performance concerns include: (1) reset
      every possible property for every possible selector for a given scope name;
      (2) re-implement css in javascript.
    
      As an alternative, users should make sure to use selectors
      specific to the scope in which they are working.
    
      * ::distributed: This behavior is not emulated. It's often not necessary
      to style the contents of a specific insertion point and instead, descendants
      of the host element can be styled selectively. Users can also create an
      extra node around an insertion point and style that node's contents
      via descendent selectors. For example, with a shadowRoot like this:
    
        <style>
          ::content(div) {
            background: red;
          }
        </style>
        <content></content>
    
      could become:
    
        <style>
          / *@polyfill .content-container div * /
          ::content(div) {
            background: red;
          }
        </style>
        <div class="content-container">
          <content></content>
        </div>
    
      Note the use of @polyfill in the comment above a ShadowDOM specific style
      declaration. This is a directive to the styling shim to use the selector
      in comments in lieu of the next selector when running under polyfill.
    */
    var ShadowCss = function () {
        function ShadowCss() {
            this.strictStyling = true;
        }
        /*
        * Shim some cssText with the given selector. Returns cssText that can
        * be included in the document via WebComponents.ShadowCSS.addCssToDocument(css).
        *
        * When strictStyling is true:
        * - selector is the attribute added to all elements inside the host,
        * - hostSelector is the attribute added to the host itself.
        */
        ShadowCss.prototype.shimCssText = function (cssText, selector, hostSelector) {
            if (hostSelector === void 0) {
                hostSelector = '';
            }
            cssText = stripComments(cssText);
            cssText = this._insertDirectives(cssText);
            return this._scopeCssText(cssText, selector, hostSelector);
        };
        ShadowCss.prototype._insertDirectives = function (cssText) {
            cssText = this._insertPolyfillDirectivesInCssText(cssText);
            return this._insertPolyfillRulesInCssText(cssText);
        };
        /*
         * Process styles to convert native ShadowDOM rules that will trip
         * up the css parser; we rely on decorating the stylesheet with inert rules.
         *
         * For example, we convert this rule:
         *
         * polyfill-next-selector { content: ':host menu-item'; }
         * ::content menu-item {
         *
         * to this:
         *
         * scopeName menu-item {
         *
        **/
        ShadowCss.prototype._insertPolyfillDirectivesInCssText = function (cssText) {
            // Difference with webcomponents.js: does not handle comments
            return lang_1.StringWrapper.replaceAllMapped(cssText, _cssContentNextSelectorRe, function (m /** TODO #9100 */) {
                return m[1] + '{';
            });
        };
        /*
         * Process styles to add rules which will only apply under the polyfill
         *
         * For example, we convert this rule:
         *
         * polyfill-rule {
         *   content: ':host menu-item';
         * ...
         * }
         *
         * to this:
         *
         * scopeName menu-item {...}
         *
        **/
        ShadowCss.prototype._insertPolyfillRulesInCssText = function (cssText) {
            // Difference with webcomponents.js: does not handle comments
            return lang_1.StringWrapper.replaceAllMapped(cssText, _cssContentRuleRe, function (m /** TODO #9100 */) {
                var rule = m[0];
                rule = lang_1.StringWrapper.replace(rule, m[1], '');
                rule = lang_1.StringWrapper.replace(rule, m[2], '');
                return m[3] + rule;
            });
        };
        /* Ensure styles are scoped. Pseudo-scoping takes a rule like:
         *
         *  .foo {... }
         *
         *  and converts this to
         *
         *  scopeName .foo { ... }
        */
        ShadowCss.prototype._scopeCssText = function (cssText, scopeSelector, hostSelector) {
            var unscoped = this._extractUnscopedRulesFromCssText(cssText);
            cssText = this._insertPolyfillHostInCssText(cssText);
            cssText = this._convertColonHost(cssText);
            cssText = this._convertColonHostContext(cssText);
            cssText = this._convertShadowDOMSelectors(cssText);
            if (lang_1.isPresent(scopeSelector)) {
                cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);
            }
            cssText = cssText + '\n' + unscoped;
            return cssText.trim();
        };
        /*
         * Process styles to add rules which will only apply under the polyfill
         * and do not process via CSSOM. (CSSOM is destructive to rules on rare
         * occasions, e.g. -webkit-calc on Safari.)
         * For example, we convert this rule:
         *
         * @polyfill-unscoped-rule {
         *   content: 'menu-item';
         * ... }
         *
         * to this:
         *
         * menu-item {...}
         *
        **/
        ShadowCss.prototype._extractUnscopedRulesFromCssText = function (cssText) {
            // Difference with webcomponents.js: does not handle comments
            var r = '',
                m;
            _cssContentUnscopedRuleRe.lastIndex = 0;
            while ((m = _cssContentUnscopedRuleRe.exec(cssText)) !== null) {
                var rule = m[0];
                rule = lang_1.StringWrapper.replace(rule, m[2], '');
                rule = lang_1.StringWrapper.replace(rule, m[1], m[3]);
                r += rule + '\n\n';
            }
            return r;
        };
        /*
         * convert a rule like :host(.foo) > .bar { }
         *
         * to
         *
         * scopeName.foo > .bar
        */
        ShadowCss.prototype._convertColonHost = function (cssText) {
            return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);
        };
        /*
         * convert a rule like :host-context(.foo) > .bar { }
         *
         * to
         *
         * scopeName.foo > .bar, .foo scopeName > .bar { }
         *
         * and
         *
         * :host-context(.foo:host) .bar { ... }
         *
         * to
         *
         * scopeName.foo .bar { ... }
        */
        ShadowCss.prototype._convertColonHostContext = function (cssText) {
            return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);
        };
        ShadowCss.prototype._convertColonRule = function (cssText, regExp, partReplacer) {
            // p1 = :host, p2 = contents of (), p3 rest of rule
            return lang_1.StringWrapper.replaceAllMapped(cssText, regExp, function (m /** TODO #9100 */) {
                if (lang_1.isPresent(m[2])) {
                    var parts = m[2].split(','),
                        r = [];
                    for (var i = 0; i < parts.length; i++) {
                        var p = parts[i];
                        if (lang_1.isBlank(p)) break;
                        p = p.trim();
                        r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));
                    }
                    return r.join(',');
                } else {
                    return _polyfillHostNoCombinator + m[3];
                }
            });
        };
        ShadowCss.prototype._colonHostContextPartReplacer = function (host, part, suffix) {
            if (lang_1.StringWrapper.contains(part, _polyfillHost)) {
                return this._colonHostPartReplacer(host, part, suffix);
            } else {
                return host + part + suffix + ', ' + part + ' ' + host + suffix;
            }
        };
        ShadowCss.prototype._colonHostPartReplacer = function (host, part, suffix) {
            return host + lang_1.StringWrapper.replace(part, _polyfillHost, '') + suffix;
        };
        /*
         * Convert combinators like ::shadow and pseudo-elements like ::content
         * by replacing with space.
        */
        ShadowCss.prototype._convertShadowDOMSelectors = function (cssText) {
            for (var i = 0; i < _shadowDOMSelectorsRe.length; i++) {
                cssText = lang_1.StringWrapper.replaceAll(cssText, _shadowDOMSelectorsRe[i], ' ');
            }
            return cssText;
        };
        // change a selector like 'div' to 'name div'
        ShadowCss.prototype._scopeSelectors = function (cssText, scopeSelector, hostSelector) {
            var _this = this;
            return processRules(cssText, function (rule) {
                var selector = rule.selector;
                var content = rule.content;
                if (rule.selector[0] != '@' || rule.selector.startsWith('@page')) {
                    selector = _this._scopeSelector(rule.selector, scopeSelector, hostSelector, _this.strictStyling);
                } else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports')) {
                    content = _this._scopeSelectors(rule.content, scopeSelector, hostSelector);
                }
                return new CssRule(selector, content);
            });
        };
        ShadowCss.prototype._scopeSelector = function (selector, scopeSelector, hostSelector, strict) {
            var r = [],
                parts = selector.split(',');
            for (var i = 0; i < parts.length; i++) {
                var p = parts[i].trim();
                var deepParts = lang_1.StringWrapper.split(p, _shadowDeepSelectors);
                var shallowPart = deepParts[0];
                if (this._selectorNeedsScoping(shallowPart, scopeSelector)) {
                    deepParts[0] = strict && !lang_1.StringWrapper.contains(shallowPart, _polyfillHostNoCombinator) ? this._applyStrictSelectorScope(shallowPart, scopeSelector) : this._applySelectorScope(shallowPart, scopeSelector, hostSelector);
                }
                // replace /deep/ with a space for child selectors
                r.push(deepParts.join(' '));
            }
            return r.join(', ');
        };
        ShadowCss.prototype._selectorNeedsScoping = function (selector, scopeSelector) {
            var re = this._makeScopeMatcher(scopeSelector);
            return !re.test(selector);
        };
        ShadowCss.prototype._makeScopeMatcher = function (scopeSelector) {
            var lre = /\[/g;
            var rre = /\]/g;
            scopeSelector = lang_1.StringWrapper.replaceAll(scopeSelector, lre, '\\[');
            scopeSelector = lang_1.StringWrapper.replaceAll(scopeSelector, rre, '\\]');
            return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');
        };
        ShadowCss.prototype._applySelectorScope = function (selector, scopeSelector, hostSelector) {
            // Difference from webcomponentsjs: scopeSelector could not be an array
            return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);
        };
        // scope via name and [is=name]
        ShadowCss.prototype._applySimpleSelectorScope = function (selector, scopeSelector, hostSelector) {
            if (_polyfillHostRe.test(selector)) {
                var replaceBy = this.strictStyling ? "[" + hostSelector + "]" : scopeSelector;
                selector = lang_1.StringWrapper.replace(selector, _polyfillHostNoCombinator, replaceBy);
                return lang_1.StringWrapper.replaceAll(selector, _polyfillHostRe, replaceBy + ' ');
            } else {
                return scopeSelector + ' ' + selector;
            }
        };
        // return a selector with [name] suffix on each simple selector
        // e.g. .foo.bar > .zot becomes .foo[name].bar[name] > .zot[name]  /** @internal */
        ShadowCss.prototype._applyStrictSelectorScope = function (selector, scopeSelector) {
            var isRe = /\[is=([^\]]*)\]/g;
            scopeSelector = lang_1.StringWrapper.replaceAllMapped(scopeSelector, isRe, function (m /** TODO #9100 */) {
                return m[1];
            });
            var splits = [' ', '>', '+', '~'],
                scoped = selector,
                attrName = '[' + scopeSelector + ']';
            for (var i = 0; i < splits.length; i++) {
                var sep = splits[i];
                var parts = scoped.split(sep);
                scoped = parts.map(function (p) {
                    // remove :host since it should be unnecessary
                    var t = lang_1.StringWrapper.replaceAll(p.trim(), _polyfillHostRe, '');
                    if (t.length > 0 && !collection_1.ListWrapper.contains(splits, t) && !lang_1.StringWrapper.contains(t, attrName)) {
                        var m = t.match(/([^:]*)(:*)(.*)/);
                        if (m !== null) {
                            p = m[1] + attrName + m[2] + m[3];
                        }
                    }
                    return p;
                }).join(sep);
            }
            return scoped;
        };
        ShadowCss.prototype._insertPolyfillHostInCssText = function (selector) {
            selector = lang_1.StringWrapper.replaceAll(selector, _colonHostContextRe, _polyfillHostContext);
            selector = lang_1.StringWrapper.replaceAll(selector, _colonHostRe, _polyfillHost);
            return selector;
        };
        return ShadowCss;
    }();
    exports.ShadowCss = ShadowCss;
    var _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\s]*?['"](.*?)['"][;\s]*}([^{]*?){/gim;
    var _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\s]*['"](.*?)['"])[;\s]*[^}]*}/gim;
    var _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\s]*['"](.*?)['"])[;\s]*[^}]*}/gim;
    var _polyfillHost = '-shadowcsshost';
    // note: :host-context pre-processed to -shadowcsshostcontext.
    var _polyfillHostContext = '-shadowcsscontext';
    var _parenSuffix = ')(?:\\((' + '(?:\\([^)(]*\\)|[^)(]*)+?' + ')\\))?([^,{]*)';
    var _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');
    var _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');
    var _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';
    var _shadowDOMSelectorsRe = [/::shadow/g, /::content/g,
    // Deprecated selectors
    // TODO(vicb): see https://github.com/angular/clang-format/issues/16
    // clang-format off
    /\/shadow-deep\//g, /\/shadow\//g];
    var _shadowDeepSelectors = /(?:>>>)|(?:\/deep\/)/g;
    var _selectorReSuffix = '([>\\s~+\[.,{:][\\s\\S]*)?$';
    var _polyfillHostRe = new RegExp(_polyfillHost, 'im');
    var _colonHostRe = /:host/gim;
    var _colonHostContextRe = /:host-context/gim;
    var _commentRe = /\/\*[\s\S]*?\*\//g;
    function stripComments(input) {
        return lang_1.StringWrapper.replaceAllMapped(input, _commentRe, function (_ /** TODO #9100 */) {
            return '';
        });
    }
    var _ruleRe = /(\s*)([^;\{\}]+?)(\s*)((?:{%BLOCK%}?\s*;?)|(?:\s*;))/g;
    var _curlyRe = /([{}])/g;
    var OPEN_CURLY = '{';
    var CLOSE_CURLY = '}';
    var BLOCK_PLACEHOLDER = '%BLOCK%';
    var CssRule = function () {
        function CssRule(selector, content) {
            this.selector = selector;
            this.content = content;
        }
        return CssRule;
    }();
    exports.CssRule = CssRule;
    function processRules(input, ruleCallback) {
        var inputWithEscapedBlocks = escapeBlocks(input);
        var nextBlockIndex = 0;
        return lang_1.StringWrapper.replaceAllMapped(inputWithEscapedBlocks.escapedString, _ruleRe, function (m /** TODO #9100 */) {
            var selector = m[2];
            var content = '';
            var suffix = m[4];
            var contentPrefix = '';
            if (lang_1.isPresent(m[4]) && m[4].startsWith('{' + BLOCK_PLACEHOLDER)) {
                content = inputWithEscapedBlocks.blocks[nextBlockIndex++];
                suffix = m[4].substring(BLOCK_PLACEHOLDER.length + 1);
                contentPrefix = '{';
            }
            var rule = ruleCallback(new CssRule(selector, content));
            return "" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;
        });
    }
    exports.processRules = processRules;
    var StringWithEscapedBlocks = function () {
        function StringWithEscapedBlocks(escapedString, blocks) {
            this.escapedString = escapedString;
            this.blocks = blocks;
        }
        return StringWithEscapedBlocks;
    }();
    function escapeBlocks(input) {
        var inputParts = lang_1.StringWrapper.split(input, _curlyRe);
        var resultParts = [];
        var escapedBlocks = [];
        var bracketCount = 0;
        var currentBlockParts = [];
        for (var partIndex = 0; partIndex < inputParts.length; partIndex++) {
            var part = inputParts[partIndex];
            if (part == CLOSE_CURLY) {
                bracketCount--;
            }
            if (bracketCount > 0) {
                currentBlockParts.push(part);
            } else {
                if (currentBlockParts.length > 0) {
                    escapedBlocks.push(currentBlockParts.join(''));
                    resultParts.push(BLOCK_PLACEHOLDER);
                    currentBlockParts = [];
                }
                resultParts.push(part);
            }
            if (part == OPEN_CURLY) {
                bracketCount++;
            }
        }
        if (currentBlockParts.length > 0) {
            escapedBlocks.push(currentBlockParts.join(''));
            resultParts.push(BLOCK_PLACEHOLDER);
        }
        return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/style_compiler.js', ['@angular/core', './compile_metadata', './output/output_ast', './shadow_css', './url_resolver', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var compile_metadata_1 = $__require('./compile_metadata');
    var o = $__require('./output/output_ast');
    var shadow_css_1 = $__require('./shadow_css');
    var url_resolver_1 = $__require('./url_resolver');
    var COMPONENT_VARIABLE = '%COMP%';
    var HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
    var CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
    var StylesCompileDependency = function () {
        function StylesCompileDependency(moduleUrl, isShimmed, valuePlaceholder) {
            this.moduleUrl = moduleUrl;
            this.isShimmed = isShimmed;
            this.valuePlaceholder = valuePlaceholder;
        }
        return StylesCompileDependency;
    }();
    exports.StylesCompileDependency = StylesCompileDependency;
    var StylesCompileResult = function () {
        function StylesCompileResult(componentStylesheet, externalStylesheets) {
            this.componentStylesheet = componentStylesheet;
            this.externalStylesheets = externalStylesheets;
        }
        return StylesCompileResult;
    }();
    exports.StylesCompileResult = StylesCompileResult;
    var CompiledStylesheet = function () {
        function CompiledStylesheet(statements, stylesVar, dependencies, isShimmed, meta) {
            this.statements = statements;
            this.stylesVar = stylesVar;
            this.dependencies = dependencies;
            this.isShimmed = isShimmed;
            this.meta = meta;
        }
        return CompiledStylesheet;
    }();
    exports.CompiledStylesheet = CompiledStylesheet;
    var StyleCompiler = function () {
        function StyleCompiler(_urlResolver) {
            this._urlResolver = _urlResolver;
            this._shadowCss = new shadow_css_1.ShadowCss();
        }
        StyleCompiler.prototype.compileComponent = function (comp) {
            var _this = this;
            var externalStylesheets = [];
            var componentStylesheet = this._compileStyles(comp, new compile_metadata_1.CompileStylesheetMetadata({
                styles: comp.template.styles,
                styleUrls: comp.template.styleUrls,
                moduleUrl: comp.type.moduleUrl
            }), true);
            comp.template.externalStylesheets.forEach(function (stylesheetMeta) {
                var compiledStylesheet = _this._compileStyles(comp, stylesheetMeta, false);
                externalStylesheets.push(compiledStylesheet);
            });
            return new StylesCompileResult(componentStylesheet, externalStylesheets);
        };
        StyleCompiler.prototype._compileStyles = function (comp, stylesheet, isComponentStylesheet) {
            var _this = this;
            var shim = comp.template.encapsulation === core_1.ViewEncapsulation.Emulated;
            var styleExpressions = stylesheet.styles.map(function (plainStyle) {
                return o.literal(_this._shimIfNeeded(plainStyle, shim));
            });
            var dependencies = [];
            for (var i = 0; i < stylesheet.styleUrls.length; i++) {
                var identifier = new compile_metadata_1.CompileIdentifierMetadata({ name: getStylesVarName(null) });
                dependencies.push(new StylesCompileDependency(stylesheet.styleUrls[i], shim, identifier));
                styleExpressions.push(new o.ExternalExpr(identifier));
            }
            // styles variable contains plain strings and arrays of other styles arrays (recursive),
            // so we set its type to dynamic.
            var stylesVar = getStylesVarName(isComponentStylesheet ? comp : null);
            var stmt = o.variable(stylesVar).set(o.literalArr(styleExpressions, new o.ArrayType(o.DYNAMIC_TYPE, [o.TypeModifier.Const]))).toDeclStmt(null, [o.StmtModifier.Final]);
            return new CompiledStylesheet([stmt], stylesVar, dependencies, shim, stylesheet);
        };
        StyleCompiler.prototype._shimIfNeeded = function (style, shim) {
            return shim ? this._shadowCss.shimCssText(style, CONTENT_ATTR, HOST_ATTR) : style;
        };
        /** @nocollapse */
        StyleCompiler.decorators = [{ type: core_1.Injectable }];
        /** @nocollapse */
        StyleCompiler.ctorParameters = [{ type: url_resolver_1.UrlResolver }];
        return StyleCompiler;
    }();
    exports.StyleCompiler = StyleCompiler;
    function getStylesVarName(component) {
        var result = "styles";
        if (component) {
            result += "_" + component.type.name;
        }
        return result;
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/expression_parser/lexer.js', ['@angular/core', '../chars', '../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var chars = $__require('../chars');
    var lang_1 = $__require('../facade/lang');
    (function (TokenType) {
        TokenType[TokenType["Character"] = 0] = "Character";
        TokenType[TokenType["Identifier"] = 1] = "Identifier";
        TokenType[TokenType["Keyword"] = 2] = "Keyword";
        TokenType[TokenType["String"] = 3] = "String";
        TokenType[TokenType["Operator"] = 4] = "Operator";
        TokenType[TokenType["Number"] = 5] = "Number";
        TokenType[TokenType["Error"] = 6] = "Error";
    })(exports.TokenType || (exports.TokenType = {}));
    var TokenType = exports.TokenType;
    var KEYWORDS = ['var', 'let', 'null', 'undefined', 'true', 'false', 'if', 'else', 'this'];
    var Lexer = function () {
        function Lexer() {}
        Lexer.prototype.tokenize = function (text) {
            var scanner = new _Scanner(text);
            var tokens = [];
            var token = scanner.scanToken();
            while (token != null) {
                tokens.push(token);
                token = scanner.scanToken();
            }
            return tokens;
        };
        /** @nocollapse */
        Lexer.decorators = [{ type: core_1.Injectable }];
        return Lexer;
    }();
    exports.Lexer = Lexer;
    var Token = function () {
        function Token(index, type, numValue, strValue) {
            this.index = index;
            this.type = type;
            this.numValue = numValue;
            this.strValue = strValue;
        }
        Token.prototype.isCharacter = function (code) {
            return this.type == TokenType.Character && this.numValue == code;
        };
        Token.prototype.isNumber = function () {
            return this.type == TokenType.Number;
        };
        Token.prototype.isString = function () {
            return this.type == TokenType.String;
        };
        Token.prototype.isOperator = function (operater) {
            return this.type == TokenType.Operator && this.strValue == operater;
        };
        Token.prototype.isIdentifier = function () {
            return this.type == TokenType.Identifier;
        };
        Token.prototype.isKeyword = function () {
            return this.type == TokenType.Keyword;
        };
        Token.prototype.isKeywordDeprecatedVar = function () {
            return this.type == TokenType.Keyword && this.strValue == 'var';
        };
        Token.prototype.isKeywordLet = function () {
            return this.type == TokenType.Keyword && this.strValue == 'let';
        };
        Token.prototype.isKeywordNull = function () {
            return this.type == TokenType.Keyword && this.strValue == 'null';
        };
        Token.prototype.isKeywordUndefined = function () {
            return this.type == TokenType.Keyword && this.strValue == 'undefined';
        };
        Token.prototype.isKeywordTrue = function () {
            return this.type == TokenType.Keyword && this.strValue == 'true';
        };
        Token.prototype.isKeywordFalse = function () {
            return this.type == TokenType.Keyword && this.strValue == 'false';
        };
        Token.prototype.isKeywordThis = function () {
            return this.type == TokenType.Keyword && this.strValue == 'this';
        };
        Token.prototype.isError = function () {
            return this.type == TokenType.Error;
        };
        Token.prototype.toNumber = function () {
            return this.type == TokenType.Number ? this.numValue : -1;
        };
        Token.prototype.toString = function () {
            switch (this.type) {
                case TokenType.Character:
                case TokenType.Identifier:
                case TokenType.Keyword:
                case TokenType.Operator:
                case TokenType.String:
                case TokenType.Error:
                    return this.strValue;
                case TokenType.Number:
                    return this.numValue.toString();
                default:
                    return null;
            }
        };
        return Token;
    }();
    exports.Token = Token;
    function newCharacterToken(index, code) {
        return new Token(index, TokenType.Character, code, lang_1.StringWrapper.fromCharCode(code));
    }
    function newIdentifierToken(index, text) {
        return new Token(index, TokenType.Identifier, 0, text);
    }
    function newKeywordToken(index, text) {
        return new Token(index, TokenType.Keyword, 0, text);
    }
    function newOperatorToken(index, text) {
        return new Token(index, TokenType.Operator, 0, text);
    }
    function newStringToken(index, text) {
        return new Token(index, TokenType.String, 0, text);
    }
    function newNumberToken(index, n) {
        return new Token(index, TokenType.Number, n, '');
    }
    function newErrorToken(index, message) {
        return new Token(index, TokenType.Error, 0, message);
    }
    exports.EOF = new Token(-1, TokenType.Character, 0, '');
    var _Scanner = function () {
        function _Scanner(input) {
            this.input = input;
            this.peek = 0;
            this.index = -1;
            this.length = input.length;
            this.advance();
        }
        _Scanner.prototype.advance = function () {
            this.peek = ++this.index >= this.length ? chars.$EOF : lang_1.StringWrapper.charCodeAt(this.input, this.index);
        };
        _Scanner.prototype.scanToken = function () {
            var input = this.input,
                length = this.length,
                peek = this.peek,
                index = this.index;
            // Skip whitespace.
            while (peek <= chars.$SPACE) {
                if (++index >= length) {
                    peek = chars.$EOF;
                    break;
                } else {
                    peek = lang_1.StringWrapper.charCodeAt(input, index);
                }
            }
            this.peek = peek;
            this.index = index;
            if (index >= length) {
                return null;
            }
            // Handle identifiers and numbers.
            if (isIdentifierStart(peek)) return this.scanIdentifier();
            if (chars.isDigit(peek)) return this.scanNumber(index);
            var start = index;
            switch (peek) {
                case chars.$PERIOD:
                    this.advance();
                    return chars.isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, chars.$PERIOD);
                case chars.$LPAREN:
                case chars.$RPAREN:
                case chars.$LBRACE:
                case chars.$RBRACE:
                case chars.$LBRACKET:
                case chars.$RBRACKET:
                case chars.$COMMA:
                case chars.$COLON:
                case chars.$SEMICOLON:
                    return this.scanCharacter(start, peek);
                case chars.$SQ:
                case chars.$DQ:
                    return this.scanString();
                case chars.$HASH:
                case chars.$PLUS:
                case chars.$MINUS:
                case chars.$STAR:
                case chars.$SLASH:
                case chars.$PERCENT:
                case chars.$CARET:
                    return this.scanOperator(start, lang_1.StringWrapper.fromCharCode(peek));
                case chars.$QUESTION:
                    return this.scanComplexOperator(start, '?', chars.$PERIOD, '.');
                case chars.$LT:
                case chars.$GT:
                    return this.scanComplexOperator(start, lang_1.StringWrapper.fromCharCode(peek), chars.$EQ, '=');
                case chars.$BANG:
                case chars.$EQ:
                    return this.scanComplexOperator(start, lang_1.StringWrapper.fromCharCode(peek), chars.$EQ, '=', chars.$EQ, '=');
                case chars.$AMPERSAND:
                    return this.scanComplexOperator(start, '&', chars.$AMPERSAND, '&');
                case chars.$BAR:
                    return this.scanComplexOperator(start, '|', chars.$BAR, '|');
                case chars.$NBSP:
                    while (chars.isWhitespace(this.peek)) this.advance();
                    return this.scanToken();
            }
            this.advance();
            return this.error("Unexpected character [" + lang_1.StringWrapper.fromCharCode(peek) + "]", 0);
        };
        _Scanner.prototype.scanCharacter = function (start, code) {
            this.advance();
            return newCharacterToken(start, code);
        };
        _Scanner.prototype.scanOperator = function (start, str) {
            this.advance();
            return newOperatorToken(start, str);
        };
        /**
         * Tokenize a 2/3 char long operator
         *
         * @param start start index in the expression
         * @param one first symbol (always part of the operator)
         * @param twoCode code point for the second symbol
         * @param two second symbol (part of the operator when the second code point matches)
         * @param threeCode code point for the third symbol
         * @param three third symbol (part of the operator when provided and matches source expression)
         * @returns {Token}
         */
        _Scanner.prototype.scanComplexOperator = function (start, one, twoCode, two, threeCode, three) {
            this.advance();
            var str = one;
            if (this.peek == twoCode) {
                this.advance();
                str += two;
            }
            if (lang_1.isPresent(threeCode) && this.peek == threeCode) {
                this.advance();
                str += three;
            }
            return newOperatorToken(start, str);
        };
        _Scanner.prototype.scanIdentifier = function () {
            var start = this.index;
            this.advance();
            while (isIdentifierPart(this.peek)) this.advance();
            var str = this.input.substring(start, this.index);
            return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, str) : newIdentifierToken(start, str);
        };
        _Scanner.prototype.scanNumber = function (start) {
            var simple = this.index === start;
            this.advance(); // Skip initial digit.
            while (true) {
                if (chars.isDigit(this.peek)) {} else if (this.peek == chars.$PERIOD) {
                    simple = false;
                } else if (isExponentStart(this.peek)) {
                    this.advance();
                    if (isExponentSign(this.peek)) this.advance();
                    if (!chars.isDigit(this.peek)) return this.error('Invalid exponent', -1);
                    simple = false;
                } else {
                    break;
                }
                this.advance();
            }
            var str = this.input.substring(start, this.index);
            var value = simple ? lang_1.NumberWrapper.parseIntAutoRadix(str) : lang_1.NumberWrapper.parseFloat(str);
            return newNumberToken(start, value);
        };
        _Scanner.prototype.scanString = function () {
            var start = this.index;
            var quote = this.peek;
            this.advance(); // Skip initial quote.
            var buffer;
            var marker = this.index;
            var input = this.input;
            while (this.peek != quote) {
                if (this.peek == chars.$BACKSLASH) {
                    if (buffer == null) buffer = new lang_1.StringJoiner();
                    buffer.add(input.substring(marker, this.index));
                    this.advance();
                    var unescapedCode;
                    if (this.peek == chars.$u) {
                        // 4 character hex code for unicode character.
                        var hex = input.substring(this.index + 1, this.index + 5);
                        try {
                            unescapedCode = lang_1.NumberWrapper.parseInt(hex, 16);
                        } catch (e) {
                            return this.error("Invalid unicode escape [\\u" + hex + "]", 0);
                        }
                        for (var i = 0; i < 5; i++) {
                            this.advance();
                        }
                    } else {
                        unescapedCode = unescape(this.peek);
                        this.advance();
                    }
                    buffer.add(lang_1.StringWrapper.fromCharCode(unescapedCode));
                    marker = this.index;
                } else if (this.peek == chars.$EOF) {
                    return this.error('Unterminated quote', 0);
                } else {
                    this.advance();
                }
            }
            var last = input.substring(marker, this.index);
            this.advance(); // Skip terminating quote.
            // Compute the unescaped string value.
            var unescaped = last;
            if (buffer != null) {
                buffer.add(last);
                unescaped = buffer.toString();
            }
            return newStringToken(start, unescaped);
        };
        _Scanner.prototype.error = function (message, offset) {
            var position = this.index + offset;
            return newErrorToken(position, "Lexer Error: " + message + " at column " + position + " in expression [" + this.input + "]");
        };
        return _Scanner;
    }();
    function isIdentifierStart(code) {
        return chars.$a <= code && code <= chars.$z || chars.$A <= code && code <= chars.$Z || code == chars.$_ || code == chars.$$;
    }
    function isIdentifier(input) {
        if (input.length == 0) return false;
        var scanner = new _Scanner(input);
        if (!isIdentifierStart(scanner.peek)) return false;
        scanner.advance();
        while (scanner.peek !== chars.$EOF) {
            if (!isIdentifierPart(scanner.peek)) return false;
            scanner.advance();
        }
        return true;
    }
    exports.isIdentifier = isIdentifier;
    function isIdentifierPart(code) {
        return chars.isAsciiLetter(code) || chars.isDigit(code) || code == chars.$_ || code == chars.$$;
    }
    function isExponentStart(code) {
        return code == chars.$e || code == chars.$E;
    }
    function isExponentSign(code) {
        return code == chars.$MINUS || code == chars.$PLUS;
    }
    function isQuote(code) {
        return code === chars.$SQ || code === chars.$DQ || code === chars.$BT;
    }
    exports.isQuote = isQuote;
    function unescape(code) {
        switch (code) {
            case chars.$n:
                return chars.$LF;
            case chars.$f:
                return chars.$FF;
            case chars.$r:
                return chars.$CR;
            case chars.$t:
                return chars.$TAB;
            case chars.$v:
                return chars.$VTAB;
            default:
                return code;
        }
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/expression_parser/parser.js', ['@angular/core', '../chars', '../facade/lang', '../ml_parser/interpolation_config', './ast', './lexer', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var chars = $__require('../chars');
    var lang_1 = $__require('../facade/lang');
    var interpolation_config_1 = $__require('../ml_parser/interpolation_config');
    var ast_1 = $__require('./ast');
    var lexer_1 = $__require('./lexer');
    var SplitInterpolation = function () {
        function SplitInterpolation(strings, expressions) {
            this.strings = strings;
            this.expressions = expressions;
        }
        return SplitInterpolation;
    }();
    exports.SplitInterpolation = SplitInterpolation;
    var TemplateBindingParseResult = function () {
        function TemplateBindingParseResult(templateBindings, warnings, errors) {
            this.templateBindings = templateBindings;
            this.warnings = warnings;
            this.errors = errors;
        }
        return TemplateBindingParseResult;
    }();
    exports.TemplateBindingParseResult = TemplateBindingParseResult;
    function _createInterpolateRegExp(config) {
        var pattern = lang_1.escapeRegExp(config.start) + '([\\s\\S]*?)' + lang_1.escapeRegExp(config.end);
        return new RegExp(pattern, 'g');
    }
    var Parser = function () {
        function Parser(_lexer) {
            this._lexer = _lexer;
            this.errors = [];
        }
        Parser.prototype.parseAction = function (input, location, interpolationConfig) {
            if (interpolationConfig === void 0) {
                interpolationConfig = interpolation_config_1.DEFAULT_INTERPOLATION_CONFIG;
            }
            this._checkNoInterpolation(input, location, interpolationConfig);
            var tokens = this._lexer.tokenize(this._stripComments(input));
            var ast = new _ParseAST(input, location, tokens, true, this.errors).parseChain();
            return new ast_1.ASTWithSource(ast, input, location, this.errors);
        };
        Parser.prototype.parseBinding = function (input, location, interpolationConfig) {
            if (interpolationConfig === void 0) {
                interpolationConfig = interpolation_config_1.DEFAULT_INTERPOLATION_CONFIG;
            }
            var ast = this._parseBindingAst(input, location, interpolationConfig);
            return new ast_1.ASTWithSource(ast, input, location, this.errors);
        };
        Parser.prototype.parseSimpleBinding = function (input, location, interpolationConfig) {
            if (interpolationConfig === void 0) {
                interpolationConfig = interpolation_config_1.DEFAULT_INTERPOLATION_CONFIG;
            }
            var ast = this._parseBindingAst(input, location, interpolationConfig);
            if (!SimpleExpressionChecker.check(ast)) {
                this._reportError('Host binding expression can only contain field access and constants', input, location);
            }
            return new ast_1.ASTWithSource(ast, input, location, this.errors);
        };
        Parser.prototype._reportError = function (message, input, errLocation, ctxLocation) {
            this.errors.push(new ast_1.ParserError(message, input, errLocation, ctxLocation));
        };
        Parser.prototype._parseBindingAst = function (input, location, interpolationConfig) {
            // Quotes expressions use 3rd-party expression language. We don't want to use
            // our lexer or parser for that, so we check for that ahead of time.
            var quote = this._parseQuote(input, location);
            if (lang_1.isPresent(quote)) {
                return quote;
            }
            this._checkNoInterpolation(input, location, interpolationConfig);
            var tokens = this._lexer.tokenize(this._stripComments(input));
            return new _ParseAST(input, location, tokens, false, this.errors).parseChain();
        };
        Parser.prototype._parseQuote = function (input, location) {
            if (lang_1.isBlank(input)) return null;
            var prefixSeparatorIndex = input.indexOf(':');
            if (prefixSeparatorIndex == -1) return null;
            var prefix = input.substring(0, prefixSeparatorIndex).trim();
            if (!lexer_1.isIdentifier(prefix)) return null;
            var uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);
            return new ast_1.Quote(new ast_1.ParseSpan(0, input.length), prefix, uninterpretedExpression, location);
        };
        Parser.prototype.parseTemplateBindings = function (input, location) {
            var tokens = this._lexer.tokenize(input);
            return new _ParseAST(input, location, tokens, false, this.errors).parseTemplateBindings();
        };
        Parser.prototype.parseInterpolation = function (input, location, interpolationConfig) {
            if (interpolationConfig === void 0) {
                interpolationConfig = interpolation_config_1.DEFAULT_INTERPOLATION_CONFIG;
            }
            var split = this.splitInterpolation(input, location, interpolationConfig);
            if (split == null) return null;
            var expressions = [];
            for (var i = 0; i < split.expressions.length; ++i) {
                var tokens = this._lexer.tokenize(this._stripComments(split.expressions[i]));
                var ast = new _ParseAST(input, location, tokens, false, this.errors).parseChain();
                expressions.push(ast);
            }
            return new ast_1.ASTWithSource(new ast_1.Interpolation(new ast_1.ParseSpan(0, lang_1.isBlank(input) ? 0 : input.length), split.strings, expressions), input, location, this.errors);
        };
        Parser.prototype.splitInterpolation = function (input, location, interpolationConfig) {
            if (interpolationConfig === void 0) {
                interpolationConfig = interpolation_config_1.DEFAULT_INTERPOLATION_CONFIG;
            }
            var regexp = _createInterpolateRegExp(interpolationConfig);
            var parts = lang_1.StringWrapper.split(input, regexp);
            if (parts.length <= 1) {
                return null;
            }
            var strings = [];
            var expressions = [];
            for (var i = 0; i < parts.length; i++) {
                var part = parts[i];
                if (i % 2 === 0) {
                    // fixed string
                    strings.push(part);
                } else if (part.trim().length > 0) {
                    expressions.push(part);
                } else {
                    this._reportError('Blank expressions are not allowed in interpolated strings', input, "at column " + this._findInterpolationErrorColumn(parts, i, interpolationConfig) + " in", location);
                }
            }
            return new SplitInterpolation(strings, expressions);
        };
        Parser.prototype.wrapLiteralPrimitive = function (input, location) {
            return new ast_1.ASTWithSource(new ast_1.LiteralPrimitive(new ast_1.ParseSpan(0, lang_1.isBlank(input) ? 0 : input.length), input), input, location, this.errors);
        };
        Parser.prototype._stripComments = function (input) {
            var i = this._commentStart(input);
            return lang_1.isPresent(i) ? input.substring(0, i).trim() : input;
        };
        Parser.prototype._commentStart = function (input) {
            var outerQuote = null;
            for (var i = 0; i < input.length - 1; i++) {
                var char = lang_1.StringWrapper.charCodeAt(input, i);
                var nextChar = lang_1.StringWrapper.charCodeAt(input, i + 1);
                if (char === chars.$SLASH && nextChar == chars.$SLASH && lang_1.isBlank(outerQuote)) return i;
                if (outerQuote === char) {
                    outerQuote = null;
                } else if (lang_1.isBlank(outerQuote) && lexer_1.isQuote(char)) {
                    outerQuote = char;
                }
            }
            return null;
        };
        Parser.prototype._checkNoInterpolation = function (input, location, interpolationConfig) {
            var regexp = _createInterpolateRegExp(interpolationConfig);
            var parts = lang_1.StringWrapper.split(input, regexp);
            if (parts.length > 1) {
                this._reportError("Got interpolation (" + interpolationConfig.start + interpolationConfig.end + ") where expression was expected", input, "at column " + this._findInterpolationErrorColumn(parts, 1, interpolationConfig) + " in", location);
            }
        };
        Parser.prototype._findInterpolationErrorColumn = function (parts, partInErrIdx, interpolationConfig) {
            var errLocation = '';
            for (var j = 0; j < partInErrIdx; j++) {
                errLocation += j % 2 === 0 ? parts[j] : "" + interpolationConfig.start + parts[j] + interpolationConfig.end;
            }
            return errLocation.length;
        };
        /** @nocollapse */
        Parser.decorators = [{ type: core_1.Injectable }];
        /** @nocollapse */
        Parser.ctorParameters = [{ type: lexer_1.Lexer }];
        return Parser;
    }();
    exports.Parser = Parser;
    var _ParseAST = function () {
        function _ParseAST(input, location, tokens, parseAction, errors) {
            this.input = input;
            this.location = location;
            this.tokens = tokens;
            this.parseAction = parseAction;
            this.errors = errors;
            this.rparensExpected = 0;
            this.rbracketsExpected = 0;
            this.rbracesExpected = 0;
            this.index = 0;
        }
        _ParseAST.prototype.peek = function (offset) {
            var i = this.index + offset;
            return i < this.tokens.length ? this.tokens[i] : lexer_1.EOF;
        };
        Object.defineProperty(_ParseAST.prototype, "next", {
            get: function () {
                return this.peek(0);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(_ParseAST.prototype, "inputIndex", {
            get: function () {
                return this.index < this.tokens.length ? this.next.index : this.input.length;
            },
            enumerable: true,
            configurable: true
        });
        _ParseAST.prototype.span = function (start) {
            return new ast_1.ParseSpan(start, this.inputIndex);
        };
        _ParseAST.prototype.advance = function () {
            this.index++;
        };
        _ParseAST.prototype.optionalCharacter = function (code) {
            if (this.next.isCharacter(code)) {
                this.advance();
                return true;
            } else {
                return false;
            }
        };
        _ParseAST.prototype.peekKeywordLet = function () {
            return this.next.isKeywordLet();
        };
        _ParseAST.prototype.peekDeprecatedKeywordVar = function () {
            return this.next.isKeywordDeprecatedVar();
        };
        _ParseAST.prototype.peekDeprecatedOperatorHash = function () {
            return this.next.isOperator('#');
        };
        _ParseAST.prototype.expectCharacter = function (code) {
            if (this.optionalCharacter(code)) return;
            this.error("Missing expected " + lang_1.StringWrapper.fromCharCode(code));
        };
        _ParseAST.prototype.optionalOperator = function (op) {
            if (this.next.isOperator(op)) {
                this.advance();
                return true;
            } else {
                return false;
            }
        };
        _ParseAST.prototype.expectOperator = function (operator) {
            if (this.optionalOperator(operator)) return;
            this.error("Missing expected operator " + operator);
        };
        _ParseAST.prototype.expectIdentifierOrKeyword = function () {
            var n = this.next;
            if (!n.isIdentifier() && !n.isKeyword()) {
                this.error("Unexpected token " + n + ", expected identifier or keyword");
                return '';
            }
            this.advance();
            return n.toString();
        };
        _ParseAST.prototype.expectIdentifierOrKeywordOrString = function () {
            var n = this.next;
            if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {
                this.error("Unexpected token " + n + ", expected identifier, keyword, or string");
                return '';
            }
            this.advance();
            return n.toString();
        };
        _ParseAST.prototype.parseChain = function () {
            var exprs = [];
            var start = this.inputIndex;
            while (this.index < this.tokens.length) {
                var expr = this.parsePipe();
                exprs.push(expr);
                if (this.optionalCharacter(chars.$SEMICOLON)) {
                    if (!this.parseAction) {
                        this.error('Binding expression cannot contain chained expression');
                    }
                    while (this.optionalCharacter(chars.$SEMICOLON)) {} // read all semicolons
                } else if (this.index < this.tokens.length) {
                    this.error("Unexpected token '" + this.next + "'");
                }
            }
            if (exprs.length == 0) return new ast_1.EmptyExpr(this.span(start));
            if (exprs.length == 1) return exprs[0];
            return new ast_1.Chain(this.span(start), exprs);
        };
        _ParseAST.prototype.parsePipe = function () {
            var result = this.parseExpression();
            if (this.optionalOperator('|')) {
                if (this.parseAction) {
                    this.error('Cannot have a pipe in an action expression');
                }
                do {
                    var name = this.expectIdentifierOrKeyword();
                    var args = [];
                    while (this.optionalCharacter(chars.$COLON)) {
                        args.push(this.parseExpression());
                    }
                    result = new ast_1.BindingPipe(this.span(result.span.start), result, name, args);
                } while (this.optionalOperator('|'));
            }
            return result;
        };
        _ParseAST.prototype.parseExpression = function () {
            return this.parseConditional();
        };
        _ParseAST.prototype.parseConditional = function () {
            var start = this.inputIndex;
            var result = this.parseLogicalOr();
            if (this.optionalOperator('?')) {
                var yes = this.parsePipe();
                var no = void 0;
                if (!this.optionalCharacter(chars.$COLON)) {
                    var end = this.inputIndex;
                    var expression = this.input.substring(start, end);
                    this.error("Conditional expression " + expression + " requires all 3 expressions");
                    no = new ast_1.EmptyExpr(this.span(start));
                } else {
                    no = this.parsePipe();
                }
                return new ast_1.Conditional(this.span(start), result, yes, no);
            } else {
                return result;
            }
        };
        _ParseAST.prototype.parseLogicalOr = function () {
            // '||'
            var result = this.parseLogicalAnd();
            while (this.optionalOperator('||')) {
                var right = this.parseLogicalAnd();
                result = new ast_1.Binary(this.span(result.span.start), '||', result, right);
            }
            return result;
        };
        _ParseAST.prototype.parseLogicalAnd = function () {
            // '&&'
            var result = this.parseEquality();
            while (this.optionalOperator('&&')) {
                var right = this.parseEquality();
                result = new ast_1.Binary(this.span(result.span.start), '&&', result, right);
            }
            return result;
        };
        _ParseAST.prototype.parseEquality = function () {
            // '==','!=','===','!=='
            var result = this.parseRelational();
            while (this.next.type == lexer_1.TokenType.Operator) {
                var operator = this.next.strValue;
                switch (operator) {
                    case '==':
                    case '===':
                    case '!=':
                    case '!==':
                        this.advance();
                        var right = this.parseRelational();
                        result = new ast_1.Binary(this.span(result.span.start), operator, result, right);
                        continue;
                }
                break;
            }
            return result;
        };
        _ParseAST.prototype.parseRelational = function () {
            // '<', '>', '<=', '>='
            var result = this.parseAdditive();
            while (this.next.type == lexer_1.TokenType.Operator) {
                var operator = this.next.strValue;
                switch (operator) {
                    case '<':
                    case '>':
                    case '<=':
                    case '>=':
                        this.advance();
                        var right = this.parseAdditive();
                        result = new ast_1.Binary(this.span(result.span.start), operator, result, right);
                        continue;
                }
                break;
            }
            return result;
        };
        _ParseAST.prototype.parseAdditive = function () {
            // '+', '-'
            var result = this.parseMultiplicative();
            while (this.next.type == lexer_1.TokenType.Operator) {
                var operator = this.next.strValue;
                switch (operator) {
                    case '+':
                    case '-':
                        this.advance();
                        var right = this.parseMultiplicative();
                        result = new ast_1.Binary(this.span(result.span.start), operator, result, right);
                        continue;
                }
                break;
            }
            return result;
        };
        _ParseAST.prototype.parseMultiplicative = function () {
            // '*', '%', '/'
            var result = this.parsePrefix();
            while (this.next.type == lexer_1.TokenType.Operator) {
                var operator = this.next.strValue;
                switch (operator) {
                    case '*':
                    case '%':
                    case '/':
                        this.advance();
                        var right = this.parsePrefix();
                        result = new ast_1.Binary(this.span(result.span.start), operator, result, right);
                        continue;
                }
                break;
            }
            return result;
        };
        _ParseAST.prototype.parsePrefix = function () {
            if (this.next.type == lexer_1.TokenType.Operator) {
                var start = this.inputIndex;
                var operator = this.next.strValue;
                var result = void 0;
                switch (operator) {
                    case '+':
                        this.advance();
                        return this.parsePrefix();
                    case '-':
                        this.advance();
                        result = this.parsePrefix();
                        return new ast_1.Binary(this.span(start), operator, new ast_1.LiteralPrimitive(new ast_1.ParseSpan(start, start), 0), result);
                    case '!':
                        this.advance();
                        result = this.parsePrefix();
                        return new ast_1.PrefixNot(this.span(start), result);
                }
            }
            return this.parseCallChain();
        };
        _ParseAST.prototype.parseCallChain = function () {
            var result = this.parsePrimary();
            while (true) {
                if (this.optionalCharacter(chars.$PERIOD)) {
                    result = this.parseAccessMemberOrMethodCall(result, false);
                } else if (this.optionalOperator('?.')) {
                    result = this.parseAccessMemberOrMethodCall(result, true);
                } else if (this.optionalCharacter(chars.$LBRACKET)) {
                    this.rbracketsExpected++;
                    var key = this.parsePipe();
                    this.rbracketsExpected--;
                    this.expectCharacter(chars.$RBRACKET);
                    if (this.optionalOperator('=')) {
                        var value = this.parseConditional();
                        result = new ast_1.KeyedWrite(this.span(result.span.start), result, key, value);
                    } else {
                        result = new ast_1.KeyedRead(this.span(result.span.start), result, key);
                    }
                } else if (this.optionalCharacter(chars.$LPAREN)) {
                    this.rparensExpected++;
                    var args = this.parseCallArguments();
                    this.rparensExpected--;
                    this.expectCharacter(chars.$RPAREN);
                    result = new ast_1.FunctionCall(this.span(result.span.start), result, args);
                } else {
                    return result;
                }
            }
        };
        _ParseAST.prototype.parsePrimary = function () {
            var start = this.inputIndex;
            if (this.optionalCharacter(chars.$LPAREN)) {
                this.rparensExpected++;
                var result = this.parsePipe();
                this.rparensExpected--;
                this.expectCharacter(chars.$RPAREN);
                return result;
            } else if (this.next.isKeywordNull()) {
                this.advance();
                return new ast_1.LiteralPrimitive(this.span(start), null);
            } else if (this.next.isKeywordUndefined()) {
                this.advance();
                return new ast_1.LiteralPrimitive(this.span(start), void 0);
            } else if (this.next.isKeywordTrue()) {
                this.advance();
                return new ast_1.LiteralPrimitive(this.span(start), true);
            } else if (this.next.isKeywordFalse()) {
                this.advance();
                return new ast_1.LiteralPrimitive(this.span(start), false);
            } else if (this.next.isKeywordThis()) {
                this.advance();
                return new ast_1.ImplicitReceiver(this.span(start));
            } else if (this.optionalCharacter(chars.$LBRACKET)) {
                this.rbracketsExpected++;
                var elements = this.parseExpressionList(chars.$RBRACKET);
                this.rbracketsExpected--;
                this.expectCharacter(chars.$RBRACKET);
                return new ast_1.LiteralArray(this.span(start), elements);
            } else if (this.next.isCharacter(chars.$LBRACE)) {
                return this.parseLiteralMap();
            } else if (this.next.isIdentifier()) {
                return this.parseAccessMemberOrMethodCall(new ast_1.ImplicitReceiver(this.span(start)), false);
            } else if (this.next.isNumber()) {
                var value = this.next.toNumber();
                this.advance();
                return new ast_1.LiteralPrimitive(this.span(start), value);
            } else if (this.next.isString()) {
                var literalValue = this.next.toString();
                this.advance();
                return new ast_1.LiteralPrimitive(this.span(start), literalValue);
            } else if (this.index >= this.tokens.length) {
                this.error("Unexpected end of expression: " + this.input);
                return new ast_1.EmptyExpr(this.span(start));
            } else {
                this.error("Unexpected token " + this.next);
                return new ast_1.EmptyExpr(this.span(start));
            }
        };
        _ParseAST.prototype.parseExpressionList = function (terminator) {
            var result = [];
            if (!this.next.isCharacter(terminator)) {
                do {
                    result.push(this.parsePipe());
                } while (this.optionalCharacter(chars.$COMMA));
            }
            return result;
        };
        _ParseAST.prototype.parseLiteralMap = function () {
            var keys = [];
            var values = [];
            var start = this.inputIndex;
            this.expectCharacter(chars.$LBRACE);
            if (!this.optionalCharacter(chars.$RBRACE)) {
                this.rbracesExpected++;
                do {
                    var key = this.expectIdentifierOrKeywordOrString();
                    keys.push(key);
                    this.expectCharacter(chars.$COLON);
                    values.push(this.parsePipe());
                } while (this.optionalCharacter(chars.$COMMA));
                this.rbracesExpected--;
                this.expectCharacter(chars.$RBRACE);
            }
            return new ast_1.LiteralMap(this.span(start), keys, values);
        };
        _ParseAST.prototype.parseAccessMemberOrMethodCall = function (receiver, isSafe) {
            if (isSafe === void 0) {
                isSafe = false;
            }
            var start = receiver.span.start;
            var id = this.expectIdentifierOrKeyword();
            if (this.optionalCharacter(chars.$LPAREN)) {
                this.rparensExpected++;
                var args = this.parseCallArguments();
                this.expectCharacter(chars.$RPAREN);
                this.rparensExpected--;
                var span = this.span(start);
                return isSafe ? new ast_1.SafeMethodCall(span, receiver, id, args) : new ast_1.MethodCall(span, receiver, id, args);
            } else {
                if (isSafe) {
                    if (this.optionalOperator('=')) {
                        this.error('The \'?.\' operator cannot be used in the assignment');
                        return new ast_1.EmptyExpr(this.span(start));
                    } else {
                        return new ast_1.SafePropertyRead(this.span(start), receiver, id);
                    }
                } else {
                    if (this.optionalOperator('=')) {
                        if (!this.parseAction) {
                            this.error('Bindings cannot contain assignments');
                            return new ast_1.EmptyExpr(this.span(start));
                        }
                        var value = this.parseConditional();
                        return new ast_1.PropertyWrite(this.span(start), receiver, id, value);
                    } else {
                        return new ast_1.PropertyRead(this.span(start), receiver, id);
                    }
                }
            }
        };
        _ParseAST.prototype.parseCallArguments = function () {
            if (this.next.isCharacter(chars.$RPAREN)) return [];
            var positionals = [];
            do {
                positionals.push(this.parsePipe());
            } while (this.optionalCharacter(chars.$COMMA));
            return positionals;
        };
        /**
         * An identifier, a keyword, a string with an optional `-` inbetween.
         */
        _ParseAST.prototype.expectTemplateBindingKey = function () {
            var result = '';
            var operatorFound = false;
            do {
                result += this.expectIdentifierOrKeywordOrString();
                operatorFound = this.optionalOperator('-');
                if (operatorFound) {
                    result += '-';
                }
            } while (operatorFound);
            return result.toString();
        };
        _ParseAST.prototype.parseTemplateBindings = function () {
            var bindings = [];
            var prefix = null;
            var warnings = [];
            while (this.index < this.tokens.length) {
                var keyIsVar = this.peekKeywordLet();
                if (!keyIsVar && this.peekDeprecatedKeywordVar()) {
                    keyIsVar = true;
                    warnings.push("\"var\" inside of expressions is deprecated. Use \"let\" instead!");
                }
                if (!keyIsVar && this.peekDeprecatedOperatorHash()) {
                    keyIsVar = true;
                    warnings.push("\"#\" inside of expressions is deprecated. Use \"let\" instead!");
                }
                if (keyIsVar) {
                    this.advance();
                }
                var key = this.expectTemplateBindingKey();
                if (!keyIsVar) {
                    if (prefix == null) {
                        prefix = key;
                    } else {
                        key = prefix + key[0].toUpperCase() + key.substring(1);
                    }
                }
                this.optionalCharacter(chars.$COLON);
                var name = null;
                var expression = null;
                if (keyIsVar) {
                    if (this.optionalOperator('=')) {
                        name = this.expectTemplateBindingKey();
                    } else {
                        name = '\$implicit';
                    }
                } else if (this.next !== lexer_1.EOF && !this.peekKeywordLet() && !this.peekDeprecatedKeywordVar() && !this.peekDeprecatedOperatorHash()) {
                    var start = this.inputIndex;
                    var ast = this.parsePipe();
                    var source = this.input.substring(start, this.inputIndex);
                    expression = new ast_1.ASTWithSource(ast, source, this.location, this.errors);
                }
                bindings.push(new ast_1.TemplateBinding(key, keyIsVar, name, expression));
                if (!this.optionalCharacter(chars.$SEMICOLON)) {
                    this.optionalCharacter(chars.$COMMA);
                }
            }
            return new TemplateBindingParseResult(bindings, warnings, this.errors);
        };
        _ParseAST.prototype.error = function (message, index) {
            if (index === void 0) {
                index = null;
            }
            this.errors.push(new ast_1.ParserError(message, this.input, this.locationText(index), this.location));
            this.skip();
        };
        _ParseAST.prototype.locationText = function (index) {
            if (index === void 0) {
                index = null;
            }
            if (lang_1.isBlank(index)) index = this.index;
            return index < this.tokens.length ? "at column " + (this.tokens[index].index + 1) + " in" : "at the end of the expression";
        };
        // Error recovery should skip tokens until it encounters a recovery point. skip() treats
        // the end of input and a ';' as unconditionally a recovery point. It also treats ')',
        // '}' and ']' as conditional recovery points if one of calling productions is expecting
        // one of these symbols. This allows skip() to recover from errors such as '(a.) + 1' allowing
        // more of the AST to be retained (it doesn't skip any tokens as the ')' is retained because
        // of the '(' begins an '(' <expr> ')' production). The recovery points of grouping symbols
        // must be conditional as they must be skipped if none of the calling productions are not
        // expecting the closing token else we will never make progress in the case of an
        // extrainious group closing symbol (such as a stray ')'). This is not the case for ';' because
        // parseChain() is always the root production and it expects a ';'.
        // If a production expects one of these token it increments the corresponding nesting count,
        // and then decrements it just prior to checking if the token is in the input.
        _ParseAST.prototype.skip = function () {
            var n = this.next;
            while (this.index < this.tokens.length && !n.isCharacter(chars.$SEMICOLON) && (this.rparensExpected <= 0 || !n.isCharacter(chars.$RPAREN)) && (this.rbracesExpected <= 0 || !n.isCharacter(chars.$RBRACE)) && (this.rbracketsExpected <= 0 || !n.isCharacter(chars.$RBRACKET))) {
                if (this.next.isError()) {
                    this.errors.push(new ast_1.ParserError(this.next.toString(), this.input, this.locationText(), this.location));
                }
                this.advance();
                n = this.next;
            }
        };
        return _ParseAST;
    }();
    exports._ParseAST = _ParseAST;
    var SimpleExpressionChecker = function () {
        function SimpleExpressionChecker() {
            this.simple = true;
        }
        SimpleExpressionChecker.check = function (ast) {
            var s = new SimpleExpressionChecker();
            ast.visit(s);
            return s.simple;
        };
        SimpleExpressionChecker.prototype.visitImplicitReceiver = function (ast, context) {};
        SimpleExpressionChecker.prototype.visitInterpolation = function (ast, context) {
            this.simple = false;
        };
        SimpleExpressionChecker.prototype.visitLiteralPrimitive = function (ast, context) {};
        SimpleExpressionChecker.prototype.visitPropertyRead = function (ast, context) {};
        SimpleExpressionChecker.prototype.visitPropertyWrite = function (ast, context) {
            this.simple = false;
        };
        SimpleExpressionChecker.prototype.visitSafePropertyRead = function (ast, context) {
            this.simple = false;
        };
        SimpleExpressionChecker.prototype.visitMethodCall = function (ast, context) {
            this.simple = false;
        };
        SimpleExpressionChecker.prototype.visitSafeMethodCall = function (ast, context) {
            this.simple = false;
        };
        SimpleExpressionChecker.prototype.visitFunctionCall = function (ast, context) {
            this.simple = false;
        };
        SimpleExpressionChecker.prototype.visitLiteralArray = function (ast, context) {
            this.visitAll(ast.expressions);
        };
        SimpleExpressionChecker.prototype.visitLiteralMap = function (ast, context) {
            this.visitAll(ast.values);
        };
        SimpleExpressionChecker.prototype.visitBinary = function (ast, context) {
            this.simple = false;
        };
        SimpleExpressionChecker.prototype.visitPrefixNot = function (ast, context) {
            this.simple = false;
        };
        SimpleExpressionChecker.prototype.visitConditional = function (ast, context) {
            this.simple = false;
        };
        SimpleExpressionChecker.prototype.visitPipe = function (ast, context) {
            this.simple = false;
        };
        SimpleExpressionChecker.prototype.visitKeyedRead = function (ast, context) {
            this.simple = false;
        };
        SimpleExpressionChecker.prototype.visitKeyedWrite = function (ast, context) {
            this.simple = false;
        };
        SimpleExpressionChecker.prototype.visitAll = function (asts) {
            var _this = this;
            return asts.map(function (node) {
                return node.visit(_this);
            });
        };
        SimpleExpressionChecker.prototype.visitChain = function (ast, context) {
            this.simple = false;
        };
        SimpleExpressionChecker.prototype.visitQuote = function (ast, context) {
            this.simple = false;
        };
        return SimpleExpressionChecker;
    }();
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/ml_parser/html_tags.js', ['./tags', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var tags_1 = $__require('./tags');
    var HtmlTagDefinition = function () {
        function HtmlTagDefinition(_a) {
            var _this = this;
            var _b = _a === void 0 ? {} : _a,
                closedByChildren = _b.closedByChildren,
                requiredParents = _b.requiredParents,
                implicitNamespacePrefix = _b.implicitNamespacePrefix,
                _c = _b.contentType,
                contentType = _c === void 0 ? tags_1.TagContentType.PARSABLE_DATA : _c,
                _d = _b.closedByParent,
                closedByParent = _d === void 0 ? false : _d,
                _e = _b.isVoid,
                isVoid = _e === void 0 ? false : _e,
                _f = _b.ignoreFirstLf,
                ignoreFirstLf = _f === void 0 ? false : _f;
            this.closedByChildren = {};
            this.closedByParent = false;
            this.canSelfClose = false;
            if (closedByChildren && closedByChildren.length > 0) {
                closedByChildren.forEach(function (tagName) {
                    return _this.closedByChildren[tagName] = true;
                });
            }
            this.isVoid = isVoid;
            this.closedByParent = closedByParent || isVoid;
            if (requiredParents && requiredParents.length > 0) {
                this.requiredParents = {};
                // The first parent is the list is automatically when none of the listed parents are present
                this.parentToAdd = requiredParents[0];
                requiredParents.forEach(function (tagName) {
                    return _this.requiredParents[tagName] = true;
                });
            }
            this.implicitNamespacePrefix = implicitNamespacePrefix;
            this.contentType = contentType;
            this.ignoreFirstLf = ignoreFirstLf;
        }
        HtmlTagDefinition.prototype.requireExtraParent = function (currentParent) {
            if (!this.requiredParents) {
                return false;
            }
            if (!currentParent) {
                return true;
            }
            var lcParent = currentParent.toLowerCase();
            return this.requiredParents[lcParent] != true && lcParent != 'template';
        };
        HtmlTagDefinition.prototype.isClosedByChild = function (name) {
            return this.isVoid || name.toLowerCase() in this.closedByChildren;
        };
        return HtmlTagDefinition;
    }();
    exports.HtmlTagDefinition = HtmlTagDefinition;
    // see http://www.w3.org/TR/html51/syntax.html#optional-tags
    // This implementation does not fully conform to the HTML5 spec.
    var TAG_DEFINITIONS = {
        'base': new HtmlTagDefinition({ isVoid: true }),
        'meta': new HtmlTagDefinition({ isVoid: true }),
        'area': new HtmlTagDefinition({ isVoid: true }),
        'embed': new HtmlTagDefinition({ isVoid: true }),
        'link': new HtmlTagDefinition({ isVoid: true }),
        'img': new HtmlTagDefinition({ isVoid: true }),
        'input': new HtmlTagDefinition({ isVoid: true }),
        'param': new HtmlTagDefinition({ isVoid: true }),
        'hr': new HtmlTagDefinition({ isVoid: true }),
        'br': new HtmlTagDefinition({ isVoid: true }),
        'source': new HtmlTagDefinition({ isVoid: true }),
        'track': new HtmlTagDefinition({ isVoid: true }),
        'wbr': new HtmlTagDefinition({ isVoid: true }),
        'p': new HtmlTagDefinition({
            closedByChildren: ['address', 'article', 'aside', 'blockquote', 'div', 'dl', 'fieldset', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'main', 'nav', 'ol', 'p', 'pre', 'section', 'table', 'ul'],
            closedByParent: true
        }),
        'thead': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'] }),
        'tbody': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'], closedByParent: true }),
        'tfoot': new HtmlTagDefinition({ closedByChildren: ['tbody'], closedByParent: true }),
        'tr': new HtmlTagDefinition({
            closedByChildren: ['tr'],
            requiredParents: ['tbody', 'tfoot', 'thead'],
            closedByParent: true
        }),
        'td': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),
        'th': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),
        'col': new HtmlTagDefinition({ requiredParents: ['colgroup'], isVoid: true }),
        'svg': new HtmlTagDefinition({ implicitNamespacePrefix: 'svg' }),
        'math': new HtmlTagDefinition({ implicitNamespacePrefix: 'math' }),
        'li': new HtmlTagDefinition({ closedByChildren: ['li'], closedByParent: true }),
        'dt': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'] }),
        'dd': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'], closedByParent: true }),
        'rb': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
        'rt': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
        'rtc': new HtmlTagDefinition({ closedByChildren: ['rb', 'rtc', 'rp'], closedByParent: true }),
        'rp': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
        'optgroup': new HtmlTagDefinition({ closedByChildren: ['optgroup'], closedByParent: true }),
        'option': new HtmlTagDefinition({ closedByChildren: ['option', 'optgroup'], closedByParent: true }),
        'pre': new HtmlTagDefinition({ ignoreFirstLf: true }),
        'listing': new HtmlTagDefinition({ ignoreFirstLf: true }),
        'style': new HtmlTagDefinition({ contentType: tags_1.TagContentType.RAW_TEXT }),
        'script': new HtmlTagDefinition({ contentType: tags_1.TagContentType.RAW_TEXT }),
        'title': new HtmlTagDefinition({ contentType: tags_1.TagContentType.ESCAPABLE_RAW_TEXT }),
        'textarea': new HtmlTagDefinition({ contentType: tags_1.TagContentType.ESCAPABLE_RAW_TEXT, ignoreFirstLf: true })
    };
    var _DEFAULT_TAG_DEFINITION = new HtmlTagDefinition();
    function getHtmlTagDefinition(tagName) {
        return TAG_DEFINITIONS[tagName.toLowerCase()] || _DEFAULT_TAG_DEFINITION;
    }
    exports.getHtmlTagDefinition = getHtmlTagDefinition;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/compiler@2.0.0-rc.5/src/chars.js", ["reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    exports.$EOF = 0;
    exports.$TAB = 9;
    exports.$LF = 10;
    exports.$VTAB = 11;
    exports.$FF = 12;
    exports.$CR = 13;
    exports.$SPACE = 32;
    exports.$BANG = 33;
    exports.$DQ = 34;
    exports.$HASH = 35;
    exports.$$ = 36;
    exports.$PERCENT = 37;
    exports.$AMPERSAND = 38;
    exports.$SQ = 39;
    exports.$LPAREN = 40;
    exports.$RPAREN = 41;
    exports.$STAR = 42;
    exports.$PLUS = 43;
    exports.$COMMA = 44;
    exports.$MINUS = 45;
    exports.$PERIOD = 46;
    exports.$SLASH = 47;
    exports.$COLON = 58;
    exports.$SEMICOLON = 59;
    exports.$LT = 60;
    exports.$EQ = 61;
    exports.$GT = 62;
    exports.$QUESTION = 63;
    exports.$0 = 48;
    exports.$9 = 57;
    exports.$A = 65;
    exports.$E = 69;
    exports.$F = 70;
    exports.$X = 88;
    exports.$Z = 90;
    exports.$LBRACKET = 91;
    exports.$BACKSLASH = 92;
    exports.$RBRACKET = 93;
    exports.$CARET = 94;
    exports.$_ = 95;
    exports.$a = 97;
    exports.$e = 101;
    exports.$f = 102;
    exports.$n = 110;
    exports.$r = 114;
    exports.$t = 116;
    exports.$u = 117;
    exports.$v = 118;
    exports.$x = 120;
    exports.$z = 122;
    exports.$LBRACE = 123;
    exports.$BAR = 124;
    exports.$RBRACE = 125;
    exports.$NBSP = 160;
    exports.$PIPE = 124;
    exports.$TILDA = 126;
    exports.$AT = 64;
    exports.$BT = 96;
    function isWhitespace(code) {
        return code >= exports.$TAB && code <= exports.$SPACE || code == exports.$NBSP;
    }
    exports.isWhitespace = isWhitespace;
    function isDigit(code) {
        return exports.$0 <= code && code <= exports.$9;
    }
    exports.isDigit = isDigit;
    function isAsciiLetter(code) {
        return code >= exports.$a && code <= exports.$z || code >= exports.$A && code <= exports.$Z;
    }
    exports.isAsciiLetter = isAsciiLetter;
    function isAsciiHexDigit(code) {
        return code >= exports.$a && code <= exports.$f || code >= exports.$A && code <= exports.$F || isDigit(code);
    }
    exports.isAsciiHexDigit = isAsciiHexDigit;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/ml_parser/lexer.js', ['../chars', '../parse_util', './interpolation_config', './tags', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var chars = $__require('../chars');
    var parse_util_1 = $__require('../parse_util');
    var interpolation_config_1 = $__require('./interpolation_config');
    var tags_1 = $__require('./tags');
    (function (TokenType) {
        TokenType[TokenType["TAG_OPEN_START"] = 0] = "TAG_OPEN_START";
        TokenType[TokenType["TAG_OPEN_END"] = 1] = "TAG_OPEN_END";
        TokenType[TokenType["TAG_OPEN_END_VOID"] = 2] = "TAG_OPEN_END_VOID";
        TokenType[TokenType["TAG_CLOSE"] = 3] = "TAG_CLOSE";
        TokenType[TokenType["TEXT"] = 4] = "TEXT";
        TokenType[TokenType["ESCAPABLE_RAW_TEXT"] = 5] = "ESCAPABLE_RAW_TEXT";
        TokenType[TokenType["RAW_TEXT"] = 6] = "RAW_TEXT";
        TokenType[TokenType["COMMENT_START"] = 7] = "COMMENT_START";
        TokenType[TokenType["COMMENT_END"] = 8] = "COMMENT_END";
        TokenType[TokenType["CDATA_START"] = 9] = "CDATA_START";
        TokenType[TokenType["CDATA_END"] = 10] = "CDATA_END";
        TokenType[TokenType["ATTR_NAME"] = 11] = "ATTR_NAME";
        TokenType[TokenType["ATTR_VALUE"] = 12] = "ATTR_VALUE";
        TokenType[TokenType["DOC_TYPE"] = 13] = "DOC_TYPE";
        TokenType[TokenType["EXPANSION_FORM_START"] = 14] = "EXPANSION_FORM_START";
        TokenType[TokenType["EXPANSION_CASE_VALUE"] = 15] = "EXPANSION_CASE_VALUE";
        TokenType[TokenType["EXPANSION_CASE_EXP_START"] = 16] = "EXPANSION_CASE_EXP_START";
        TokenType[TokenType["EXPANSION_CASE_EXP_END"] = 17] = "EXPANSION_CASE_EXP_END";
        TokenType[TokenType["EXPANSION_FORM_END"] = 18] = "EXPANSION_FORM_END";
        TokenType[TokenType["EOF"] = 19] = "EOF";
    })(exports.TokenType || (exports.TokenType = {}));
    var TokenType = exports.TokenType;
    var Token = function () {
        function Token(type, parts, sourceSpan) {
            this.type = type;
            this.parts = parts;
            this.sourceSpan = sourceSpan;
        }
        return Token;
    }();
    exports.Token = Token;
    var TokenError = function (_super) {
        __extends(TokenError, _super);
        function TokenError(errorMsg, tokenType, span) {
            _super.call(this, span, errorMsg);
            this.tokenType = tokenType;
        }
        return TokenError;
    }(parse_util_1.ParseError);
    exports.TokenError = TokenError;
    var TokenizeResult = function () {
        function TokenizeResult(tokens, errors) {
            this.tokens = tokens;
            this.errors = errors;
        }
        return TokenizeResult;
    }();
    exports.TokenizeResult = TokenizeResult;
    function tokenize(source, url, getTagDefinition, tokenizeExpansionForms, interpolationConfig) {
        if (tokenizeExpansionForms === void 0) {
            tokenizeExpansionForms = false;
        }
        if (interpolationConfig === void 0) {
            interpolationConfig = interpolation_config_1.DEFAULT_INTERPOLATION_CONFIG;
        }
        return new _Tokenizer(new parse_util_1.ParseSourceFile(source, url), getTagDefinition, tokenizeExpansionForms, interpolationConfig).tokenize();
    }
    exports.tokenize = tokenize;
    var _CR_OR_CRLF_REGEXP = /\r\n?/g;
    function _unexpectedCharacterErrorMsg(charCode) {
        var char = charCode === chars.$EOF ? 'EOF' : String.fromCharCode(charCode);
        return "Unexpected character \"" + char + "\"";
    }
    function _unknownEntityErrorMsg(entitySrc) {
        return "Unknown entity \"" + entitySrc + "\" - use the \"&#<decimal>;\" or  \"&#x<hex>;\" syntax";
    }
    var _ControlFlowError = function () {
        function _ControlFlowError(error) {
            this.error = error;
        }
        return _ControlFlowError;
    }();
    // See http://www.w3.org/TR/html51/syntax.html#writing
    var _Tokenizer = function () {
        /**
         * @param _file The html source
         * @param _getTagDefinition
         * @param _tokenizeIcu Whether to tokenize ICU messages (considered as text nodes when false)
         * @param _interpolationConfig
         */
        function _Tokenizer(_file, _getTagDefinition, _tokenizeIcu, _interpolationConfig) {
            if (_interpolationConfig === void 0) {
                _interpolationConfig = interpolation_config_1.DEFAULT_INTERPOLATION_CONFIG;
            }
            this._file = _file;
            this._getTagDefinition = _getTagDefinition;
            this._tokenizeIcu = _tokenizeIcu;
            this._interpolationConfig = _interpolationConfig;
            // Note: this is always lowercase!
            this._peek = -1;
            this._nextPeek = -1;
            this._index = -1;
            this._line = 0;
            this._column = -1;
            this._expansionCaseStack = [];
            this._inInterpolation = false;
            this.tokens = [];
            this.errors = [];
            this._input = _file.content;
            this._length = _file.content.length;
            this._advance();
        }
        _Tokenizer.prototype._processCarriageReturns = function (content) {
            // http://www.w3.org/TR/html5/syntax.html#preprocessing-the-input-stream
            // In order to keep the original position in the source, we can not
            // pre-process it.
            // Instead CRs are processed right before instantiating the tokens.
            return content.replace(_CR_OR_CRLF_REGEXP, '\n');
        };
        _Tokenizer.prototype.tokenize = function () {
            while (this._peek !== chars.$EOF) {
                var start = this._getLocation();
                try {
                    if (this._attemptCharCode(chars.$LT)) {
                        if (this._attemptCharCode(chars.$BANG)) {
                            if (this._attemptCharCode(chars.$LBRACKET)) {
                                this._consumeCdata(start);
                            } else if (this._attemptCharCode(chars.$MINUS)) {
                                this._consumeComment(start);
                            } else {
                                this._consumeDocType(start);
                            }
                        } else if (this._attemptCharCode(chars.$SLASH)) {
                            this._consumeTagClose(start);
                        } else {
                            this._consumeTagOpen(start);
                        }
                    } else if (!this._tokenizeIcu || !this._tokenizeExpansionForm()) {
                        this._consumeText();
                    }
                } catch (e) {
                    if (e instanceof _ControlFlowError) {
                        this.errors.push(e.error);
                    } else {
                        throw e;
                    }
                }
            }
            this._beginToken(TokenType.EOF);
            this._endToken([]);
            return new TokenizeResult(mergeTextTokens(this.tokens), this.errors);
        };
        /**
         * @returns {boolean} whether an ICU token has been created
         * @internal
         */
        _Tokenizer.prototype._tokenizeExpansionForm = function () {
            if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {
                this._consumeExpansionFormStart();
                return true;
            }
            if (isExpansionCaseStart(this._peek) && this._isInExpansionForm()) {
                this._consumeExpansionCaseStart();
                return true;
            }
            if (this._peek === chars.$RBRACE) {
                if (this._isInExpansionCase()) {
                    this._consumeExpansionCaseEnd();
                    return true;
                }
                if (this._isInExpansionForm()) {
                    this._consumeExpansionFormEnd();
                    return true;
                }
            }
            return false;
        };
        _Tokenizer.prototype._getLocation = function () {
            return new parse_util_1.ParseLocation(this._file, this._index, this._line, this._column);
        };
        _Tokenizer.prototype._getSpan = function (start, end) {
            if (start === void 0) {
                start = this._getLocation();
            }
            if (end === void 0) {
                end = this._getLocation();
            }
            return new parse_util_1.ParseSourceSpan(start, end);
        };
        _Tokenizer.prototype._beginToken = function (type, start) {
            if (start === void 0) {
                start = this._getLocation();
            }
            this._currentTokenStart = start;
            this._currentTokenType = type;
        };
        _Tokenizer.prototype._endToken = function (parts, end) {
            if (end === void 0) {
                end = this._getLocation();
            }
            var token = new Token(this._currentTokenType, parts, new parse_util_1.ParseSourceSpan(this._currentTokenStart, end));
            this.tokens.push(token);
            this._currentTokenStart = null;
            this._currentTokenType = null;
            return token;
        };
        _Tokenizer.prototype._createError = function (msg, span) {
            if (this._isInExpansionForm()) {
                msg += " (Do you have an unescaped \"{\" in your template? Use \"{{ '{' }}\") to escape it.)";
            }
            var error = new TokenError(msg, this._currentTokenType, span);
            this._currentTokenStart = null;
            this._currentTokenType = null;
            return new _ControlFlowError(error);
        };
        _Tokenizer.prototype._advance = function () {
            if (this._index >= this._length) {
                throw this._createError(_unexpectedCharacterErrorMsg(chars.$EOF), this._getSpan());
            }
            if (this._peek === chars.$LF) {
                this._line++;
                this._column = 0;
            } else if (this._peek !== chars.$LF && this._peek !== chars.$CR) {
                this._column++;
            }
            this._index++;
            this._peek = this._index >= this._length ? chars.$EOF : this._input.charCodeAt(this._index);
            this._nextPeek = this._index + 1 >= this._length ? chars.$EOF : this._input.charCodeAt(this._index + 1);
        };
        _Tokenizer.prototype._attemptCharCode = function (charCode) {
            if (this._peek === charCode) {
                this._advance();
                return true;
            }
            return false;
        };
        _Tokenizer.prototype._attemptCharCodeCaseInsensitive = function (charCode) {
            if (compareCharCodeCaseInsensitive(this._peek, charCode)) {
                this._advance();
                return true;
            }
            return false;
        };
        _Tokenizer.prototype._requireCharCode = function (charCode) {
            var location = this._getLocation();
            if (!this._attemptCharCode(charCode)) {
                throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location, location));
            }
        };
        _Tokenizer.prototype._attemptStr = function (chars) {
            var len = chars.length;
            if (this._index + len > this._length) {
                return false;
            }
            var initialPosition = this._savePosition();
            for (var i = 0; i < len; i++) {
                if (!this._attemptCharCode(chars.charCodeAt(i))) {
                    // If attempting to parse the string fails, we want to reset the parser
                    // to where it was before the attempt
                    this._restorePosition(initialPosition);
                    return false;
                }
            }
            return true;
        };
        _Tokenizer.prototype._attemptStrCaseInsensitive = function (chars) {
            for (var i = 0; i < chars.length; i++) {
                if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) {
                    return false;
                }
            }
            return true;
        };
        _Tokenizer.prototype._requireStr = function (chars) {
            var location = this._getLocation();
            if (!this._attemptStr(chars)) {
                throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location));
            }
        };
        _Tokenizer.prototype._attemptCharCodeUntilFn = function (predicate) {
            while (!predicate(this._peek)) {
                this._advance();
            }
        };
        _Tokenizer.prototype._requireCharCodeUntilFn = function (predicate, len) {
            var start = this._getLocation();
            this._attemptCharCodeUntilFn(predicate);
            if (this._index - start.offset < len) {
                throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(start, start));
            }
        };
        _Tokenizer.prototype._attemptUntilChar = function (char) {
            while (this._peek !== char) {
                this._advance();
            }
        };
        _Tokenizer.prototype._readChar = function (decodeEntities) {
            if (decodeEntities && this._peek === chars.$AMPERSAND) {
                return this._decodeEntity();
            } else {
                var index = this._index;
                this._advance();
                return this._input[index];
            }
        };
        _Tokenizer.prototype._decodeEntity = function () {
            var start = this._getLocation();
            this._advance();
            if (this._attemptCharCode(chars.$HASH)) {
                var isHex = this._attemptCharCode(chars.$x) || this._attemptCharCode(chars.$X);
                var numberStart = this._getLocation().offset;
                this._attemptCharCodeUntilFn(isDigitEntityEnd);
                if (this._peek != chars.$SEMICOLON) {
                    throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());
                }
                this._advance();
                var strNum = this._input.substring(numberStart, this._index - 1);
                try {
                    var charCode = parseInt(strNum, isHex ? 16 : 10);
                    return String.fromCharCode(charCode);
                } catch (e) {
                    var entity = this._input.substring(start.offset + 1, this._index - 1);
                    throw this._createError(_unknownEntityErrorMsg(entity), this._getSpan(start));
                }
            } else {
                var startPosition = this._savePosition();
                this._attemptCharCodeUntilFn(isNamedEntityEnd);
                if (this._peek != chars.$SEMICOLON) {
                    this._restorePosition(startPosition);
                    return '&';
                }
                this._advance();
                var name_1 = this._input.substring(start.offset + 1, this._index - 1);
                var char = tags_1.NAMED_ENTITIES[name_1];
                if (!char) {
                    throw this._createError(_unknownEntityErrorMsg(name_1), this._getSpan(start));
                }
                return char;
            }
        };
        _Tokenizer.prototype._consumeRawText = function (decodeEntities, firstCharOfEnd, attemptEndRest) {
            var tagCloseStart;
            var textStart = this._getLocation();
            this._beginToken(decodeEntities ? TokenType.ESCAPABLE_RAW_TEXT : TokenType.RAW_TEXT, textStart);
            var parts = [];
            while (true) {
                tagCloseStart = this._getLocation();
                if (this._attemptCharCode(firstCharOfEnd) && attemptEndRest()) {
                    break;
                }
                if (this._index > tagCloseStart.offset) {
                    // add the characters consumed by the previous if statement to the output
                    parts.push(this._input.substring(tagCloseStart.offset, this._index));
                }
                while (this._peek !== firstCharOfEnd) {
                    parts.push(this._readChar(decodeEntities));
                }
            }
            return this._endToken([this._processCarriageReturns(parts.join(''))], tagCloseStart);
        };
        _Tokenizer.prototype._consumeComment = function (start) {
            var _this = this;
            this._beginToken(TokenType.COMMENT_START, start);
            this._requireCharCode(chars.$MINUS);
            this._endToken([]);
            var textToken = this._consumeRawText(false, chars.$MINUS, function () {
                return _this._attemptStr('->');
            });
            this._beginToken(TokenType.COMMENT_END, textToken.sourceSpan.end);
            this._endToken([]);
        };
        _Tokenizer.prototype._consumeCdata = function (start) {
            var _this = this;
            this._beginToken(TokenType.CDATA_START, start);
            this._requireStr('CDATA[');
            this._endToken([]);
            var textToken = this._consumeRawText(false, chars.$RBRACKET, function () {
                return _this._attemptStr(']>');
            });
            this._beginToken(TokenType.CDATA_END, textToken.sourceSpan.end);
            this._endToken([]);
        };
        _Tokenizer.prototype._consumeDocType = function (start) {
            this._beginToken(TokenType.DOC_TYPE, start);
            this._attemptUntilChar(chars.$GT);
            this._advance();
            this._endToken([this._input.substring(start.offset + 2, this._index - 1)]);
        };
        _Tokenizer.prototype._consumePrefixAndName = function () {
            var nameOrPrefixStart = this._index;
            var prefix = null;
            while (this._peek !== chars.$COLON && !isPrefixEnd(this._peek)) {
                this._advance();
            }
            var nameStart;
            if (this._peek === chars.$COLON) {
                this._advance();
                prefix = this._input.substring(nameOrPrefixStart, this._index - 1);
                nameStart = this._index;
            } else {
                nameStart = nameOrPrefixStart;
            }
            this._requireCharCodeUntilFn(isNameEnd, this._index === nameStart ? 1 : 0);
            var name = this._input.substring(nameStart, this._index);
            return [prefix, name];
        };
        _Tokenizer.prototype._consumeTagOpen = function (start) {
            var savedPos = this._savePosition();
            var tagName;
            var lowercaseTagName;
            try {
                if (!chars.isAsciiLetter(this._peek)) {
                    throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());
                }
                var nameStart = this._index;
                this._consumeTagOpenStart(start);
                tagName = this._input.substring(nameStart, this._index);
                lowercaseTagName = tagName.toLowerCase();
                this._attemptCharCodeUntilFn(isNotWhitespace);
                while (this._peek !== chars.$SLASH && this._peek !== chars.$GT) {
                    this._consumeAttributeName();
                    this._attemptCharCodeUntilFn(isNotWhitespace);
                    if (this._attemptCharCode(chars.$EQ)) {
                        this._attemptCharCodeUntilFn(isNotWhitespace);
                        this._consumeAttributeValue();
                    }
                    this._attemptCharCodeUntilFn(isNotWhitespace);
                }
                this._consumeTagOpenEnd();
            } catch (e) {
                if (e instanceof _ControlFlowError) {
                    // When the start tag is invalid, assume we want a "<"
                    this._restorePosition(savedPos);
                    // Back to back text tokens are merged at the end
                    this._beginToken(TokenType.TEXT, start);
                    this._endToken(['<']);
                    return;
                }
                throw e;
            }
            var contentTokenType = this._getTagDefinition(tagName).contentType;
            if (contentTokenType === tags_1.TagContentType.RAW_TEXT) {
                this._consumeRawTextWithTagClose(lowercaseTagName, false);
            } else if (contentTokenType === tags_1.TagContentType.ESCAPABLE_RAW_TEXT) {
                this._consumeRawTextWithTagClose(lowercaseTagName, true);
            }
        };
        _Tokenizer.prototype._consumeRawTextWithTagClose = function (lowercaseTagName, decodeEntities) {
            var _this = this;
            var textToken = this._consumeRawText(decodeEntities, chars.$LT, function () {
                if (!_this._attemptCharCode(chars.$SLASH)) return false;
                _this._attemptCharCodeUntilFn(isNotWhitespace);
                if (!_this._attemptStrCaseInsensitive(lowercaseTagName)) return false;
                _this._attemptCharCodeUntilFn(isNotWhitespace);
                return _this._attemptCharCode(chars.$GT);
            });
            this._beginToken(TokenType.TAG_CLOSE, textToken.sourceSpan.end);
            this._endToken([null, lowercaseTagName]);
        };
        _Tokenizer.prototype._consumeTagOpenStart = function (start) {
            this._beginToken(TokenType.TAG_OPEN_START, start);
            var parts = this._consumePrefixAndName();
            this._endToken(parts);
        };
        _Tokenizer.prototype._consumeAttributeName = function () {
            this._beginToken(TokenType.ATTR_NAME);
            var prefixAndName = this._consumePrefixAndName();
            this._endToken(prefixAndName);
        };
        _Tokenizer.prototype._consumeAttributeValue = function () {
            this._beginToken(TokenType.ATTR_VALUE);
            var value;
            if (this._peek === chars.$SQ || this._peek === chars.$DQ) {
                var quoteChar = this._peek;
                this._advance();
                var parts = [];
                while (this._peek !== quoteChar) {
                    parts.push(this._readChar(true));
                }
                value = parts.join('');
                this._advance();
            } else {
                var valueStart = this._index;
                this._requireCharCodeUntilFn(isNameEnd, 1);
                value = this._input.substring(valueStart, this._index);
            }
            this._endToken([this._processCarriageReturns(value)]);
        };
        _Tokenizer.prototype._consumeTagOpenEnd = function () {
            var tokenType = this._attemptCharCode(chars.$SLASH) ? TokenType.TAG_OPEN_END_VOID : TokenType.TAG_OPEN_END;
            this._beginToken(tokenType);
            this._requireCharCode(chars.$GT);
            this._endToken([]);
        };
        _Tokenizer.prototype._consumeTagClose = function (start) {
            this._beginToken(TokenType.TAG_CLOSE, start);
            this._attemptCharCodeUntilFn(isNotWhitespace);
            var prefixAndName = this._consumePrefixAndName();
            this._attemptCharCodeUntilFn(isNotWhitespace);
            this._requireCharCode(chars.$GT);
            this._endToken(prefixAndName);
        };
        _Tokenizer.prototype._consumeExpansionFormStart = function () {
            this._beginToken(TokenType.EXPANSION_FORM_START, this._getLocation());
            this._requireCharCode(chars.$LBRACE);
            this._endToken([]);
            this._expansionCaseStack.push(TokenType.EXPANSION_FORM_START);
            this._beginToken(TokenType.RAW_TEXT, this._getLocation());
            var condition = this._readUntil(chars.$COMMA);
            this._endToken([condition], this._getLocation());
            this._requireCharCode(chars.$COMMA);
            this._attemptCharCodeUntilFn(isNotWhitespace);
            this._beginToken(TokenType.RAW_TEXT, this._getLocation());
            var type = this._readUntil(chars.$COMMA);
            this._endToken([type], this._getLocation());
            this._requireCharCode(chars.$COMMA);
            this._attemptCharCodeUntilFn(isNotWhitespace);
        };
        _Tokenizer.prototype._consumeExpansionCaseStart = function () {
            this._beginToken(TokenType.EXPANSION_CASE_VALUE, this._getLocation());
            var value = this._readUntil(chars.$LBRACE).trim();
            this._endToken([value], this._getLocation());
            this._attemptCharCodeUntilFn(isNotWhitespace);
            this._beginToken(TokenType.EXPANSION_CASE_EXP_START, this._getLocation());
            this._requireCharCode(chars.$LBRACE);
            this._endToken([], this._getLocation());
            this._attemptCharCodeUntilFn(isNotWhitespace);
            this._expansionCaseStack.push(TokenType.EXPANSION_CASE_EXP_START);
        };
        _Tokenizer.prototype._consumeExpansionCaseEnd = function () {
            this._beginToken(TokenType.EXPANSION_CASE_EXP_END, this._getLocation());
            this._requireCharCode(chars.$RBRACE);
            this._endToken([], this._getLocation());
            this._attemptCharCodeUntilFn(isNotWhitespace);
            this._expansionCaseStack.pop();
        };
        _Tokenizer.prototype._consumeExpansionFormEnd = function () {
            this._beginToken(TokenType.EXPANSION_FORM_END, this._getLocation());
            this._requireCharCode(chars.$RBRACE);
            this._endToken([]);
            this._expansionCaseStack.pop();
        };
        _Tokenizer.prototype._consumeText = function () {
            var start = this._getLocation();
            this._beginToken(TokenType.TEXT, start);
            var parts = [];
            do {
                if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.start)) {
                    parts.push(this._interpolationConfig.start);
                    this._inInterpolation = true;
                } else if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.end) && this._inInterpolation) {
                    parts.push(this._interpolationConfig.end);
                    this._inInterpolation = false;
                } else {
                    parts.push(this._readChar(true));
                }
            } while (!this._isTextEnd());
            this._endToken([this._processCarriageReturns(parts.join(''))]);
        };
        _Tokenizer.prototype._isTextEnd = function () {
            if (this._peek === chars.$LT || this._peek === chars.$EOF) {
                return true;
            }
            if (this._tokenizeIcu && !this._inInterpolation) {
                if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {
                    // start of an expansion form
                    return true;
                }
                if (this._peek === chars.$RBRACE && this._isInExpansionCase()) {
                    // end of and expansion case
                    return true;
                }
            }
            return false;
        };
        _Tokenizer.prototype._savePosition = function () {
            return [this._peek, this._index, this._column, this._line, this.tokens.length];
        };
        _Tokenizer.prototype._readUntil = function (char) {
            var start = this._index;
            this._attemptUntilChar(char);
            return this._input.substring(start, this._index);
        };
        _Tokenizer.prototype._restorePosition = function (position) {
            this._peek = position[0];
            this._index = position[1];
            this._column = position[2];
            this._line = position[3];
            var nbTokens = position[4];
            if (nbTokens < this.tokens.length) {
                // remove any extra tokens
                this.tokens = this.tokens.slice(0, nbTokens);
            }
        };
        _Tokenizer.prototype._isInExpansionCase = function () {
            return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === TokenType.EXPANSION_CASE_EXP_START;
        };
        _Tokenizer.prototype._isInExpansionForm = function () {
            return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === TokenType.EXPANSION_FORM_START;
        };
        return _Tokenizer;
    }();
    function isNotWhitespace(code) {
        return !chars.isWhitespace(code) || code === chars.$EOF;
    }
    function isNameEnd(code) {
        return chars.isWhitespace(code) || code === chars.$GT || code === chars.$SLASH || code === chars.$SQ || code === chars.$DQ || code === chars.$EQ;
    }
    function isPrefixEnd(code) {
        return (code < chars.$a || chars.$z < code) && (code < chars.$A || chars.$Z < code) && (code < chars.$0 || code > chars.$9);
    }
    function isDigitEntityEnd(code) {
        return code == chars.$SEMICOLON || code == chars.$EOF || !chars.isAsciiHexDigit(code);
    }
    function isNamedEntityEnd(code) {
        return code == chars.$SEMICOLON || code == chars.$EOF || !chars.isAsciiLetter(code);
    }
    function isExpansionFormStart(input, offset, interpolationConfig) {
        var isInterpolationStart = interpolationConfig ? input.indexOf(interpolationConfig.start, offset) == offset : false;
        return input.charCodeAt(offset) == chars.$LBRACE && !isInterpolationStart;
    }
    function isExpansionCaseStart(peek) {
        return peek === chars.$EQ || chars.isAsciiLetter(peek);
    }
    function compareCharCodeCaseInsensitive(code1, code2) {
        return toUpperCaseCharCode(code1) == toUpperCaseCharCode(code2);
    }
    function toUpperCaseCharCode(code) {
        return code >= chars.$a && code <= chars.$z ? code - chars.$a + chars.$A : code;
    }
    function mergeTextTokens(srcTokens) {
        var dstTokens = [];
        var lastDstToken;
        for (var i = 0; i < srcTokens.length; i++) {
            var token = srcTokens[i];
            if (lastDstToken && lastDstToken.type == TokenType.TEXT && token.type == TokenType.TEXT) {
                lastDstToken.parts[0] += token.parts[0];
                lastDstToken.sourceSpan.end = token.sourceSpan.end;
            } else {
                lastDstToken = token;
                dstTokens.push(lastDstToken);
            }
        }
        return dstTokens;
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/ml_parser/parser.js', ['../facade/collection', '../facade/lang', '../parse_util', './ast', './interpolation_config', './lexer', './tags', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var collection_1 = $__require('../facade/collection');
    var lang_1 = $__require('../facade/lang');
    var parse_util_1 = $__require('../parse_util');
    var html = $__require('./ast');
    var interpolation_config_1 = $__require('./interpolation_config');
    var lex = $__require('./lexer');
    var tags_1 = $__require('./tags');
    var TreeError = function (_super) {
        __extends(TreeError, _super);
        function TreeError(elementName, span, msg) {
            _super.call(this, span, msg);
            this.elementName = elementName;
        }
        TreeError.create = function (elementName, span, msg) {
            return new TreeError(elementName, span, msg);
        };
        return TreeError;
    }(parse_util_1.ParseError);
    exports.TreeError = TreeError;
    var ParseTreeResult = function () {
        function ParseTreeResult(rootNodes, errors) {
            this.rootNodes = rootNodes;
            this.errors = errors;
        }
        return ParseTreeResult;
    }();
    exports.ParseTreeResult = ParseTreeResult;
    var Parser = function () {
        function Parser(_getTagDefinition) {
            this._getTagDefinition = _getTagDefinition;
        }
        Parser.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) {
            if (parseExpansionForms === void 0) {
                parseExpansionForms = false;
            }
            if (interpolationConfig === void 0) {
                interpolationConfig = interpolation_config_1.DEFAULT_INTERPOLATION_CONFIG;
            }
            var tokensAndErrors = lex.tokenize(source, url, this._getTagDefinition, parseExpansionForms, interpolationConfig);
            var treeAndErrors = new _TreeBuilder(tokensAndErrors.tokens, this._getTagDefinition).build();
            return new ParseTreeResult(treeAndErrors.rootNodes, tokensAndErrors.errors.concat(treeAndErrors.errors));
        };
        return Parser;
    }();
    exports.Parser = Parser;
    var _TreeBuilder = function () {
        function _TreeBuilder(tokens, getTagDefinition) {
            this.tokens = tokens;
            this.getTagDefinition = getTagDefinition;
            this._index = -1;
            this._rootNodes = [];
            this._errors = [];
            this._elementStack = [];
            this._advance();
        }
        _TreeBuilder.prototype.build = function () {
            while (this._peek.type !== lex.TokenType.EOF) {
                if (this._peek.type === lex.TokenType.TAG_OPEN_START) {
                    this._consumeStartTag(this._advance());
                } else if (this._peek.type === lex.TokenType.TAG_CLOSE) {
                    this._consumeEndTag(this._advance());
                } else if (this._peek.type === lex.TokenType.CDATA_START) {
                    this._closeVoidElement();
                    this._consumeCdata(this._advance());
                } else if (this._peek.type === lex.TokenType.COMMENT_START) {
                    this._closeVoidElement();
                    this._consumeComment(this._advance());
                } else if (this._peek.type === lex.TokenType.TEXT || this._peek.type === lex.TokenType.RAW_TEXT || this._peek.type === lex.TokenType.ESCAPABLE_RAW_TEXT) {
                    this._closeVoidElement();
                    this._consumeText(this._advance());
                } else if (this._peek.type === lex.TokenType.EXPANSION_FORM_START) {
                    this._consumeExpansion(this._advance());
                } else {
                    // Skip all other tokens...
                    this._advance();
                }
            }
            return new ParseTreeResult(this._rootNodes, this._errors);
        };
        _TreeBuilder.prototype._advance = function () {
            var prev = this._peek;
            if (this._index < this.tokens.length - 1) {
                // Note: there is always an EOF token at the end
                this._index++;
            }
            this._peek = this.tokens[this._index];
            return prev;
        };
        _TreeBuilder.prototype._advanceIf = function (type) {
            if (this._peek.type === type) {
                return this._advance();
            }
            return null;
        };
        _TreeBuilder.prototype._consumeCdata = function (startToken) {
            this._consumeText(this._advance());
            this._advanceIf(lex.TokenType.CDATA_END);
        };
        _TreeBuilder.prototype._consumeComment = function (token) {
            var text = this._advanceIf(lex.TokenType.RAW_TEXT);
            this._advanceIf(lex.TokenType.COMMENT_END);
            var value = lang_1.isPresent(text) ? text.parts[0].trim() : null;
            this._addToParent(new html.Comment(value, token.sourceSpan));
        };
        _TreeBuilder.prototype._consumeExpansion = function (token) {
            var switchValue = this._advance();
            var type = this._advance();
            var cases = [];
            // read =
            while (this._peek.type === lex.TokenType.EXPANSION_CASE_VALUE) {
                var expCase = this._parseExpansionCase();
                if (lang_1.isBlank(expCase)) return; // error
                cases.push(expCase);
            }
            // read the final }
            if (this._peek.type !== lex.TokenType.EXPANSION_FORM_END) {
                this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '}'."));
                return;
            }
            var sourceSpan = new parse_util_1.ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end);
            this._addToParent(new html.Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan));
            this._advance();
        };
        _TreeBuilder.prototype._parseExpansionCase = function () {
            var value = this._advance();
            // read {
            if (this._peek.type !== lex.TokenType.EXPANSION_CASE_EXP_START) {
                this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '{'."));
                return null;
            }
            // read until }
            var start = this._advance();
            var exp = this._collectExpansionExpTokens(start);
            if (lang_1.isBlank(exp)) return null;
            var end = this._advance();
            exp.push(new lex.Token(lex.TokenType.EOF, [], end.sourceSpan));
            // parse everything in between { and }
            var parsedExp = new _TreeBuilder(exp, this.getTagDefinition).build();
            if (parsedExp.errors.length > 0) {
                this._errors = this._errors.concat(parsedExp.errors);
                return null;
            }
            var sourceSpan = new parse_util_1.ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end);
            var expSourceSpan = new parse_util_1.ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end);
            return new html.ExpansionCase(value.parts[0], parsedExp.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);
        };
        _TreeBuilder.prototype._collectExpansionExpTokens = function (start) {
            var exp = [];
            var expansionFormStack = [lex.TokenType.EXPANSION_CASE_EXP_START];
            while (true) {
                if (this._peek.type === lex.TokenType.EXPANSION_FORM_START || this._peek.type === lex.TokenType.EXPANSION_CASE_EXP_START) {
                    expansionFormStack.push(this._peek.type);
                }
                if (this._peek.type === lex.TokenType.EXPANSION_CASE_EXP_END) {
                    if (lastOnStack(expansionFormStack, lex.TokenType.EXPANSION_CASE_EXP_START)) {
                        expansionFormStack.pop();
                        if (expansionFormStack.length == 0) return exp;
                    } else {
                        this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
                        return null;
                    }
                }
                if (this._peek.type === lex.TokenType.EXPANSION_FORM_END) {
                    if (lastOnStack(expansionFormStack, lex.TokenType.EXPANSION_FORM_START)) {
                        expansionFormStack.pop();
                    } else {
                        this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
                        return null;
                    }
                }
                if (this._peek.type === lex.TokenType.EOF) {
                    this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
                    return null;
                }
                exp.push(this._advance());
            }
        };
        _TreeBuilder.prototype._consumeText = function (token) {
            var text = token.parts[0];
            if (text.length > 0 && text[0] == '\n') {
                var parent_1 = this._getParentElement();
                if (lang_1.isPresent(parent_1) && parent_1.children.length == 0 && this.getTagDefinition(parent_1.name).ignoreFirstLf) {
                    text = text.substring(1);
                }
            }
            if (text.length > 0) {
                this._addToParent(new html.Text(text, token.sourceSpan));
            }
        };
        _TreeBuilder.prototype._closeVoidElement = function () {
            if (this._elementStack.length > 0) {
                var el = collection_1.ListWrapper.last(this._elementStack);
                if (this.getTagDefinition(el.name).isVoid) {
                    this._elementStack.pop();
                }
            }
        };
        _TreeBuilder.prototype._consumeStartTag = function (startTagToken) {
            var prefix = startTagToken.parts[0];
            var name = startTagToken.parts[1];
            var attrs = [];
            while (this._peek.type === lex.TokenType.ATTR_NAME) {
                attrs.push(this._consumeAttr(this._advance()));
            }
            var fullName = this._getElementFullName(prefix, name, this._getParentElement());
            var selfClosing = false;
            // Note: There could have been a tokenizer error
            // so that we don't get a token for the end tag...
            if (this._peek.type === lex.TokenType.TAG_OPEN_END_VOID) {
                this._advance();
                selfClosing = true;
                var tagDef = this.getTagDefinition(fullName);
                if (!(tagDef.canSelfClose || tags_1.getNsPrefix(fullName) !== null || tagDef.isVoid)) {
                    this._errors.push(TreeError.create(fullName, startTagToken.sourceSpan, "Only void and foreign elements can be self closed \"" + startTagToken.parts[1] + "\""));
                }
            } else if (this._peek.type === lex.TokenType.TAG_OPEN_END) {
                this._advance();
                selfClosing = false;
            }
            var end = this._peek.sourceSpan.start;
            var span = new parse_util_1.ParseSourceSpan(startTagToken.sourceSpan.start, end);
            var el = new html.Element(fullName, attrs, [], span, span, null);
            this._pushElement(el);
            if (selfClosing) {
                this._popElement(fullName);
                el.endSourceSpan = span;
            }
        };
        _TreeBuilder.prototype._pushElement = function (el) {
            if (this._elementStack.length > 0) {
                var parentEl = collection_1.ListWrapper.last(this._elementStack);
                if (this.getTagDefinition(parentEl.name).isClosedByChild(el.name)) {
                    this._elementStack.pop();
                }
            }
            var tagDef = this.getTagDefinition(el.name);
            var _a = this._getParentElementSkippingContainers(),
                parent = _a.parent,
                container = _a.container;
            if (lang_1.isPresent(parent) && tagDef.requireExtraParent(parent.name)) {
                var newParent = new html.Element(tagDef.parentToAdd, [], [], el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
                this._insertBeforeContainer(parent, container, newParent);
            }
            this._addToParent(el);
            this._elementStack.push(el);
        };
        _TreeBuilder.prototype._consumeEndTag = function (endTagToken) {
            var fullName = this._getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());
            if (this._getParentElement()) {
                this._getParentElement().endSourceSpan = endTagToken.sourceSpan;
            }
            if (this.getTagDefinition(fullName).isVoid) {
                this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, "Void elements do not have end tags \"" + endTagToken.parts[1] + "\""));
            } else if (!this._popElement(fullName)) {
                this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, "Unexpected closing tag \"" + endTagToken.parts[1] + "\""));
            }
        };
        _TreeBuilder.prototype._popElement = function (fullName) {
            for (var stackIndex = this._elementStack.length - 1; stackIndex >= 0; stackIndex--) {
                var el = this._elementStack[stackIndex];
                if (el.name == fullName) {
                    collection_1.ListWrapper.splice(this._elementStack, stackIndex, this._elementStack.length - stackIndex);
                    return true;
                }
                if (!this.getTagDefinition(el.name).closedByParent) {
                    return false;
                }
            }
            return false;
        };
        _TreeBuilder.prototype._consumeAttr = function (attrName) {
            var fullName = tags_1.mergeNsAndName(attrName.parts[0], attrName.parts[1]);
            var end = attrName.sourceSpan.end;
            var value = '';
            if (this._peek.type === lex.TokenType.ATTR_VALUE) {
                var valueToken = this._advance();
                value = valueToken.parts[0];
                end = valueToken.sourceSpan.end;
            }
            return new html.Attribute(fullName, value, new parse_util_1.ParseSourceSpan(attrName.sourceSpan.start, end));
        };
        _TreeBuilder.prototype._getParentElement = function () {
            return this._elementStack.length > 0 ? collection_1.ListWrapper.last(this._elementStack) : null;
        };
        /**
         * Returns the parent in the DOM and the container.
         *
         * `<ng-container>` elements are skipped as they are not rendered as DOM element.
         */
        _TreeBuilder.prototype._getParentElementSkippingContainers = function () {
            var container = null;
            for (var i = this._elementStack.length - 1; i >= 0; i--) {
                if (this._elementStack[i].name !== 'ng-container') {
                    return { parent: this._elementStack[i], container: container };
                }
                container = this._elementStack[i];
            }
            return { parent: collection_1.ListWrapper.last(this._elementStack), container: container };
        };
        _TreeBuilder.prototype._addToParent = function (node) {
            var parent = this._getParentElement();
            if (lang_1.isPresent(parent)) {
                parent.children.push(node);
            } else {
                this._rootNodes.push(node);
            }
        };
        /**
         * Insert a node between the parent and the container.
         * When no container is given, the node is appended as a child of the parent.
         * Also updates the element stack accordingly.
         *
         * @internal
         */
        _TreeBuilder.prototype._insertBeforeContainer = function (parent, container, node) {
            if (!container) {
                this._addToParent(node);
                this._elementStack.push(node);
            } else {
                if (parent) {
                    // replace the container with the new node in the children
                    var index = parent.children.indexOf(container);
                    parent.children[index] = node;
                } else {
                    this._rootNodes.push(node);
                }
                node.children.push(container);
                this._elementStack.splice(this._elementStack.indexOf(container), 0, node);
            }
        };
        _TreeBuilder.prototype._getElementFullName = function (prefix, localName, parentElement) {
            if (lang_1.isBlank(prefix)) {
                prefix = this.getTagDefinition(localName).implicitNamespacePrefix;
                if (lang_1.isBlank(prefix) && lang_1.isPresent(parentElement)) {
                    prefix = tags_1.getNsPrefix(parentElement.name);
                }
            }
            return tags_1.mergeNsAndName(prefix, localName);
        };
        return _TreeBuilder;
    }();
    function lastOnStack(stack, element) {
        return stack.length > 0 && stack[stack.length - 1] === element;
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/ml_parser/html_parser.js', ['@angular/core', './html_tags', './interpolation_config', './parser', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var core_1 = $__require('@angular/core');
    var html_tags_1 = $__require('./html_tags');
    var interpolation_config_1 = $__require('./interpolation_config');
    var parser_1 = $__require('./parser');
    var parser_2 = $__require('./parser');
    exports.ParseTreeResult = parser_2.ParseTreeResult;
    exports.TreeError = parser_2.TreeError;
    var HtmlParser = function (_super) {
        __extends(HtmlParser, _super);
        function HtmlParser() {
            _super.call(this, html_tags_1.getHtmlTagDefinition);
        }
        HtmlParser.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) {
            if (parseExpansionForms === void 0) {
                parseExpansionForms = false;
            }
            if (interpolationConfig === void 0) {
                interpolationConfig = interpolation_config_1.DEFAULT_INTERPOLATION_CONFIG;
            }
            return _super.prototype.parse.call(this, source, url, parseExpansionForms, interpolationConfig);
        };
        /** @nocollapse */
        HtmlParser.decorators = [{ type: core_1.Injectable }];
        /** @nocollapse */
        HtmlParser.ctorParameters = [];
        return HtmlParser;
    }(parser_1.Parser);
    exports.HtmlParser = HtmlParser;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/compiler@2.0.0-rc.5/src/ml_parser/ast.js", ["reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var Text = function () {
        function Text(value, sourceSpan) {
            this.value = value;
            this.sourceSpan = sourceSpan;
        }
        Text.prototype.visit = function (visitor, context) {
            return visitor.visitText(this, context);
        };
        return Text;
    }();
    exports.Text = Text;
    var Expansion = function () {
        function Expansion(switchValue, type, cases, sourceSpan, switchValueSourceSpan) {
            this.switchValue = switchValue;
            this.type = type;
            this.cases = cases;
            this.sourceSpan = sourceSpan;
            this.switchValueSourceSpan = switchValueSourceSpan;
        }
        Expansion.prototype.visit = function (visitor, context) {
            return visitor.visitExpansion(this, context);
        };
        return Expansion;
    }();
    exports.Expansion = Expansion;
    var ExpansionCase = function () {
        function ExpansionCase(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {
            this.value = value;
            this.expression = expression;
            this.sourceSpan = sourceSpan;
            this.valueSourceSpan = valueSourceSpan;
            this.expSourceSpan = expSourceSpan;
        }
        ExpansionCase.prototype.visit = function (visitor, context) {
            return visitor.visitExpansionCase(this, context);
        };
        return ExpansionCase;
    }();
    exports.ExpansionCase = ExpansionCase;
    var Attribute = function () {
        function Attribute(name, value, sourceSpan) {
            this.name = name;
            this.value = value;
            this.sourceSpan = sourceSpan;
        }
        Attribute.prototype.visit = function (visitor, context) {
            return visitor.visitAttribute(this, context);
        };
        return Attribute;
    }();
    exports.Attribute = Attribute;
    var Element = function () {
        function Element(name, attrs, children, sourceSpan, startSourceSpan, endSourceSpan) {
            this.name = name;
            this.attrs = attrs;
            this.children = children;
            this.sourceSpan = sourceSpan;
            this.startSourceSpan = startSourceSpan;
            this.endSourceSpan = endSourceSpan;
        }
        Element.prototype.visit = function (visitor, context) {
            return visitor.visitElement(this, context);
        };
        return Element;
    }();
    exports.Element = Element;
    var Comment = function () {
        function Comment(value, sourceSpan) {
            this.value = value;
            this.sourceSpan = sourceSpan;
        }
        Comment.prototype.visit = function (visitor, context) {
            return visitor.visitComment(this, context);
        };
        return Comment;
    }();
    exports.Comment = Comment;
    function visitAll(visitor, nodes, context) {
        if (context === void 0) {
            context = null;
        }
        var result = [];
        nodes.forEach(function (ast) {
            var astResult = ast.visit(visitor, context);
            if (astResult) {
                result.push(astResult);
            }
        });
        return result;
    }
    exports.visitAll = visitAll;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/ml_parser/icu_ast_expander.js', ['../parse_util', './ast', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var parse_util_1 = $__require('../parse_util');
    var html = $__require('./ast');
    // http://cldr.unicode.org/index/cldr-spec/plural-rules
    var PLURAL_CASES = ['zero', 'one', 'two', 'few', 'many', 'other'];
    /**
     * Expands special forms into elements.
     *
     * For example,
     *
     * ```
     * { messages.length, plural,
     *   =0 {zero}
     *   =1 {one}
     *   other {more than one}
     * }
     * ```
     *
     * will be expanded into
     *
     * ```
     * <ng-container [ngPlural]="messages.length">
     *   <template ngPluralCase="=0">zero</ng-container>
     *   <template ngPluralCase="=1">one</ng-container>
     *   <template ngPluralCase="other">more than one</ng-container>
     * </ng-container>
     * ```
     */
    function expandNodes(nodes) {
        var expander = new _Expander();
        return new ExpansionResult(html.visitAll(expander, nodes), expander.isExpanded, expander.errors);
    }
    exports.expandNodes = expandNodes;
    var ExpansionResult = function () {
        function ExpansionResult(nodes, expanded, errors) {
            this.nodes = nodes;
            this.expanded = expanded;
            this.errors = errors;
        }
        return ExpansionResult;
    }();
    exports.ExpansionResult = ExpansionResult;
    var ExpansionError = function (_super) {
        __extends(ExpansionError, _super);
        function ExpansionError(span, errorMsg) {
            _super.call(this, span, errorMsg);
        }
        return ExpansionError;
    }(parse_util_1.ParseError);
    exports.ExpansionError = ExpansionError;
    /**
     * Expand expansion forms (plural, select) to directives
     *
     * @internal
     */
    var _Expander = function () {
        function _Expander() {
            this.isExpanded = false;
            this.errors = [];
        }
        _Expander.prototype.visitElement = function (element, context) {
            return new html.Element(element.name, element.attrs, html.visitAll(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan);
        };
        _Expander.prototype.visitAttribute = function (attribute, context) {
            return attribute;
        };
        _Expander.prototype.visitText = function (text, context) {
            return text;
        };
        _Expander.prototype.visitComment = function (comment, context) {
            return comment;
        };
        _Expander.prototype.visitExpansion = function (icu, context) {
            this.isExpanded = true;
            return icu.type == 'plural' ? _expandPluralForm(icu, this.errors) : _expandDefaultForm(icu, this.errors);
        };
        _Expander.prototype.visitExpansionCase = function (icuCase, context) {
            throw new Error('Should not be reached');
        };
        return _Expander;
    }();
    function _expandPluralForm(ast, errors) {
        var children = ast.cases.map(function (c) {
            if (PLURAL_CASES.indexOf(c.value) == -1 && !c.value.match(/^=\d+$/)) {
                errors.push(new ExpansionError(c.valueSourceSpan, "Plural cases should be \"=<number>\" or one of " + PLURAL_CASES.join(", ")));
            }
            var expansionResult = expandNodes(c.expression);
            errors.push.apply(errors, expansionResult.errors);
            return new html.Element("template", [new html.Attribute('ngPluralCase', "" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
        });
        var switchAttr = new html.Attribute('[ngPlural]', ast.switchValue, ast.switchValueSourceSpan);
        return new html.Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
    }
    function _expandDefaultForm(ast, errors) {
        var children = ast.cases.map(function (c) {
            var expansionResult = expandNodes(c.expression);
            errors.push.apply(errors, expansionResult.errors);
            return new html.Element("template", [new html.Attribute('ngSwitchCase', "" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
        });
        var switchAttr = new html.Attribute('[ngSwitch]', ast.switchValue, ast.switchValueSourceSpan);
        return new html.Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/assertions.js', ['@angular/core', '../src/facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var lang_1 = $__require('../src/facade/lang');
    function assertArrayOfStrings(identifier, value) {
        if (!core_1.isDevMode() || lang_1.isBlank(value)) {
            return;
        }
        if (!lang_1.isArray(value)) {
            throw new Error("Expected '" + identifier + "' to be an array of strings.");
        }
        for (var i = 0; i < value.length; i += 1) {
            if (!lang_1.isString(value[i])) {
                throw new Error("Expected '" + identifier + "' to be an array of strings.");
            }
        }
    }
    exports.assertArrayOfStrings = assertArrayOfStrings;
    var INTERPOLATION_BLACKLIST_REGEXPS = [/^\s*$/, /[<>]/, /^[{}]$/, /&(#|[a-z])/i, /^\/\//];
    function assertInterpolationSymbols(identifier, value) {
        if (lang_1.isPresent(value) && !(lang_1.isArray(value) && value.length == 2)) {
            throw new Error("Expected '" + identifier + "' to be an array, [start, end].");
        } else if (core_1.isDevMode() && !lang_1.isBlank(value)) {
            var start_1 = value[0];
            var end_1 = value[1];
            // black list checking
            INTERPOLATION_BLACKLIST_REGEXPS.forEach(function (regexp) {
                if (regexp.test(start_1) || regexp.test(end_1)) {
                    throw new Error("['" + start_1 + "', '" + end_1 + "'] contains unusable interpolation symbol.");
                }
            });
        }
    }
    exports.assertInterpolationSymbols = assertInterpolationSymbols;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/ml_parser/interpolation_config.js', ['../assertions', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var assertions_1 = $__require('../assertions');
    var InterpolationConfig = function () {
        function InterpolationConfig(start, end) {
            this.start = start;
            this.end = end;
        }
        InterpolationConfig.fromArray = function (markers) {
            if (!markers) {
                return exports.DEFAULT_INTERPOLATION_CONFIG;
            }
            assertions_1.assertInterpolationSymbols('interpolation', markers);
            return new InterpolationConfig(markers[0], markers[1]);
        };
        ;
        return InterpolationConfig;
    }();
    exports.InterpolationConfig = InterpolationConfig;
    exports.DEFAULT_INTERPOLATION_CONFIG = new InterpolationConfig('{{', '}}');
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/provider_analyzer.js', ['./compile_metadata', './facade/collection', './facade/exceptions', './facade/lang', './identifiers', './parse_util', './template_parser/template_ast', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var compile_metadata_1 = $__require('./compile_metadata');
    var collection_1 = $__require('./facade/collection');
    var exceptions_1 = $__require('./facade/exceptions');
    var lang_1 = $__require('./facade/lang');
    var identifiers_1 = $__require('./identifiers');
    var parse_util_1 = $__require('./parse_util');
    var template_ast_1 = $__require('./template_parser/template_ast');
    var ProviderError = function (_super) {
        __extends(ProviderError, _super);
        function ProviderError(message, span) {
            _super.call(this, span, message);
        }
        return ProviderError;
    }(parse_util_1.ParseError);
    exports.ProviderError = ProviderError;
    var ProviderViewContext = function () {
        function ProviderViewContext(component, sourceSpan) {
            var _this = this;
            this.component = component;
            this.sourceSpan = sourceSpan;
            this.errors = [];
            this.viewQueries = _getViewQueries(component);
            this.viewProviders = new compile_metadata_1.CompileIdentifierMap();
            _normalizeProviders(component.viewProviders, sourceSpan, this.errors).forEach(function (provider) {
                if (lang_1.isBlank(_this.viewProviders.get(provider.token))) {
                    _this.viewProviders.add(provider.token, true);
                }
            });
        }
        return ProviderViewContext;
    }();
    exports.ProviderViewContext = ProviderViewContext;
    var ProviderElementContext = function () {
        function ProviderElementContext(_viewContext, _parent, _isViewRoot, _directiveAsts, attrs, refs, _sourceSpan) {
            var _this = this;
            this._viewContext = _viewContext;
            this._parent = _parent;
            this._isViewRoot = _isViewRoot;
            this._directiveAsts = _directiveAsts;
            this._sourceSpan = _sourceSpan;
            this._transformedProviders = new compile_metadata_1.CompileIdentifierMap();
            this._seenProviders = new compile_metadata_1.CompileIdentifierMap();
            this._hasViewContainer = false;
            this._attrs = {};
            attrs.forEach(function (attrAst) {
                return _this._attrs[attrAst.name] = attrAst.value;
            });
            var directivesMeta = _directiveAsts.map(function (directiveAst) {
                return directiveAst.directive;
            });
            this._allProviders = _resolveProvidersFromDirectives(directivesMeta, _sourceSpan, _viewContext.errors);
            this._contentQueries = _getContentQueries(directivesMeta);
            var queriedTokens = new compile_metadata_1.CompileIdentifierMap();
            this._allProviders.values().forEach(function (provider) {
                _this._addQueryReadsTo(provider.token, queriedTokens);
            });
            refs.forEach(function (refAst) {
                _this._addQueryReadsTo(new compile_metadata_1.CompileTokenMetadata({ value: refAst.name }), queriedTokens);
            });
            if (lang_1.isPresent(queriedTokens.get(identifiers_1.identifierToken(identifiers_1.Identifiers.ViewContainerRef)))) {
                this._hasViewContainer = true;
            }
            // create the providers that we know are eager first
            this._allProviders.values().forEach(function (provider) {
                var eager = provider.eager || lang_1.isPresent(queriedTokens.get(provider.token));
                if (eager) {
                    _this._getOrCreateLocalProvider(provider.providerType, provider.token, true);
                }
            });
        }
        ProviderElementContext.prototype.afterElement = function () {
            var _this = this;
            // collect lazy providers
            this._allProviders.values().forEach(function (provider) {
                _this._getOrCreateLocalProvider(provider.providerType, provider.token, false);
            });
        };
        Object.defineProperty(ProviderElementContext.prototype, "transformProviders", {
            get: function () {
                return this._transformedProviders.values();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ProviderElementContext.prototype, "transformedDirectiveAsts", {
            get: function () {
                var sortedProviderTypes = this._transformedProviders.values().map(function (provider) {
                    return provider.token.identifier;
                });
                var sortedDirectives = collection_1.ListWrapper.clone(this._directiveAsts);
                collection_1.ListWrapper.sort(sortedDirectives, function (dir1, dir2) {
                    return sortedProviderTypes.indexOf(dir1.directive.type) - sortedProviderTypes.indexOf(dir2.directive.type);
                });
                return sortedDirectives;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ProviderElementContext.prototype, "transformedHasViewContainer", {
            get: function () {
                return this._hasViewContainer;
            },
            enumerable: true,
            configurable: true
        });
        ProviderElementContext.prototype._addQueryReadsTo = function (token, queryReadTokens) {
            this._getQueriesFor(token).forEach(function (query) {
                var queryReadToken = lang_1.isPresent(query.read) ? query.read : token;
                if (lang_1.isBlank(queryReadTokens.get(queryReadToken))) {
                    queryReadTokens.add(queryReadToken, true);
                }
            });
        };
        ProviderElementContext.prototype._getQueriesFor = function (token) {
            var result = [];
            var currentEl = this;
            var distance = 0;
            var queries;
            while (currentEl !== null) {
                queries = currentEl._contentQueries.get(token);
                if (lang_1.isPresent(queries)) {
                    collection_1.ListWrapper.addAll(result, queries.filter(function (query) {
                        return query.descendants || distance <= 1;
                    }));
                }
                if (currentEl._directiveAsts.length > 0) {
                    distance++;
                }
                currentEl = currentEl._parent;
            }
            queries = this._viewContext.viewQueries.get(token);
            if (lang_1.isPresent(queries)) {
                collection_1.ListWrapper.addAll(result, queries);
            }
            return result;
        };
        ProviderElementContext.prototype._getOrCreateLocalProvider = function (requestingProviderType, token, eager) {
            var _this = this;
            var resolvedProvider = this._allProviders.get(token);
            if (lang_1.isBlank(resolvedProvider) || (requestingProviderType === template_ast_1.ProviderAstType.Directive || requestingProviderType === template_ast_1.ProviderAstType.PublicService) && resolvedProvider.providerType === template_ast_1.ProviderAstType.PrivateService || (requestingProviderType === template_ast_1.ProviderAstType.PrivateService || requestingProviderType === template_ast_1.ProviderAstType.PublicService) && resolvedProvider.providerType === template_ast_1.ProviderAstType.Builtin) {
                return null;
            }
            var transformedProviderAst = this._transformedProviders.get(token);
            if (lang_1.isPresent(transformedProviderAst)) {
                return transformedProviderAst;
            }
            if (lang_1.isPresent(this._seenProviders.get(token))) {
                this._viewContext.errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + token.name, this._sourceSpan));
                return null;
            }
            this._seenProviders.add(token, true);
            var transformedProviders = resolvedProvider.providers.map(function (provider) {
                var transformedUseValue = provider.useValue;
                var transformedUseExisting = provider.useExisting;
                var transformedDeps;
                if (lang_1.isPresent(provider.useExisting)) {
                    var existingDiDep = _this._getDependency(resolvedProvider.providerType, new compile_metadata_1.CompileDiDependencyMetadata({ token: provider.useExisting }), eager);
                    if (lang_1.isPresent(existingDiDep.token)) {
                        transformedUseExisting = existingDiDep.token;
                    } else {
                        transformedUseExisting = null;
                        transformedUseValue = existingDiDep.value;
                    }
                } else if (lang_1.isPresent(provider.useFactory)) {
                    var deps = lang_1.isPresent(provider.deps) ? provider.deps : provider.useFactory.diDeps;
                    transformedDeps = deps.map(function (dep) {
                        return _this._getDependency(resolvedProvider.providerType, dep, eager);
                    });
                } else if (lang_1.isPresent(provider.useClass)) {
                    var deps = lang_1.isPresent(provider.deps) ? provider.deps : provider.useClass.diDeps;
                    transformedDeps = deps.map(function (dep) {
                        return _this._getDependency(resolvedProvider.providerType, dep, eager);
                    });
                }
                return _transformProvider(provider, {
                    useExisting: transformedUseExisting,
                    useValue: transformedUseValue,
                    deps: transformedDeps
                });
            });
            transformedProviderAst = _transformProviderAst(resolvedProvider, { eager: eager, providers: transformedProviders });
            this._transformedProviders.add(token, transformedProviderAst);
            return transformedProviderAst;
        };
        ProviderElementContext.prototype._getLocalDependency = function (requestingProviderType, dep, eager) {
            if (eager === void 0) {
                eager = null;
            }
            if (dep.isAttribute) {
                var attrValue = this._attrs[dep.token.value];
                return new compile_metadata_1.CompileDiDependencyMetadata({ isValue: true, value: lang_1.normalizeBlank(attrValue) });
            }
            if (lang_1.isPresent(dep.query) || lang_1.isPresent(dep.viewQuery)) {
                return dep;
            }
            if (lang_1.isPresent(dep.token)) {
                // access builtints
                if (requestingProviderType === template_ast_1.ProviderAstType.Directive || requestingProviderType === template_ast_1.ProviderAstType.Component) {
                    if (dep.token.equalsTo(identifiers_1.identifierToken(identifiers_1.Identifiers.Renderer)) || dep.token.equalsTo(identifiers_1.identifierToken(identifiers_1.Identifiers.ElementRef)) || dep.token.equalsTo(identifiers_1.identifierToken(identifiers_1.Identifiers.ChangeDetectorRef)) || dep.token.equalsTo(identifiers_1.identifierToken(identifiers_1.Identifiers.TemplateRef))) {
                        return dep;
                    }
                    if (dep.token.equalsTo(identifiers_1.identifierToken(identifiers_1.Identifiers.ViewContainerRef))) {
                        this._hasViewContainer = true;
                    }
                }
                // access the injector
                if (dep.token.equalsTo(identifiers_1.identifierToken(identifiers_1.Identifiers.Injector))) {
                    return dep;
                }
                // access providers
                if (lang_1.isPresent(this._getOrCreateLocalProvider(requestingProviderType, dep.token, eager))) {
                    return dep;
                }
            }
            return null;
        };
        ProviderElementContext.prototype._getDependency = function (requestingProviderType, dep, eager) {
            if (eager === void 0) {
                eager = null;
            }
            var currElement = this;
            var currEager = eager;
            var result = null;
            if (!dep.isSkipSelf) {
                result = this._getLocalDependency(requestingProviderType, dep, eager);
            }
            if (dep.isSelf) {
                if (lang_1.isBlank(result) && dep.isOptional) {
                    result = new compile_metadata_1.CompileDiDependencyMetadata({ isValue: true, value: null });
                }
            } else {
                // check parent elements
                while (lang_1.isBlank(result) && lang_1.isPresent(currElement._parent)) {
                    var prevElement = currElement;
                    currElement = currElement._parent;
                    if (prevElement._isViewRoot) {
                        currEager = false;
                    }
                    result = currElement._getLocalDependency(template_ast_1.ProviderAstType.PublicService, dep, currEager);
                }
                // check @Host restriction
                if (lang_1.isBlank(result)) {
                    if (!dep.isHost || this._viewContext.component.type.isHost || identifiers_1.identifierToken(this._viewContext.component.type).equalsTo(dep.token) || lang_1.isPresent(this._viewContext.viewProviders.get(dep.token))) {
                        result = dep;
                    } else {
                        result = dep.isOptional ? result = new compile_metadata_1.CompileDiDependencyMetadata({ isValue: true, value: null }) : null;
                    }
                }
            }
            if (lang_1.isBlank(result)) {
                this._viewContext.errors.push(new ProviderError("No provider for " + dep.token.name, this._sourceSpan));
            }
            return result;
        };
        return ProviderElementContext;
    }();
    exports.ProviderElementContext = ProviderElementContext;
    var NgModuleProviderAnalyzer = function () {
        function NgModuleProviderAnalyzer(ngModule, extraProviders, sourceSpan) {
            var _this = this;
            this._transformedProviders = new compile_metadata_1.CompileIdentifierMap();
            this._seenProviders = new compile_metadata_1.CompileIdentifierMap();
            this._unparsedProviders = [];
            this._errors = [];
            this._allProviders = new compile_metadata_1.CompileIdentifierMap();
            var ngModuleTypes = ngModule.transitiveModule.modules.map(function (moduleMeta) {
                return moduleMeta.type;
            });
            ngModuleTypes.forEach(function (ngModuleType) {
                var ngModuleProvider = new compile_metadata_1.CompileProviderMetadata({ token: new compile_metadata_1.CompileTokenMetadata({ identifier: ngModuleType }), useClass: ngModuleType });
                _resolveProviders([ngModuleProvider], template_ast_1.ProviderAstType.PublicService, true, sourceSpan, _this._errors, _this._allProviders);
            });
            _resolveProviders(_normalizeProviders(ngModule.transitiveModule.providers.concat(extraProviders), sourceSpan, this._errors), template_ast_1.ProviderAstType.PublicService, false, sourceSpan, this._errors, this._allProviders);
        }
        NgModuleProviderAnalyzer.prototype.parse = function () {
            var _this = this;
            this._allProviders.values().forEach(function (provider) {
                _this._getOrCreateLocalProvider(provider.token, provider.eager);
            });
            if (this._errors.length > 0) {
                var errorString = this._errors.join('\n');
                throw new exceptions_1.BaseException("Provider parse errors:\n" + errorString);
            }
            return this._transformedProviders.values();
        };
        NgModuleProviderAnalyzer.prototype._getOrCreateLocalProvider = function (token, eager) {
            var _this = this;
            var resolvedProvider = this._allProviders.get(token);
            if (lang_1.isBlank(resolvedProvider)) {
                return null;
            }
            var transformedProviderAst = this._transformedProviders.get(token);
            if (lang_1.isPresent(transformedProviderAst)) {
                return transformedProviderAst;
            }
            if (lang_1.isPresent(this._seenProviders.get(token))) {
                this._errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + token.name, resolvedProvider.sourceSpan));
                return null;
            }
            this._seenProviders.add(token, true);
            var transformedProviders = resolvedProvider.providers.map(function (provider) {
                var transformedUseValue = provider.useValue;
                var transformedUseExisting = provider.useExisting;
                var transformedDeps;
                if (lang_1.isPresent(provider.useExisting)) {
                    var existingDiDep = _this._getDependency(new compile_metadata_1.CompileDiDependencyMetadata({ token: provider.useExisting }), eager, resolvedProvider.sourceSpan);
                    if (lang_1.isPresent(existingDiDep.token)) {
                        transformedUseExisting = existingDiDep.token;
                    } else {
                        transformedUseExisting = null;
                        transformedUseValue = existingDiDep.value;
                    }
                } else if (lang_1.isPresent(provider.useFactory)) {
                    var deps = lang_1.isPresent(provider.deps) ? provider.deps : provider.useFactory.diDeps;
                    transformedDeps = deps.map(function (dep) {
                        return _this._getDependency(dep, eager, resolvedProvider.sourceSpan);
                    });
                } else if (lang_1.isPresent(provider.useClass)) {
                    var deps = lang_1.isPresent(provider.deps) ? provider.deps : provider.useClass.diDeps;
                    transformedDeps = deps.map(function (dep) {
                        return _this._getDependency(dep, eager, resolvedProvider.sourceSpan);
                    });
                }
                return _transformProvider(provider, {
                    useExisting: transformedUseExisting,
                    useValue: transformedUseValue,
                    deps: transformedDeps
                });
            });
            transformedProviderAst = _transformProviderAst(resolvedProvider, { eager: eager, providers: transformedProviders });
            this._transformedProviders.add(token, transformedProviderAst);
            return transformedProviderAst;
        };
        NgModuleProviderAnalyzer.prototype._getDependency = function (dep, eager, requestorSourceSpan) {
            if (eager === void 0) {
                eager = null;
            }
            var foundLocal = false;
            if (!dep.isSkipSelf && lang_1.isPresent(dep.token)) {
                // access the injector
                if (dep.token.equalsTo(identifiers_1.identifierToken(identifiers_1.Identifiers.Injector)) || dep.token.equalsTo(identifiers_1.identifierToken(identifiers_1.Identifiers.ComponentFactoryResolver))) {
                    foundLocal = true;
                } else if (lang_1.isPresent(this._getOrCreateLocalProvider(dep.token, eager))) {
                    foundLocal = true;
                }
            }
            var result = dep;
            if (dep.isSelf && !foundLocal) {
                if (dep.isOptional) {
                    result = new compile_metadata_1.CompileDiDependencyMetadata({ isValue: true, value: null });
                } else {
                    this._errors.push(new ProviderError("No provider for " + dep.token.name, requestorSourceSpan));
                }
            }
            return result;
        };
        return NgModuleProviderAnalyzer;
    }();
    exports.NgModuleProviderAnalyzer = NgModuleProviderAnalyzer;
    function _transformProvider(provider, _a) {
        var useExisting = _a.useExisting,
            useValue = _a.useValue,
            deps = _a.deps;
        return new compile_metadata_1.CompileProviderMetadata({
            token: provider.token,
            useClass: provider.useClass,
            useExisting: useExisting,
            useFactory: provider.useFactory,
            useValue: useValue,
            deps: deps,
            multi: provider.multi
        });
    }
    function _transformProviderAst(provider, _a) {
        var eager = _a.eager,
            providers = _a.providers;
        return new template_ast_1.ProviderAst(provider.token, provider.multiProvider, provider.eager || eager, providers, provider.providerType, provider.lifecycleHooks, provider.sourceSpan);
    }
    function _normalizeProviders(providers, sourceSpan, targetErrors, targetProviders) {
        if (targetProviders === void 0) {
            targetProviders = null;
        }
        if (lang_1.isBlank(targetProviders)) {
            targetProviders = [];
        }
        if (lang_1.isPresent(providers)) {
            providers.forEach(function (provider) {
                if (lang_1.isArray(provider)) {
                    _normalizeProviders(provider, sourceSpan, targetErrors, targetProviders);
                } else {
                    var normalizeProvider = void 0;
                    if (provider instanceof compile_metadata_1.CompileProviderMetadata) {
                        normalizeProvider = provider;
                    } else if (provider instanceof compile_metadata_1.CompileTypeMetadata) {
                        normalizeProvider = new compile_metadata_1.CompileProviderMetadata({ token: new compile_metadata_1.CompileTokenMetadata({ identifier: provider }), useClass: provider });
                    } else {
                        targetErrors.push(new ProviderError("Unknown provider type " + provider, sourceSpan));
                    }
                    if (lang_1.isPresent(normalizeProvider)) {
                        targetProviders.push(normalizeProvider);
                    }
                }
            });
        }
        return targetProviders;
    }
    function _resolveProvidersFromDirectives(directives, sourceSpan, targetErrors) {
        var providersByToken = new compile_metadata_1.CompileIdentifierMap();
        directives.forEach(function (directive) {
            var dirProvider = new compile_metadata_1.CompileProviderMetadata({ token: new compile_metadata_1.CompileTokenMetadata({ identifier: directive.type }), useClass: directive.type });
            _resolveProviders([dirProvider], directive.isComponent ? template_ast_1.ProviderAstType.Component : template_ast_1.ProviderAstType.Directive, true, sourceSpan, targetErrors, providersByToken);
        });
        // Note: directives need to be able to overwrite providers of a component!
        var directivesWithComponentFirst = directives.filter(function (dir) {
            return dir.isComponent;
        }).concat(directives.filter(function (dir) {
            return !dir.isComponent;
        }));
        directivesWithComponentFirst.forEach(function (directive) {
            _resolveProviders(_normalizeProviders(directive.providers, sourceSpan, targetErrors), template_ast_1.ProviderAstType.PublicService, false, sourceSpan, targetErrors, providersByToken);
            _resolveProviders(_normalizeProviders(directive.viewProviders, sourceSpan, targetErrors), template_ast_1.ProviderAstType.PrivateService, false, sourceSpan, targetErrors, providersByToken);
        });
        return providersByToken;
    }
    function _resolveProviders(providers, providerType, eager, sourceSpan, targetErrors, targetProvidersByToken) {
        providers.forEach(function (provider) {
            var resolvedProvider = targetProvidersByToken.get(provider.token);
            if (lang_1.isPresent(resolvedProvider) && resolvedProvider.multiProvider !== provider.multi) {
                targetErrors.push(new ProviderError("Mixing multi and non multi provider is not possible for token " + resolvedProvider.token.name, sourceSpan));
            }
            if (lang_1.isBlank(resolvedProvider)) {
                var lifecycleHooks = provider.token.identifier && provider.token.identifier instanceof compile_metadata_1.CompileTypeMetadata ? provider.token.identifier.lifecycleHooks : [];
                resolvedProvider = new template_ast_1.ProviderAst(provider.token, provider.multi, eager || lifecycleHooks.length > 0, [provider], providerType, lifecycleHooks, sourceSpan);
                targetProvidersByToken.add(provider.token, resolvedProvider);
            } else {
                if (!provider.multi) {
                    collection_1.ListWrapper.clear(resolvedProvider.providers);
                }
                resolvedProvider.providers.push(provider);
            }
        });
    }
    function _getViewQueries(component) {
        var viewQueries = new compile_metadata_1.CompileIdentifierMap();
        if (lang_1.isPresent(component.viewQueries)) {
            component.viewQueries.forEach(function (query) {
                return _addQueryToTokenMap(viewQueries, query);
            });
        }
        component.type.diDeps.forEach(function (dep) {
            if (lang_1.isPresent(dep.viewQuery)) {
                _addQueryToTokenMap(viewQueries, dep.viewQuery);
            }
        });
        return viewQueries;
    }
    function _getContentQueries(directives) {
        var contentQueries = new compile_metadata_1.CompileIdentifierMap();
        directives.forEach(function (directive) {
            if (lang_1.isPresent(directive.queries)) {
                directive.queries.forEach(function (query) {
                    return _addQueryToTokenMap(contentQueries, query);
                });
            }
            directive.type.diDeps.forEach(function (dep) {
                if (lang_1.isPresent(dep.query)) {
                    _addQueryToTokenMap(contentQueries, dep.query);
                }
            });
        });
        return contentQueries;
    }
    function _addQueryToTokenMap(map, query) {
        query.selectors.forEach(function (token) {
            var entry = map.get(token);
            if (lang_1.isBlank(entry)) {
                entry = [];
                map.add(token, entry);
            }
            entry.push(query);
        });
    }
    

    return module.exports;
});
System.registerDynamic("npm:@angular/compiler@2.0.0-rc.5/src/schema/element_schema_registry.js", ["reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var ElementSchemaRegistry = function () {
    function ElementSchemaRegistry() {}
    return ElementSchemaRegistry;
  }();
  exports.ElementSchemaRegistry = ElementSchemaRegistry;
  

  return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/style_url_resolver.js', ['./facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";
    // Some of the code comes from WebComponents.JS
    // https://github.com/webcomponents/webcomponentsjs/blob/master/src/HTMLImports/path.js

    var define,
        global = this || self,
        GLOBAL = global;
    var lang_1 = $__require('./facade/lang');
    var StyleWithImports = function () {
        function StyleWithImports(style, styleUrls) {
            this.style = style;
            this.styleUrls = styleUrls;
        }
        return StyleWithImports;
    }();
    exports.StyleWithImports = StyleWithImports;
    function isStyleUrlResolvable(url) {
        if (lang_1.isBlank(url) || url.length === 0 || url[0] == '/') return false;
        var schemeMatch = url.match(_urlWithSchemaRe);
        return schemeMatch === null || schemeMatch[1] == 'package' || schemeMatch[1] == 'asset';
    }
    exports.isStyleUrlResolvable = isStyleUrlResolvable;
    /**
     * Rewrites stylesheets by resolving and removing the @import urls that
     * are either relative or don't have a `package:` scheme
     */
    function extractStyleUrls(resolver, baseUrl, cssText) {
        var foundUrls = [];
        var modifiedCssText = lang_1.StringWrapper.replaceAllMapped(cssText, _cssImportRe, function (m) {
            var url = lang_1.isPresent(m[1]) ? m[1] : m[2];
            if (!isStyleUrlResolvable(url)) {
                // Do not attempt to resolve non-package absolute URLs with URI scheme
                return m[0];
            }
            foundUrls.push(resolver.resolve(baseUrl, url));
            return '';
        });
        return new StyleWithImports(modifiedCssText, foundUrls);
    }
    exports.extractStyleUrls = extractStyleUrls;
    var _cssImportRe = /@import\s+(?:url\()?\s*(?:(?:['"]([^'"]*))|([^;\)\s]*))[^;]*;?/g;
    var _urlWithSchemaRe = /^([^:/?#]+):/;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/compiler@2.0.0-rc.5/src/ml_parser/tags.js", ["reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    (function (TagContentType) {
        TagContentType[TagContentType["RAW_TEXT"] = 0] = "RAW_TEXT";
        TagContentType[TagContentType["ESCAPABLE_RAW_TEXT"] = 1] = "ESCAPABLE_RAW_TEXT";
        TagContentType[TagContentType["PARSABLE_DATA"] = 2] = "PARSABLE_DATA";
    })(exports.TagContentType || (exports.TagContentType = {}));
    var TagContentType = exports.TagContentType;
    function splitNsName(elementName) {
        if (elementName[0] != ':') {
            return [null, elementName];
        }
        var colonIndex = elementName.indexOf(':', 1);
        if (colonIndex == -1) {
            throw new Error("Unsupported format \"" + elementName + "\" expecting \":namespace:name\"");
        }
        return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];
    }
    exports.splitNsName = splitNsName;
    function getNsPrefix(fullName) {
        return fullName === null ? null : splitNsName(fullName)[0];
    }
    exports.getNsPrefix = getNsPrefix;
    function mergeNsAndName(prefix, localName) {
        return prefix ? ":" + prefix + ":" + localName : localName;
    }
    exports.mergeNsAndName = mergeNsAndName;
    // see http://www.w3.org/TR/html51/syntax.html#named-character-references
    // see https://html.spec.whatwg.org/multipage/entities.json
    // This list is not exhaustive to keep the compiler footprint low.
    // The `&#123;` / `&#x1ab;` syntax should be used when the named character reference does not exist.
    exports.NAMED_ENTITIES = {
        'Aacute': '\u00C1',
        'aacute': '\u00E1',
        'Acirc': '\u00C2',
        'acirc': '\u00E2',
        'acute': '\u00B4',
        'AElig': '\u00C6',
        'aelig': '\u00E6',
        'Agrave': '\u00C0',
        'agrave': '\u00E0',
        'alefsym': '\u2135',
        'Alpha': '\u0391',
        'alpha': '\u03B1',
        'amp': '&',
        'and': '\u2227',
        'ang': '\u2220',
        'apos': '\u0027',
        'Aring': '\u00C5',
        'aring': '\u00E5',
        'asymp': '\u2248',
        'Atilde': '\u00C3',
        'atilde': '\u00E3',
        'Auml': '\u00C4',
        'auml': '\u00E4',
        'bdquo': '\u201E',
        'Beta': '\u0392',
        'beta': '\u03B2',
        'brvbar': '\u00A6',
        'bull': '\u2022',
        'cap': '\u2229',
        'Ccedil': '\u00C7',
        'ccedil': '\u00E7',
        'cedil': '\u00B8',
        'cent': '\u00A2',
        'Chi': '\u03A7',
        'chi': '\u03C7',
        'circ': '\u02C6',
        'clubs': '\u2663',
        'cong': '\u2245',
        'copy': '\u00A9',
        'crarr': '\u21B5',
        'cup': '\u222A',
        'curren': '\u00A4',
        'dagger': '\u2020',
        'Dagger': '\u2021',
        'darr': '\u2193',
        'dArr': '\u21D3',
        'deg': '\u00B0',
        'Delta': '\u0394',
        'delta': '\u03B4',
        'diams': '\u2666',
        'divide': '\u00F7',
        'Eacute': '\u00C9',
        'eacute': '\u00E9',
        'Ecirc': '\u00CA',
        'ecirc': '\u00EA',
        'Egrave': '\u00C8',
        'egrave': '\u00E8',
        'empty': '\u2205',
        'emsp': '\u2003',
        'ensp': '\u2002',
        'Epsilon': '\u0395',
        'epsilon': '\u03B5',
        'equiv': '\u2261',
        'Eta': '\u0397',
        'eta': '\u03B7',
        'ETH': '\u00D0',
        'eth': '\u00F0',
        'Euml': '\u00CB',
        'euml': '\u00EB',
        'euro': '\u20AC',
        'exist': '\u2203',
        'fnof': '\u0192',
        'forall': '\u2200',
        'frac12': '\u00BD',
        'frac14': '\u00BC',
        'frac34': '\u00BE',
        'frasl': '\u2044',
        'Gamma': '\u0393',
        'gamma': '\u03B3',
        'ge': '\u2265',
        'gt': '>',
        'harr': '\u2194',
        'hArr': '\u21D4',
        'hearts': '\u2665',
        'hellip': '\u2026',
        'Iacute': '\u00CD',
        'iacute': '\u00ED',
        'Icirc': '\u00CE',
        'icirc': '\u00EE',
        'iexcl': '\u00A1',
        'Igrave': '\u00CC',
        'igrave': '\u00EC',
        'image': '\u2111',
        'infin': '\u221E',
        'int': '\u222B',
        'Iota': '\u0399',
        'iota': '\u03B9',
        'iquest': '\u00BF',
        'isin': '\u2208',
        'Iuml': '\u00CF',
        'iuml': '\u00EF',
        'Kappa': '\u039A',
        'kappa': '\u03BA',
        'Lambda': '\u039B',
        'lambda': '\u03BB',
        'lang': '\u27E8',
        'laquo': '\u00AB',
        'larr': '\u2190',
        'lArr': '\u21D0',
        'lceil': '\u2308',
        'ldquo': '\u201C',
        'le': '\u2264',
        'lfloor': '\u230A',
        'lowast': '\u2217',
        'loz': '\u25CA',
        'lrm': '\u200E',
        'lsaquo': '\u2039',
        'lsquo': '\u2018',
        'lt': '<',
        'macr': '\u00AF',
        'mdash': '\u2014',
        'micro': '\u00B5',
        'middot': '\u00B7',
        'minus': '\u2212',
        'Mu': '\u039C',
        'mu': '\u03BC',
        'nabla': '\u2207',
        'nbsp': '\u00A0',
        'ndash': '\u2013',
        'ne': '\u2260',
        'ni': '\u220B',
        'not': '\u00AC',
        'notin': '\u2209',
        'nsub': '\u2284',
        'Ntilde': '\u00D1',
        'ntilde': '\u00F1',
        'Nu': '\u039D',
        'nu': '\u03BD',
        'Oacute': '\u00D3',
        'oacute': '\u00F3',
        'Ocirc': '\u00D4',
        'ocirc': '\u00F4',
        'OElig': '\u0152',
        'oelig': '\u0153',
        'Ograve': '\u00D2',
        'ograve': '\u00F2',
        'oline': '\u203E',
        'Omega': '\u03A9',
        'omega': '\u03C9',
        'Omicron': '\u039F',
        'omicron': '\u03BF',
        'oplus': '\u2295',
        'or': '\u2228',
        'ordf': '\u00AA',
        'ordm': '\u00BA',
        'Oslash': '\u00D8',
        'oslash': '\u00F8',
        'Otilde': '\u00D5',
        'otilde': '\u00F5',
        'otimes': '\u2297',
        'Ouml': '\u00D6',
        'ouml': '\u00F6',
        'para': '\u00B6',
        'permil': '\u2030',
        'perp': '\u22A5',
        'Phi': '\u03A6',
        'phi': '\u03C6',
        'Pi': '\u03A0',
        'pi': '\u03C0',
        'piv': '\u03D6',
        'plusmn': '\u00B1',
        'pound': '\u00A3',
        'prime': '\u2032',
        'Prime': '\u2033',
        'prod': '\u220F',
        'prop': '\u221D',
        'Psi': '\u03A8',
        'psi': '\u03C8',
        'quot': '\u0022',
        'radic': '\u221A',
        'rang': '\u27E9',
        'raquo': '\u00BB',
        'rarr': '\u2192',
        'rArr': '\u21D2',
        'rceil': '\u2309',
        'rdquo': '\u201D',
        'real': '\u211C',
        'reg': '\u00AE',
        'rfloor': '\u230B',
        'Rho': '\u03A1',
        'rho': '\u03C1',
        'rlm': '\u200F',
        'rsaquo': '\u203A',
        'rsquo': '\u2019',
        'sbquo': '\u201A',
        'Scaron': '\u0160',
        'scaron': '\u0161',
        'sdot': '\u22C5',
        'sect': '\u00A7',
        'shy': '\u00AD',
        'Sigma': '\u03A3',
        'sigma': '\u03C3',
        'sigmaf': '\u03C2',
        'sim': '\u223C',
        'spades': '\u2660',
        'sub': '\u2282',
        'sube': '\u2286',
        'sum': '\u2211',
        'sup': '\u2283',
        'sup1': '\u00B9',
        'sup2': '\u00B2',
        'sup3': '\u00B3',
        'supe': '\u2287',
        'szlig': '\u00DF',
        'Tau': '\u03A4',
        'tau': '\u03C4',
        'there4': '\u2234',
        'Theta': '\u0398',
        'theta': '\u03B8',
        'thetasym': '\u03D1',
        'thinsp': '\u2009',
        'THORN': '\u00DE',
        'thorn': '\u00FE',
        'tilde': '\u02DC',
        'times': '\u00D7',
        'trade': '\u2122',
        'Uacute': '\u00DA',
        'uacute': '\u00FA',
        'uarr': '\u2191',
        'uArr': '\u21D1',
        'Ucirc': '\u00DB',
        'ucirc': '\u00FB',
        'Ugrave': '\u00D9',
        'ugrave': '\u00F9',
        'uml': '\u00A8',
        'upsih': '\u03D2',
        'Upsilon': '\u03A5',
        'upsilon': '\u03C5',
        'Uuml': '\u00DC',
        'uuml': '\u00FC',
        'weierp': '\u2118',
        'Xi': '\u039E',
        'xi': '\u03BE',
        'Yacute': '\u00DD',
        'yacute': '\u00FD',
        'yen': '\u00A5',
        'yuml': '\u00FF',
        'Yuml': '\u0178',
        'Zeta': '\u0396',
        'zeta': '\u03B6',
        'zwj': '\u200D',
        'zwnj': '\u200C'
    };
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/template_parser/template_preparser.js', ['../ml_parser/tags', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var tags_1 = $__require('../ml_parser/tags');
    var NG_CONTENT_SELECT_ATTR = 'select';
    var NG_CONTENT_ELEMENT = 'ng-content';
    var LINK_ELEMENT = 'link';
    var LINK_STYLE_REL_ATTR = 'rel';
    var LINK_STYLE_HREF_ATTR = 'href';
    var LINK_STYLE_REL_VALUE = 'stylesheet';
    var STYLE_ELEMENT = 'style';
    var SCRIPT_ELEMENT = 'script';
    var NG_NON_BINDABLE_ATTR = 'ngNonBindable';
    var NG_PROJECT_AS = 'ngProjectAs';
    function preparseElement(ast) {
        var selectAttr = null;
        var hrefAttr = null;
        var relAttr = null;
        var nonBindable = false;
        var projectAs = null;
        ast.attrs.forEach(function (attr) {
            var lcAttrName = attr.name.toLowerCase();
            if (lcAttrName == NG_CONTENT_SELECT_ATTR) {
                selectAttr = attr.value;
            } else if (lcAttrName == LINK_STYLE_HREF_ATTR) {
                hrefAttr = attr.value;
            } else if (lcAttrName == LINK_STYLE_REL_ATTR) {
                relAttr = attr.value;
            } else if (attr.name == NG_NON_BINDABLE_ATTR) {
                nonBindable = true;
            } else if (attr.name == NG_PROJECT_AS) {
                if (attr.value.length > 0) {
                    projectAs = attr.value;
                }
            }
        });
        selectAttr = normalizeNgContentSelect(selectAttr);
        var nodeName = ast.name.toLowerCase();
        var type = PreparsedElementType.OTHER;
        if (tags_1.splitNsName(nodeName)[1] == NG_CONTENT_ELEMENT) {
            type = PreparsedElementType.NG_CONTENT;
        } else if (nodeName == STYLE_ELEMENT) {
            type = PreparsedElementType.STYLE;
        } else if (nodeName == SCRIPT_ELEMENT) {
            type = PreparsedElementType.SCRIPT;
        } else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {
            type = PreparsedElementType.STYLESHEET;
        }
        return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);
    }
    exports.preparseElement = preparseElement;
    (function (PreparsedElementType) {
        PreparsedElementType[PreparsedElementType["NG_CONTENT"] = 0] = "NG_CONTENT";
        PreparsedElementType[PreparsedElementType["STYLE"] = 1] = "STYLE";
        PreparsedElementType[PreparsedElementType["STYLESHEET"] = 2] = "STYLESHEET";
        PreparsedElementType[PreparsedElementType["SCRIPT"] = 3] = "SCRIPT";
        PreparsedElementType[PreparsedElementType["OTHER"] = 4] = "OTHER";
    })(exports.PreparsedElementType || (exports.PreparsedElementType = {}));
    var PreparsedElementType = exports.PreparsedElementType;
    var PreparsedElement = function () {
        function PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs) {
            this.type = type;
            this.selectAttr = selectAttr;
            this.hrefAttr = hrefAttr;
            this.nonBindable = nonBindable;
            this.projectAs = projectAs;
        }
        return PreparsedElement;
    }();
    exports.PreparsedElement = PreparsedElement;
    function normalizeNgContentSelect(selectAttr) {
        if (selectAttr === null || selectAttr.length === 0) {
            return '*';
        }
        return selectAttr;
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/template_parser/template_parser.js', ['@angular/core', '../../core_private', '../compile_metadata', '../expression_parser/ast', '../expression_parser/parser', '../facade/collection', '../facade/exceptions', '../facade/lang', '../identifiers', '../ml_parser/ast', '../ml_parser/html_parser', '../ml_parser/icu_ast_expander', '../ml_parser/interpolation_config', '../ml_parser/tags', '../parse_util', '../provider_analyzer', '../schema/element_schema_registry', '../selector', '../style_url_resolver', '../util', './template_ast', './template_preparser', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var core_1 = $__require('@angular/core');
    var core_private_1 = $__require('../../core_private');
    var compile_metadata_1 = $__require('../compile_metadata');
    var ast_1 = $__require('../expression_parser/ast');
    var parser_1 = $__require('../expression_parser/parser');
    var collection_1 = $__require('../facade/collection');
    var exceptions_1 = $__require('../facade/exceptions');
    var lang_1 = $__require('../facade/lang');
    var identifiers_1 = $__require('../identifiers');
    var html = $__require('../ml_parser/ast');
    var html_parser_1 = $__require('../ml_parser/html_parser');
    var icu_ast_expander_1 = $__require('../ml_parser/icu_ast_expander');
    var interpolation_config_1 = $__require('../ml_parser/interpolation_config');
    var tags_1 = $__require('../ml_parser/tags');
    var parse_util_1 = $__require('../parse_util');
    var provider_analyzer_1 = $__require('../provider_analyzer');
    var element_schema_registry_1 = $__require('../schema/element_schema_registry');
    var selector_1 = $__require('../selector');
    var style_url_resolver_1 = $__require('../style_url_resolver');
    var util_1 = $__require('../util');
    var template_ast_1 = $__require('./template_ast');
    var template_preparser_1 = $__require('./template_preparser');
    // Group 1 = "bind-"
    // Group 2 = "var-"
    // Group 3 = "let-"
    // Group 4 = "ref-/#"
    // Group 5 = "on-"
    // Group 6 = "bindon-"
    // Group 7 = "animate-/@"
    // Group 8 = the identifier after "bind-", "var-/#", or "on-"
    // Group 9 = identifier inside [()]
    // Group 10 = identifier inside []
    // Group 11 = identifier inside ()
    var BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(var-)|(let-)|(ref-|#)|(on-)|(bindon-)|(animate-|@))(.+))|\[\(([^\)]+)\)\]|\[([^\]]+)\]|\(([^\)]+)\))$/;
    var TEMPLATE_ELEMENT = 'template';
    var TEMPLATE_ATTR = 'template';
    var TEMPLATE_ATTR_PREFIX = '*';
    var CLASS_ATTR = 'class';
    var PROPERTY_PARTS_SEPARATOR = '.';
    var ATTRIBUTE_PREFIX = 'attr';
    var CLASS_PREFIX = 'class';
    var STYLE_PREFIX = 'style';
    var TEXT_CSS_SELECTOR = selector_1.CssSelector.parse('*')[0];
    /**
     * Provides an array of {@link TemplateAstVisitor}s which will be used to transform
     * parsed templates before compilation is invoked, allowing custom expression syntax
     * and other advanced transformations.
     *
     * This is currently an internal-only feature and not meant for general use.
     */
    exports.TEMPLATE_TRANSFORMS = new core_1.OpaqueToken('TemplateTransforms');
    var TemplateParseError = function (_super) {
        __extends(TemplateParseError, _super);
        function TemplateParseError(message, span, level) {
            _super.call(this, span, message, level);
        }
        return TemplateParseError;
    }(parse_util_1.ParseError);
    exports.TemplateParseError = TemplateParseError;
    var TemplateParseResult = function () {
        function TemplateParseResult(templateAst, errors) {
            this.templateAst = templateAst;
            this.errors = errors;
        }
        return TemplateParseResult;
    }();
    exports.TemplateParseResult = TemplateParseResult;
    var TemplateParser = function () {
        function TemplateParser(_exprParser, _schemaRegistry, _htmlParser, _console, transforms) {
            this._exprParser = _exprParser;
            this._schemaRegistry = _schemaRegistry;
            this._htmlParser = _htmlParser;
            this._console = _console;
            this.transforms = transforms;
        }
        TemplateParser.prototype.parse = function (component, template, directives, pipes, schemas, templateUrl) {
            var result = this.tryParse(component, template, directives, pipes, schemas, templateUrl);
            var warnings = result.errors.filter(function (error) {
                return error.level === parse_util_1.ParseErrorLevel.WARNING;
            });
            var errors = result.errors.filter(function (error) {
                return error.level === parse_util_1.ParseErrorLevel.FATAL;
            });
            if (warnings.length > 0) {
                this._console.warn("Template parse warnings:\n" + warnings.join('\n'));
            }
            if (errors.length > 0) {
                var errorString = errors.join('\n');
                throw new exceptions_1.BaseException("Template parse errors:\n" + errorString);
            }
            return result.templateAst;
        };
        TemplateParser.prototype.tryParse = function (component, template, directives, pipes, schemas, templateUrl) {
            var interpolationConfig;
            if (component.template) {
                interpolationConfig = interpolation_config_1.InterpolationConfig.fromArray(component.template.interpolation);
            }
            var htmlAstWithErrors = this._htmlParser.parse(template, templateUrl, true, interpolationConfig);
            var errors = htmlAstWithErrors.errors;
            var result;
            if (errors.length == 0) {
                // Transform ICU messages to angular directives
                var expandedHtmlAst = icu_ast_expander_1.expandNodes(htmlAstWithErrors.rootNodes);
                errors.push.apply(errors, expandedHtmlAst.errors);
                htmlAstWithErrors = new html_parser_1.ParseTreeResult(expandedHtmlAst.nodes, errors);
            }
            if (htmlAstWithErrors.rootNodes.length > 0) {
                var uniqDirectives = compile_metadata_1.removeIdentifierDuplicates(directives);
                var uniqPipes = compile_metadata_1.removeIdentifierDuplicates(pipes);
                var providerViewContext = new provider_analyzer_1.ProviderViewContext(component, htmlAstWithErrors.rootNodes[0].sourceSpan);
                var parseVisitor = new TemplateParseVisitor(providerViewContext, uniqDirectives, uniqPipes, schemas, this._exprParser, this._schemaRegistry);
                result = html.visitAll(parseVisitor, htmlAstWithErrors.rootNodes, EMPTY_ELEMENT_CONTEXT);
                errors.push.apply(errors, parseVisitor.errors.concat(providerViewContext.errors));
            } else {
                result = [];
            }
            this._assertNoReferenceDuplicationOnTemplate(result, errors);
            if (errors.length > 0) {
                return new TemplateParseResult(result, errors);
            }
            if (lang_1.isPresent(this.transforms)) {
                this.transforms.forEach(function (transform) {
                    result = template_ast_1.templateVisitAll(transform, result);
                });
            }
            return new TemplateParseResult(result, errors);
        };
        /** @internal */
        TemplateParser.prototype._assertNoReferenceDuplicationOnTemplate = function (result, errors) {
            var existingReferences = [];
            result.filter(function (element) {
                return !!element.references;
            }).forEach(function (element) {
                return element.references.forEach(function (reference) {
                    var name = reference.name;
                    if (existingReferences.indexOf(name) < 0) {
                        existingReferences.push(name);
                    } else {
                        var error = new TemplateParseError("Reference \"#" + name + "\" is defined several times", reference.sourceSpan, parse_util_1.ParseErrorLevel.FATAL);
                        errors.push(error);
                    }
                });
            });
        };
        /** @nocollapse */
        TemplateParser.decorators = [{ type: core_1.Injectable }];
        /** @nocollapse */
        TemplateParser.ctorParameters = [{ type: parser_1.Parser }, { type: element_schema_registry_1.ElementSchemaRegistry }, { type: html_parser_1.HtmlParser }, { type: core_private_1.Console }, { type: Array, decorators: [{ type: core_1.Optional }, { type: core_1.Inject, args: [exports.TEMPLATE_TRANSFORMS] }] }];
        return TemplateParser;
    }();
    exports.TemplateParser = TemplateParser;
    var TemplateParseVisitor = function () {
        function TemplateParseVisitor(providerViewContext, directives, pipes, _schemas, _exprParser, _schemaRegistry) {
            var _this = this;
            this.providerViewContext = providerViewContext;
            this._schemas = _schemas;
            this._exprParser = _exprParser;
            this._schemaRegistry = _schemaRegistry;
            this.errors = [];
            this.directivesIndex = new Map();
            this.ngContentCount = 0;
            this.selectorMatcher = new selector_1.SelectorMatcher();
            var tempMeta = providerViewContext.component.template;
            if (lang_1.isPresent(tempMeta) && lang_1.isPresent(tempMeta.interpolation)) {
                this._interpolationConfig = {
                    start: tempMeta.interpolation[0],
                    end: tempMeta.interpolation[1]
                };
            }
            collection_1.ListWrapper.forEachWithIndex(directives, function (directive, index) {
                var selector = selector_1.CssSelector.parse(directive.selector);
                _this.selectorMatcher.addSelectables(selector, directive);
                _this.directivesIndex.set(directive, index);
            });
            this.pipesByName = new Map();
            pipes.forEach(function (pipe) {
                return _this.pipesByName.set(pipe.name, pipe);
            });
        }
        TemplateParseVisitor.prototype._reportError = function (message, sourceSpan, level) {
            if (level === void 0) {
                level = parse_util_1.ParseErrorLevel.FATAL;
            }
            this.errors.push(new TemplateParseError(message, sourceSpan, level));
        };
        TemplateParseVisitor.prototype._reportParserErors = function (errors, sourceSpan) {
            for (var _i = 0, errors_1 = errors; _i < errors_1.length; _i++) {
                var error = errors_1[_i];
                this._reportError(error.message, sourceSpan);
            }
        };
        TemplateParseVisitor.prototype._parseInterpolation = function (value, sourceSpan) {
            var sourceInfo = sourceSpan.start.toString();
            try {
                var ast = this._exprParser.parseInterpolation(value, sourceInfo, this._interpolationConfig);
                if (ast) this._reportParserErors(ast.errors, sourceSpan);
                this._checkPipes(ast, sourceSpan);
                if (lang_1.isPresent(ast) && ast.ast.expressions.length > core_private_1.MAX_INTERPOLATION_VALUES) {
                    throw new exceptions_1.BaseException("Only support at most " + core_private_1.MAX_INTERPOLATION_VALUES + " interpolation values!");
                }
                return ast;
            } catch (e) {
                this._reportError("" + e, sourceSpan);
                return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
            }
        };
        TemplateParseVisitor.prototype._parseAction = function (value, sourceSpan) {
            var sourceInfo = sourceSpan.start.toString();
            try {
                var ast = this._exprParser.parseAction(value, sourceInfo, this._interpolationConfig);
                if (ast) {
                    this._reportParserErors(ast.errors, sourceSpan);
                }
                if (!ast || ast.ast instanceof ast_1.EmptyExpr) {
                    this._reportError("Empty expressions are not allowed", sourceSpan);
                    return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
                }
                this._checkPipes(ast, sourceSpan);
                return ast;
            } catch (e) {
                this._reportError("" + e, sourceSpan);
                return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
            }
        };
        TemplateParseVisitor.prototype._parseBinding = function (value, sourceSpan) {
            var sourceInfo = sourceSpan.start.toString();
            try {
                var ast = this._exprParser.parseBinding(value, sourceInfo, this._interpolationConfig);
                if (ast) this._reportParserErors(ast.errors, sourceSpan);
                this._checkPipes(ast, sourceSpan);
                return ast;
            } catch (e) {
                this._reportError("" + e, sourceSpan);
                return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
            }
        };
        TemplateParseVisitor.prototype._parseTemplateBindings = function (value, sourceSpan) {
            var _this = this;
            var sourceInfo = sourceSpan.start.toString();
            try {
                var bindingsResult = this._exprParser.parseTemplateBindings(value, sourceInfo);
                this._reportParserErors(bindingsResult.errors, sourceSpan);
                bindingsResult.templateBindings.forEach(function (binding) {
                    if (lang_1.isPresent(binding.expression)) {
                        _this._checkPipes(binding.expression, sourceSpan);
                    }
                });
                bindingsResult.warnings.forEach(function (warning) {
                    _this._reportError(warning, sourceSpan, parse_util_1.ParseErrorLevel.WARNING);
                });
                return bindingsResult.templateBindings;
            } catch (e) {
                this._reportError("" + e, sourceSpan);
                return [];
            }
        };
        TemplateParseVisitor.prototype._checkPipes = function (ast, sourceSpan) {
            var _this = this;
            if (lang_1.isPresent(ast)) {
                var collector = new PipeCollector();
                ast.visit(collector);
                collector.pipes.forEach(function (pipeName) {
                    if (!_this.pipesByName.has(pipeName)) {
                        _this._reportError("The pipe '" + pipeName + "' could not be found", sourceSpan);
                    }
                });
            }
        };
        TemplateParseVisitor.prototype.visitExpansion = function (expansion, context) {
            return null;
        };
        TemplateParseVisitor.prototype.visitExpansionCase = function (expansionCase, context) {
            return null;
        };
        TemplateParseVisitor.prototype.visitText = function (text, parent) {
            var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);
            var expr = this._parseInterpolation(text.value, text.sourceSpan);
            if (lang_1.isPresent(expr)) {
                return new template_ast_1.BoundTextAst(expr, ngContentIndex, text.sourceSpan);
            } else {
                return new template_ast_1.TextAst(text.value, ngContentIndex, text.sourceSpan);
            }
        };
        TemplateParseVisitor.prototype.visitAttribute = function (attribute, contex) {
            return new template_ast_1.AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
        };
        TemplateParseVisitor.prototype.visitComment = function (comment, context) {
            return null;
        };
        TemplateParseVisitor.prototype.visitElement = function (element, parent) {
            var _this = this;
            var nodeName = element.name;
            var preparsedElement = template_preparser_1.preparseElement(element);
            if (preparsedElement.type === template_preparser_1.PreparsedElementType.SCRIPT || preparsedElement.type === template_preparser_1.PreparsedElementType.STYLE) {
                // Skipping <script> for security reasons
                // Skipping <style> as we already processed them
                // in the StyleCompiler
                return null;
            }
            if (preparsedElement.type === template_preparser_1.PreparsedElementType.STYLESHEET && style_url_resolver_1.isStyleUrlResolvable(preparsedElement.hrefAttr)) {
                // Skipping stylesheets with either relative urls or package scheme as we already processed
                // them in the StyleCompiler
                return null;
            }
            var matchableAttrs = [];
            var elementOrDirectiveProps = [];
            var elementOrDirectiveRefs = [];
            var elementVars = [];
            var animationProps = [];
            var events = [];
            var templateElementOrDirectiveProps = [];
            var templateMatchableAttrs = [];
            var templateElementVars = [];
            var hasInlineTemplates = false;
            var attrs = [];
            var lcElName = tags_1.splitNsName(nodeName.toLowerCase())[1];
            var isTemplateElement = lcElName == TEMPLATE_ELEMENT;
            element.attrs.forEach(function (attr) {
                var hasBinding = _this._parseAttr(isTemplateElement, attr, matchableAttrs, elementOrDirectiveProps, animationProps, events, elementOrDirectiveRefs, elementVars);
                var hasTemplateBinding = _this._parseInlineTemplateBinding(attr, templateMatchableAttrs, templateElementOrDirectiveProps, templateElementVars);
                if (hasTemplateBinding && hasInlineTemplates) {
                    _this._reportError("Can't have multiple template bindings on one element. Use only one attribute named 'template' or prefixed with *", attr.sourceSpan);
                }
                if (!hasBinding && !hasTemplateBinding) {
                    // don't include the bindings as attributes as well in the AST
                    attrs.push(_this.visitAttribute(attr, null));
                    matchableAttrs.push([attr.name, attr.value]);
                }
                if (hasTemplateBinding) {
                    hasInlineTemplates = true;
                }
            });
            var elementCssSelector = createElementCssSelector(nodeName, matchableAttrs);
            var directiveMetas = this._parseDirectives(this.selectorMatcher, elementCssSelector);
            var references = [];
            var directiveAsts = this._createDirectiveAsts(isTemplateElement, element.name, directiveMetas, elementOrDirectiveProps, elementOrDirectiveRefs, element.sourceSpan, references);
            var elementProps = this._createElementPropertyAsts(element.name, elementOrDirectiveProps, directiveAsts).concat(animationProps);
            var isViewRoot = parent.isTemplateElement || hasInlineTemplates;
            var providerContext = new provider_analyzer_1.ProviderElementContext(this.providerViewContext, parent.providerContext, isViewRoot, directiveAsts, attrs, references, element.sourceSpan);
            var children = html.visitAll(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children, ElementContext.create(isTemplateElement, directiveAsts, isTemplateElement ? parent.providerContext : providerContext));
            providerContext.afterElement();
            // Override the actual selector when the `ngProjectAs` attribute is provided
            var projectionSelector = lang_1.isPresent(preparsedElement.projectAs) ? selector_1.CssSelector.parse(preparsedElement.projectAs)[0] : elementCssSelector;
            var ngContentIndex = parent.findNgContentIndex(projectionSelector);
            var parsedElement;
            if (preparsedElement.type === template_preparser_1.PreparsedElementType.NG_CONTENT) {
                if (lang_1.isPresent(element.children) && element.children.length > 0) {
                    this._reportError("<ng-content> element cannot have content. <ng-content> must be immediately followed by </ng-content>", element.sourceSpan);
                }
                parsedElement = new template_ast_1.NgContentAst(this.ngContentCount++, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
            } else if (isTemplateElement) {
                this._assertAllEventsPublishedByDirectives(directiveAsts, events);
                this._assertNoComponentsNorElementBindingsOnTemplate(directiveAsts, elementProps, element.sourceSpan);
                parsedElement = new template_ast_1.EmbeddedTemplateAst(attrs, events, references, elementVars, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, children, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
            } else {
                this._assertOnlyOneComponent(directiveAsts, element.sourceSpan);
                var ngContentIndex_1 = hasInlineTemplates ? null : parent.findNgContentIndex(projectionSelector);
                parsedElement = new template_ast_1.ElementAst(nodeName, attrs, elementProps, events, references, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, children, hasInlineTemplates ? null : ngContentIndex_1, element.sourceSpan);
            }
            if (hasInlineTemplates) {
                var templateCssSelector = createElementCssSelector(TEMPLATE_ELEMENT, templateMatchableAttrs);
                var templateDirectiveMetas = this._parseDirectives(this.selectorMatcher, templateCssSelector);
                var templateDirectiveAsts = this._createDirectiveAsts(true, element.name, templateDirectiveMetas, templateElementOrDirectiveProps, [], element.sourceSpan, []);
                var templateElementProps = this._createElementPropertyAsts(element.name, templateElementOrDirectiveProps, templateDirectiveAsts);
                this._assertNoComponentsNorElementBindingsOnTemplate(templateDirectiveAsts, templateElementProps, element.sourceSpan);
                var templateProviderContext = new provider_analyzer_1.ProviderElementContext(this.providerViewContext, parent.providerContext, parent.isTemplateElement, templateDirectiveAsts, [], [], element.sourceSpan);
                templateProviderContext.afterElement();
                parsedElement = new template_ast_1.EmbeddedTemplateAst([], [], [], templateElementVars, templateProviderContext.transformedDirectiveAsts, templateProviderContext.transformProviders, templateProviderContext.transformedHasViewContainer, [parsedElement], ngContentIndex, element.sourceSpan);
            }
            return parsedElement;
        };
        TemplateParseVisitor.prototype._parseInlineTemplateBinding = function (attr, targetMatchableAttrs, targetProps, targetVars) {
            var templateBindingsSource = null;
            if (this._normalizeAttributeName(attr.name) == TEMPLATE_ATTR) {
                templateBindingsSource = attr.value;
            } else if (attr.name.startsWith(TEMPLATE_ATTR_PREFIX)) {
                var key = attr.name.substring(TEMPLATE_ATTR_PREFIX.length); // remove the star
                templateBindingsSource = attr.value.length == 0 ? key : key + ' ' + attr.value;
            }
            if (lang_1.isPresent(templateBindingsSource)) {
                var bindings = this._parseTemplateBindings(templateBindingsSource, attr.sourceSpan);
                for (var i = 0; i < bindings.length; i++) {
                    var binding = bindings[i];
                    if (binding.keyIsVar) {
                        targetVars.push(new template_ast_1.VariableAst(binding.key, binding.name, attr.sourceSpan));
                    } else if (lang_1.isPresent(binding.expression)) {
                        this._parsePropertyAst(binding.key, binding.expression, attr.sourceSpan, targetMatchableAttrs, targetProps);
                    } else {
                        targetMatchableAttrs.push([binding.key, '']);
                        this._parseLiteralAttr(binding.key, null, attr.sourceSpan, targetProps);
                    }
                }
                return true;
            }
            return false;
        };
        TemplateParseVisitor.prototype._parseAttr = function (isTemplateElement, attr, targetMatchableAttrs, targetProps, targetAnimationProps, targetEvents, targetRefs, targetVars) {
            var attrName = this._normalizeAttributeName(attr.name);
            var attrValue = attr.value;
            var bindParts = attrName.match(BIND_NAME_REGEXP);
            var hasBinding = false;
            if (bindParts !== null) {
                hasBinding = true;
                if (lang_1.isPresent(bindParts[1])) {
                    this._parsePropertyOrAnimation(bindParts[8], attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps, targetAnimationProps);
                } else if (lang_1.isPresent(bindParts[2])) {
                    var identifier = bindParts[8];
                    if (isTemplateElement) {
                        this._reportError("\"var-\" on <template> elements is deprecated. Use \"let-\" instead!", attr.sourceSpan, parse_util_1.ParseErrorLevel.WARNING);
                        this._parseVariable(identifier, attrValue, attr.sourceSpan, targetVars);
                    } else {
                        this._reportError("\"var-\" on non <template> elements is deprecated. Use \"ref-\" instead!", attr.sourceSpan, parse_util_1.ParseErrorLevel.WARNING);
                        this._parseReference(identifier, attrValue, attr.sourceSpan, targetRefs);
                    }
                } else if (lang_1.isPresent(bindParts[3])) {
                    if (isTemplateElement) {
                        var identifier = bindParts[8];
                        this._parseVariable(identifier, attrValue, attr.sourceSpan, targetVars);
                    } else {
                        this._reportError("\"let-\" is only supported on template elements.", attr.sourceSpan);
                    }
                } else if (lang_1.isPresent(bindParts[4])) {
                    var identifier = bindParts[8];
                    this._parseReference(identifier, attrValue, attr.sourceSpan, targetRefs);
                } else if (lang_1.isPresent(bindParts[5])) {
                    this._parseEvent(bindParts[8], attrValue, attr.sourceSpan, targetMatchableAttrs, targetEvents);
                } else if (lang_1.isPresent(bindParts[6])) {
                    this._parsePropertyOrAnimation(bindParts[8], attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps, targetAnimationProps);
                    this._parseAssignmentEvent(bindParts[8], attrValue, attr.sourceSpan, targetMatchableAttrs, targetEvents);
                } else if (lang_1.isPresent(bindParts[7])) {
                    if (attrName[0] == '@' && lang_1.isPresent(attrValue) && attrValue.length > 0) {
                        this._reportError("Assigning animation triggers via @prop=\"exp\" attributes with an expression is deprecated. Use property bindings (e.g. [@prop]=\"exp\") instead!", attr.sourceSpan, parse_util_1.ParseErrorLevel.WARNING);
                    }
                    this._parseAnimation(bindParts[8], attrValue, attr.sourceSpan, targetMatchableAttrs, targetAnimationProps);
                } else if (lang_1.isPresent(bindParts[9])) {
                    this._parsePropertyOrAnimation(bindParts[9], attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps, targetAnimationProps);
                    this._parseAssignmentEvent(bindParts[9], attrValue, attr.sourceSpan, targetMatchableAttrs, targetEvents);
                } else if (lang_1.isPresent(bindParts[10])) {
                    this._parsePropertyOrAnimation(bindParts[10], attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps, targetAnimationProps);
                } else if (lang_1.isPresent(bindParts[11])) {
                    this._parseEvent(bindParts[11], attrValue, attr.sourceSpan, targetMatchableAttrs, targetEvents);
                }
            } else {
                hasBinding = this._parsePropertyInterpolation(attrName, attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps);
            }
            if (!hasBinding) {
                this._parseLiteralAttr(attrName, attrValue, attr.sourceSpan, targetProps);
            }
            return hasBinding;
        };
        TemplateParseVisitor.prototype._normalizeAttributeName = function (attrName) {
            return attrName.toLowerCase().startsWith('data-') ? attrName.substring(5) : attrName;
        };
        TemplateParseVisitor.prototype._parseVariable = function (identifier, value, sourceSpan, targetVars) {
            if (identifier.indexOf('-') > -1) {
                this._reportError("\"-\" is not allowed in variable names", sourceSpan);
            }
            targetVars.push(new template_ast_1.VariableAst(identifier, value, sourceSpan));
        };
        TemplateParseVisitor.prototype._parseReference = function (identifier, value, sourceSpan, targetRefs) {
            if (identifier.indexOf('-') > -1) {
                this._reportError("\"-\" is not allowed in reference names", sourceSpan);
            }
            targetRefs.push(new ElementOrDirectiveRef(identifier, value, sourceSpan));
        };
        TemplateParseVisitor.prototype._parsePropertyOrAnimation = function (name, expression, sourceSpan, targetMatchableAttrs, targetProps, targetAnimationProps) {
            if (name[0] == '@') {
                this._parseAnimation(name.substr(1), expression, sourceSpan, targetMatchableAttrs, targetAnimationProps);
            } else {
                this._parsePropertyAst(name, this._parseBinding(expression, sourceSpan), sourceSpan, targetMatchableAttrs, targetProps);
            }
        };
        TemplateParseVisitor.prototype._parseAnimation = function (name, expression, sourceSpan, targetMatchableAttrs, targetAnimationProps) {
            // This will occur when a @trigger is not paired with an expression.
            // For animations it is valid to not have an expression since */void
            // states will be applied by angular when the element is attached/detached
            if (!lang_1.isPresent(expression) || expression.length == 0) {
                expression = 'null';
            }
            var ast = this._parseBinding(expression, sourceSpan);
            targetMatchableAttrs.push([name, ast.source]);
            targetAnimationProps.push(new template_ast_1.BoundElementPropertyAst(name, template_ast_1.PropertyBindingType.Animation, core_1.SecurityContext.NONE, ast, null, sourceSpan));
        };
        TemplateParseVisitor.prototype._parsePropertyInterpolation = function (name, value, sourceSpan, targetMatchableAttrs, targetProps) {
            var expr = this._parseInterpolation(value, sourceSpan);
            if (lang_1.isPresent(expr)) {
                this._parsePropertyAst(name, expr, sourceSpan, targetMatchableAttrs, targetProps);
                return true;
            }
            return false;
        };
        TemplateParseVisitor.prototype._parsePropertyAst = function (name, ast, sourceSpan, targetMatchableAttrs, targetProps) {
            targetMatchableAttrs.push([name, ast.source]);
            targetProps.push(new BoundElementOrDirectiveProperty(name, ast, false, sourceSpan));
        };
        TemplateParseVisitor.prototype._parseAssignmentEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
            this._parseEvent(name + "Change", expression + "=$event", sourceSpan, targetMatchableAttrs, targetEvents);
        };
        TemplateParseVisitor.prototype._parseEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
            // long format: 'target: eventName'
            var parts = util_1.splitAtColon(name, [null, name]);
            var target = parts[0];
            var eventName = parts[1];
            var ast = this._parseAction(expression, sourceSpan);
            targetMatchableAttrs.push([name, ast.source]);
            targetEvents.push(new template_ast_1.BoundEventAst(eventName, target, ast, sourceSpan));
            // Don't detect directives for event names for now,
            // so don't add the event name to the matchableAttrs
        };
        TemplateParseVisitor.prototype._parseLiteralAttr = function (name, value, sourceSpan, targetProps) {
            targetProps.push(new BoundElementOrDirectiveProperty(name, this._exprParser.wrapLiteralPrimitive(value, ''), true, sourceSpan));
        };
        TemplateParseVisitor.prototype._parseDirectives = function (selectorMatcher, elementCssSelector) {
            var _this = this;
            // Need to sort the directives so that we get consistent results throughout,
            // as selectorMatcher uses Maps inside.
            // Also dedupe directives as they might match more than one time!
            var directives = collection_1.ListWrapper.createFixedSize(this.directivesIndex.size);
            selectorMatcher.match(elementCssSelector, function (selector, directive) {
                directives[_this.directivesIndex.get(directive)] = directive;
            });
            return directives.filter(function (dir) {
                return lang_1.isPresent(dir);
            });
        };
        TemplateParseVisitor.prototype._createDirectiveAsts = function (isTemplateElement, elementName, directives, props, elementOrDirectiveRefs, elementSourceSpan, targetReferences) {
            var _this = this;
            var matchedReferences = new Set();
            var component = null;
            var directiveAsts = directives.map(function (directive) {
                var sourceSpan = new parse_util_1.ParseSourceSpan(elementSourceSpan.start, elementSourceSpan.end, "Directive " + directive.type.name);
                if (directive.isComponent) {
                    component = directive;
                }
                var hostProperties = [];
                var hostEvents = [];
                var directiveProperties = [];
                _this._createDirectiveHostPropertyAsts(elementName, directive.hostProperties, sourceSpan, hostProperties);
                _this._createDirectiveHostEventAsts(directive.hostListeners, sourceSpan, hostEvents);
                _this._createDirectivePropertyAsts(directive.inputs, props, directiveProperties);
                elementOrDirectiveRefs.forEach(function (elOrDirRef) {
                    if (elOrDirRef.value.length === 0 && directive.isComponent || directive.exportAs == elOrDirRef.value) {
                        targetReferences.push(new template_ast_1.ReferenceAst(elOrDirRef.name, identifiers_1.identifierToken(directive.type), elOrDirRef.sourceSpan));
                        matchedReferences.add(elOrDirRef.name);
                    }
                });
                return new template_ast_1.DirectiveAst(directive, directiveProperties, hostProperties, hostEvents, sourceSpan);
            });
            elementOrDirectiveRefs.forEach(function (elOrDirRef) {
                if (elOrDirRef.value.length > 0) {
                    if (!collection_1.SetWrapper.has(matchedReferences, elOrDirRef.name)) {
                        _this._reportError("There is no directive with \"exportAs\" set to \"" + elOrDirRef.value + "\"", elOrDirRef.sourceSpan);
                    }
                } else if (lang_1.isBlank(component)) {
                    var refToken = null;
                    if (isTemplateElement) {
                        refToken = identifiers_1.identifierToken(identifiers_1.Identifiers.TemplateRef);
                    }
                    targetReferences.push(new template_ast_1.ReferenceAst(elOrDirRef.name, refToken, elOrDirRef.sourceSpan));
                }
            }); // fix syntax highlighting issue: `
            return directiveAsts;
        };
        TemplateParseVisitor.prototype._createDirectiveHostPropertyAsts = function (elementName, hostProps, sourceSpan, targetPropertyAsts) {
            var _this = this;
            if (lang_1.isPresent(hostProps)) {
                collection_1.StringMapWrapper.forEach(hostProps, function (expression, propName) {
                    var exprAst = _this._parseBinding(expression, sourceSpan);
                    targetPropertyAsts.push(_this._createElementPropertyAst(elementName, propName, exprAst, sourceSpan));
                });
            }
        };
        TemplateParseVisitor.prototype._createDirectiveHostEventAsts = function (hostListeners, sourceSpan, targetEventAsts) {
            var _this = this;
            if (lang_1.isPresent(hostListeners)) {
                collection_1.StringMapWrapper.forEach(hostListeners, function (expression, propName) {
                    _this._parseEvent(propName, expression, sourceSpan, [], targetEventAsts);
                });
            }
        };
        TemplateParseVisitor.prototype._createDirectivePropertyAsts = function (directiveProperties, boundProps, targetBoundDirectiveProps) {
            if (lang_1.isPresent(directiveProperties)) {
                var boundPropsByName_1 = new Map();
                boundProps.forEach(function (boundProp) {
                    var prevValue = boundPropsByName_1.get(boundProp.name);
                    if (lang_1.isBlank(prevValue) || prevValue.isLiteral) {
                        // give [a]="b" a higher precedence than a="b" on the same element
                        boundPropsByName_1.set(boundProp.name, boundProp);
                    }
                });
                collection_1.StringMapWrapper.forEach(directiveProperties, function (elProp, dirProp) {
                    var boundProp = boundPropsByName_1.get(elProp);
                    // Bindings are optional, so this binding only needs to be set up if an expression is given.
                    if (lang_1.isPresent(boundProp)) {
                        targetBoundDirectiveProps.push(new template_ast_1.BoundDirectivePropertyAst(dirProp, boundProp.name, boundProp.expression, boundProp.sourceSpan));
                    }
                });
            }
        };
        TemplateParseVisitor.prototype._createElementPropertyAsts = function (elementName, props, directives) {
            var _this = this;
            var boundElementProps = [];
            var boundDirectivePropsIndex = new Map();
            directives.forEach(function (directive) {
                directive.inputs.forEach(function (prop) {
                    boundDirectivePropsIndex.set(prop.templateName, prop);
                });
            });
            props.forEach(function (prop) {
                if (!prop.isLiteral && lang_1.isBlank(boundDirectivePropsIndex.get(prop.name))) {
                    boundElementProps.push(_this._createElementPropertyAst(elementName, prop.name, prop.expression, prop.sourceSpan));
                }
            });
            return boundElementProps;
        };
        TemplateParseVisitor.prototype._createElementPropertyAst = function (elementName, name, ast, sourceSpan) {
            var unit = null;
            var bindingType;
            var boundPropertyName;
            var parts = name.split(PROPERTY_PARTS_SEPARATOR);
            var securityContext;
            if (parts.length === 1) {
                var partValue = parts[0];
                if (partValue[0] == '@') {
                    boundPropertyName = partValue.substr(1);
                    bindingType = template_ast_1.PropertyBindingType.Animation;
                    securityContext = core_1.SecurityContext.NONE;
                    // DEPRECATED: remove this if statement post RC5
                    if (boundPropertyName[0] == '@') {
                        this._reportError("Assigning animation triggers within host data as attributes such as \"@prop\": \"exp\" is deprecated. Use host bindings (e.g. \"[@prop]\": \"exp\") instead!", sourceSpan, parse_util_1.ParseErrorLevel.WARNING);
                        boundPropertyName = boundPropertyName.substr(1);
                    }
                } else {
                    boundPropertyName = this._schemaRegistry.getMappedPropName(partValue);
                    securityContext = this._schemaRegistry.securityContext(elementName, boundPropertyName);
                    bindingType = template_ast_1.PropertyBindingType.Property;
                    if (!this._schemaRegistry.hasProperty(elementName, boundPropertyName, this._schemas)) {
                        var errorMsg = "Can't bind to '" + boundPropertyName + "' since it isn't a known property of '" + elementName + "'.";
                        if (elementName.indexOf('-') !== -1) {
                            errorMsg += "\n1. If '" + elementName + "' is an Angular component and it has '" + boundPropertyName + "' input, then verify that it is part of this module." + ("\n2. If '" + elementName + "' is a Web Component then add \"CUSTOM_ELEMENTS_SCHEMA\" to the '@NgModule.schema' of this component to suppress this message.\n");
                        }
                        this._reportError(errorMsg, sourceSpan);
                    }
                }
            } else {
                if (parts[0] == ATTRIBUTE_PREFIX) {
                    boundPropertyName = parts[1];
                    if (boundPropertyName.toLowerCase().startsWith('on')) {
                        this._reportError("Binding to event attribute '" + boundPropertyName + "' is disallowed " + ("for security reasons, please use (" + boundPropertyName.slice(2) + ")=..."), sourceSpan);
                    }
                    // NB: For security purposes, use the mapped property name, not the attribute name.
                    securityContext = this._schemaRegistry.securityContext(elementName, this._schemaRegistry.getMappedPropName(boundPropertyName));
                    var nsSeparatorIdx = boundPropertyName.indexOf(':');
                    if (nsSeparatorIdx > -1) {
                        var ns = boundPropertyName.substring(0, nsSeparatorIdx);
                        var name_1 = boundPropertyName.substring(nsSeparatorIdx + 1);
                        boundPropertyName = tags_1.mergeNsAndName(ns, name_1);
                    }
                    bindingType = template_ast_1.PropertyBindingType.Attribute;
                } else if (parts[0] == CLASS_PREFIX) {
                    boundPropertyName = parts[1];
                    bindingType = template_ast_1.PropertyBindingType.Class;
                    securityContext = core_1.SecurityContext.NONE;
                } else if (parts[0] == STYLE_PREFIX) {
                    unit = parts.length > 2 ? parts[2] : null;
                    boundPropertyName = parts[1];
                    bindingType = template_ast_1.PropertyBindingType.Style;
                    securityContext = core_1.SecurityContext.STYLE;
                } else {
                    this._reportError("Invalid property name '" + name + "'", sourceSpan);
                    bindingType = null;
                    securityContext = null;
                }
            }
            return new template_ast_1.BoundElementPropertyAst(boundPropertyName, bindingType, securityContext, ast, unit, sourceSpan);
        };
        TemplateParseVisitor.prototype._findComponentDirectiveNames = function (directives) {
            var componentTypeNames = [];
            directives.forEach(function (directive) {
                var typeName = directive.directive.type.name;
                if (directive.directive.isComponent) {
                    componentTypeNames.push(typeName);
                }
            });
            return componentTypeNames;
        };
        TemplateParseVisitor.prototype._assertOnlyOneComponent = function (directives, sourceSpan) {
            var componentTypeNames = this._findComponentDirectiveNames(directives);
            if (componentTypeNames.length > 1) {
                this._reportError("More than one component: " + componentTypeNames.join(','), sourceSpan);
            }
        };
        TemplateParseVisitor.prototype._assertNoComponentsNorElementBindingsOnTemplate = function (directives, elementProps, sourceSpan) {
            var _this = this;
            var componentTypeNames = this._findComponentDirectiveNames(directives);
            if (componentTypeNames.length > 0) {
                this._reportError("Components on an embedded template: " + componentTypeNames.join(','), sourceSpan);
            }
            elementProps.forEach(function (prop) {
                _this._reportError("Property binding " + prop.name + " not used by any directive on an embedded template. Make sure that the property name is spelled correctly and all directives are listed in the \"directives\" section.", sourceSpan);
            });
        };
        TemplateParseVisitor.prototype._assertAllEventsPublishedByDirectives = function (directives, events) {
            var _this = this;
            var allDirectiveEvents = new Set();
            directives.forEach(function (directive) {
                collection_1.StringMapWrapper.forEach(directive.directive.outputs, function (eventName) {
                    allDirectiveEvents.add(eventName);
                });
            });
            events.forEach(function (event) {
                if (lang_1.isPresent(event.target) || !collection_1.SetWrapper.has(allDirectiveEvents, event.name)) {
                    _this._reportError("Event binding " + event.fullName + " not emitted by any directive on an embedded template. Make sure that the event name is spelled correctly and all directives are listed in the \"directives\" section.", event.sourceSpan);
                }
            });
        };
        return TemplateParseVisitor;
    }();
    var NonBindableVisitor = function () {
        function NonBindableVisitor() {}
        NonBindableVisitor.prototype.visitElement = function (ast, parent) {
            var preparsedElement = template_preparser_1.preparseElement(ast);
            if (preparsedElement.type === template_preparser_1.PreparsedElementType.SCRIPT || preparsedElement.type === template_preparser_1.PreparsedElementType.STYLE || preparsedElement.type === template_preparser_1.PreparsedElementType.STYLESHEET) {
                // Skipping <script> for security reasons
                // Skipping <style> and stylesheets as we already processed them
                // in the StyleCompiler
                return null;
            }
            var attrNameAndValues = ast.attrs.map(function (attrAst) {
                return [attrAst.name, attrAst.value];
            });
            var selector = createElementCssSelector(ast.name, attrNameAndValues);
            var ngContentIndex = parent.findNgContentIndex(selector);
            var children = html.visitAll(this, ast.children, EMPTY_ELEMENT_CONTEXT);
            return new template_ast_1.ElementAst(ast.name, html.visitAll(this, ast.attrs), [], [], [], [], [], false, children, ngContentIndex, ast.sourceSpan);
        };
        NonBindableVisitor.prototype.visitComment = function (comment, context) {
            return null;
        };
        NonBindableVisitor.prototype.visitAttribute = function (attribute, context) {
            return new template_ast_1.AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
        };
        NonBindableVisitor.prototype.visitText = function (text, parent) {
            var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);
            return new template_ast_1.TextAst(text.value, ngContentIndex, text.sourceSpan);
        };
        NonBindableVisitor.prototype.visitExpansion = function (expansion, context) {
            return expansion;
        };
        NonBindableVisitor.prototype.visitExpansionCase = function (expansionCase, context) {
            return expansionCase;
        };
        return NonBindableVisitor;
    }();
    var BoundElementOrDirectiveProperty = function () {
        function BoundElementOrDirectiveProperty(name, expression, isLiteral, sourceSpan) {
            this.name = name;
            this.expression = expression;
            this.isLiteral = isLiteral;
            this.sourceSpan = sourceSpan;
        }
        return BoundElementOrDirectiveProperty;
    }();
    var ElementOrDirectiveRef = function () {
        function ElementOrDirectiveRef(name, value, sourceSpan) {
            this.name = name;
            this.value = value;
            this.sourceSpan = sourceSpan;
        }
        return ElementOrDirectiveRef;
    }();
    function splitClasses(classAttrValue) {
        return classAttrValue.trim().split(/\s+/g);
    }
    exports.splitClasses = splitClasses;
    var ElementContext = function () {
        function ElementContext(isTemplateElement, _ngContentIndexMatcher, _wildcardNgContentIndex, providerContext) {
            this.isTemplateElement = isTemplateElement;
            this._ngContentIndexMatcher = _ngContentIndexMatcher;
            this._wildcardNgContentIndex = _wildcardNgContentIndex;
            this.providerContext = providerContext;
        }
        ElementContext.create = function (isTemplateElement, directives, providerContext) {
            var matcher = new selector_1.SelectorMatcher();
            var wildcardNgContentIndex = null;
            var component = directives.find(function (directive) {
                return directive.directive.isComponent;
            });
            if (lang_1.isPresent(component)) {
                var ngContentSelectors = component.directive.template.ngContentSelectors;
                for (var i = 0; i < ngContentSelectors.length; i++) {
                    var selector = ngContentSelectors[i];
                    if (selector === '*') {
                        wildcardNgContentIndex = i;
                    } else {
                        matcher.addSelectables(selector_1.CssSelector.parse(ngContentSelectors[i]), i);
                    }
                }
            }
            return new ElementContext(isTemplateElement, matcher, wildcardNgContentIndex, providerContext);
        };
        ElementContext.prototype.findNgContentIndex = function (selector) {
            var ngContentIndices = [];
            this._ngContentIndexMatcher.match(selector, function (selector, ngContentIndex) {
                ngContentIndices.push(ngContentIndex);
            });
            collection_1.ListWrapper.sort(ngContentIndices);
            if (lang_1.isPresent(this._wildcardNgContentIndex)) {
                ngContentIndices.push(this._wildcardNgContentIndex);
            }
            return ngContentIndices.length > 0 ? ngContentIndices[0] : null;
        };
        return ElementContext;
    }();
    function createElementCssSelector(elementName, matchableAttrs) {
        var cssSelector = new selector_1.CssSelector();
        var elNameNoNs = tags_1.splitNsName(elementName)[1];
        cssSelector.setElement(elNameNoNs);
        for (var i = 0; i < matchableAttrs.length; i++) {
            var attrName = matchableAttrs[i][0];
            var attrNameNoNs = tags_1.splitNsName(attrName)[1];
            var attrValue = matchableAttrs[i][1];
            cssSelector.addAttribute(attrNameNoNs, attrValue);
            if (attrName.toLowerCase() == CLASS_ATTR) {
                var classes = splitClasses(attrValue);
                classes.forEach(function (className) {
                    return cssSelector.addClassName(className);
                });
            }
        }
        return cssSelector;
    }
    var EMPTY_ELEMENT_CONTEXT = new ElementContext(true, new selector_1.SelectorMatcher(), null, null);
    var NON_BINDABLE_VISITOR = new NonBindableVisitor();
    var PipeCollector = function (_super) {
        __extends(PipeCollector, _super);
        function PipeCollector() {
            _super.apply(this, arguments);
            this.pipes = new Set();
        }
        PipeCollector.prototype.visitPipe = function (ast, context) {
            this.pipes.add(ast.name);
            ast.exp.visit(this);
            this.visitAll(ast.args, context);
            return null;
        };
        return PipeCollector;
    }(ast_1.RecursiveAstVisitor);
    exports.PipeCollector = PipeCollector;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/config.js', ['@angular/core', '../src/facade/exceptions', './identifiers', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var exceptions_1 = $__require('../src/facade/exceptions');
    var identifiers_1 = $__require('./identifiers');
    var CompilerConfig = function () {
        function CompilerConfig(_a) {
            var _b = _a === void 0 ? {} : _a,
                _c = _b.renderTypes,
                renderTypes = _c === void 0 ? new DefaultRenderTypes() : _c,
                _d = _b.defaultEncapsulation,
                defaultEncapsulation = _d === void 0 ? core_1.ViewEncapsulation.Emulated : _d,
                genDebugInfo = _b.genDebugInfo,
                logBindingUpdate = _b.logBindingUpdate,
                _e = _b.useJit,
                useJit = _e === void 0 ? true : _e,
                _f = _b.deprecatedPlatformDirectives,
                deprecatedPlatformDirectives = _f === void 0 ? [] : _f,
                _g = _b.deprecatedPlatformPipes,
                deprecatedPlatformPipes = _g === void 0 ? [] : _g;
            this.renderTypes = renderTypes;
            this.defaultEncapsulation = defaultEncapsulation;
            this._genDebugInfo = genDebugInfo;
            this._logBindingUpdate = logBindingUpdate;
            this.useJit = useJit;
            this.platformDirectives = deprecatedPlatformDirectives;
            this.platformPipes = deprecatedPlatformPipes;
        }
        Object.defineProperty(CompilerConfig.prototype, "genDebugInfo", {
            get: function () {
                return this._genDebugInfo === void 0 ? core_1.isDevMode() : this._genDebugInfo;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CompilerConfig.prototype, "logBindingUpdate", {
            get: function () {
                return this._logBindingUpdate === void 0 ? core_1.isDevMode() : this._logBindingUpdate;
            },
            enumerable: true,
            configurable: true
        });
        return CompilerConfig;
    }();
    exports.CompilerConfig = CompilerConfig;
    /**
     * Types used for the renderer.
     * Can be replaced to specialize the generated output to a specific renderer
     * to help tree shaking.
     */
    var RenderTypes = function () {
        function RenderTypes() {}
        Object.defineProperty(RenderTypes.prototype, "renderer", {
            get: function () {
                return exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderTypes.prototype, "renderText", {
            get: function () {
                return exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderTypes.prototype, "renderElement", {
            get: function () {
                return exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderTypes.prototype, "renderComment", {
            get: function () {
                return exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderTypes.prototype, "renderNode", {
            get: function () {
                return exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderTypes.prototype, "renderEvent", {
            get: function () {
                return exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        return RenderTypes;
    }();
    exports.RenderTypes = RenderTypes;
    var DefaultRenderTypes = function () {
        function DefaultRenderTypes() {
            this.renderer = identifiers_1.Identifiers.Renderer;
            this.renderText = null;
            this.renderElement = null;
            this.renderComment = null;
            this.renderNode = null;
            this.renderEvent = null;
        }
        return DefaultRenderTypes;
    }();
    exports.DefaultRenderTypes = DefaultRenderTypes;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/view_compiler/event_binder.js', ['../facade/collection', '../facade/lang', '../identifiers', '../output/output_ast', './compile_binding', './compile_method', './constants', './expression_converter', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var collection_1 = $__require('../facade/collection');
    var lang_1 = $__require('../facade/lang');
    var identifiers_1 = $__require('../identifiers');
    var o = $__require('../output/output_ast');
    var compile_binding_1 = $__require('./compile_binding');
    var compile_method_1 = $__require('./compile_method');
    var constants_1 = $__require('./constants');
    var expression_converter_1 = $__require('./expression_converter');
    var CompileEventListener = function () {
        function CompileEventListener(compileElement, eventTarget, eventName, listenerIndex) {
            this.compileElement = compileElement;
            this.eventTarget = eventTarget;
            this.eventName = eventName;
            this._hasComponentHostListener = false;
            this._actionResultExprs = [];
            this._method = new compile_method_1.CompileMethod(compileElement.view);
            this._methodName = "_handle_" + santitizeEventName(eventName) + "_" + compileElement.nodeIndex + "_" + listenerIndex;
            this._eventParam = new o.FnParam(constants_1.EventHandlerVars.event.name, o.importType(this.compileElement.view.genConfig.renderTypes.renderEvent));
        }
        CompileEventListener.getOrCreate = function (compileElement, eventTarget, eventName, targetEventListeners) {
            var listener = targetEventListeners.find(function (listener) {
                return listener.eventTarget == eventTarget && listener.eventName == eventName;
            });
            if (lang_1.isBlank(listener)) {
                listener = new CompileEventListener(compileElement, eventTarget, eventName, targetEventListeners.length);
                targetEventListeners.push(listener);
            }
            return listener;
        };
        CompileEventListener.prototype.addAction = function (hostEvent, directive, directiveInstance) {
            if (lang_1.isPresent(directive) && directive.isComponent) {
                this._hasComponentHostListener = true;
            }
            this._method.resetDebugInfo(this.compileElement.nodeIndex, hostEvent);
            var context = lang_1.isPresent(directiveInstance) ? directiveInstance : this.compileElement.view.componentContext;
            var actionStmts = expression_converter_1.convertCdStatementToIr(this.compileElement.view, context, hostEvent.handler);
            var lastIndex = actionStmts.length - 1;
            if (lastIndex >= 0) {
                var lastStatement = actionStmts[lastIndex];
                var returnExpr = convertStmtIntoExpression(lastStatement);
                var preventDefaultVar = o.variable("pd_" + this._actionResultExprs.length);
                this._actionResultExprs.push(preventDefaultVar);
                if (lang_1.isPresent(returnExpr)) {
                    // Note: We need to cast the result of the method call to dynamic,
                    // as it might be a void method!
                    actionStmts[lastIndex] = preventDefaultVar.set(returnExpr.cast(o.DYNAMIC_TYPE).notIdentical(o.literal(false))).toDeclStmt(null, [o.StmtModifier.Final]);
                }
            }
            this._method.addStmts(actionStmts);
        };
        CompileEventListener.prototype.finishMethod = function () {
            var markPathToRootStart = this._hasComponentHostListener ? this.compileElement.appElement.prop('componentView') : o.THIS_EXPR;
            var resultExpr = o.literal(true);
            this._actionResultExprs.forEach(function (expr) {
                resultExpr = resultExpr.and(expr);
            });
            var stmts = [markPathToRootStart.callMethod('markPathToRootAsCheckOnce', []).toStmt()].concat(this._method.finish()).concat([new o.ReturnStatement(resultExpr)]);
            // private is fine here as no child view will reference the event handler...
            this.compileElement.view.eventHandlerMethods.push(new o.ClassMethod(this._methodName, [this._eventParam], stmts, o.BOOL_TYPE, [o.StmtModifier.Private]));
        };
        CompileEventListener.prototype.listenToRenderer = function () {
            var listenExpr;
            var eventListener = o.THIS_EXPR.callMethod('eventHandler', [o.THIS_EXPR.prop(this._methodName).callMethod(o.BuiltinMethod.bind, [o.THIS_EXPR])]);
            if (lang_1.isPresent(this.eventTarget)) {
                listenExpr = constants_1.ViewProperties.renderer.callMethod('listenGlobal', [o.literal(this.eventTarget), o.literal(this.eventName), eventListener]);
            } else {
                listenExpr = constants_1.ViewProperties.renderer.callMethod('listen', [this.compileElement.renderNode, o.literal(this.eventName), eventListener]);
            }
            var disposable = o.variable("disposable_" + this.compileElement.view.disposables.length);
            this.compileElement.view.disposables.push(disposable);
            // private is fine here as no child view will reference the event handler...
            this.compileElement.view.createMethod.addStmt(disposable.set(listenExpr).toDeclStmt(o.FUNCTION_TYPE, [o.StmtModifier.Private]));
        };
        CompileEventListener.prototype.listenToDirective = function (directiveInstance, observablePropName) {
            var subscription = o.variable("subscription_" + this.compileElement.view.subscriptions.length);
            this.compileElement.view.subscriptions.push(subscription);
            var eventListener = o.THIS_EXPR.callMethod('eventHandler', [o.THIS_EXPR.prop(this._methodName).callMethod(o.BuiltinMethod.bind, [o.THIS_EXPR])]);
            this.compileElement.view.createMethod.addStmt(subscription.set(directiveInstance.prop(observablePropName).callMethod(o.BuiltinMethod.SubscribeObservable, [eventListener])).toDeclStmt(null, [o.StmtModifier.Final]));
        };
        return CompileEventListener;
    }();
    exports.CompileEventListener = CompileEventListener;
    function collectEventListeners(hostEvents, dirs, compileElement) {
        var eventListeners = [];
        hostEvents.forEach(function (hostEvent) {
            compileElement.view.bindings.push(new compile_binding_1.CompileBinding(compileElement, hostEvent));
            var listener = CompileEventListener.getOrCreate(compileElement, hostEvent.target, hostEvent.name, eventListeners);
            listener.addAction(hostEvent, null, null);
        });
        dirs.forEach(function (directiveAst) {
            var directiveInstance = compileElement.instances.get(identifiers_1.identifierToken(directiveAst.directive.type));
            directiveAst.hostEvents.forEach(function (hostEvent) {
                compileElement.view.bindings.push(new compile_binding_1.CompileBinding(compileElement, hostEvent));
                var listener = CompileEventListener.getOrCreate(compileElement, hostEvent.target, hostEvent.name, eventListeners);
                listener.addAction(hostEvent, directiveAst.directive, directiveInstance);
            });
        });
        eventListeners.forEach(function (listener) {
            return listener.finishMethod();
        });
        return eventListeners;
    }
    exports.collectEventListeners = collectEventListeners;
    function bindDirectiveOutputs(directiveAst, directiveInstance, eventListeners) {
        collection_1.StringMapWrapper.forEach(directiveAst.directive.outputs, function (eventName /** TODO #9100 */, observablePropName /** TODO #9100 */) {
            eventListeners.filter(function (listener) {
                return listener.eventName == eventName;
            }).forEach(function (listener) {
                listener.listenToDirective(directiveInstance, observablePropName);
            });
        });
    }
    exports.bindDirectiveOutputs = bindDirectiveOutputs;
    function bindRenderOutputs(eventListeners) {
        eventListeners.forEach(function (listener) {
            return listener.listenToRenderer();
        });
    }
    exports.bindRenderOutputs = bindRenderOutputs;
    function convertStmtIntoExpression(stmt) {
        if (stmt instanceof o.ExpressionStatement) {
            return stmt.expr;
        } else if (stmt instanceof o.ReturnStatement) {
            return stmt.value;
        }
        return null;
    }
    function santitizeEventName(name) {
        return lang_1.StringWrapper.replaceAll(name, /[^a-zA-Z_]/g, '_');
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/view_compiler/lifecycle_binder.js', ['../../core_private', '../output/output_ast', './constants', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_private_1 = $__require('../../core_private');
    var o = $__require('../output/output_ast');
    var constants_1 = $__require('./constants');
    var STATE_IS_NEVER_CHECKED = o.THIS_EXPR.prop('numberOfChecks').identical(new o.LiteralExpr(0));
    var NOT_THROW_ON_CHANGES = o.not(constants_1.DetectChangesVars.throwOnChange);
    function bindDirectiveDetectChangesLifecycleCallbacks(directiveAst, directiveInstance, compileElement) {
        var view = compileElement.view;
        var detectChangesInInputsMethod = view.detectChangesInInputsMethod;
        var lifecycleHooks = directiveAst.directive.type.lifecycleHooks;
        if (lifecycleHooks.indexOf(core_private_1.LifecycleHooks.OnChanges) !== -1 && directiveAst.inputs.length > 0) {
            detectChangesInInputsMethod.addStmt(new o.IfStmt(constants_1.DetectChangesVars.changes.notIdentical(o.NULL_EXPR), [directiveInstance.callMethod('ngOnChanges', [constants_1.DetectChangesVars.changes]).toStmt()]));
        }
        if (lifecycleHooks.indexOf(core_private_1.LifecycleHooks.OnInit) !== -1) {
            detectChangesInInputsMethod.addStmt(new o.IfStmt(STATE_IS_NEVER_CHECKED.and(NOT_THROW_ON_CHANGES), [directiveInstance.callMethod('ngOnInit', []).toStmt()]));
        }
        if (lifecycleHooks.indexOf(core_private_1.LifecycleHooks.DoCheck) !== -1) {
            detectChangesInInputsMethod.addStmt(new o.IfStmt(NOT_THROW_ON_CHANGES, [directiveInstance.callMethod('ngDoCheck', []).toStmt()]));
        }
    }
    exports.bindDirectiveDetectChangesLifecycleCallbacks = bindDirectiveDetectChangesLifecycleCallbacks;
    function bindDirectiveAfterContentLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {
        var view = compileElement.view;
        var lifecycleHooks = directiveMeta.type.lifecycleHooks;
        var afterContentLifecycleCallbacksMethod = view.afterContentLifecycleCallbacksMethod;
        afterContentLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
        if (lifecycleHooks.indexOf(core_private_1.LifecycleHooks.AfterContentInit) !== -1) {
            afterContentLifecycleCallbacksMethod.addStmt(new o.IfStmt(STATE_IS_NEVER_CHECKED, [directiveInstance.callMethod('ngAfterContentInit', []).toStmt()]));
        }
        if (lifecycleHooks.indexOf(core_private_1.LifecycleHooks.AfterContentChecked) !== -1) {
            afterContentLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod('ngAfterContentChecked', []).toStmt());
        }
    }
    exports.bindDirectiveAfterContentLifecycleCallbacks = bindDirectiveAfterContentLifecycleCallbacks;
    function bindDirectiveAfterViewLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {
        var view = compileElement.view;
        var lifecycleHooks = directiveMeta.type.lifecycleHooks;
        var afterViewLifecycleCallbacksMethod = view.afterViewLifecycleCallbacksMethod;
        afterViewLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
        if (lifecycleHooks.indexOf(core_private_1.LifecycleHooks.AfterViewInit) !== -1) {
            afterViewLifecycleCallbacksMethod.addStmt(new o.IfStmt(STATE_IS_NEVER_CHECKED, [directiveInstance.callMethod('ngAfterViewInit', []).toStmt()]));
        }
        if (lifecycleHooks.indexOf(core_private_1.LifecycleHooks.AfterViewChecked) !== -1) {
            afterViewLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod('ngAfterViewChecked', []).toStmt());
        }
    }
    exports.bindDirectiveAfterViewLifecycleCallbacks = bindDirectiveAfterViewLifecycleCallbacks;
    function bindInjectableDestroyLifecycleCallbacks(provider, providerInstance, compileElement) {
        var onDestroyMethod = compileElement.view.destroyMethod;
        onDestroyMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
        if (provider.lifecycleHooks.indexOf(core_private_1.LifecycleHooks.OnDestroy) !== -1) {
            onDestroyMethod.addStmt(providerInstance.callMethod('ngOnDestroy', []).toStmt());
        }
    }
    exports.bindInjectableDestroyLifecycleCallbacks = bindInjectableDestroyLifecycleCallbacks;
    function bindPipeDestroyLifecycleCallbacks(pipeMeta, pipeInstance, view) {
        var onDestroyMethod = view.destroyMethod;
        if (pipeMeta.type.lifecycleHooks.indexOf(core_private_1.LifecycleHooks.OnDestroy) !== -1) {
            onDestroyMethod.addStmt(pipeInstance.callMethod('ngOnDestroy', []).toStmt());
        }
    }
    exports.bindPipeDestroyLifecycleCallbacks = bindPipeDestroyLifecycleCallbacks;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/compiler@2.0.0-rc.5/src/view_compiler/compile_binding.js", ["reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var CompileBinding = function () {
        function CompileBinding(node, sourceAst) {
            this.node = node;
            this.sourceAst = sourceAst;
        }
        return CompileBinding;
    }();
    exports.CompileBinding = CompileBinding;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/expression_parser/ast.js', ['../facade/collection', '../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var collection_1 = $__require('../facade/collection');
    var lang_1 = $__require('../facade/lang');
    var ParserError = function () {
        function ParserError(message, input, errLocation, ctxLocation) {
            this.input = input;
            this.errLocation = errLocation;
            this.ctxLocation = ctxLocation;
            this.message = "Parser Error: " + message + " " + errLocation + " [" + input + "] in " + ctxLocation;
        }
        return ParserError;
    }();
    exports.ParserError = ParserError;
    var ParseSpan = function () {
        function ParseSpan(start, end) {
            this.start = start;
            this.end = end;
        }
        return ParseSpan;
    }();
    exports.ParseSpan = ParseSpan;
    var AST = function () {
        function AST(span) {
            this.span = span;
        }
        AST.prototype.visit = function (visitor, context) {
            if (context === void 0) {
                context = null;
            }
            return null;
        };
        AST.prototype.toString = function () {
            return 'AST';
        };
        return AST;
    }();
    exports.AST = AST;
    /**
     * Represents a quoted expression of the form:
     *
     * quote = prefix `:` uninterpretedExpression
     * prefix = identifier
     * uninterpretedExpression = arbitrary string
     *
     * A quoted expression is meant to be pre-processed by an AST transformer that
     * converts it into another AST that no longer contains quoted expressions.
     * It is meant to allow third-party developers to extend Angular template
     * expression language. The `uninterpretedExpression` part of the quote is
     * therefore not interpreted by the Angular's own expression parser.
     */
    var Quote = function (_super) {
        __extends(Quote, _super);
        function Quote(span, prefix, uninterpretedExpression, location) {
            _super.call(this, span);
            this.prefix = prefix;
            this.uninterpretedExpression = uninterpretedExpression;
            this.location = location;
        }
        Quote.prototype.visit = function (visitor, context) {
            if (context === void 0) {
                context = null;
            }
            return visitor.visitQuote(this, context);
        };
        Quote.prototype.toString = function () {
            return 'Quote';
        };
        return Quote;
    }(AST);
    exports.Quote = Quote;
    var EmptyExpr = function (_super) {
        __extends(EmptyExpr, _super);
        function EmptyExpr() {
            _super.apply(this, arguments);
        }
        EmptyExpr.prototype.visit = function (visitor, context) {
            if (context === void 0) {
                context = null;
            }
            // do nothing
        };
        return EmptyExpr;
    }(AST);
    exports.EmptyExpr = EmptyExpr;
    var ImplicitReceiver = function (_super) {
        __extends(ImplicitReceiver, _super);
        function ImplicitReceiver() {
            _super.apply(this, arguments);
        }
        ImplicitReceiver.prototype.visit = function (visitor, context) {
            if (context === void 0) {
                context = null;
            }
            return visitor.visitImplicitReceiver(this, context);
        };
        return ImplicitReceiver;
    }(AST);
    exports.ImplicitReceiver = ImplicitReceiver;
    /**
     * Multiple expressions separated by a semicolon.
     */
    var Chain = function (_super) {
        __extends(Chain, _super);
        function Chain(span, expressions) {
            _super.call(this, span);
            this.expressions = expressions;
        }
        Chain.prototype.visit = function (visitor, context) {
            if (context === void 0) {
                context = null;
            }
            return visitor.visitChain(this, context);
        };
        return Chain;
    }(AST);
    exports.Chain = Chain;
    var Conditional = function (_super) {
        __extends(Conditional, _super);
        function Conditional(span, condition, trueExp, falseExp) {
            _super.call(this, span);
            this.condition = condition;
            this.trueExp = trueExp;
            this.falseExp = falseExp;
        }
        Conditional.prototype.visit = function (visitor, context) {
            if (context === void 0) {
                context = null;
            }
            return visitor.visitConditional(this, context);
        };
        return Conditional;
    }(AST);
    exports.Conditional = Conditional;
    var PropertyRead = function (_super) {
        __extends(PropertyRead, _super);
        function PropertyRead(span, receiver, name) {
            _super.call(this, span);
            this.receiver = receiver;
            this.name = name;
        }
        PropertyRead.prototype.visit = function (visitor, context) {
            if (context === void 0) {
                context = null;
            }
            return visitor.visitPropertyRead(this, context);
        };
        return PropertyRead;
    }(AST);
    exports.PropertyRead = PropertyRead;
    var PropertyWrite = function (_super) {
        __extends(PropertyWrite, _super);
        function PropertyWrite(span, receiver, name, value) {
            _super.call(this, span);
            this.receiver = receiver;
            this.name = name;
            this.value = value;
        }
        PropertyWrite.prototype.visit = function (visitor, context) {
            if (context === void 0) {
                context = null;
            }
            return visitor.visitPropertyWrite(this, context);
        };
        return PropertyWrite;
    }(AST);
    exports.PropertyWrite = PropertyWrite;
    var SafePropertyRead = function (_super) {
        __extends(SafePropertyRead, _super);
        function SafePropertyRead(span, receiver, name) {
            _super.call(this, span);
            this.receiver = receiver;
            this.name = name;
        }
        SafePropertyRead.prototype.visit = function (visitor, context) {
            if (context === void 0) {
                context = null;
            }
            return visitor.visitSafePropertyRead(this, context);
        };
        return SafePropertyRead;
    }(AST);
    exports.SafePropertyRead = SafePropertyRead;
    var KeyedRead = function (_super) {
        __extends(KeyedRead, _super);
        function KeyedRead(span, obj, key) {
            _super.call(this, span);
            this.obj = obj;
            this.key = key;
        }
        KeyedRead.prototype.visit = function (visitor, context) {
            if (context === void 0) {
                context = null;
            }
            return visitor.visitKeyedRead(this, context);
        };
        return KeyedRead;
    }(AST);
    exports.KeyedRead = KeyedRead;
    var KeyedWrite = function (_super) {
        __extends(KeyedWrite, _super);
        function KeyedWrite(span, obj, key, value) {
            _super.call(this, span);
            this.obj = obj;
            this.key = key;
            this.value = value;
        }
        KeyedWrite.prototype.visit = function (visitor, context) {
            if (context === void 0) {
                context = null;
            }
            return visitor.visitKeyedWrite(this, context);
        };
        return KeyedWrite;
    }(AST);
    exports.KeyedWrite = KeyedWrite;
    var BindingPipe = function (_super) {
        __extends(BindingPipe, _super);
        function BindingPipe(span, exp, name, args) {
            _super.call(this, span);
            this.exp = exp;
            this.name = name;
            this.args = args;
        }
        BindingPipe.prototype.visit = function (visitor, context) {
            if (context === void 0) {
                context = null;
            }
            return visitor.visitPipe(this, context);
        };
        return BindingPipe;
    }(AST);
    exports.BindingPipe = BindingPipe;
    var LiteralPrimitive = function (_super) {
        __extends(LiteralPrimitive, _super);
        function LiteralPrimitive(span, value) {
            _super.call(this, span);
            this.value = value;
        }
        LiteralPrimitive.prototype.visit = function (visitor, context) {
            if (context === void 0) {
                context = null;
            }
            return visitor.visitLiteralPrimitive(this, context);
        };
        return LiteralPrimitive;
    }(AST);
    exports.LiteralPrimitive = LiteralPrimitive;
    var LiteralArray = function (_super) {
        __extends(LiteralArray, _super);
        function LiteralArray(span, expressions) {
            _super.call(this, span);
            this.expressions = expressions;
        }
        LiteralArray.prototype.visit = function (visitor, context) {
            if (context === void 0) {
                context = null;
            }
            return visitor.visitLiteralArray(this, context);
        };
        return LiteralArray;
    }(AST);
    exports.LiteralArray = LiteralArray;
    var LiteralMap = function (_super) {
        __extends(LiteralMap, _super);
        function LiteralMap(span, keys, values) {
            _super.call(this, span);
            this.keys = keys;
            this.values = values;
        }
        LiteralMap.prototype.visit = function (visitor, context) {
            if (context === void 0) {
                context = null;
            }
            return visitor.visitLiteralMap(this, context);
        };
        return LiteralMap;
    }(AST);
    exports.LiteralMap = LiteralMap;
    var Interpolation = function (_super) {
        __extends(Interpolation, _super);
        function Interpolation(span, strings, expressions) {
            _super.call(this, span);
            this.strings = strings;
            this.expressions = expressions;
        }
        Interpolation.prototype.visit = function (visitor, context) {
            if (context === void 0) {
                context = null;
            }
            return visitor.visitInterpolation(this, context);
        };
        return Interpolation;
    }(AST);
    exports.Interpolation = Interpolation;
    var Binary = function (_super) {
        __extends(Binary, _super);
        function Binary(span, operation, left, right) {
            _super.call(this, span);
            this.operation = operation;
            this.left = left;
            this.right = right;
        }
        Binary.prototype.visit = function (visitor, context) {
            if (context === void 0) {
                context = null;
            }
            return visitor.visitBinary(this, context);
        };
        return Binary;
    }(AST);
    exports.Binary = Binary;
    var PrefixNot = function (_super) {
        __extends(PrefixNot, _super);
        function PrefixNot(span, expression) {
            _super.call(this, span);
            this.expression = expression;
        }
        PrefixNot.prototype.visit = function (visitor, context) {
            if (context === void 0) {
                context = null;
            }
            return visitor.visitPrefixNot(this, context);
        };
        return PrefixNot;
    }(AST);
    exports.PrefixNot = PrefixNot;
    var MethodCall = function (_super) {
        __extends(MethodCall, _super);
        function MethodCall(span, receiver, name, args) {
            _super.call(this, span);
            this.receiver = receiver;
            this.name = name;
            this.args = args;
        }
        MethodCall.prototype.visit = function (visitor, context) {
            if (context === void 0) {
                context = null;
            }
            return visitor.visitMethodCall(this, context);
        };
        return MethodCall;
    }(AST);
    exports.MethodCall = MethodCall;
    var SafeMethodCall = function (_super) {
        __extends(SafeMethodCall, _super);
        function SafeMethodCall(span, receiver, name, args) {
            _super.call(this, span);
            this.receiver = receiver;
            this.name = name;
            this.args = args;
        }
        SafeMethodCall.prototype.visit = function (visitor, context) {
            if (context === void 0) {
                context = null;
            }
            return visitor.visitSafeMethodCall(this, context);
        };
        return SafeMethodCall;
    }(AST);
    exports.SafeMethodCall = SafeMethodCall;
    var FunctionCall = function (_super) {
        __extends(FunctionCall, _super);
        function FunctionCall(span, target, args) {
            _super.call(this, span);
            this.target = target;
            this.args = args;
        }
        FunctionCall.prototype.visit = function (visitor, context) {
            if (context === void 0) {
                context = null;
            }
            return visitor.visitFunctionCall(this, context);
        };
        return FunctionCall;
    }(AST);
    exports.FunctionCall = FunctionCall;
    var ASTWithSource = function (_super) {
        __extends(ASTWithSource, _super);
        function ASTWithSource(ast, source, location, errors) {
            _super.call(this, new ParseSpan(0, lang_1.isBlank(source) ? 0 : source.length));
            this.ast = ast;
            this.source = source;
            this.location = location;
            this.errors = errors;
        }
        ASTWithSource.prototype.visit = function (visitor, context) {
            if (context === void 0) {
                context = null;
            }
            return this.ast.visit(visitor, context);
        };
        ASTWithSource.prototype.toString = function () {
            return this.source + " in " + this.location;
        };
        return ASTWithSource;
    }(AST);
    exports.ASTWithSource = ASTWithSource;
    var TemplateBinding = function () {
        function TemplateBinding(key, keyIsVar, name, expression) {
            this.key = key;
            this.keyIsVar = keyIsVar;
            this.name = name;
            this.expression = expression;
        }
        return TemplateBinding;
    }();
    exports.TemplateBinding = TemplateBinding;
    var RecursiveAstVisitor = function () {
        function RecursiveAstVisitor() {}
        RecursiveAstVisitor.prototype.visitBinary = function (ast, context) {
            ast.left.visit(this);
            ast.right.visit(this);
            return null;
        };
        RecursiveAstVisitor.prototype.visitChain = function (ast, context) {
            return this.visitAll(ast.expressions, context);
        };
        RecursiveAstVisitor.prototype.visitConditional = function (ast, context) {
            ast.condition.visit(this);
            ast.trueExp.visit(this);
            ast.falseExp.visit(this);
            return null;
        };
        RecursiveAstVisitor.prototype.visitPipe = function (ast, context) {
            ast.exp.visit(this);
            this.visitAll(ast.args, context);
            return null;
        };
        RecursiveAstVisitor.prototype.visitFunctionCall = function (ast, context) {
            ast.target.visit(this);
            this.visitAll(ast.args, context);
            return null;
        };
        RecursiveAstVisitor.prototype.visitImplicitReceiver = function (ast, context) {
            return null;
        };
        RecursiveAstVisitor.prototype.visitInterpolation = function (ast, context) {
            return this.visitAll(ast.expressions, context);
        };
        RecursiveAstVisitor.prototype.visitKeyedRead = function (ast, context) {
            ast.obj.visit(this);
            ast.key.visit(this);
            return null;
        };
        RecursiveAstVisitor.prototype.visitKeyedWrite = function (ast, context) {
            ast.obj.visit(this);
            ast.key.visit(this);
            ast.value.visit(this);
            return null;
        };
        RecursiveAstVisitor.prototype.visitLiteralArray = function (ast, context) {
            return this.visitAll(ast.expressions, context);
        };
        RecursiveAstVisitor.prototype.visitLiteralMap = function (ast, context) {
            return this.visitAll(ast.values, context);
        };
        RecursiveAstVisitor.prototype.visitLiteralPrimitive = function (ast, context) {
            return null;
        };
        RecursiveAstVisitor.prototype.visitMethodCall = function (ast, context) {
            ast.receiver.visit(this);
            return this.visitAll(ast.args, context);
        };
        RecursiveAstVisitor.prototype.visitPrefixNot = function (ast, context) {
            ast.expression.visit(this);
            return null;
        };
        RecursiveAstVisitor.prototype.visitPropertyRead = function (ast, context) {
            ast.receiver.visit(this);
            return null;
        };
        RecursiveAstVisitor.prototype.visitPropertyWrite = function (ast, context) {
            ast.receiver.visit(this);
            ast.value.visit(this);
            return null;
        };
        RecursiveAstVisitor.prototype.visitSafePropertyRead = function (ast, context) {
            ast.receiver.visit(this);
            return null;
        };
        RecursiveAstVisitor.prototype.visitSafeMethodCall = function (ast, context) {
            ast.receiver.visit(this);
            return this.visitAll(ast.args, context);
        };
        RecursiveAstVisitor.prototype.visitAll = function (asts, context) {
            var _this = this;
            asts.forEach(function (ast) {
                return ast.visit(_this, context);
            });
            return null;
        };
        RecursiveAstVisitor.prototype.visitQuote = function (ast, context) {
            return null;
        };
        return RecursiveAstVisitor;
    }();
    exports.RecursiveAstVisitor = RecursiveAstVisitor;
    var AstTransformer = function () {
        function AstTransformer() {}
        AstTransformer.prototype.visitImplicitReceiver = function (ast, context) {
            return ast;
        };
        AstTransformer.prototype.visitInterpolation = function (ast, context) {
            return new Interpolation(ast.span, ast.strings, this.visitAll(ast.expressions));
        };
        AstTransformer.prototype.visitLiteralPrimitive = function (ast, context) {
            return new LiteralPrimitive(ast.span, ast.value);
        };
        AstTransformer.prototype.visitPropertyRead = function (ast, context) {
            return new PropertyRead(ast.span, ast.receiver.visit(this), ast.name);
        };
        AstTransformer.prototype.visitPropertyWrite = function (ast, context) {
            return new PropertyWrite(ast.span, ast.receiver.visit(this), ast.name, ast.value);
        };
        AstTransformer.prototype.visitSafePropertyRead = function (ast, context) {
            return new SafePropertyRead(ast.span, ast.receiver.visit(this), ast.name);
        };
        AstTransformer.prototype.visitMethodCall = function (ast, context) {
            return new MethodCall(ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));
        };
        AstTransformer.prototype.visitSafeMethodCall = function (ast, context) {
            return new SafeMethodCall(ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));
        };
        AstTransformer.prototype.visitFunctionCall = function (ast, context) {
            return new FunctionCall(ast.span, ast.target.visit(this), this.visitAll(ast.args));
        };
        AstTransformer.prototype.visitLiteralArray = function (ast, context) {
            return new LiteralArray(ast.span, this.visitAll(ast.expressions));
        };
        AstTransformer.prototype.visitLiteralMap = function (ast, context) {
            return new LiteralMap(ast.span, ast.keys, this.visitAll(ast.values));
        };
        AstTransformer.prototype.visitBinary = function (ast, context) {
            return new Binary(ast.span, ast.operation, ast.left.visit(this), ast.right.visit(this));
        };
        AstTransformer.prototype.visitPrefixNot = function (ast, context) {
            return new PrefixNot(ast.span, ast.expression.visit(this));
        };
        AstTransformer.prototype.visitConditional = function (ast, context) {
            return new Conditional(ast.span, ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));
        };
        AstTransformer.prototype.visitPipe = function (ast, context) {
            return new BindingPipe(ast.span, ast.exp.visit(this), ast.name, this.visitAll(ast.args));
        };
        AstTransformer.prototype.visitKeyedRead = function (ast, context) {
            return new KeyedRead(ast.span, ast.obj.visit(this), ast.key.visit(this));
        };
        AstTransformer.prototype.visitKeyedWrite = function (ast, context) {
            return new KeyedWrite(ast.span, ast.obj.visit(this), ast.key.visit(this), ast.value.visit(this));
        };
        AstTransformer.prototype.visitAll = function (asts) {
            var res = collection_1.ListWrapper.createFixedSize(asts.length);
            for (var i = 0; i < asts.length; ++i) {
                res[i] = asts[i].visit(this);
            }
            return res;
        };
        AstTransformer.prototype.visitChain = function (ast, context) {
            return new Chain(ast.span, this.visitAll(ast.expressions));
        };
        AstTransformer.prototype.visitQuote = function (ast, context) {
            return new Quote(ast.span, ast.prefix, ast.uninterpretedExpression, ast.location);
        };
        return AstTransformer;
    }();
    exports.AstTransformer = AstTransformer;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/view_compiler/expression_converter.js', ['../expression_parser/ast', '../facade/exceptions', '../facade/lang', '../identifiers', '../output/output_ast', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var cdAst = $__require('../expression_parser/ast');
    var exceptions_1 = $__require('../facade/exceptions');
    var lang_1 = $__require('../facade/lang');
    var identifiers_1 = $__require('../identifiers');
    var o = $__require('../output/output_ast');
    var ExpressionWithWrappedValueInfo = function () {
        function ExpressionWithWrappedValueInfo(expression, needsValueUnwrapper) {
            this.expression = expression;
            this.needsValueUnwrapper = needsValueUnwrapper;
        }
        return ExpressionWithWrappedValueInfo;
    }();
    exports.ExpressionWithWrappedValueInfo = ExpressionWithWrappedValueInfo;
    function convertCdExpressionToIr(nameResolver, implicitReceiver, expression, valueUnwrapper) {
        var visitor = new _AstToIrVisitor(nameResolver, implicitReceiver, valueUnwrapper);
        var irAst = expression.visit(visitor, _Mode.Expression);
        return new ExpressionWithWrappedValueInfo(irAst, visitor.needsValueUnwrapper);
    }
    exports.convertCdExpressionToIr = convertCdExpressionToIr;
    function convertCdStatementToIr(nameResolver, implicitReceiver, stmt) {
        var visitor = new _AstToIrVisitor(nameResolver, implicitReceiver, null);
        var statements = [];
        flattenStatements(stmt.visit(visitor, _Mode.Statement), statements);
        return statements;
    }
    exports.convertCdStatementToIr = convertCdStatementToIr;
    var _Mode;
    (function (_Mode) {
        _Mode[_Mode["Statement"] = 0] = "Statement";
        _Mode[_Mode["Expression"] = 1] = "Expression";
    })(_Mode || (_Mode = {}));
    function ensureStatementMode(mode, ast) {
        if (mode !== _Mode.Statement) {
            throw new exceptions_1.BaseException("Expected a statement, but saw " + ast);
        }
    }
    function ensureExpressionMode(mode, ast) {
        if (mode !== _Mode.Expression) {
            throw new exceptions_1.BaseException("Expected an expression, but saw " + ast);
        }
    }
    function convertToStatementIfNeeded(mode, expr) {
        if (mode === _Mode.Statement) {
            return expr.toStmt();
        } else {
            return expr;
        }
    }
    var _AstToIrVisitor = function () {
        function _AstToIrVisitor(_nameResolver, _implicitReceiver, _valueUnwrapper) {
            this._nameResolver = _nameResolver;
            this._implicitReceiver = _implicitReceiver;
            this._valueUnwrapper = _valueUnwrapper;
            this._map = new Map();
            this.needsValueUnwrapper = false;
        }
        _AstToIrVisitor.prototype.visitBinary = function (ast, mode) {
            var op;
            switch (ast.operation) {
                case '+':
                    op = o.BinaryOperator.Plus;
                    break;
                case '-':
                    op = o.BinaryOperator.Minus;
                    break;
                case '*':
                    op = o.BinaryOperator.Multiply;
                    break;
                case '/':
                    op = o.BinaryOperator.Divide;
                    break;
                case '%':
                    op = o.BinaryOperator.Modulo;
                    break;
                case '&&':
                    op = o.BinaryOperator.And;
                    break;
                case '||':
                    op = o.BinaryOperator.Or;
                    break;
                case '==':
                    op = o.BinaryOperator.Equals;
                    break;
                case '!=':
                    op = o.BinaryOperator.NotEquals;
                    break;
                case '===':
                    op = o.BinaryOperator.Identical;
                    break;
                case '!==':
                    op = o.BinaryOperator.NotIdentical;
                    break;
                case '<':
                    op = o.BinaryOperator.Lower;
                    break;
                case '>':
                    op = o.BinaryOperator.Bigger;
                    break;
                case '<=':
                    op = o.BinaryOperator.LowerEquals;
                    break;
                case '>=':
                    op = o.BinaryOperator.BiggerEquals;
                    break;
                default:
                    throw new exceptions_1.BaseException("Unsupported operation " + ast.operation);
            }
            return convertToStatementIfNeeded(mode, new o.BinaryOperatorExpr(op, this.visit(ast.left, _Mode.Expression), this.visit(ast.right, _Mode.Expression)));
        };
        _AstToIrVisitor.prototype.visitChain = function (ast, mode) {
            ensureStatementMode(mode, ast);
            return this.visitAll(ast.expressions, mode);
        };
        _AstToIrVisitor.prototype.visitConditional = function (ast, mode) {
            var value = this.visit(ast.condition, _Mode.Expression);
            return convertToStatementIfNeeded(mode, value.conditional(this.visit(ast.trueExp, _Mode.Expression), this.visit(ast.falseExp, _Mode.Expression)));
        };
        _AstToIrVisitor.prototype.visitPipe = function (ast, mode) {
            var input = this.visit(ast.exp, _Mode.Expression);
            var args = this.visitAll(ast.args, _Mode.Expression);
            var value = this._nameResolver.callPipe(ast.name, input, args);
            this.needsValueUnwrapper = true;
            return convertToStatementIfNeeded(mode, this._valueUnwrapper.callMethod('unwrap', [value]));
        };
        _AstToIrVisitor.prototype.visitFunctionCall = function (ast, mode) {
            return convertToStatementIfNeeded(mode, this.visit(ast.target, _Mode.Expression).callFn(this.visitAll(ast.args, _Mode.Expression)));
        };
        _AstToIrVisitor.prototype.visitImplicitReceiver = function (ast, mode) {
            ensureExpressionMode(mode, ast);
            return this._implicitReceiver;
        };
        _AstToIrVisitor.prototype.visitInterpolation = function (ast, mode) {
            ensureExpressionMode(mode, ast);
            var args = [o.literal(ast.expressions.length)];
            for (var i = 0; i < ast.strings.length - 1; i++) {
                args.push(o.literal(ast.strings[i]));
                args.push(this.visit(ast.expressions[i], _Mode.Expression));
            }
            args.push(o.literal(ast.strings[ast.strings.length - 1]));
            return o.importExpr(identifiers_1.Identifiers.interpolate).callFn(args);
        };
        _AstToIrVisitor.prototype.visitKeyedRead = function (ast, mode) {
            return convertToStatementIfNeeded(mode, this.visit(ast.obj, _Mode.Expression).key(this.visit(ast.key, _Mode.Expression)));
        };
        _AstToIrVisitor.prototype.visitKeyedWrite = function (ast, mode) {
            var obj = this.visit(ast.obj, _Mode.Expression);
            var key = this.visit(ast.key, _Mode.Expression);
            var value = this.visit(ast.value, _Mode.Expression);
            return convertToStatementIfNeeded(mode, obj.key(key).set(value));
        };
        _AstToIrVisitor.prototype.visitLiteralArray = function (ast, mode) {
            return convertToStatementIfNeeded(mode, this._nameResolver.createLiteralArray(this.visitAll(ast.expressions, mode)));
        };
        _AstToIrVisitor.prototype.visitLiteralMap = function (ast, mode) {
            var parts = [];
            for (var i = 0; i < ast.keys.length; i++) {
                parts.push([ast.keys[i], this.visit(ast.values[i], _Mode.Expression)]);
            }
            return convertToStatementIfNeeded(mode, this._nameResolver.createLiteralMap(parts));
        };
        _AstToIrVisitor.prototype.visitLiteralPrimitive = function (ast, mode) {
            return convertToStatementIfNeeded(mode, o.literal(ast.value));
        };
        _AstToIrVisitor.prototype.visitMethodCall = function (ast, mode) {
            var leftMostSafe = this.leftMostSafeNode(ast);
            if (leftMostSafe) {
                return this.convertSafeAccess(ast, leftMostSafe, mode);
            } else {
                var args = this.visitAll(ast.args, _Mode.Expression);
                var result = null;
                var receiver = this.visit(ast.receiver, _Mode.Expression);
                if (receiver === this._implicitReceiver) {
                    var varExpr = this._nameResolver.getLocal(ast.name);
                    if (lang_1.isPresent(varExpr)) {
                        result = varExpr.callFn(args);
                    }
                }
                if (lang_1.isBlank(result)) {
                    result = receiver.callMethod(ast.name, args);
                }
                return convertToStatementIfNeeded(mode, result);
            }
        };
        _AstToIrVisitor.prototype.visitPrefixNot = function (ast, mode) {
            return convertToStatementIfNeeded(mode, o.not(this.visit(ast.expression, _Mode.Expression)));
        };
        _AstToIrVisitor.prototype.visitPropertyRead = function (ast, mode) {
            var leftMostSafe = this.leftMostSafeNode(ast);
            if (leftMostSafe) {
                return this.convertSafeAccess(ast, leftMostSafe, mode);
            } else {
                var result = null;
                var receiver = this.visit(ast.receiver, _Mode.Expression);
                if (receiver === this._implicitReceiver) {
                    result = this._nameResolver.getLocal(ast.name);
                }
                if (lang_1.isBlank(result)) {
                    result = receiver.prop(ast.name);
                }
                return convertToStatementIfNeeded(mode, result);
            }
        };
        _AstToIrVisitor.prototype.visitPropertyWrite = function (ast, mode) {
            var receiver = this.visit(ast.receiver, _Mode.Expression);
            if (receiver === this._implicitReceiver) {
                var varExpr = this._nameResolver.getLocal(ast.name);
                if (lang_1.isPresent(varExpr)) {
                    throw new exceptions_1.BaseException('Cannot assign to a reference or variable!');
                }
            }
            return convertToStatementIfNeeded(mode, receiver.prop(ast.name).set(this.visit(ast.value, _Mode.Expression)));
        };
        _AstToIrVisitor.prototype.visitSafePropertyRead = function (ast, mode) {
            return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
        };
        _AstToIrVisitor.prototype.visitSafeMethodCall = function (ast, mode) {
            return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
        };
        _AstToIrVisitor.prototype.visitAll = function (asts, mode) {
            var _this = this;
            return asts.map(function (ast) {
                return _this.visit(ast, mode);
            });
        };
        _AstToIrVisitor.prototype.visitQuote = function (ast, mode) {
            throw new exceptions_1.BaseException('Quotes are not supported for evaluation!');
        };
        _AstToIrVisitor.prototype.visit = function (ast, mode) {
            return (this._map.get(ast) || ast).visit(this, mode);
        };
        _AstToIrVisitor.prototype.convertSafeAccess = function (ast, leftMostSafe, mode) {
            // If the expression contains a safe access node on the left it needs to be converted to
            // an expression that guards the access to the member by checking the receiver for blank. As
            // execution proceeds from left to right, the left most part of the expression must be guarded
            // first but, because member access is left associative, the right side of the expression is at
            // the top of the AST. The desired result requires lifting a copy of the the left part of the
            // expression up to test it for blank before generating the unguarded version.
            // Consider, for example the following expression: a?.b.c?.d.e
            // This results in the ast:
            //         .
            //        / \
            //       ?.   e
            //      /  \
            //     .    d
            //    / \
            //   ?.  c
            //  /  \
            // a    b
            // The following tree should be generated:
            //
            //        /---- ? ----\
            //       /      |      \
            //     a   /--- ? ---\  null
            //        /     |     \
            //       .      .     null
            //      / \    / \
            //     .  c   .   e
            //    / \    / \
            //   a   b  ,   d
            //         / \
            //        .   c
            //       / \
            //      a   b
            //
            // Notice that the first guard condition is the left hand of the left most safe access node
            // which comes in as leftMostSafe to this routine.
            var condition = this.visit(leftMostSafe.receiver, mode).isBlank();
            // Convert the ast to an unguarded access to the receiver's member. The map will substitute
            // leftMostNode with its unguarded version in the call to `this.visit()`.
            if (leftMostSafe instanceof cdAst.SafeMethodCall) {
                this._map.set(leftMostSafe, new cdAst.MethodCall(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name, leftMostSafe.args));
            } else {
                this._map.set(leftMostSafe, new cdAst.PropertyRead(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name));
            }
            // Recursively convert the node now without the guarded member access.
            var access = this.visit(ast, mode);
            // Remove the mapping. This is not strictly required as the converter only traverses each node
            // once but is safer if the conversion is changed to traverse the nodes more than once.
            this._map.delete(leftMostSafe);
            // Produce the conditional
            return condition.conditional(o.literal(null), access);
        };
        // Given a expression of the form a?.b.c?.d.e the the left most safe node is
        // the (a?.b). The . and ?. are left associative thus can be rewritten as:
        // ((((a?.c).b).c)?.d).e. This returns the most deeply nested safe read or
        // safe method call as this needs be transform initially to:
        //   a == null ? null : a.c.b.c?.d.e
        // then to:
        //   a == null ? null : a.b.c == null ? null : a.b.c.d.e
        _AstToIrVisitor.prototype.leftMostSafeNode = function (ast) {
            var _this = this;
            var visit = function (visitor, ast) {
                return (_this._map.get(ast) || ast).visit(visitor);
            };
            return ast.visit({
                visitBinary: function (ast) {
                    return null;
                },
                visitChain: function (ast) {
                    return null;
                },
                visitConditional: function (ast) {
                    return null;
                },
                visitFunctionCall: function (ast) {
                    return null;
                },
                visitImplicitReceiver: function (ast) {
                    return null;
                },
                visitInterpolation: function (ast) {
                    return null;
                },
                visitKeyedRead: function (ast) {
                    return visit(this, ast.obj);
                },
                visitKeyedWrite: function (ast) {
                    return null;
                },
                visitLiteralArray: function (ast) {
                    return null;
                },
                visitLiteralMap: function (ast) {
                    return null;
                },
                visitLiteralPrimitive: function (ast) {
                    return null;
                },
                visitMethodCall: function (ast) {
                    return visit(this, ast.receiver);
                },
                visitPipe: function (ast) {
                    return null;
                },
                visitPrefixNot: function (ast) {
                    return null;
                },
                visitPropertyRead: function (ast) {
                    return visit(this, ast.receiver);
                },
                visitPropertyWrite: function (ast) {
                    return null;
                },
                visitQuote: function (ast) {
                    return null;
                },
                visitSafeMethodCall: function (ast) {
                    return visit(this, ast.receiver) || ast;
                },
                visitSafePropertyRead: function (ast) {
                    return visit(this, ast.receiver) || ast;
                }
            });
        };
        return _AstToIrVisitor;
    }();
    function flattenStatements(arg, output) {
        if (lang_1.isArray(arg)) {
            arg.forEach(function (entry) {
                return flattenStatements(entry, output);
            });
        } else {
            output.push(arg);
        }
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/view_compiler/property_binder.js', ['@angular/core', '../../core_private', '../facade/lang', '../identifiers', '../output/output_ast', '../template_parser/template_ast', '../util', './compile_binding', './constants', './expression_converter', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var core_private_1 = $__require('../../core_private');
    var lang_1 = $__require('../facade/lang');
    var identifiers_1 = $__require('../identifiers');
    var o = $__require('../output/output_ast');
    var template_ast_1 = $__require('../template_parser/template_ast');
    var util_1 = $__require('../util');
    var compile_binding_1 = $__require('./compile_binding');
    var constants_1 = $__require('./constants');
    var expression_converter_1 = $__require('./expression_converter');
    function createBindFieldExpr(exprIndex) {
        return o.THIS_EXPR.prop("_expr_" + exprIndex);
    }
    function createCurrValueExpr(exprIndex) {
        return o.variable("currVal_" + exprIndex); // fix syntax highlighting: `
    }
    var _animationViewCheckedFlagMap = new Map();
    function bind(view, currValExpr, fieldExpr, parsedExpression, context, actions, method) {
        var checkExpression = expression_converter_1.convertCdExpressionToIr(view, context, parsedExpression, constants_1.DetectChangesVars.valUnwrapper);
        if (lang_1.isBlank(checkExpression.expression)) {
            // e.g. an empty expression was given
            return;
        }
        // private is fine here as no child view will reference the cached value...
        view.fields.push(new o.ClassField(fieldExpr.name, null, [o.StmtModifier.Private]));
        view.createMethod.addStmt(o.THIS_EXPR.prop(fieldExpr.name).set(o.importExpr(identifiers_1.Identifiers.UNINITIALIZED)).toStmt());
        if (checkExpression.needsValueUnwrapper) {
            var initValueUnwrapperStmt = constants_1.DetectChangesVars.valUnwrapper.callMethod('reset', []).toStmt();
            method.addStmt(initValueUnwrapperStmt);
        }
        method.addStmt(currValExpr.set(checkExpression.expression).toDeclStmt(null, [o.StmtModifier.Final]));
        var condition = o.importExpr(identifiers_1.Identifiers.checkBinding).callFn([constants_1.DetectChangesVars.throwOnChange, fieldExpr, currValExpr]);
        if (checkExpression.needsValueUnwrapper) {
            condition = constants_1.DetectChangesVars.valUnwrapper.prop('hasWrappedValue').or(condition);
        }
        method.addStmt(new o.IfStmt(condition, actions.concat([o.THIS_EXPR.prop(fieldExpr.name).set(currValExpr).toStmt()])));
    }
    function bindRenderText(boundText, compileNode, view) {
        var bindingIndex = view.bindings.length;
        view.bindings.push(new compile_binding_1.CompileBinding(compileNode, boundText));
        var currValExpr = createCurrValueExpr(bindingIndex);
        var valueField = createBindFieldExpr(bindingIndex);
        view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileNode.nodeIndex, boundText);
        bind(view, currValExpr, valueField, boundText.value, view.componentContext, [o.THIS_EXPR.prop('renderer').callMethod('setText', [compileNode.renderNode, currValExpr]).toStmt()], view.detectChangesRenderPropertiesMethod);
    }
    exports.bindRenderText = bindRenderText;
    function bindAndWriteToRenderer(boundProps, context, compileElement, isHostProp) {
        var view = compileElement.view;
        var renderNode = compileElement.renderNode;
        boundProps.forEach(function (boundProp) {
            var bindingIndex = view.bindings.length;
            view.bindings.push(new compile_binding_1.CompileBinding(compileElement, boundProp));
            view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileElement.nodeIndex, boundProp);
            var fieldExpr = createBindFieldExpr(bindingIndex);
            var currValExpr = createCurrValueExpr(bindingIndex);
            var renderMethod;
            var oldRenderValue = sanitizedValue(boundProp, fieldExpr);
            var renderValue = sanitizedValue(boundProp, currValExpr);
            var updateStmts = [];
            switch (boundProp.type) {
                case template_ast_1.PropertyBindingType.Property:
                    if (view.genConfig.logBindingUpdate) {
                        updateStmts.push(logBindingUpdateStmt(renderNode, boundProp.name, renderValue));
                    }
                    updateStmts.push(o.THIS_EXPR.prop('renderer').callMethod('setElementProperty', [renderNode, o.literal(boundProp.name), renderValue]).toStmt());
                    break;
                case template_ast_1.PropertyBindingType.Attribute:
                    renderValue = renderValue.isBlank().conditional(o.NULL_EXPR, renderValue.callMethod('toString', []));
                    updateStmts.push(o.THIS_EXPR.prop('renderer').callMethod('setElementAttribute', [renderNode, o.literal(boundProp.name), renderValue]).toStmt());
                    break;
                case template_ast_1.PropertyBindingType.Class:
                    updateStmts.push(o.THIS_EXPR.prop('renderer').callMethod('setElementClass', [renderNode, o.literal(boundProp.name), renderValue]).toStmt());
                    break;
                case template_ast_1.PropertyBindingType.Style:
                    var strValue = renderValue.callMethod('toString', []);
                    if (lang_1.isPresent(boundProp.unit)) {
                        strValue = strValue.plus(o.literal(boundProp.unit));
                    }
                    renderValue = renderValue.isBlank().conditional(o.NULL_EXPR, strValue);
                    updateStmts.push(o.THIS_EXPR.prop('renderer').callMethod('setElementStyle', [renderNode, o.literal(boundProp.name), renderValue]).toStmt());
                    break;
                case template_ast_1.PropertyBindingType.Animation:
                    var animationName = boundProp.name;
                    var targetViewExpr = o.THIS_EXPR;
                    if (isHostProp) {
                        targetViewExpr = compileElement.appElement.prop('componentView');
                    }
                    var animationFnExpr = targetViewExpr.prop('componentType').prop('animations').key(o.literal(animationName));
                    // it's important to normalize the void value as `void` explicitly
                    // so that the styles data can be obtained from the stringmap
                    var emptyStateValue = o.literal(core_private_1.EMPTY_STATE);
                    // void => ...
                    var oldRenderVar = o.variable('oldRenderVar');
                    updateStmts.push(oldRenderVar.set(oldRenderValue).toDeclStmt());
                    updateStmts.push(new o.IfStmt(oldRenderVar.equals(o.importExpr(identifiers_1.Identifiers.UNINITIALIZED)), [oldRenderVar.set(emptyStateValue).toStmt()]));
                    // ... => void
                    var newRenderVar = o.variable('newRenderVar');
                    updateStmts.push(newRenderVar.set(renderValue).toDeclStmt());
                    updateStmts.push(new o.IfStmt(newRenderVar.equals(o.importExpr(identifiers_1.Identifiers.UNINITIALIZED)), [newRenderVar.set(emptyStateValue).toStmt()]));
                    updateStmts.push(animationFnExpr.callFn([o.THIS_EXPR, renderNode, oldRenderVar, newRenderVar]).toStmt());
                    view.detachMethod.addStmt(animationFnExpr.callFn([o.THIS_EXPR, renderNode, oldRenderValue, emptyStateValue]).toStmt());
                    if (!_animationViewCheckedFlagMap.get(view)) {
                        _animationViewCheckedFlagMap.set(view, true);
                        var triggerStmt = o.THIS_EXPR.callMethod('triggerQueuedAnimations', []).toStmt();
                        view.afterViewLifecycleCallbacksMethod.addStmt(triggerStmt);
                        view.detachMethod.addStmt(triggerStmt);
                    }
                    break;
            }
            bind(view, currValExpr, fieldExpr, boundProp.value, context, updateStmts, view.detectChangesRenderPropertiesMethod);
        });
    }
    function sanitizedValue(boundProp, renderValue) {
        var enumValue;
        switch (boundProp.securityContext) {
            case core_1.SecurityContext.NONE:
                return renderValue; // No sanitization needed.
            case core_1.SecurityContext.HTML:
                enumValue = 'HTML';
                break;
            case core_1.SecurityContext.STYLE:
                enumValue = 'STYLE';
                break;
            case core_1.SecurityContext.SCRIPT:
                enumValue = 'SCRIPT';
                break;
            case core_1.SecurityContext.URL:
                enumValue = 'URL';
                break;
            case core_1.SecurityContext.RESOURCE_URL:
                enumValue = 'RESOURCE_URL';
                break;
            default:
                throw new Error("internal error, unexpected SecurityContext " + boundProp.securityContext + ".");
        }
        var ctx = constants_1.ViewProperties.viewUtils.prop('sanitizer');
        var args = [o.importExpr(identifiers_1.Identifiers.SecurityContext).prop(enumValue), renderValue];
        return ctx.callMethod('sanitize', args);
    }
    function bindRenderInputs(boundProps, compileElement) {
        bindAndWriteToRenderer(boundProps, compileElement.view.componentContext, compileElement, false);
    }
    exports.bindRenderInputs = bindRenderInputs;
    function bindDirectiveHostProps(directiveAst, directiveInstance, compileElement) {
        bindAndWriteToRenderer(directiveAst.hostProperties, directiveInstance, compileElement, true);
    }
    exports.bindDirectiveHostProps = bindDirectiveHostProps;
    function bindDirectiveInputs(directiveAst, directiveInstance, compileElement) {
        if (directiveAst.inputs.length === 0) {
            return;
        }
        var view = compileElement.view;
        var detectChangesInInputsMethod = view.detectChangesInInputsMethod;
        detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
        var lifecycleHooks = directiveAst.directive.type.lifecycleHooks;
        var calcChangesMap = lifecycleHooks.indexOf(core_private_1.LifecycleHooks.OnChanges) !== -1;
        var isOnPushComp = directiveAst.directive.isComponent && !core_private_1.isDefaultChangeDetectionStrategy(directiveAst.directive.changeDetection);
        if (calcChangesMap) {
            detectChangesInInputsMethod.addStmt(constants_1.DetectChangesVars.changes.set(o.NULL_EXPR).toStmt());
        }
        if (isOnPushComp) {
            detectChangesInInputsMethod.addStmt(constants_1.DetectChangesVars.changed.set(o.literal(false)).toStmt());
        }
        directiveAst.inputs.forEach(function (input) {
            var bindingIndex = view.bindings.length;
            view.bindings.push(new compile_binding_1.CompileBinding(compileElement, input));
            detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, input);
            var fieldExpr = createBindFieldExpr(bindingIndex);
            var currValExpr = createCurrValueExpr(bindingIndex);
            var statements = [directiveInstance.prop(input.directiveName).set(currValExpr).toStmt()];
            if (calcChangesMap) {
                statements.push(new o.IfStmt(constants_1.DetectChangesVars.changes.identical(o.NULL_EXPR), [constants_1.DetectChangesVars.changes.set(o.literalMap([], new o.MapType(o.importType(identifiers_1.Identifiers.SimpleChange)))).toStmt()]));
                statements.push(constants_1.DetectChangesVars.changes.key(o.literal(input.directiveName)).set(o.importExpr(identifiers_1.Identifiers.SimpleChange).instantiate([fieldExpr, currValExpr])).toStmt());
            }
            if (isOnPushComp) {
                statements.push(constants_1.DetectChangesVars.changed.set(o.literal(true)).toStmt());
            }
            if (view.genConfig.logBindingUpdate) {
                statements.push(logBindingUpdateStmt(compileElement.renderNode, input.directiveName, currValExpr));
            }
            bind(view, currValExpr, fieldExpr, input.value, view.componentContext, statements, detectChangesInInputsMethod);
        });
        if (isOnPushComp) {
            detectChangesInInputsMethod.addStmt(new o.IfStmt(constants_1.DetectChangesVars.changed, [compileElement.appElement.prop('componentView').callMethod('markAsCheckOnce', []).toStmt()]));
        }
    }
    exports.bindDirectiveInputs = bindDirectiveInputs;
    function logBindingUpdateStmt(renderNode, propName, value) {
        var tryStmt = o.THIS_EXPR.prop('renderer').callMethod('setBindingDebugInfo', [renderNode, o.literal("ng-reflect-" + util_1.camelCaseToDashCase(propName)), value.isBlank().conditional(o.NULL_EXPR, value.callMethod('toString', []))]).toStmt();
        var catchStmt = o.THIS_EXPR.prop('renderer').callMethod('setBindingDebugInfo', [renderNode, o.literal("ng-reflect-" + util_1.camelCaseToDashCase(propName)), o.literal('[ERROR] Exception while trying to serialize the value')]).toStmt();
        return new o.TryCatchStmt([tryStmt], [catchStmt]);
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/view_compiler/view_binder.js', ['../identifiers', '../template_parser/template_ast', './event_binder', './lifecycle_binder', './property_binder', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var identifiers_1 = $__require('../identifiers');
    var template_ast_1 = $__require('../template_parser/template_ast');
    var event_binder_1 = $__require('./event_binder');
    var lifecycle_binder_1 = $__require('./lifecycle_binder');
    var property_binder_1 = $__require('./property_binder');
    function bindView(view, parsedTemplate) {
        var visitor = new ViewBinderVisitor(view);
        template_ast_1.templateVisitAll(visitor, parsedTemplate);
        view.pipes.forEach(function (pipe) {
            lifecycle_binder_1.bindPipeDestroyLifecycleCallbacks(pipe.meta, pipe.instance, pipe.view);
        });
    }
    exports.bindView = bindView;
    var ViewBinderVisitor = function () {
        function ViewBinderVisitor(view) {
            this.view = view;
            this._nodeIndex = 0;
        }
        ViewBinderVisitor.prototype.visitBoundText = function (ast, parent) {
            var node = this.view.nodes[this._nodeIndex++];
            property_binder_1.bindRenderText(ast, node, this.view);
            return null;
        };
        ViewBinderVisitor.prototype.visitText = function (ast, parent) {
            this._nodeIndex++;
            return null;
        };
        ViewBinderVisitor.prototype.visitNgContent = function (ast, parent) {
            return null;
        };
        ViewBinderVisitor.prototype.visitElement = function (ast, parent) {
            var compileElement = this.view.nodes[this._nodeIndex++];
            var eventListeners = event_binder_1.collectEventListeners(ast.outputs, ast.directives, compileElement);
            property_binder_1.bindRenderInputs(ast.inputs, compileElement);
            event_binder_1.bindRenderOutputs(eventListeners);
            ast.directives.forEach(function (directiveAst) {
                var directiveInstance = compileElement.instances.get(identifiers_1.identifierToken(directiveAst.directive.type));
                property_binder_1.bindDirectiveInputs(directiveAst, directiveInstance, compileElement);
                lifecycle_binder_1.bindDirectiveDetectChangesLifecycleCallbacks(directiveAst, directiveInstance, compileElement);
                property_binder_1.bindDirectiveHostProps(directiveAst, directiveInstance, compileElement);
                event_binder_1.bindDirectiveOutputs(directiveAst, directiveInstance, eventListeners);
            });
            template_ast_1.templateVisitAll(this, ast.children, compileElement);
            // afterContent and afterView lifecycles need to be called bottom up
            // so that children are notified before parents
            ast.directives.forEach(function (directiveAst) {
                var directiveInstance = compileElement.instances.get(identifiers_1.identifierToken(directiveAst.directive.type));
                lifecycle_binder_1.bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
                lifecycle_binder_1.bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
            });
            ast.providers.forEach(function (providerAst) {
                var providerInstance = compileElement.instances.get(providerAst.token);
                lifecycle_binder_1.bindInjectableDestroyLifecycleCallbacks(providerAst, providerInstance, compileElement);
            });
            return null;
        };
        ViewBinderVisitor.prototype.visitEmbeddedTemplate = function (ast, parent) {
            var compileElement = this.view.nodes[this._nodeIndex++];
            var eventListeners = event_binder_1.collectEventListeners(ast.outputs, ast.directives, compileElement);
            ast.directives.forEach(function (directiveAst) {
                var directiveInstance = compileElement.instances.get(identifiers_1.identifierToken(directiveAst.directive.type));
                property_binder_1.bindDirectiveInputs(directiveAst, directiveInstance, compileElement);
                lifecycle_binder_1.bindDirectiveDetectChangesLifecycleCallbacks(directiveAst, directiveInstance, compileElement);
                event_binder_1.bindDirectiveOutputs(directiveAst, directiveInstance, eventListeners);
                lifecycle_binder_1.bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
                lifecycle_binder_1.bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
            });
            ast.providers.forEach(function (providerAst) {
                var providerInstance = compileElement.instances.get(providerAst.token);
                lifecycle_binder_1.bindInjectableDestroyLifecycleCallbacks(providerAst, providerInstance, compileElement);
            });
            bindView(compileElement.embeddedView, ast.children);
            return null;
        };
        ViewBinderVisitor.prototype.visitAttr = function (ast, ctx) {
            return null;
        };
        ViewBinderVisitor.prototype.visitDirective = function (ast, ctx) {
            return null;
        };
        ViewBinderVisitor.prototype.visitEvent = function (ast, eventTargetAndNames) {
            return null;
        };
        ViewBinderVisitor.prototype.visitReference = function (ast, ctx) {
            return null;
        };
        ViewBinderVisitor.prototype.visitVariable = function (ast, ctx) {
            return null;
        };
        ViewBinderVisitor.prototype.visitDirectiveProperty = function (ast, context) {
            return null;
        };
        ViewBinderVisitor.prototype.visitElementProperty = function (ast, context) {
            return null;
        };
        return ViewBinderVisitor;
    }();
    

    return module.exports;
});
System.registerDynamic("npm:@angular/compiler@2.0.0-rc.5/src/facade/math.js", ["./lang", "reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var lang_1 = $__require("./lang");
  exports.Math = lang_1.global.Math;
  exports.NaN = typeof exports.NaN;
  

  return module.exports;
});
System.registerDynamic("npm:@angular/compiler@2.0.0-rc.5/src/parse_util.js", ["./facade/lang", "reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    "use strict";
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    var define,
        global = this || self,
        GLOBAL = global;
    var lang_1 = $__require("./facade/lang");
    var ParseLocation = function () {
        function ParseLocation(file, offset, line, col) {
            this.file = file;
            this.offset = offset;
            this.line = line;
            this.col = col;
        }
        ParseLocation.prototype.toString = function () {
            return lang_1.isPresent(this.offset) ? this.file.url + "@" + this.line + ":" + this.col : this.file.url;
        };
        return ParseLocation;
    }();
    exports.ParseLocation = ParseLocation;
    var ParseSourceFile = function () {
        function ParseSourceFile(content, url) {
            this.content = content;
            this.url = url;
        }
        return ParseSourceFile;
    }();
    exports.ParseSourceFile = ParseSourceFile;
    var ParseSourceSpan = function () {
        function ParseSourceSpan(start, end, details) {
            if (details === void 0) {
                details = null;
            }
            this.start = start;
            this.end = end;
            this.details = details;
        }
        ParseSourceSpan.prototype.toString = function () {
            return this.start.file.content.substring(this.start.offset, this.end.offset);
        };
        return ParseSourceSpan;
    }();
    exports.ParseSourceSpan = ParseSourceSpan;
    (function (ParseErrorLevel) {
        ParseErrorLevel[ParseErrorLevel["WARNING"] = 0] = "WARNING";
        ParseErrorLevel[ParseErrorLevel["FATAL"] = 1] = "FATAL";
    })(exports.ParseErrorLevel || (exports.ParseErrorLevel = {}));
    var ParseErrorLevel = exports.ParseErrorLevel;
    var ParseError = function () {
        function ParseError(span, msg, level) {
            if (level === void 0) {
                level = ParseErrorLevel.FATAL;
            }
            this.span = span;
            this.msg = msg;
            this.level = level;
        }
        ParseError.prototype.toString = function () {
            var source = this.span.start.file.content;
            var ctxStart = this.span.start.offset;
            var contextStr = '';
            var details = '';
            if (lang_1.isPresent(ctxStart)) {
                if (ctxStart > source.length - 1) {
                    ctxStart = source.length - 1;
                }
                var ctxEnd = ctxStart;
                var ctxLen = 0;
                var ctxLines = 0;
                while (ctxLen < 100 && ctxStart > 0) {
                    ctxStart--;
                    ctxLen++;
                    if (source[ctxStart] == '\n') {
                        if (++ctxLines == 3) {
                            break;
                        }
                    }
                }
                ctxLen = 0;
                ctxLines = 0;
                while (ctxLen < 100 && ctxEnd < source.length - 1) {
                    ctxEnd++;
                    ctxLen++;
                    if (source[ctxEnd] == '\n') {
                        if (++ctxLines == 3) {
                            break;
                        }
                    }
                }
                var context = source.substring(ctxStart, this.span.start.offset) + '[ERROR ->]' + source.substring(this.span.start.offset, ctxEnd + 1);
                contextStr = " (\"" + context + "\")";
            }
            if (this.span.details) {
                details = ", " + this.span.details;
            }
            return "" + this.msg + contextStr + ": " + this.span.start + details;
        };
        return ParseError;
    }();
    exports.ParseError = ParseError;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/compiler@2.0.0-rc.5/src/animation/animation_ast.js", ["reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var AnimationAst = function () {
        function AnimationAst() {
            this.startTime = 0;
            this.playTime = 0;
        }
        return AnimationAst;
    }();
    exports.AnimationAst = AnimationAst;
    var AnimationStateAst = function (_super) {
        __extends(AnimationStateAst, _super);
        function AnimationStateAst() {
            _super.apply(this, arguments);
        }
        return AnimationStateAst;
    }(AnimationAst);
    exports.AnimationStateAst = AnimationStateAst;
    var AnimationEntryAst = function (_super) {
        __extends(AnimationEntryAst, _super);
        function AnimationEntryAst(name, stateDeclarations, stateTransitions) {
            _super.call(this);
            this.name = name;
            this.stateDeclarations = stateDeclarations;
            this.stateTransitions = stateTransitions;
        }
        AnimationEntryAst.prototype.visit = function (visitor, context) {
            return visitor.visitAnimationEntry(this, context);
        };
        return AnimationEntryAst;
    }(AnimationAst);
    exports.AnimationEntryAst = AnimationEntryAst;
    var AnimationStateDeclarationAst = function (_super) {
        __extends(AnimationStateDeclarationAst, _super);
        function AnimationStateDeclarationAst(stateName, styles) {
            _super.call(this);
            this.stateName = stateName;
            this.styles = styles;
        }
        AnimationStateDeclarationAst.prototype.visit = function (visitor, context) {
            return visitor.visitAnimationStateDeclaration(this, context);
        };
        return AnimationStateDeclarationAst;
    }(AnimationStateAst);
    exports.AnimationStateDeclarationAst = AnimationStateDeclarationAst;
    var AnimationStateTransitionExpression = function () {
        function AnimationStateTransitionExpression(fromState, toState) {
            this.fromState = fromState;
            this.toState = toState;
        }
        return AnimationStateTransitionExpression;
    }();
    exports.AnimationStateTransitionExpression = AnimationStateTransitionExpression;
    var AnimationStateTransitionAst = function (_super) {
        __extends(AnimationStateTransitionAst, _super);
        function AnimationStateTransitionAst(stateChanges, animation) {
            _super.call(this);
            this.stateChanges = stateChanges;
            this.animation = animation;
        }
        AnimationStateTransitionAst.prototype.visit = function (visitor, context) {
            return visitor.visitAnimationStateTransition(this, context);
        };
        return AnimationStateTransitionAst;
    }(AnimationStateAst);
    exports.AnimationStateTransitionAst = AnimationStateTransitionAst;
    var AnimationStepAst = function (_super) {
        __extends(AnimationStepAst, _super);
        function AnimationStepAst(startingStyles, keyframes, duration, delay, easing) {
            _super.call(this);
            this.startingStyles = startingStyles;
            this.keyframes = keyframes;
            this.duration = duration;
            this.delay = delay;
            this.easing = easing;
        }
        AnimationStepAst.prototype.visit = function (visitor, context) {
            return visitor.visitAnimationStep(this, context);
        };
        return AnimationStepAst;
    }(AnimationAst);
    exports.AnimationStepAst = AnimationStepAst;
    var AnimationStylesAst = function (_super) {
        __extends(AnimationStylesAst, _super);
        function AnimationStylesAst(styles) {
            _super.call(this);
            this.styles = styles;
        }
        AnimationStylesAst.prototype.visit = function (visitor, context) {
            return visitor.visitAnimationStyles(this, context);
        };
        return AnimationStylesAst;
    }(AnimationAst);
    exports.AnimationStylesAst = AnimationStylesAst;
    var AnimationKeyframeAst = function (_super) {
        __extends(AnimationKeyframeAst, _super);
        function AnimationKeyframeAst(offset, styles) {
            _super.call(this);
            this.offset = offset;
            this.styles = styles;
        }
        AnimationKeyframeAst.prototype.visit = function (visitor, context) {
            return visitor.visitAnimationKeyframe(this, context);
        };
        return AnimationKeyframeAst;
    }(AnimationAst);
    exports.AnimationKeyframeAst = AnimationKeyframeAst;
    var AnimationWithStepsAst = function (_super) {
        __extends(AnimationWithStepsAst, _super);
        function AnimationWithStepsAst(steps) {
            _super.call(this);
            this.steps = steps;
        }
        return AnimationWithStepsAst;
    }(AnimationAst);
    exports.AnimationWithStepsAst = AnimationWithStepsAst;
    var AnimationGroupAst = function (_super) {
        __extends(AnimationGroupAst, _super);
        function AnimationGroupAst(steps) {
            _super.call(this, steps);
        }
        AnimationGroupAst.prototype.visit = function (visitor, context) {
            return visitor.visitAnimationGroup(this, context);
        };
        return AnimationGroupAst;
    }(AnimationWithStepsAst);
    exports.AnimationGroupAst = AnimationGroupAst;
    var AnimationSequenceAst = function (_super) {
        __extends(AnimationSequenceAst, _super);
        function AnimationSequenceAst(steps) {
            _super.call(this, steps);
        }
        AnimationSequenceAst.prototype.visit = function (visitor, context) {
            return visitor.visitAnimationSequence(this, context);
        };
        return AnimationSequenceAst;
    }(AnimationWithStepsAst);
    exports.AnimationSequenceAst = AnimationSequenceAst;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/animation/styles_collection.js', ['../facade/collection', '../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var collection_1 = $__require('../facade/collection');
    var lang_1 = $__require('../facade/lang');
    var StylesCollectionEntry = function () {
        function StylesCollectionEntry(time, value) {
            this.time = time;
            this.value = value;
        }
        StylesCollectionEntry.prototype.matches = function (time, value) {
            return time == this.time && value == this.value;
        };
        return StylesCollectionEntry;
    }();
    exports.StylesCollectionEntry = StylesCollectionEntry;
    var StylesCollection = function () {
        function StylesCollection() {
            this.styles = {};
        }
        StylesCollection.prototype.insertAtTime = function (property, time, value) {
            var tuple = new StylesCollectionEntry(time, value);
            var entries = this.styles[property];
            if (!lang_1.isPresent(entries)) {
                entries = this.styles[property] = [];
            }
            // insert this at the right stop in the array
            // this way we can keep it sorted
            var insertionIndex = 0;
            for (var i = entries.length - 1; i >= 0; i--) {
                if (entries[i].time <= time) {
                    insertionIndex = i + 1;
                    break;
                }
            }
            collection_1.ListWrapper.insert(entries, insertionIndex, tuple);
        };
        StylesCollection.prototype.getByIndex = function (property, index) {
            var items = this.styles[property];
            if (lang_1.isPresent(items)) {
                return index >= items.length ? null : items[index];
            }
            return null;
        };
        StylesCollection.prototype.indexOfAtOrBeforeTime = function (property, time) {
            var entries = this.styles[property];
            if (lang_1.isPresent(entries)) {
                for (var i = entries.length - 1; i >= 0; i--) {
                    if (entries[i].time <= time) return i;
                }
            }
            return null;
        };
        return StylesCollection;
    }();
    exports.StylesCollection = StylesCollection;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/animation/animation_parser.js', ['../../core_private', '../compile_metadata', '../facade/collection', '../facade/lang', '../facade/math', '../parse_util', './animation_ast', './styles_collection', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var core_private_1 = $__require('../../core_private');
    var compile_metadata_1 = $__require('../compile_metadata');
    var collection_1 = $__require('../facade/collection');
    var lang_1 = $__require('../facade/lang');
    var math_1 = $__require('../facade/math');
    var parse_util_1 = $__require('../parse_util');
    var animation_ast_1 = $__require('./animation_ast');
    var styles_collection_1 = $__require('./styles_collection');
    var _INITIAL_KEYFRAME = 0;
    var _TERMINAL_KEYFRAME = 1;
    var _ONE_SECOND = 1000;
    var AnimationParseError = function (_super) {
        __extends(AnimationParseError, _super);
        function AnimationParseError(message /** TODO #9100 */) {
            _super.call(this, null, message);
        }
        AnimationParseError.prototype.toString = function () {
            return "" + this.msg;
        };
        return AnimationParseError;
    }(parse_util_1.ParseError);
    exports.AnimationParseError = AnimationParseError;
    var ParsedAnimationResult = function () {
        function ParsedAnimationResult(ast, errors) {
            this.ast = ast;
            this.errors = errors;
        }
        return ParsedAnimationResult;
    }();
    exports.ParsedAnimationResult = ParsedAnimationResult;
    function parseAnimationEntry(entry) {
        var errors = [];
        var stateStyles = {};
        var transitions = [];
        var stateDeclarationAsts = [];
        entry.definitions.forEach(function (def) {
            if (def instanceof compile_metadata_1.CompileAnimationStateDeclarationMetadata) {
                _parseAnimationDeclarationStates(def, errors).forEach(function (ast) {
                    stateDeclarationAsts.push(ast);
                    stateStyles[ast.stateName] = ast.styles;
                });
            } else {
                transitions.push(def);
            }
        });
        var stateTransitionAsts = transitions.map(function (transDef) {
            return _parseAnimationStateTransition(transDef, stateStyles, errors);
        });
        var ast = new animation_ast_1.AnimationEntryAst(entry.name, stateDeclarationAsts, stateTransitionAsts);
        return new ParsedAnimationResult(ast, errors);
    }
    exports.parseAnimationEntry = parseAnimationEntry;
    function _parseAnimationDeclarationStates(stateMetadata, errors) {
        var styleValues = [];
        stateMetadata.styles.styles.forEach(function (stylesEntry) {
            // TODO (matsko): change this when we get CSS class integration support
            if (lang_1.isStringMap(stylesEntry)) {
                styleValues.push(stylesEntry);
            } else {
                errors.push(new AnimationParseError("State based animations cannot contain references to other states"));
            }
        });
        var defStyles = new animation_ast_1.AnimationStylesAst(styleValues);
        var states = stateMetadata.stateNameExpr.split(/\s*,\s*/);
        return states.map(function (state) {
            return new animation_ast_1.AnimationStateDeclarationAst(state, defStyles);
        });
    }
    function _parseAnimationStateTransition(transitionStateMetadata, stateStyles, errors) {
        var styles = new styles_collection_1.StylesCollection();
        var transitionExprs = [];
        var transitionStates = transitionStateMetadata.stateChangeExpr.split(/\s*,\s*/);
        transitionStates.forEach(function (expr) {
            _parseAnimationTransitionExpr(expr, errors).forEach(function (transExpr) {
                transitionExprs.push(transExpr);
            });
        });
        var entry = _normalizeAnimationEntry(transitionStateMetadata.steps);
        var animation = _normalizeStyleSteps(entry, stateStyles, errors);
        var animationAst = _parseTransitionAnimation(animation, 0, styles, stateStyles, errors);
        if (errors.length == 0) {
            _fillAnimationAstStartingKeyframes(animationAst, styles, errors);
        }
        var sequenceAst = animationAst instanceof animation_ast_1.AnimationSequenceAst ? animationAst : new animation_ast_1.AnimationSequenceAst([animationAst]);
        return new animation_ast_1.AnimationStateTransitionAst(transitionExprs, sequenceAst);
    }
    function _parseAnimationTransitionExpr(eventStr, errors) {
        var expressions = [];
        var match = eventStr.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/);
        if (!lang_1.isPresent(match) || match.length < 4) {
            errors.push(new AnimationParseError("the provided " + eventStr + " is not of a supported format"));
            return expressions;
        }
        var fromState = match[1];
        var separator = match[2];
        var toState = match[3];
        expressions.push(new animation_ast_1.AnimationStateTransitionExpression(fromState, toState));
        var isFullAnyStateExpr = fromState == core_private_1.ANY_STATE && toState == core_private_1.ANY_STATE;
        if (separator[0] == '<' && !isFullAnyStateExpr) {
            expressions.push(new animation_ast_1.AnimationStateTransitionExpression(toState, fromState));
        }
        return expressions;
    }
    function _fetchSylesFromState(stateName, stateStyles) {
        var entry = stateStyles[stateName];
        if (lang_1.isPresent(entry)) {
            var styles = entry.styles;
            return new compile_metadata_1.CompileAnimationStyleMetadata(0, styles);
        }
        return null;
    }
    function _normalizeAnimationEntry(entry) {
        return lang_1.isArray(entry) ? new compile_metadata_1.CompileAnimationSequenceMetadata(entry) : entry;
    }
    function _normalizeStyleMetadata(entry, stateStyles, errors) {
        var normalizedStyles = [];
        entry.styles.forEach(function (styleEntry) {
            if (lang_1.isString(styleEntry)) {
                collection_1.ListWrapper.addAll(normalizedStyles, _resolveStylesFromState(styleEntry, stateStyles, errors));
            } else {
                normalizedStyles.push(styleEntry);
            }
        });
        return normalizedStyles;
    }
    function _normalizeStyleSteps(entry, stateStyles, errors) {
        var steps = _normalizeStyleStepEntry(entry, stateStyles, errors);
        return new compile_metadata_1.CompileAnimationSequenceMetadata(steps);
    }
    function _mergeAnimationStyles(stylesList, newItem) {
        if (lang_1.isStringMap(newItem) && stylesList.length > 0) {
            var lastIndex = stylesList.length - 1;
            var lastItem = stylesList[lastIndex];
            if (lang_1.isStringMap(lastItem)) {
                stylesList[lastIndex] = collection_1.StringMapWrapper.merge(lastItem, newItem);
                return;
            }
        }
        stylesList.push(newItem);
    }
    function _normalizeStyleStepEntry(entry, stateStyles, errors) {
        var steps;
        if (entry instanceof compile_metadata_1.CompileAnimationWithStepsMetadata) {
            steps = entry.steps;
        } else {
            return [entry];
        }
        var newSteps = [];
        var combinedStyles;
        steps.forEach(function (step) {
            if (step instanceof compile_metadata_1.CompileAnimationStyleMetadata) {
                // this occurs when a style step is followed by a previous style step
                // or when the first style step is run. We want to concatenate all subsequent
                // style steps together into a single style step such that we have the correct
                // starting keyframe data to pass into the animation player.
                if (!lang_1.isPresent(combinedStyles)) {
                    combinedStyles = [];
                }
                _normalizeStyleMetadata(step, stateStyles, errors).forEach(function (entry) {
                    _mergeAnimationStyles(combinedStyles, entry);
                });
            } else {
                // it is important that we create a metadata entry of the combined styles
                // before we go on an process the animate, sequence or group metadata steps.
                // This will ensure that the AST will have the previous styles painted on
                // screen before any further animations that use the styles take place.
                if (lang_1.isPresent(combinedStyles)) {
                    newSteps.push(new compile_metadata_1.CompileAnimationStyleMetadata(0, combinedStyles));
                    combinedStyles = null;
                }
                if (step instanceof compile_metadata_1.CompileAnimationAnimateMetadata) {
                    // we do not recurse into CompileAnimationAnimateMetadata since
                    // those style steps are not going to be squashed
                    var animateStyleValue = step.styles;
                    if (animateStyleValue instanceof compile_metadata_1.CompileAnimationStyleMetadata) {
                        animateStyleValue.styles = _normalizeStyleMetadata(animateStyleValue, stateStyles, errors);
                    } else if (animateStyleValue instanceof compile_metadata_1.CompileAnimationKeyframesSequenceMetadata) {
                        animateStyleValue.steps.forEach(function (step) {
                            step.styles = _normalizeStyleMetadata(step, stateStyles, errors);
                        });
                    }
                } else if (step instanceof compile_metadata_1.CompileAnimationWithStepsMetadata) {
                    var innerSteps = _normalizeStyleStepEntry(step, stateStyles, errors);
                    step = step instanceof compile_metadata_1.CompileAnimationGroupMetadata ? new compile_metadata_1.CompileAnimationGroupMetadata(innerSteps) : new compile_metadata_1.CompileAnimationSequenceMetadata(innerSteps);
                }
                newSteps.push(step);
            }
        });
        // this happens when only styles were animated within the sequence
        if (lang_1.isPresent(combinedStyles)) {
            newSteps.push(new compile_metadata_1.CompileAnimationStyleMetadata(0, combinedStyles));
        }
        return newSteps;
    }
    function _resolveStylesFromState(stateName, stateStyles, errors) {
        var styles = [];
        if (stateName[0] != ':') {
            errors.push(new AnimationParseError("Animation states via styles must be prefixed with a \":\""));
        } else {
            var normalizedStateName = stateName.substring(1);
            var value = stateStyles[normalizedStateName];
            if (!lang_1.isPresent(value)) {
                errors.push(new AnimationParseError("Unable to apply styles due to missing a state: \"" + normalizedStateName + "\""));
            } else {
                value.styles.forEach(function (stylesEntry) {
                    if (lang_1.isStringMap(stylesEntry)) {
                        styles.push(stylesEntry);
                    }
                });
            }
        }
        return styles;
    }
    var _AnimationTimings = function () {
        function _AnimationTimings(duration, delay, easing) {
            this.duration = duration;
            this.delay = delay;
            this.easing = easing;
        }
        return _AnimationTimings;
    }();
    function _parseAnimationKeyframes(keyframeSequence, currentTime, collectedStyles, stateStyles, errors) {
        var totalEntries = keyframeSequence.steps.length;
        var totalOffsets = 0;
        keyframeSequence.steps.forEach(function (step) {
            return totalOffsets += lang_1.isPresent(step.offset) ? 1 : 0;
        });
        if (totalOffsets > 0 && totalOffsets < totalEntries) {
            errors.push(new AnimationParseError("Not all style() entries contain an offset for the provided keyframe()"));
            totalOffsets = totalEntries;
        }
        var limit = totalEntries - 1;
        var margin = totalOffsets == 0 ? 1 / limit : 0;
        var rawKeyframes = [];
        var index = 0;
        var doSortKeyframes = false;
        var lastOffset = 0;
        keyframeSequence.steps.forEach(function (styleMetadata) {
            var offset = styleMetadata.offset;
            var keyframeStyles = {};
            styleMetadata.styles.forEach(function (entry) {
                collection_1.StringMapWrapper.forEach(entry, function (value /** TODO #9100 */, prop /** TODO #9100 */) {
                    if (prop != 'offset') {
                        keyframeStyles[prop] = value;
                    }
                });
            });
            if (lang_1.isPresent(offset)) {
                doSortKeyframes = doSortKeyframes || offset < lastOffset;
            } else {
                offset = index == limit ? _TERMINAL_KEYFRAME : margin * index;
            }
            rawKeyframes.push([offset, keyframeStyles]);
            lastOffset = offset;
            index++;
        });
        if (doSortKeyframes) {
            collection_1.ListWrapper.sort(rawKeyframes, function (a, b) {
                return a[0] <= b[0] ? -1 : 1;
            });
        }
        var i;
        var firstKeyframe = rawKeyframes[0];
        if (firstKeyframe[0] != _INITIAL_KEYFRAME) {
            collection_1.ListWrapper.insert(rawKeyframes, 0, firstKeyframe = [_INITIAL_KEYFRAME, {}]);
        }
        var firstKeyframeStyles = firstKeyframe[1];
        limit = rawKeyframes.length - 1;
        var lastKeyframe = rawKeyframes[limit];
        if (lastKeyframe[0] != _TERMINAL_KEYFRAME) {
            rawKeyframes.push(lastKeyframe = [_TERMINAL_KEYFRAME, {}]);
            limit++;
        }
        var lastKeyframeStyles = lastKeyframe[1];
        for (i = 1; i <= limit; i++) {
            var entry = rawKeyframes[i];
            var styles = entry[1];
            collection_1.StringMapWrapper.forEach(styles, function (value /** TODO #9100 */, prop /** TODO #9100 */) {
                if (!lang_1.isPresent(firstKeyframeStyles[prop])) {
                    firstKeyframeStyles[prop] = core_private_1.FILL_STYLE_FLAG;
                }
            });
        }
        for (i = limit - 1; i >= 0; i--) {
            var entry = rawKeyframes[i];
            var styles = entry[1];
            collection_1.StringMapWrapper.forEach(styles, function (value /** TODO #9100 */, prop /** TODO #9100 */) {
                if (!lang_1.isPresent(lastKeyframeStyles[prop])) {
                    lastKeyframeStyles[prop] = value;
                }
            });
        }
        return rawKeyframes.map(function (entry) {
            return new animation_ast_1.AnimationKeyframeAst(entry[0], new animation_ast_1.AnimationStylesAst([entry[1]]));
        });
    }
    function _parseTransitionAnimation(entry, currentTime, collectedStyles, stateStyles, errors) {
        var ast;
        var playTime = 0;
        var startingTime = currentTime;
        if (entry instanceof compile_metadata_1.CompileAnimationWithStepsMetadata) {
            var maxDuration = 0;
            var steps = [];
            var isGroup = entry instanceof compile_metadata_1.CompileAnimationGroupMetadata;
            var previousStyles;
            entry.steps.forEach(function (entry) {
                // these will get picked up by the next step...
                var time = isGroup ? startingTime : currentTime;
                if (entry instanceof compile_metadata_1.CompileAnimationStyleMetadata) {
                    entry.styles.forEach(function (stylesEntry) {
                        // by this point we know that we only have stringmap values
                        var map = stylesEntry;
                        collection_1.StringMapWrapper.forEach(map, function (value /** TODO #9100 */, prop /** TODO #9100 */) {
                            collectedStyles.insertAtTime(prop, time, value);
                        });
                    });
                    previousStyles = entry.styles;
                    return;
                }
                var innerAst = _parseTransitionAnimation(entry, time, collectedStyles, stateStyles, errors);
                if (lang_1.isPresent(previousStyles)) {
                    if (entry instanceof compile_metadata_1.CompileAnimationWithStepsMetadata) {
                        var startingStyles = new animation_ast_1.AnimationStylesAst(previousStyles);
                        steps.push(new animation_ast_1.AnimationStepAst(startingStyles, [], 0, 0, ''));
                    } else {
                        var innerStep = innerAst;
                        collection_1.ListWrapper.addAll(innerStep.startingStyles.styles, previousStyles);
                    }
                    previousStyles = null;
                }
                var astDuration = innerAst.playTime;
                currentTime += astDuration;
                playTime += astDuration;
                maxDuration = math_1.Math.max(astDuration, maxDuration);
                steps.push(innerAst);
            });
            if (lang_1.isPresent(previousStyles)) {
                var startingStyles = new animation_ast_1.AnimationStylesAst(previousStyles);
                steps.push(new animation_ast_1.AnimationStepAst(startingStyles, [], 0, 0, ''));
            }
            if (isGroup) {
                ast = new animation_ast_1.AnimationGroupAst(steps);
                playTime = maxDuration;
                currentTime = startingTime + playTime;
            } else {
                ast = new animation_ast_1.AnimationSequenceAst(steps);
            }
        } else if (entry instanceof compile_metadata_1.CompileAnimationAnimateMetadata) {
            var timings = _parseTimeExpression(entry.timings, errors);
            var styles = entry.styles;
            var keyframes;
            if (styles instanceof compile_metadata_1.CompileAnimationKeyframesSequenceMetadata) {
                keyframes = _parseAnimationKeyframes(styles, currentTime, collectedStyles, stateStyles, errors);
            } else {
                var styleData = styles;
                var offset = _TERMINAL_KEYFRAME;
                var styleAst = new animation_ast_1.AnimationStylesAst(styleData.styles);
                var keyframe = new animation_ast_1.AnimationKeyframeAst(offset, styleAst);
                keyframes = [keyframe];
            }
            ast = new animation_ast_1.AnimationStepAst(new animation_ast_1.AnimationStylesAst([]), keyframes, timings.duration, timings.delay, timings.easing);
            playTime = timings.duration + timings.delay;
            currentTime += playTime;
            keyframes.forEach(function (keyframe /** TODO #9100 */) {
                return keyframe.styles.styles.forEach(function (entry /** TODO #9100 */) {
                    return collection_1.StringMapWrapper.forEach(entry, function (value /** TODO #9100 */, prop /** TODO #9100 */) {
                        return collectedStyles.insertAtTime(prop, currentTime, value);
                    });
                });
            });
        } else {
            // if the code reaches this stage then an error
            // has already been populated within the _normalizeStyleSteps()
            // operation...
            ast = new animation_ast_1.AnimationStepAst(null, [], 0, 0, '');
        }
        ast.playTime = playTime;
        ast.startTime = startingTime;
        return ast;
    }
    function _fillAnimationAstStartingKeyframes(ast, collectedStyles, errors) {
        // steps that only contain style will not be filled
        if (ast instanceof animation_ast_1.AnimationStepAst && ast.keyframes.length > 0) {
            var keyframes = ast.keyframes;
            if (keyframes.length == 1) {
                var endKeyframe = keyframes[0];
                var startKeyframe = _createStartKeyframeFromEndKeyframe(endKeyframe, ast.startTime, ast.playTime, collectedStyles, errors);
                ast.keyframes = [startKeyframe, endKeyframe];
            }
        } else if (ast instanceof animation_ast_1.AnimationWithStepsAst) {
            ast.steps.forEach(function (entry) {
                return _fillAnimationAstStartingKeyframes(entry, collectedStyles, errors);
            });
        }
    }
    function _parseTimeExpression(exp, errors) {
        var regex = /^([\.\d]+)(m?s)(?:\s+([\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?/i;
        var duration;
        var delay = 0;
        var easing = null;
        if (lang_1.isString(exp)) {
            var matches = exp.match(regex);
            if (matches === null) {
                errors.push(new AnimationParseError("The provided timing value \"" + exp + "\" is invalid."));
                return new _AnimationTimings(0, 0, null);
            }
            var durationMatch = lang_1.NumberWrapper.parseFloat(matches[1]);
            var durationUnit = matches[2];
            if (durationUnit == 's') {
                durationMatch *= _ONE_SECOND;
            }
            duration = math_1.Math.floor(durationMatch);
            var delayMatch = matches[3];
            var delayUnit = matches[4];
            if (lang_1.isPresent(delayMatch)) {
                var delayVal = lang_1.NumberWrapper.parseFloat(delayMatch);
                if (lang_1.isPresent(delayUnit) && delayUnit == 's') {
                    delayVal *= _ONE_SECOND;
                }
                delay = math_1.Math.floor(delayVal);
            }
            var easingVal = matches[5];
            if (!lang_1.isBlank(easingVal)) {
                easing = easingVal;
            }
        } else {
            duration = exp;
        }
        return new _AnimationTimings(duration, delay, easing);
    }
    function _createStartKeyframeFromEndKeyframe(endKeyframe, startTime, duration, collectedStyles, errors) {
        var values = {};
        var endTime = startTime + duration;
        endKeyframe.styles.styles.forEach(function (styleData) {
            collection_1.StringMapWrapper.forEach(styleData, function (val /** TODO #9100 */, prop /** TODO #9100 */) {
                if (prop == 'offset') return;
                var resultIndex = collectedStyles.indexOfAtOrBeforeTime(prop, startTime);
                var resultEntry /** TODO #9100 */, nextEntry /** TODO #9100 */, value;
                if (lang_1.isPresent(resultIndex)) {
                    resultEntry = collectedStyles.getByIndex(prop, resultIndex);
                    value = resultEntry.value;
                    nextEntry = collectedStyles.getByIndex(prop, resultIndex + 1);
                } else {
                    // this is a flag that the runtime code uses to pass
                    // in a value either from the state declaration styles
                    // or using the AUTO_STYLE value (e.g. getComputedStyle)
                    value = core_private_1.FILL_STYLE_FLAG;
                }
                if (lang_1.isPresent(nextEntry) && !nextEntry.matches(endTime, val)) {
                    errors.push(new AnimationParseError("The animated CSS property \"" + prop + "\" unexpectedly changes between steps \"" + resultEntry.time + "ms\" and \"" + endTime + "ms\" at \"" + nextEntry.time + "ms\""));
                }
                values[prop] = value;
            });
        });
        return new animation_ast_1.AnimationKeyframeAst(_INITIAL_KEYFRAME, new animation_ast_1.AnimationStylesAst([values]));
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/animation/animation_compiler.js', ['../../core_private', '../facade/collection', '../facade/exceptions', '../facade/lang', '../identifiers', '../output/output_ast', '../template_parser/template_ast', './animation_ast', './animation_parser', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_private_1 = $__require('../../core_private');
    var collection_1 = $__require('../facade/collection');
    var exceptions_1 = $__require('../facade/exceptions');
    var lang_1 = $__require('../facade/lang');
    var identifiers_1 = $__require('../identifiers');
    var o = $__require('../output/output_ast');
    var t = $__require('../template_parser/template_ast');
    var animation_ast_1 = $__require('./animation_ast');
    var animation_parser_1 = $__require('./animation_parser');
    var CompiledAnimation = function () {
        function CompiledAnimation(name, statesMapStatement, statesVariableName, fnStatement, fnVariable) {
            this.name = name;
            this.statesMapStatement = statesMapStatement;
            this.statesVariableName = statesVariableName;
            this.fnStatement = fnStatement;
            this.fnVariable = fnVariable;
        }
        return CompiledAnimation;
    }();
    exports.CompiledAnimation = CompiledAnimation;
    var AnimationCompiler = function () {
        function AnimationCompiler() {}
        AnimationCompiler.prototype.compileComponent = function (component, template) {
            var compiledAnimations = [];
            var groupedErrors = [];
            var triggerLookup = {};
            var componentName = component.type.name;
            component.template.animations.forEach(function (entry) {
                var result = animation_parser_1.parseAnimationEntry(entry);
                var triggerName = entry.name;
                if (result.errors.length > 0) {
                    var errorMessage = "Unable to parse the animation sequence for \"" + triggerName + "\" due to the following errors:";
                    result.errors.forEach(function (error) {
                        errorMessage += '\n-- ' + error.msg;
                    });
                    groupedErrors.push(errorMessage);
                }
                if (triggerLookup[triggerName]) {
                    groupedErrors.push("The animation trigger \"" + triggerName + "\" has already been registered on \"" + componentName + "\"");
                } else {
                    var factoryName = componentName + "_" + entry.name;
                    var visitor = new _AnimationBuilder(triggerName, factoryName);
                    var compileResult = visitor.build(result.ast);
                    compiledAnimations.push(compileResult);
                    triggerLookup[entry.name] = compileResult;
                }
            });
            _validateAnimationProperties(compiledAnimations, template).forEach(function (entry) {
                groupedErrors.push(entry.msg);
            });
            if (groupedErrors.length > 0) {
                var errorMessageStr = "Animation parsing for " + component.type.name + " has failed due to the following errors:";
                groupedErrors.forEach(function (error) {
                    return errorMessageStr += "\n- " + error;
                });
                throw new exceptions_1.BaseException(errorMessageStr);
            }
            return compiledAnimations;
        };
        return AnimationCompiler;
    }();
    exports.AnimationCompiler = AnimationCompiler;
    var _ANIMATION_FACTORY_ELEMENT_VAR = o.variable('element');
    var _ANIMATION_DEFAULT_STATE_VAR = o.variable('defaultStateStyles');
    var _ANIMATION_FACTORY_VIEW_VAR = o.variable('view');
    var _ANIMATION_FACTORY_RENDERER_VAR = _ANIMATION_FACTORY_VIEW_VAR.prop('renderer');
    var _ANIMATION_CURRENT_STATE_VAR = o.variable('currentState');
    var _ANIMATION_NEXT_STATE_VAR = o.variable('nextState');
    var _ANIMATION_PLAYER_VAR = o.variable('player');
    var _ANIMATION_START_STATE_STYLES_VAR = o.variable('startStateStyles');
    var _ANIMATION_END_STATE_STYLES_VAR = o.variable('endStateStyles');
    var _ANIMATION_COLLECTED_STYLES = o.variable('collectedStyles');
    var EMPTY_MAP = o.literalMap([]);
    var _AnimationBuilder = function () {
        function _AnimationBuilder(animationName, factoryName) {
            this.animationName = animationName;
            this._fnVarName = factoryName + '_factory';
            this._statesMapVarName = factoryName + '_states';
            this._statesMapVar = o.variable(this._statesMapVarName);
        }
        _AnimationBuilder.prototype.visitAnimationStyles = function (ast, context) {
            var stylesArr = [];
            if (context.isExpectingFirstStyleStep) {
                stylesArr.push(_ANIMATION_START_STATE_STYLES_VAR);
                context.isExpectingFirstStyleStep = false;
            }
            ast.styles.forEach(function (entry) {
                stylesArr.push(o.literalMap(collection_1.StringMapWrapper.keys(entry).map(function (key) {
                    return [key, o.literal(entry[key])];
                })));
            });
            return o.importExpr(identifiers_1.Identifiers.AnimationStyles).instantiate([o.importExpr(identifiers_1.Identifiers.collectAndResolveStyles).callFn([_ANIMATION_COLLECTED_STYLES, o.literalArr(stylesArr)])]);
        };
        _AnimationBuilder.prototype.visitAnimationKeyframe = function (ast, context) {
            return o.importExpr(identifiers_1.Identifiers.AnimationKeyframe).instantiate([o.literal(ast.offset), ast.styles.visit(this, context)]);
        };
        _AnimationBuilder.prototype.visitAnimationStep = function (ast, context) {
            var _this = this;
            if (context.endStateAnimateStep === ast) {
                return this._visitEndStateAnimation(ast, context);
            }
            var startingStylesExpr = ast.startingStyles.visit(this, context);
            var keyframeExpressions = ast.keyframes.map(function (keyframeEntry) {
                return keyframeEntry.visit(_this, context);
            });
            return this._callAnimateMethod(ast, startingStylesExpr, o.literalArr(keyframeExpressions));
        };
        /** @internal */
        _AnimationBuilder.prototype._visitEndStateAnimation = function (ast, context) {
            var _this = this;
            var startingStylesExpr = ast.startingStyles.visit(this, context);
            var keyframeExpressions = ast.keyframes.map(function (keyframe) {
                return keyframe.visit(_this, context);
            });
            var keyframesExpr = o.importExpr(identifiers_1.Identifiers.balanceAnimationKeyframes).callFn([_ANIMATION_COLLECTED_STYLES, _ANIMATION_END_STATE_STYLES_VAR, o.literalArr(keyframeExpressions)]);
            return this._callAnimateMethod(ast, startingStylesExpr, keyframesExpr);
        };
        /** @internal */
        _AnimationBuilder.prototype._callAnimateMethod = function (ast, startingStylesExpr, keyframesExpr) {
            return _ANIMATION_FACTORY_RENDERER_VAR.callMethod('animate', [_ANIMATION_FACTORY_ELEMENT_VAR, startingStylesExpr, keyframesExpr, o.literal(ast.duration), o.literal(ast.delay), o.literal(ast.easing)]);
        };
        _AnimationBuilder.prototype.visitAnimationSequence = function (ast, context) {
            var _this = this;
            var playerExprs = ast.steps.map(function (step) {
                return step.visit(_this, context);
            });
            return o.importExpr(identifiers_1.Identifiers.AnimationSequencePlayer).instantiate([o.literalArr(playerExprs)]);
        };
        _AnimationBuilder.prototype.visitAnimationGroup = function (ast, context) {
            var _this = this;
            var playerExprs = ast.steps.map(function (step) {
                return step.visit(_this, context);
            });
            return o.importExpr(identifiers_1.Identifiers.AnimationGroupPlayer).instantiate([o.literalArr(playerExprs)]);
        };
        _AnimationBuilder.prototype.visitAnimationStateDeclaration = function (ast, context) {
            var flatStyles = {};
            _getStylesArray(ast).forEach(function (entry) {
                collection_1.StringMapWrapper.forEach(entry, function (value, key) {
                    flatStyles[key] = value;
                });
            });
            context.stateMap.registerState(ast.stateName, flatStyles);
        };
        _AnimationBuilder.prototype.visitAnimationStateTransition = function (ast, context) {
            var steps = ast.animation.steps;
            var lastStep = steps[steps.length - 1];
            if (_isEndStateAnimateStep(lastStep)) {
                context.endStateAnimateStep = lastStep;
            }
            context.isExpectingFirstStyleStep = true;
            var stateChangePreconditions = [];
            ast.stateChanges.forEach(function (stateChange) {
                stateChangePreconditions.push(_compareToAnimationStateExpr(_ANIMATION_CURRENT_STATE_VAR, stateChange.fromState).and(_compareToAnimationStateExpr(_ANIMATION_NEXT_STATE_VAR, stateChange.toState)));
                if (stateChange.fromState != core_private_1.ANY_STATE) {
                    context.stateMap.registerState(stateChange.fromState);
                }
                if (stateChange.toState != core_private_1.ANY_STATE) {
                    context.stateMap.registerState(stateChange.toState);
                }
            });
            var animationPlayerExpr = ast.animation.visit(this, context);
            var reducedStateChangesPrecondition = stateChangePreconditions.reduce(function (a, b) {
                return a.or(b);
            });
            var precondition = _ANIMATION_PLAYER_VAR.equals(o.NULL_EXPR).and(reducedStateChangesPrecondition);
            return new o.IfStmt(precondition, [_ANIMATION_PLAYER_VAR.set(animationPlayerExpr).toStmt()]);
        };
        _AnimationBuilder.prototype.visitAnimationEntry = function (ast, context) {
            var _this = this;
            // visit each of the declarations first to build the context state map
            ast.stateDeclarations.forEach(function (def) {
                return def.visit(_this, context);
            });
            // this should always be defined even if the user overrides it
            context.stateMap.registerState(core_private_1.DEFAULT_STATE, {});
            var statements = [];
            statements.push(_ANIMATION_FACTORY_VIEW_VAR.callMethod('cancelActiveAnimation', [_ANIMATION_FACTORY_ELEMENT_VAR, o.literal(this.animationName), _ANIMATION_NEXT_STATE_VAR.equals(o.literal(core_private_1.EMPTY_STATE))]).toStmt());
            statements.push(_ANIMATION_COLLECTED_STYLES.set(EMPTY_MAP).toDeclStmt());
            statements.push(_ANIMATION_PLAYER_VAR.set(o.NULL_EXPR).toDeclStmt());
            statements.push(_ANIMATION_DEFAULT_STATE_VAR.set(this._statesMapVar.key(o.literal(core_private_1.DEFAULT_STATE))).toDeclStmt());
            statements.push(_ANIMATION_START_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_CURRENT_STATE_VAR)).toDeclStmt());
            statements.push(new o.IfStmt(_ANIMATION_START_STATE_STYLES_VAR.equals(o.NULL_EXPR), [_ANIMATION_START_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt()]));
            statements.push(_ANIMATION_END_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_NEXT_STATE_VAR)).toDeclStmt());
            statements.push(new o.IfStmt(_ANIMATION_END_STATE_STYLES_VAR.equals(o.NULL_EXPR), [_ANIMATION_END_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt()]));
            var RENDER_STYLES_FN = o.importExpr(identifiers_1.Identifiers.renderStyles);
            // before we start any animation we want to clear out the starting
            // styles from the element's style property (since they were placed
            // there at the end of the last animation
            statements.push(RENDER_STYLES_FN.callFn([_ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_FACTORY_RENDERER_VAR, o.importExpr(identifiers_1.Identifiers.clearStyles).callFn([_ANIMATION_START_STATE_STYLES_VAR])]).toStmt());
            ast.stateTransitions.forEach(function (transAst) {
                return statements.push(transAst.visit(_this, context));
            });
            // this check ensures that the animation factory always returns a player
            // so that the onDone callback can be used for tracking
            statements.push(new o.IfStmt(_ANIMATION_PLAYER_VAR.equals(o.NULL_EXPR), [_ANIMATION_PLAYER_VAR.set(o.importExpr(identifiers_1.Identifiers.NoOpAnimationPlayer).instantiate([])).toStmt()]));
            // once complete we want to apply the styles on the element
            // since the destination state's values should persist once
            // the animation sequence has completed.
            statements.push(_ANIMATION_PLAYER_VAR.callMethod('onDone', [o.fn([], [RENDER_STYLES_FN.callFn([_ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_FACTORY_RENDERER_VAR, o.importExpr(identifiers_1.Identifiers.prepareFinalAnimationStyles).callFn([_ANIMATION_START_STATE_STYLES_VAR, _ANIMATION_END_STATE_STYLES_VAR])]).toStmt()])]).toStmt());
            statements.push(_ANIMATION_FACTORY_VIEW_VAR.callMethod('queueAnimation', [_ANIMATION_FACTORY_ELEMENT_VAR, o.literal(this.animationName), _ANIMATION_PLAYER_VAR]).toStmt());
            return o.fn([new o.FnParam(_ANIMATION_FACTORY_VIEW_VAR.name, o.importType(identifiers_1.Identifiers.AppView, [o.DYNAMIC_TYPE])), new o.FnParam(_ANIMATION_FACTORY_ELEMENT_VAR.name, o.DYNAMIC_TYPE), new o.FnParam(_ANIMATION_CURRENT_STATE_VAR.name, o.DYNAMIC_TYPE), new o.FnParam(_ANIMATION_NEXT_STATE_VAR.name, o.DYNAMIC_TYPE)], statements);
        };
        _AnimationBuilder.prototype.build = function (ast) {
            var context = new _AnimationBuilderContext();
            var fnStatement = ast.visit(this, context).toDeclStmt(this._fnVarName);
            var fnVariable = o.variable(this._fnVarName);
            var lookupMap = [];
            collection_1.StringMapWrapper.forEach(context.stateMap.states, function (value, stateName) {
                var variableValue = EMPTY_MAP;
                if (lang_1.isPresent(value)) {
                    var styleMap_1 = [];
                    collection_1.StringMapWrapper.forEach(value, function (value, key) {
                        styleMap_1.push([key, o.literal(value)]);
                    });
                    variableValue = o.literalMap(styleMap_1);
                }
                lookupMap.push([stateName, variableValue]);
            });
            var compiledStatesMapExpr = this._statesMapVar.set(o.literalMap(lookupMap)).toDeclStmt();
            return new CompiledAnimation(this.animationName, compiledStatesMapExpr, this._statesMapVarName, fnStatement, fnVariable);
        };
        return _AnimationBuilder;
    }();
    var _AnimationBuilderContext = function () {
        function _AnimationBuilderContext() {
            this.stateMap = new _AnimationBuilderStateMap();
            this.endStateAnimateStep = null;
            this.isExpectingFirstStyleStep = false;
        }
        return _AnimationBuilderContext;
    }();
    var _AnimationBuilderStateMap = function () {
        function _AnimationBuilderStateMap() {
            this._states = {};
        }
        Object.defineProperty(_AnimationBuilderStateMap.prototype, "states", {
            get: function () {
                return this._states;
            },
            enumerable: true,
            configurable: true
        });
        _AnimationBuilderStateMap.prototype.registerState = function (name, value) {
            if (value === void 0) {
                value = null;
            }
            var existingEntry = this._states[name];
            if (lang_1.isBlank(existingEntry)) {
                this._states[name] = value;
            }
        };
        return _AnimationBuilderStateMap;
    }();
    function _compareToAnimationStateExpr(value, animationState) {
        var emptyStateLiteral = o.literal(core_private_1.EMPTY_STATE);
        switch (animationState) {
            case core_private_1.EMPTY_STATE:
                return value.equals(emptyStateLiteral);
            case core_private_1.ANY_STATE:
                return o.literal(true);
            default:
                return value.equals(o.literal(animationState));
        }
    }
    function _isEndStateAnimateStep(step) {
        // the final animation step is characterized by having only TWO
        // keyframe values and it must have zero styles for both keyframes
        if (step instanceof animation_ast_1.AnimationStepAst && step.duration > 0 && step.keyframes.length == 2) {
            var styles1 = _getStylesArray(step.keyframes[0])[0];
            var styles2 = _getStylesArray(step.keyframes[1])[0];
            return collection_1.StringMapWrapper.isEmpty(styles1) && collection_1.StringMapWrapper.isEmpty(styles2);
        }
        return false;
    }
    function _getStylesArray(obj) {
        return obj.styles.styles;
    }
    function _validateAnimationProperties(compiledAnimations, template) {
        var visitor = new _AnimationTemplatePropertyVisitor(compiledAnimations);
        t.templateVisitAll(visitor, template);
        return visitor.errors;
    }
    var _AnimationTemplatePropertyVisitor = function () {
        function _AnimationTemplatePropertyVisitor(animations) {
            var _this = this;
            this._animationRegistry = {};
            this.errors = [];
            animations.forEach(function (entry) {
                _this._animationRegistry[entry.name] = true;
            });
        }
        _AnimationTemplatePropertyVisitor.prototype.visitElement = function (ast, ctx) {
            var _this = this;
            ast.inputs.forEach(function (input) {
                if (input.type == t.PropertyBindingType.Animation) {
                    var animationName = input.name;
                    if (!lang_1.isPresent(_this._animationRegistry[animationName])) {
                        _this.errors.push(new animation_parser_1.AnimationParseError("couldn't find an animation entry for " + animationName));
                    }
                }
            });
            t.templateVisitAll(this, ast.children);
        };
        _AnimationTemplatePropertyVisitor.prototype.visitBoundText = function (ast, ctx) {};
        _AnimationTemplatePropertyVisitor.prototype.visitText = function (ast, ctx) {};
        _AnimationTemplatePropertyVisitor.prototype.visitEmbeddedTemplate = function (ast, ctx) {};
        _AnimationTemplatePropertyVisitor.prototype.visitNgContent = function (ast, ctx) {};
        _AnimationTemplatePropertyVisitor.prototype.visitAttr = function (ast, ctx) {};
        _AnimationTemplatePropertyVisitor.prototype.visitDirective = function (ast, ctx) {};
        _AnimationTemplatePropertyVisitor.prototype.visitEvent = function (ast, ctx) {};
        _AnimationTemplatePropertyVisitor.prototype.visitReference = function (ast, ctx) {};
        _AnimationTemplatePropertyVisitor.prototype.visitVariable = function (ast, ctx) {};
        _AnimationTemplatePropertyVisitor.prototype.visitDirectiveProperty = function (ast, ctx) {};
        _AnimationTemplatePropertyVisitor.prototype.visitElementProperty = function (ast, ctx) {};
        return _AnimationTemplatePropertyVisitor;
    }();
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/output/value_util.js', ['../compile_metadata', '../facade/collection', '../facade/exceptions', '../util', './output_ast', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var compile_metadata_1 = $__require('../compile_metadata');
    var collection_1 = $__require('../facade/collection');
    var exceptions_1 = $__require('../facade/exceptions');
    var util_1 = $__require('../util');
    var o = $__require('./output_ast');
    function convertValueToOutputAst(value, type) {
        if (type === void 0) {
            type = null;
        }
        return util_1.visitValue(value, new _ValueOutputAstTransformer(), type);
    }
    exports.convertValueToOutputAst = convertValueToOutputAst;
    var _ValueOutputAstTransformer = function () {
        function _ValueOutputAstTransformer() {}
        _ValueOutputAstTransformer.prototype.visitArray = function (arr, type) {
            var _this = this;
            return o.literalArr(arr.map(function (value) {
                return util_1.visitValue(value, _this, null);
            }), type);
        };
        _ValueOutputAstTransformer.prototype.visitStringMap = function (map, type) {
            var _this = this;
            var entries = [];
            collection_1.StringMapWrapper.forEach(map, function (value, key) {
                entries.push([key, util_1.visitValue(value, _this, null)]);
            });
            return o.literalMap(entries, type);
        };
        _ValueOutputAstTransformer.prototype.visitPrimitive = function (value, type) {
            return o.literal(value, type);
        };
        _ValueOutputAstTransformer.prototype.visitOther = function (value, type) {
            if (value instanceof compile_metadata_1.CompileIdentifierMetadata) {
                return o.importExpr(value);
            } else if (value instanceof o.Expression) {
                return value;
            } else {
                throw new exceptions_1.BaseException("Illegal state: Don't now how to compile value " + value);
            }
        };
        return _ValueOutputAstTransformer;
    }();
    

    return module.exports;
});
System.registerDynamic("npm:@angular/compiler@2.0.0-rc.5/src/template_parser/template_ast.js", ["../facade/lang", "reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var lang_1 = $__require("../facade/lang");
    /**
     * A segment of text within the template.
     */
    var TextAst = function () {
        function TextAst(value, ngContentIndex, sourceSpan) {
            this.value = value;
            this.ngContentIndex = ngContentIndex;
            this.sourceSpan = sourceSpan;
        }
        TextAst.prototype.visit = function (visitor, context) {
            return visitor.visitText(this, context);
        };
        return TextAst;
    }();
    exports.TextAst = TextAst;
    /**
     * A bound expression within the text of a template.
     */
    var BoundTextAst = function () {
        function BoundTextAst(value, ngContentIndex, sourceSpan) {
            this.value = value;
            this.ngContentIndex = ngContentIndex;
            this.sourceSpan = sourceSpan;
        }
        BoundTextAst.prototype.visit = function (visitor, context) {
            return visitor.visitBoundText(this, context);
        };
        return BoundTextAst;
    }();
    exports.BoundTextAst = BoundTextAst;
    /**
     * A plain attribute on an element.
     */
    var AttrAst = function () {
        function AttrAst(name, value, sourceSpan) {
            this.name = name;
            this.value = value;
            this.sourceSpan = sourceSpan;
        }
        AttrAst.prototype.visit = function (visitor, context) {
            return visitor.visitAttr(this, context);
        };
        return AttrAst;
    }();
    exports.AttrAst = AttrAst;
    /**
     * A binding for an element property (e.g. `[property]="expression"`).
     */
    var BoundElementPropertyAst = function () {
        function BoundElementPropertyAst(name, type, securityContext, value, unit, sourceSpan) {
            this.name = name;
            this.type = type;
            this.securityContext = securityContext;
            this.value = value;
            this.unit = unit;
            this.sourceSpan = sourceSpan;
        }
        BoundElementPropertyAst.prototype.visit = function (visitor, context) {
            return visitor.visitElementProperty(this, context);
        };
        return BoundElementPropertyAst;
    }();
    exports.BoundElementPropertyAst = BoundElementPropertyAst;
    /**
     * A binding for an element event (e.g. `(event)="handler()"`).
     */
    var BoundEventAst = function () {
        function BoundEventAst(name, target, handler, sourceSpan) {
            this.name = name;
            this.target = target;
            this.handler = handler;
            this.sourceSpan = sourceSpan;
        }
        BoundEventAst.prototype.visit = function (visitor, context) {
            return visitor.visitEvent(this, context);
        };
        Object.defineProperty(BoundEventAst.prototype, "fullName", {
            get: function () {
                if (lang_1.isPresent(this.target)) {
                    return this.target + ":" + this.name;
                } else {
                    return this.name;
                }
            },
            enumerable: true,
            configurable: true
        });
        return BoundEventAst;
    }();
    exports.BoundEventAst = BoundEventAst;
    /**
     * A reference declaration on an element (e.g. `let someName="expression"`).
     */
    var ReferenceAst = function () {
        function ReferenceAst(name, value, sourceSpan) {
            this.name = name;
            this.value = value;
            this.sourceSpan = sourceSpan;
        }
        ReferenceAst.prototype.visit = function (visitor, context) {
            return visitor.visitReference(this, context);
        };
        return ReferenceAst;
    }();
    exports.ReferenceAst = ReferenceAst;
    /**
     * A variable declaration on a <template> (e.g. `var-someName="someLocalName"`).
     */
    var VariableAst = function () {
        function VariableAst(name, value, sourceSpan) {
            this.name = name;
            this.value = value;
            this.sourceSpan = sourceSpan;
        }
        VariableAst.prototype.visit = function (visitor, context) {
            return visitor.visitVariable(this, context);
        };
        return VariableAst;
    }();
    exports.VariableAst = VariableAst;
    /**
     * An element declaration in a template.
     */
    var ElementAst = function () {
        function ElementAst(name, attrs, inputs, outputs, references, directives, providers, hasViewContainer, children, ngContentIndex, sourceSpan) {
            this.name = name;
            this.attrs = attrs;
            this.inputs = inputs;
            this.outputs = outputs;
            this.references = references;
            this.directives = directives;
            this.providers = providers;
            this.hasViewContainer = hasViewContainer;
            this.children = children;
            this.ngContentIndex = ngContentIndex;
            this.sourceSpan = sourceSpan;
        }
        ElementAst.prototype.visit = function (visitor, context) {
            return visitor.visitElement(this, context);
        };
        return ElementAst;
    }();
    exports.ElementAst = ElementAst;
    /**
     * A `<template>` element included in an Angular template.
     */
    var EmbeddedTemplateAst = function () {
        function EmbeddedTemplateAst(attrs, outputs, references, variables, directives, providers, hasViewContainer, children, ngContentIndex, sourceSpan) {
            this.attrs = attrs;
            this.outputs = outputs;
            this.references = references;
            this.variables = variables;
            this.directives = directives;
            this.providers = providers;
            this.hasViewContainer = hasViewContainer;
            this.children = children;
            this.ngContentIndex = ngContentIndex;
            this.sourceSpan = sourceSpan;
        }
        EmbeddedTemplateAst.prototype.visit = function (visitor, context) {
            return visitor.visitEmbeddedTemplate(this, context);
        };
        return EmbeddedTemplateAst;
    }();
    exports.EmbeddedTemplateAst = EmbeddedTemplateAst;
    /**
     * A directive property with a bound value (e.g. `*ngIf="condition").
     */
    var BoundDirectivePropertyAst = function () {
        function BoundDirectivePropertyAst(directiveName, templateName, value, sourceSpan) {
            this.directiveName = directiveName;
            this.templateName = templateName;
            this.value = value;
            this.sourceSpan = sourceSpan;
        }
        BoundDirectivePropertyAst.prototype.visit = function (visitor, context) {
            return visitor.visitDirectiveProperty(this, context);
        };
        return BoundDirectivePropertyAst;
    }();
    exports.BoundDirectivePropertyAst = BoundDirectivePropertyAst;
    /**
     * A directive declared on an element.
     */
    var DirectiveAst = function () {
        function DirectiveAst(directive, inputs, hostProperties, hostEvents, sourceSpan) {
            this.directive = directive;
            this.inputs = inputs;
            this.hostProperties = hostProperties;
            this.hostEvents = hostEvents;
            this.sourceSpan = sourceSpan;
        }
        DirectiveAst.prototype.visit = function (visitor, context) {
            return visitor.visitDirective(this, context);
        };
        return DirectiveAst;
    }();
    exports.DirectiveAst = DirectiveAst;
    /**
     * A provider declared on an element
     */
    var ProviderAst = function () {
        function ProviderAst(token, multiProvider, eager, providers, providerType, lifecycleHooks, sourceSpan) {
            this.token = token;
            this.multiProvider = multiProvider;
            this.eager = eager;
            this.providers = providers;
            this.providerType = providerType;
            this.lifecycleHooks = lifecycleHooks;
            this.sourceSpan = sourceSpan;
        }
        ProviderAst.prototype.visit = function (visitor, context) {
            // No visit method in the visitor for now...
            return null;
        };
        return ProviderAst;
    }();
    exports.ProviderAst = ProviderAst;
    (function (ProviderAstType) {
        ProviderAstType[ProviderAstType["PublicService"] = 0] = "PublicService";
        ProviderAstType[ProviderAstType["PrivateService"] = 1] = "PrivateService";
        ProviderAstType[ProviderAstType["Component"] = 2] = "Component";
        ProviderAstType[ProviderAstType["Directive"] = 3] = "Directive";
        ProviderAstType[ProviderAstType["Builtin"] = 4] = "Builtin";
    })(exports.ProviderAstType || (exports.ProviderAstType = {}));
    var ProviderAstType = exports.ProviderAstType;
    /**
     * Position where content is to be projected (instance of `<ng-content>` in a template).
     */
    var NgContentAst = function () {
        function NgContentAst(index, ngContentIndex, sourceSpan) {
            this.index = index;
            this.ngContentIndex = ngContentIndex;
            this.sourceSpan = sourceSpan;
        }
        NgContentAst.prototype.visit = function (visitor, context) {
            return visitor.visitNgContent(this, context);
        };
        return NgContentAst;
    }();
    exports.NgContentAst = NgContentAst;
    /**
     * Enumeration of types of property bindings.
     */
    (function (PropertyBindingType) {
        /**
         * A normal binding to a property (e.g. `[property]="expression"`).
         */
        PropertyBindingType[PropertyBindingType["Property"] = 0] = "Property";
        /**
         * A binding to an element attribute (e.g. `[attr.name]="expression"`).
         */
        PropertyBindingType[PropertyBindingType["Attribute"] = 1] = "Attribute";
        /**
         * A binding to a CSS class (e.g. `[class.name]="condition"`).
         */
        PropertyBindingType[PropertyBindingType["Class"] = 2] = "Class";
        /**
         * A binding to a style rule (e.g. `[style.rule]="expression"`).
         */
        PropertyBindingType[PropertyBindingType["Style"] = 3] = "Style";
        /**
         * A binding to an animation reference (e.g. `[animate.key]="expression"`).
         */
        PropertyBindingType[PropertyBindingType["Animation"] = 4] = "Animation";
    })(exports.PropertyBindingType || (exports.PropertyBindingType = {}));
    var PropertyBindingType = exports.PropertyBindingType;
    /**
     * Visit every node in a list of {@link TemplateAst}s with the given {@link TemplateAstVisitor}.
     */
    function templateVisitAll(visitor, asts, context) {
        if (context === void 0) {
            context = null;
        }
        var result = [];
        asts.forEach(function (ast) {
            var astResult = ast.visit(visitor, context);
            if (lang_1.isPresent(astResult)) {
                result.push(astResult);
            }
        });
        return result;
    }
    exports.templateVisitAll = templateVisitAll;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/view_compiler/compile_element.js', ['../compile_metadata', '../facade/collection', '../facade/lang', '../identifiers', '../output/output_ast', '../output/value_util', '../template_parser/template_ast', '../util', './compile_method', './compile_query', './constants', './util', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var compile_metadata_1 = $__require('../compile_metadata');
    var collection_1 = $__require('../facade/collection');
    var lang_1 = $__require('../facade/lang');
    var identifiers_1 = $__require('../identifiers');
    var o = $__require('../output/output_ast');
    var value_util_1 = $__require('../output/value_util');
    var template_ast_1 = $__require('../template_parser/template_ast');
    var util_1 = $__require('../util');
    var compile_method_1 = $__require('./compile_method');
    var compile_query_1 = $__require('./compile_query');
    var constants_1 = $__require('./constants');
    var util_2 = $__require('./util');
    var CompileNode = function () {
        function CompileNode(parent, view, nodeIndex, renderNode, sourceAst) {
            this.parent = parent;
            this.view = view;
            this.nodeIndex = nodeIndex;
            this.renderNode = renderNode;
            this.sourceAst = sourceAst;
        }
        CompileNode.prototype.isNull = function () {
            return lang_1.isBlank(this.renderNode);
        };
        CompileNode.prototype.isRootElement = function () {
            return this.view != this.parent.view;
        };
        return CompileNode;
    }();
    exports.CompileNode = CompileNode;
    var CompileElement = function (_super) {
        __extends(CompileElement, _super);
        function CompileElement(parent, view, nodeIndex, renderNode, sourceAst, component, _directives, _resolvedProvidersArray, hasViewContainer, hasEmbeddedView, references) {
            var _this = this;
            _super.call(this, parent, view, nodeIndex, renderNode, sourceAst);
            this.component = component;
            this._directives = _directives;
            this._resolvedProvidersArray = _resolvedProvidersArray;
            this.hasViewContainer = hasViewContainer;
            this.hasEmbeddedView = hasEmbeddedView;
            this._compViewExpr = null;
            this.instances = new compile_metadata_1.CompileIdentifierMap();
            this._queryCount = 0;
            this._queries = new compile_metadata_1.CompileIdentifierMap();
            this._componentConstructorViewQueryLists = [];
            this.contentNodesByNgContentIndex = null;
            this.referenceTokens = {};
            references.forEach(function (ref) {
                return _this.referenceTokens[ref.name] = ref.value;
            });
            this.elementRef = o.importExpr(identifiers_1.Identifiers.ElementRef).instantiate([this.renderNode]);
            this.instances.add(identifiers_1.identifierToken(identifiers_1.Identifiers.ElementRef), this.elementRef);
            this.injector = o.THIS_EXPR.callMethod('injector', [o.literal(this.nodeIndex)]);
            this.instances.add(identifiers_1.identifierToken(identifiers_1.Identifiers.Injector), this.injector);
            this.instances.add(identifiers_1.identifierToken(identifiers_1.Identifiers.Renderer), o.THIS_EXPR.prop('renderer'));
            if (this.hasViewContainer || this.hasEmbeddedView || lang_1.isPresent(this.component)) {
                this._createAppElement();
            }
        }
        CompileElement.createNull = function () {
            return new CompileElement(null, null, null, null, null, null, [], [], false, false, []);
        };
        CompileElement.prototype._createAppElement = function () {
            var fieldName = "_appEl_" + this.nodeIndex;
            var parentNodeIndex = this.isRootElement() ? null : this.parent.nodeIndex;
            // private is fine here as no child view will reference an AppElement
            this.view.fields.push(new o.ClassField(fieldName, o.importType(identifiers_1.Identifiers.AppElement), [o.StmtModifier.Private]));
            var statement = o.THIS_EXPR.prop(fieldName).set(o.importExpr(identifiers_1.Identifiers.AppElement).instantiate([o.literal(this.nodeIndex), o.literal(parentNodeIndex), o.THIS_EXPR, this.renderNode])).toStmt();
            this.view.createMethod.addStmt(statement);
            this.appElement = o.THIS_EXPR.prop(fieldName);
            this.instances.add(identifiers_1.identifierToken(identifiers_1.Identifiers.AppElement), this.appElement);
        };
        CompileElement.prototype.createComponentFactoryResolver = function (entryComponents) {
            if (!entryComponents || entryComponents.length === 0) {
                return;
            }
            var createComponentFactoryResolverExpr = o.importExpr(identifiers_1.Identifiers.CodegenComponentFactoryResolver).instantiate([o.literalArr(entryComponents.map(function (entryComponent) {
                return o.importExpr(entryComponent);
            })), util_2.injectFromViewParentInjector(identifiers_1.identifierToken(identifiers_1.Identifiers.ComponentFactoryResolver), false)]);
            var provider = new compile_metadata_1.CompileProviderMetadata({
                token: identifiers_1.identifierToken(identifiers_1.Identifiers.ComponentFactoryResolver),
                useValue: createComponentFactoryResolverExpr
            });
            // Add ComponentFactoryResolver as first provider as it does not have deps on other providers
            // ProviderAstType.PrivateService as only the component and its view can see it,
            // but nobody else
            this._resolvedProvidersArray.unshift(new template_ast_1.ProviderAst(provider.token, false, true, [provider], template_ast_1.ProviderAstType.PrivateService, [], this.sourceAst.sourceSpan));
        };
        CompileElement.prototype.setComponentView = function (compViewExpr) {
            this._compViewExpr = compViewExpr;
            this.contentNodesByNgContentIndex = collection_1.ListWrapper.createFixedSize(this.component.template.ngContentSelectors.length);
            for (var i = 0; i < this.contentNodesByNgContentIndex.length; i++) {
                this.contentNodesByNgContentIndex[i] = [];
            }
        };
        CompileElement.prototype.setEmbeddedView = function (embeddedView) {
            this.embeddedView = embeddedView;
            if (lang_1.isPresent(embeddedView)) {
                var createTemplateRefExpr = o.importExpr(identifiers_1.Identifiers.TemplateRef_).instantiate([this.appElement, this.embeddedView.viewFactory]);
                var provider = new compile_metadata_1.CompileProviderMetadata({ token: identifiers_1.identifierToken(identifiers_1.Identifiers.TemplateRef), useValue: createTemplateRefExpr });
                // Add TemplateRef as first provider as it does not have deps on other providers
                this._resolvedProvidersArray.unshift(new template_ast_1.ProviderAst(provider.token, false, true, [provider], template_ast_1.ProviderAstType.Builtin, [], this.sourceAst.sourceSpan));
            }
        };
        CompileElement.prototype.beforeChildren = function () {
            var _this = this;
            if (this.hasViewContainer) {
                this.instances.add(identifiers_1.identifierToken(identifiers_1.Identifiers.ViewContainerRef), this.appElement.prop('vcRef'));
            }
            this._resolvedProviders = new compile_metadata_1.CompileIdentifierMap();
            this._resolvedProvidersArray.forEach(function (provider) {
                return _this._resolvedProviders.add(provider.token, provider);
            });
            // create all the provider instances, some in the view constructor,
            // some as getters. We rely on the fact that they are already sorted topologically.
            this._resolvedProviders.values().forEach(function (resolvedProvider) {
                var providerValueExpressions = resolvedProvider.providers.map(function (provider) {
                    if (lang_1.isPresent(provider.useExisting)) {
                        return _this._getDependency(resolvedProvider.providerType, new compile_metadata_1.CompileDiDependencyMetadata({ token: provider.useExisting }));
                    } else if (lang_1.isPresent(provider.useFactory)) {
                        var deps = lang_1.isPresent(provider.deps) ? provider.deps : provider.useFactory.diDeps;
                        var depsExpr = deps.map(function (dep) {
                            return _this._getDependency(resolvedProvider.providerType, dep);
                        });
                        return o.importExpr(provider.useFactory).callFn(depsExpr);
                    } else if (lang_1.isPresent(provider.useClass)) {
                        var deps = lang_1.isPresent(provider.deps) ? provider.deps : provider.useClass.diDeps;
                        var depsExpr = deps.map(function (dep) {
                            return _this._getDependency(resolvedProvider.providerType, dep);
                        });
                        return o.importExpr(provider.useClass).instantiate(depsExpr, o.importType(provider.useClass));
                    } else {
                        return value_util_1.convertValueToOutputAst(provider.useValue);
                    }
                });
                var propName = "_" + resolvedProvider.token.name + "_" + _this.nodeIndex + "_" + _this.instances.size;
                var instance = createProviderProperty(propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager, _this);
                _this.instances.add(resolvedProvider.token, instance);
            });
            for (var i = 0; i < this._directives.length; i++) {
                var directive = this._directives[i];
                var directiveInstance = this.instances.get(identifiers_1.identifierToken(directive.type));
                directive.queries.forEach(function (queryMeta) {
                    _this._addQuery(queryMeta, directiveInstance);
                });
            }
            var queriesWithReads = [];
            this._resolvedProviders.values().forEach(function (resolvedProvider) {
                var queriesForProvider = _this._getQueriesFor(resolvedProvider.token);
                collection_1.ListWrapper.addAll(queriesWithReads, queriesForProvider.map(function (query) {
                    return new _QueryWithRead(query, resolvedProvider.token);
                }));
            });
            collection_1.StringMapWrapper.forEach(this.referenceTokens, function (_, varName) {
                var token = _this.referenceTokens[varName];
                var varValue;
                if (lang_1.isPresent(token)) {
                    varValue = _this.instances.get(token);
                } else {
                    varValue = _this.renderNode;
                }
                _this.view.locals.set(varName, varValue);
                var varToken = new compile_metadata_1.CompileTokenMetadata({ value: varName });
                collection_1.ListWrapper.addAll(queriesWithReads, _this._getQueriesFor(varToken).map(function (query) {
                    return new _QueryWithRead(query, varToken);
                }));
            });
            queriesWithReads.forEach(function (queryWithRead) {
                var value;
                if (lang_1.isPresent(queryWithRead.read.identifier)) {
                    // query for an identifier
                    value = _this.instances.get(queryWithRead.read);
                } else {
                    // query for a reference
                    var token = _this.referenceTokens[queryWithRead.read.value];
                    if (lang_1.isPresent(token)) {
                        value = _this.instances.get(token);
                    } else {
                        value = _this.elementRef;
                    }
                }
                if (lang_1.isPresent(value)) {
                    queryWithRead.query.addValue(value, _this.view);
                }
            });
            if (lang_1.isPresent(this.component)) {
                var componentConstructorViewQueryList = lang_1.isPresent(this.component) ? o.literalArr(this._componentConstructorViewQueryLists) : o.NULL_EXPR;
                var compExpr = lang_1.isPresent(this.getComponent()) ? this.getComponent() : o.NULL_EXPR;
                this.view.createMethod.addStmt(this.appElement.callMethod('initComponent', [compExpr, componentConstructorViewQueryList, this._compViewExpr]).toStmt());
            }
        };
        CompileElement.prototype.afterChildren = function (childNodeCount) {
            var _this = this;
            this._resolvedProviders.values().forEach(function (resolvedProvider) {
                // Note: afterChildren is called after recursing into children.
                // This is good so that an injector match in an element that is closer to a requesting element
                // matches first.
                var providerExpr = _this.instances.get(resolvedProvider.token);
                // Note: view providers are only visible on the injector of that element.
                // This is not fully correct as the rules during codegen don't allow a directive
                // to get hold of a view provdier on the same element. We still do this semantic
                // as it simplifies our model to having only one runtime injector per element.
                var providerChildNodeCount = resolvedProvider.providerType === template_ast_1.ProviderAstType.PrivateService ? 0 : childNodeCount;
                _this.view.injectorGetMethod.addStmt(createInjectInternalCondition(_this.nodeIndex, providerChildNodeCount, resolvedProvider, providerExpr));
            });
            this._queries.values().forEach(function (queries) {
                return queries.forEach(function (query) {
                    return query.afterChildren(_this.view.createMethod, _this.view.updateContentQueriesMethod);
                });
            });
        };
        CompileElement.prototype.addContentNode = function (ngContentIndex, nodeExpr) {
            this.contentNodesByNgContentIndex[ngContentIndex].push(nodeExpr);
        };
        CompileElement.prototype.getComponent = function () {
            return lang_1.isPresent(this.component) ? this.instances.get(identifiers_1.identifierToken(this.component.type)) : null;
        };
        CompileElement.prototype.getProviderTokens = function () {
            return this._resolvedProviders.values().map(function (resolvedProvider) {
                return util_1.createDiTokenExpression(resolvedProvider.token);
            });
        };
        CompileElement.prototype._getQueriesFor = function (token) {
            var result = [];
            var currentEl = this;
            var distance = 0;
            var queries;
            while (!currentEl.isNull()) {
                queries = currentEl._queries.get(token);
                if (lang_1.isPresent(queries)) {
                    collection_1.ListWrapper.addAll(result, queries.filter(function (query) {
                        return query.meta.descendants || distance <= 1;
                    }));
                }
                if (currentEl._directives.length > 0) {
                    distance++;
                }
                currentEl = currentEl.parent;
            }
            queries = this.view.componentView.viewQueries.get(token);
            if (lang_1.isPresent(queries)) {
                collection_1.ListWrapper.addAll(result, queries);
            }
            return result;
        };
        CompileElement.prototype._addQuery = function (queryMeta, directiveInstance) {
            var propName = "_query_" + queryMeta.selectors[0].name + "_" + this.nodeIndex + "_" + this._queryCount++;
            var queryList = compile_query_1.createQueryList(queryMeta, directiveInstance, propName, this.view);
            var query = new compile_query_1.CompileQuery(queryMeta, queryList, directiveInstance, this.view);
            compile_query_1.addQueryToTokenMap(this._queries, query);
            return query;
        };
        CompileElement.prototype._getLocalDependency = function (requestingProviderType, dep) {
            var result = null;
            // constructor content query
            if (lang_1.isBlank(result) && lang_1.isPresent(dep.query)) {
                result = this._addQuery(dep.query, null).queryList;
            }
            // constructor view query
            if (lang_1.isBlank(result) && lang_1.isPresent(dep.viewQuery)) {
                result = compile_query_1.createQueryList(dep.viewQuery, null, "_viewQuery_" + dep.viewQuery.selectors[0].name + "_" + this.nodeIndex + "_" + this._componentConstructorViewQueryLists.length, this.view);
                this._componentConstructorViewQueryLists.push(result);
            }
            if (lang_1.isPresent(dep.token)) {
                // access builtins with special visibility
                if (lang_1.isBlank(result)) {
                    if (dep.token.equalsTo(identifiers_1.identifierToken(identifiers_1.Identifiers.ChangeDetectorRef))) {
                        if (requestingProviderType === template_ast_1.ProviderAstType.Component) {
                            return this._compViewExpr.prop('ref');
                        } else {
                            return util_2.getPropertyInView(o.THIS_EXPR.prop('ref'), this.view, this.view.componentView);
                        }
                    }
                }
                // access regular providers on the element
                if (lang_1.isBlank(result)) {
                    var resolvedProvider = this._resolvedProviders.get(dep.token);
                    // don't allow directives / public services to access private services.
                    // only components and private services can access private services.
                    if (resolvedProvider && (requestingProviderType === template_ast_1.ProviderAstType.Directive || requestingProviderType === template_ast_1.ProviderAstType.PublicService) && resolvedProvider.providerType === template_ast_1.ProviderAstType.PrivateService) {
                        return null;
                    }
                    result = this.instances.get(dep.token);
                }
            }
            return result;
        };
        CompileElement.prototype._getDependency = function (requestingProviderType, dep) {
            var currElement = this;
            var result = null;
            if (dep.isValue) {
                result = o.literal(dep.value);
            }
            if (lang_1.isBlank(result) && !dep.isSkipSelf) {
                result = this._getLocalDependency(requestingProviderType, dep);
            }
            // check parent elements
            while (lang_1.isBlank(result) && !currElement.parent.isNull()) {
                currElement = currElement.parent;
                result = currElement._getLocalDependency(template_ast_1.ProviderAstType.PublicService, new compile_metadata_1.CompileDiDependencyMetadata({ token: dep.token }));
            }
            if (lang_1.isBlank(result)) {
                result = util_2.injectFromViewParentInjector(dep.token, dep.isOptional);
            }
            if (lang_1.isBlank(result)) {
                result = o.NULL_EXPR;
            }
            return util_2.getPropertyInView(result, this.view, currElement.view);
        };
        return CompileElement;
    }(CompileNode);
    exports.CompileElement = CompileElement;
    function createInjectInternalCondition(nodeIndex, childNodeCount, provider, providerExpr) {
        var indexCondition;
        if (childNodeCount > 0) {
            indexCondition = o.literal(nodeIndex).lowerEquals(constants_1.InjectMethodVars.requestNodeIndex).and(constants_1.InjectMethodVars.requestNodeIndex.lowerEquals(o.literal(nodeIndex + childNodeCount)));
        } else {
            indexCondition = o.literal(nodeIndex).identical(constants_1.InjectMethodVars.requestNodeIndex);
        }
        return new o.IfStmt(constants_1.InjectMethodVars.token.identical(util_1.createDiTokenExpression(provider.token)).and(indexCondition), [new o.ReturnStatement(providerExpr)]);
    }
    function createProviderProperty(propName, provider, providerValueExpressions, isMulti, isEager, compileElement) {
        var view = compileElement.view;
        var resolvedProviderValueExpr;
        var type;
        if (isMulti) {
            resolvedProviderValueExpr = o.literalArr(providerValueExpressions);
            type = new o.ArrayType(o.DYNAMIC_TYPE);
        } else {
            resolvedProviderValueExpr = providerValueExpressions[0];
            type = providerValueExpressions[0].type;
        }
        if (lang_1.isBlank(type)) {
            type = o.DYNAMIC_TYPE;
        }
        if (isEager) {
            view.fields.push(new o.ClassField(propName, type));
            view.createMethod.addStmt(o.THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());
        } else {
            var internalField = "_" + propName;
            view.fields.push(new o.ClassField(internalField, type));
            var getter = new compile_method_1.CompileMethod(view);
            getter.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
            // Note: Equals is important for JS so that it also checks the undefined case!
            getter.addStmt(new o.IfStmt(o.THIS_EXPR.prop(internalField).isBlank(), [o.THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]));
            getter.addStmt(new o.ReturnStatement(o.THIS_EXPR.prop(internalField)));
            view.getters.push(new o.ClassGetter(propName, getter.finish(), type));
        }
        return o.THIS_EXPR.prop(propName);
    }
    var _QueryWithRead = function () {
        function _QueryWithRead(query, match) {
            this.query = query;
            this.read = lang_1.isPresent(query.meta.read) ? query.meta.read : match;
        }
        return _QueryWithRead;
    }();
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/view_compiler/compile_method.js', ['../facade/collection', '../facade/lang', '../output/output_ast', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var collection_1 = $__require('../facade/collection');
    var lang_1 = $__require('../facade/lang');
    var o = $__require('../output/output_ast');
    var _DebugState = function () {
        function _DebugState(nodeIndex, sourceAst) {
            this.nodeIndex = nodeIndex;
            this.sourceAst = sourceAst;
        }
        return _DebugState;
    }();
    var NULL_DEBUG_STATE = new _DebugState(null, null);
    var CompileMethod = function () {
        function CompileMethod(_view) {
            this._view = _view;
            this._newState = NULL_DEBUG_STATE;
            this._currState = NULL_DEBUG_STATE;
            this._bodyStatements = [];
            this._debugEnabled = this._view.genConfig.genDebugInfo;
        }
        CompileMethod.prototype._updateDebugContextIfNeeded = function () {
            if (this._newState.nodeIndex !== this._currState.nodeIndex || this._newState.sourceAst !== this._currState.sourceAst) {
                var expr = this._updateDebugContext(this._newState);
                if (lang_1.isPresent(expr)) {
                    this._bodyStatements.push(expr.toStmt());
                }
            }
        };
        CompileMethod.prototype._updateDebugContext = function (newState) {
            this._currState = this._newState = newState;
            if (this._debugEnabled) {
                var sourceLocation = lang_1.isPresent(newState.sourceAst) ? newState.sourceAst.sourceSpan.start : null;
                return o.THIS_EXPR.callMethod('debug', [o.literal(newState.nodeIndex), lang_1.isPresent(sourceLocation) ? o.literal(sourceLocation.line) : o.NULL_EXPR, lang_1.isPresent(sourceLocation) ? o.literal(sourceLocation.col) : o.NULL_EXPR]);
            } else {
                return null;
            }
        };
        CompileMethod.prototype.resetDebugInfoExpr = function (nodeIndex, templateAst) {
            var res = this._updateDebugContext(new _DebugState(nodeIndex, templateAst));
            return lang_1.isPresent(res) ? res : o.NULL_EXPR;
        };
        CompileMethod.prototype.resetDebugInfo = function (nodeIndex, templateAst) {
            this._newState = new _DebugState(nodeIndex, templateAst);
        };
        CompileMethod.prototype.addStmt = function (stmt) {
            this._updateDebugContextIfNeeded();
            this._bodyStatements.push(stmt);
        };
        CompileMethod.prototype.addStmts = function (stmts) {
            this._updateDebugContextIfNeeded();
            collection_1.ListWrapper.addAll(this._bodyStatements, stmts);
        };
        CompileMethod.prototype.finish = function () {
            return this._bodyStatements;
        };
        CompileMethod.prototype.isEmpty = function () {
            return this._bodyStatements.length === 0;
        };
        return CompileMethod;
    }();
    exports.CompileMethod = CompileMethod;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/view_compiler/compile_pipe.js', ['../facade/exceptions', '../facade/lang', '../identifiers', '../output/output_ast', './util', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var exceptions_1 = $__require('../facade/exceptions');
    var lang_1 = $__require('../facade/lang');
    var identifiers_1 = $__require('../identifiers');
    var o = $__require('../output/output_ast');
    var util_1 = $__require('./util');
    var CompilePipe = function () {
        function CompilePipe(view, meta) {
            var _this = this;
            this.view = view;
            this.meta = meta;
            this._purePipeProxyCount = 0;
            this.instance = o.THIS_EXPR.prop("_pipe_" + meta.name + "_" + view.pipeCount++);
            var deps = this.meta.type.diDeps.map(function (diDep) {
                if (diDep.token.equalsTo(identifiers_1.identifierToken(identifiers_1.Identifiers.ChangeDetectorRef))) {
                    return util_1.getPropertyInView(o.THIS_EXPR.prop('ref'), _this.view, _this.view.componentView);
                }
                return util_1.injectFromViewParentInjector(diDep.token, false);
            });
            this.view.fields.push(new o.ClassField(this.instance.name, o.importType(this.meta.type)));
            this.view.createMethod.resetDebugInfo(null, null);
            this.view.createMethod.addStmt(o.THIS_EXPR.prop(this.instance.name).set(o.importExpr(this.meta.type).instantiate(deps)).toStmt());
        }
        CompilePipe.call = function (view, name, args) {
            var compView = view.componentView;
            var meta = _findPipeMeta(compView, name);
            var pipe;
            if (meta.pure) {
                // pure pipes live on the component view
                pipe = compView.purePipes.get(name);
                if (lang_1.isBlank(pipe)) {
                    pipe = new CompilePipe(compView, meta);
                    compView.purePipes.set(name, pipe);
                    compView.pipes.push(pipe);
                }
            } else {
                // Non pure pipes live on the view that called it
                pipe = new CompilePipe(view, meta);
                view.pipes.push(pipe);
            }
            return pipe._call(view, args);
        };
        Object.defineProperty(CompilePipe.prototype, "pure", {
            get: function () {
                return this.meta.pure;
            },
            enumerable: true,
            configurable: true
        });
        CompilePipe.prototype._call = function (callingView, args) {
            if (this.meta.pure) {
                // PurePipeProxies live on the view that called them.
                var purePipeProxyInstance = o.THIS_EXPR.prop(this.instance.name + "_" + this._purePipeProxyCount++);
                var pipeInstanceSeenFromPureProxy = util_1.getPropertyInView(this.instance, callingView, this.view);
                util_1.createPureProxy(pipeInstanceSeenFromPureProxy.prop('transform').callMethod(o.BuiltinMethod.bind, [pipeInstanceSeenFromPureProxy]), args.length, purePipeProxyInstance, callingView);
                return o.importExpr(identifiers_1.Identifiers.castByValue).callFn([purePipeProxyInstance, pipeInstanceSeenFromPureProxy.prop('transform')]).callFn(args);
            } else {
                return util_1.getPropertyInView(this.instance, callingView, this.view).callMethod('transform', args);
            }
        };
        return CompilePipe;
    }();
    exports.CompilePipe = CompilePipe;
    function _findPipeMeta(view, name) {
        var pipeMeta = null;
        for (var i = view.pipeMetas.length - 1; i >= 0; i--) {
            var localPipeMeta = view.pipeMetas[i];
            if (localPipeMeta.name == name) {
                pipeMeta = localPipeMeta;
                break;
            }
        }
        if (lang_1.isBlank(pipeMeta)) {
            throw new exceptions_1.BaseException("Illegal state: Could not find pipe " + name + " although the parser should have detected this error!");
        }
        return pipeMeta;
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/view_compiler/compile_query.js', ['../facade/collection', '../facade/lang', '../identifiers', '../output/output_ast', './util', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var collection_1 = $__require('../facade/collection');
    var lang_1 = $__require('../facade/lang');
    var identifiers_1 = $__require('../identifiers');
    var o = $__require('../output/output_ast');
    var util_1 = $__require('./util');
    var ViewQueryValues = function () {
        function ViewQueryValues(view, values) {
            this.view = view;
            this.values = values;
        }
        return ViewQueryValues;
    }();
    var CompileQuery = function () {
        function CompileQuery(meta, queryList, ownerDirectiveExpression, view) {
            this.meta = meta;
            this.queryList = queryList;
            this.ownerDirectiveExpression = ownerDirectiveExpression;
            this.view = view;
            this._values = new ViewQueryValues(view, []);
        }
        CompileQuery.prototype.addValue = function (value, view) {
            var currentView = view;
            var elPath = [];
            while (lang_1.isPresent(currentView) && currentView !== this.view) {
                var parentEl = currentView.declarationElement;
                elPath.unshift(parentEl);
                currentView = parentEl.view;
            }
            var queryListForDirtyExpr = util_1.getPropertyInView(this.queryList, view, this.view);
            var viewValues = this._values;
            elPath.forEach(function (el) {
                var last = viewValues.values.length > 0 ? viewValues.values[viewValues.values.length - 1] : null;
                if (last instanceof ViewQueryValues && last.view === el.embeddedView) {
                    viewValues = last;
                } else {
                    var newViewValues = new ViewQueryValues(el.embeddedView, []);
                    viewValues.values.push(newViewValues);
                    viewValues = newViewValues;
                }
            });
            viewValues.values.push(value);
            if (elPath.length > 0) {
                view.dirtyParentQueriesMethod.addStmt(queryListForDirtyExpr.callMethod('setDirty', []).toStmt());
            }
        };
        CompileQuery.prototype._isStatic = function () {
            return !this._values.values.some(function (value) {
                return value instanceof ViewQueryValues;
            });
        };
        CompileQuery.prototype.afterChildren = function (targetStaticMethod /** TODO #9100 */, targetDynamicMethod) {
            var values = createQueryValues(this._values);
            var updateStmts = [this.queryList.callMethod('reset', [o.literalArr(values)]).toStmt()];
            if (lang_1.isPresent(this.ownerDirectiveExpression)) {
                var valueExpr = this.meta.first ? this.queryList.prop('first') : this.queryList;
                updateStmts.push(this.ownerDirectiveExpression.prop(this.meta.propertyName).set(valueExpr).toStmt());
            }
            if (!this.meta.first) {
                updateStmts.push(this.queryList.callMethod('notifyOnChanges', []).toStmt());
            }
            if (this.meta.first && this._isStatic()) {
                // for queries that don't change and the user asked for a single element,
                // set it immediately. That is e.g. needed for querying for ViewContainerRefs, ...
                // we don't do this for QueryLists for now as this would break the timing when
                // we call QueryList listeners...
                targetStaticMethod.addStmts(updateStmts);
            } else {
                targetDynamicMethod.addStmt(new o.IfStmt(this.queryList.prop('dirty'), updateStmts));
            }
        };
        return CompileQuery;
    }();
    exports.CompileQuery = CompileQuery;
    function createQueryValues(viewValues) {
        return collection_1.ListWrapper.flatten(viewValues.values.map(function (entry) {
            if (entry instanceof ViewQueryValues) {
                return mapNestedViews(entry.view.declarationElement.appElement, entry.view, createQueryValues(entry));
            } else {
                return entry;
            }
        }));
    }
    function mapNestedViews(declarationAppElement, view, expressions) {
        var adjustedExpressions = expressions.map(function (expr) {
            return o.replaceVarInExpression(o.THIS_EXPR.name, o.variable('nestedView'), expr);
        });
        return declarationAppElement.callMethod('mapNestedViews', [o.variable(view.className), o.fn([new o.FnParam('nestedView', view.classType)], [new o.ReturnStatement(o.literalArr(adjustedExpressions))], o.DYNAMIC_TYPE)]);
    }
    function createQueryList(query, directiveInstance, propertyName, compileView) {
        compileView.fields.push(new o.ClassField(propertyName, o.importType(identifiers_1.Identifiers.QueryList, [o.DYNAMIC_TYPE])));
        var expr = o.THIS_EXPR.prop(propertyName);
        compileView.createMethod.addStmt(o.THIS_EXPR.prop(propertyName).set(o.importExpr(identifiers_1.Identifiers.QueryList, [o.DYNAMIC_TYPE]).instantiate([])).toStmt());
        return expr;
    }
    exports.createQueryList = createQueryList;
    function addQueryToTokenMap(map, query) {
        query.meta.selectors.forEach(function (selector) {
            var entry = map.get(selector);
            if (lang_1.isBlank(entry)) {
                entry = [];
                map.add(selector, entry);
            }
            entry.push(query);
        });
    }
    exports.addQueryToTokenMap = addQueryToTokenMap;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/view_compiler/compile_view.js', ['../../core_private', '../compile_metadata', '../facade/collection', '../facade/lang', '../identifiers', '../output/output_ast', './compile_method', './compile_pipe', './compile_query', './constants', './util', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_private_1 = $__require('../../core_private');
    var compile_metadata_1 = $__require('../compile_metadata');
    var collection_1 = $__require('../facade/collection');
    var lang_1 = $__require('../facade/lang');
    var identifiers_1 = $__require('../identifiers');
    var o = $__require('../output/output_ast');
    var compile_method_1 = $__require('./compile_method');
    var compile_pipe_1 = $__require('./compile_pipe');
    var compile_query_1 = $__require('./compile_query');
    var constants_1 = $__require('./constants');
    var util_1 = $__require('./util');
    var CompileView = function () {
        function CompileView(component, genConfig, pipeMetas, styles, animations, viewIndex, declarationElement, templateVariableBindings) {
            var _this = this;
            this.component = component;
            this.genConfig = genConfig;
            this.pipeMetas = pipeMetas;
            this.styles = styles;
            this.animations = animations;
            this.viewIndex = viewIndex;
            this.declarationElement = declarationElement;
            this.templateVariableBindings = templateVariableBindings;
            this.nodes = [];
            // root nodes or AppElements for ViewContainers
            this.rootNodesOrAppElements = [];
            this.bindings = [];
            this.classStatements = [];
            this.eventHandlerMethods = [];
            this.fields = [];
            this.getters = [];
            this.disposables = [];
            this.subscriptions = [];
            this.purePipes = new Map();
            this.pipes = [];
            this.locals = new Map();
            this.literalArrayCount = 0;
            this.literalMapCount = 0;
            this.pipeCount = 0;
            this.createMethod = new compile_method_1.CompileMethod(this);
            this.injectorGetMethod = new compile_method_1.CompileMethod(this);
            this.updateContentQueriesMethod = new compile_method_1.CompileMethod(this);
            this.dirtyParentQueriesMethod = new compile_method_1.CompileMethod(this);
            this.updateViewQueriesMethod = new compile_method_1.CompileMethod(this);
            this.detectChangesInInputsMethod = new compile_method_1.CompileMethod(this);
            this.detectChangesRenderPropertiesMethod = new compile_method_1.CompileMethod(this);
            this.afterContentLifecycleCallbacksMethod = new compile_method_1.CompileMethod(this);
            this.afterViewLifecycleCallbacksMethod = new compile_method_1.CompileMethod(this);
            this.destroyMethod = new compile_method_1.CompileMethod(this);
            this.detachMethod = new compile_method_1.CompileMethod(this);
            this.viewType = getViewType(component, viewIndex);
            this.className = "_View_" + component.type.name + viewIndex;
            this.classType = o.importType(new compile_metadata_1.CompileIdentifierMetadata({ name: this.className }));
            this.viewFactory = o.variable(util_1.getViewFactoryName(component, viewIndex));
            if (this.viewType === core_private_1.ViewType.COMPONENT || this.viewType === core_private_1.ViewType.HOST) {
                this.componentView = this;
            } else {
                this.componentView = this.declarationElement.view.componentView;
            }
            this.componentContext = util_1.getPropertyInView(o.THIS_EXPR.prop('context'), this, this.componentView);
            var viewQueries = new compile_metadata_1.CompileIdentifierMap();
            if (this.viewType === core_private_1.ViewType.COMPONENT) {
                var directiveInstance = o.THIS_EXPR.prop('context');
                collection_1.ListWrapper.forEachWithIndex(this.component.viewQueries, function (queryMeta, queryIndex) {
                    var propName = "_viewQuery_" + queryMeta.selectors[0].name + "_" + queryIndex;
                    var queryList = compile_query_1.createQueryList(queryMeta, directiveInstance, propName, _this);
                    var query = new compile_query_1.CompileQuery(queryMeta, queryList, directiveInstance, _this);
                    compile_query_1.addQueryToTokenMap(viewQueries, query);
                });
                var constructorViewQueryCount = 0;
                this.component.type.diDeps.forEach(function (dep) {
                    if (lang_1.isPresent(dep.viewQuery)) {
                        var queryList = o.THIS_EXPR.prop('declarationAppElement').prop('componentConstructorViewQueries').key(o.literal(constructorViewQueryCount++));
                        var query = new compile_query_1.CompileQuery(dep.viewQuery, queryList, null, _this);
                        compile_query_1.addQueryToTokenMap(viewQueries, query);
                    }
                });
            }
            this.viewQueries = viewQueries;
            templateVariableBindings.forEach(function (entry) {
                _this.locals.set(entry[1], o.THIS_EXPR.prop('context').prop(entry[0]));
            });
            if (!this.declarationElement.isNull()) {
                this.declarationElement.setEmbeddedView(this);
            }
        }
        CompileView.prototype.callPipe = function (name, input, args) {
            return compile_pipe_1.CompilePipe.call(this, name, [input].concat(args));
        };
        CompileView.prototype.getLocal = function (name) {
            if (name == constants_1.EventHandlerVars.event.name) {
                return constants_1.EventHandlerVars.event;
            }
            var currView = this;
            var result = currView.locals.get(name);
            while (lang_1.isBlank(result) && lang_1.isPresent(currView.declarationElement.view)) {
                currView = currView.declarationElement.view;
                result = currView.locals.get(name);
            }
            if (lang_1.isPresent(result)) {
                return util_1.getPropertyInView(result, this, currView);
            } else {
                return null;
            }
        };
        CompileView.prototype.createLiteralArray = function (values) {
            if (values.length === 0) {
                return o.importExpr(identifiers_1.Identifiers.EMPTY_ARRAY);
            }
            var proxyExpr = o.THIS_EXPR.prop("_arr_" + this.literalArrayCount++);
            var proxyParams = [];
            var proxyReturnEntries = [];
            for (var i = 0; i < values.length; i++) {
                var paramName = "p" + i;
                proxyParams.push(new o.FnParam(paramName));
                proxyReturnEntries.push(o.variable(paramName));
            }
            util_1.createPureProxy(o.fn(proxyParams, [new o.ReturnStatement(o.literalArr(proxyReturnEntries))], new o.ArrayType(o.DYNAMIC_TYPE)), values.length, proxyExpr, this);
            return proxyExpr.callFn(values);
        };
        CompileView.prototype.createLiteralMap = function (entries) {
            if (entries.length === 0) {
                return o.importExpr(identifiers_1.Identifiers.EMPTY_MAP);
            }
            var proxyExpr = o.THIS_EXPR.prop("_map_" + this.literalMapCount++);
            var proxyParams = [];
            var proxyReturnEntries = [];
            var values = [];
            for (var i = 0; i < entries.length; i++) {
                var paramName = "p" + i;
                proxyParams.push(new o.FnParam(paramName));
                proxyReturnEntries.push([entries[i][0], o.variable(paramName)]);
                values.push(entries[i][1]);
            }
            util_1.createPureProxy(o.fn(proxyParams, [new o.ReturnStatement(o.literalMap(proxyReturnEntries))], new o.MapType(o.DYNAMIC_TYPE)), entries.length, proxyExpr, this);
            return proxyExpr.callFn(values);
        };
        CompileView.prototype.afterNodes = function () {
            var _this = this;
            this.viewQueries.values().forEach(function (queries) {
                return queries.forEach(function (query) {
                    return query.afterChildren(_this.createMethod, _this.updateViewQueriesMethod);
                });
            });
        };
        return CompileView;
    }();
    exports.CompileView = CompileView;
    function getViewType(component, embeddedTemplateIndex) {
        if (embeddedTemplateIndex > 0) {
            return core_private_1.ViewType.EMBEDDED;
        } else if (component.type.isHost) {
            return core_private_1.ViewType.HOST;
        } else {
            return core_private_1.ViewType.COMPONENT;
        }
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/view_compiler/constants.js', ['@angular/core', '../../core_private', '../compile_metadata', '../facade/lang', '../identifiers', '../output/output_ast', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var core_private_1 = $__require('../../core_private');
    var compile_metadata_1 = $__require('../compile_metadata');
    var lang_1 = $__require('../facade/lang');
    var identifiers_1 = $__require('../identifiers');
    var o = $__require('../output/output_ast');
    function _enumExpression(classIdentifier, value) {
        if (lang_1.isBlank(value)) return o.NULL_EXPR;
        var name = lang_1.resolveEnumToken(classIdentifier.runtime, value);
        return o.importExpr(new compile_metadata_1.CompileIdentifierMetadata({
            name: classIdentifier.name + "." + name,
            moduleUrl: classIdentifier.moduleUrl,
            runtime: value
        }));
    }
    var ViewTypeEnum = function () {
        function ViewTypeEnum() {}
        ViewTypeEnum.fromValue = function (value) {
            return _enumExpression(identifiers_1.Identifiers.ViewType, value);
        };
        ViewTypeEnum.HOST = ViewTypeEnum.fromValue(core_private_1.ViewType.HOST);
        ViewTypeEnum.COMPONENT = ViewTypeEnum.fromValue(core_private_1.ViewType.COMPONENT);
        ViewTypeEnum.EMBEDDED = ViewTypeEnum.fromValue(core_private_1.ViewType.EMBEDDED);
        return ViewTypeEnum;
    }();
    exports.ViewTypeEnum = ViewTypeEnum;
    var ViewEncapsulationEnum = function () {
        function ViewEncapsulationEnum() {}
        ViewEncapsulationEnum.fromValue = function (value) {
            return _enumExpression(identifiers_1.Identifiers.ViewEncapsulation, value);
        };
        ViewEncapsulationEnum.Emulated = ViewEncapsulationEnum.fromValue(core_1.ViewEncapsulation.Emulated);
        ViewEncapsulationEnum.Native = ViewEncapsulationEnum.fromValue(core_1.ViewEncapsulation.Native);
        ViewEncapsulationEnum.None = ViewEncapsulationEnum.fromValue(core_1.ViewEncapsulation.None);
        return ViewEncapsulationEnum;
    }();
    exports.ViewEncapsulationEnum = ViewEncapsulationEnum;
    var ChangeDetectionStrategyEnum = function () {
        function ChangeDetectionStrategyEnum() {}
        ChangeDetectionStrategyEnum.fromValue = function (value) {
            return _enumExpression(identifiers_1.Identifiers.ChangeDetectionStrategy, value);
        };
        ChangeDetectionStrategyEnum.OnPush = ChangeDetectionStrategyEnum.fromValue(core_1.ChangeDetectionStrategy.OnPush);
        ChangeDetectionStrategyEnum.Default = ChangeDetectionStrategyEnum.fromValue(core_1.ChangeDetectionStrategy.Default);
        return ChangeDetectionStrategyEnum;
    }();
    exports.ChangeDetectionStrategyEnum = ChangeDetectionStrategyEnum;
    var ChangeDetectorStatusEnum = function () {
        function ChangeDetectorStatusEnum() {}
        ChangeDetectorStatusEnum.fromValue = function (value) {
            return _enumExpression(identifiers_1.Identifiers.ChangeDetectorStatus, value);
        };
        ChangeDetectorStatusEnum.CheckOnce = ChangeDetectorStatusEnum.fromValue(core_private_1.ChangeDetectorStatus.CheckOnce);
        ChangeDetectorStatusEnum.Checked = ChangeDetectorStatusEnum.fromValue(core_private_1.ChangeDetectorStatus.Checked);
        ChangeDetectorStatusEnum.CheckAlways = ChangeDetectorStatusEnum.fromValue(core_private_1.ChangeDetectorStatus.CheckAlways);
        ChangeDetectorStatusEnum.Detached = ChangeDetectorStatusEnum.fromValue(core_private_1.ChangeDetectorStatus.Detached);
        ChangeDetectorStatusEnum.Errored = ChangeDetectorStatusEnum.fromValue(core_private_1.ChangeDetectorStatus.Errored);
        ChangeDetectorStatusEnum.Destroyed = ChangeDetectorStatusEnum.fromValue(core_private_1.ChangeDetectorStatus.Destroyed);
        return ChangeDetectorStatusEnum;
    }();
    exports.ChangeDetectorStatusEnum = ChangeDetectorStatusEnum;
    var ViewConstructorVars = function () {
        function ViewConstructorVars() {}
        ViewConstructorVars.viewUtils = o.variable('viewUtils');
        ViewConstructorVars.parentInjector = o.variable('parentInjector');
        ViewConstructorVars.declarationEl = o.variable('declarationEl');
        return ViewConstructorVars;
    }();
    exports.ViewConstructorVars = ViewConstructorVars;
    var ViewProperties = function () {
        function ViewProperties() {}
        ViewProperties.renderer = o.THIS_EXPR.prop('renderer');
        ViewProperties.projectableNodes = o.THIS_EXPR.prop('projectableNodes');
        ViewProperties.viewUtils = o.THIS_EXPR.prop('viewUtils');
        return ViewProperties;
    }();
    exports.ViewProperties = ViewProperties;
    var EventHandlerVars = function () {
        function EventHandlerVars() {}
        EventHandlerVars.event = o.variable('$event');
        return EventHandlerVars;
    }();
    exports.EventHandlerVars = EventHandlerVars;
    var InjectMethodVars = function () {
        function InjectMethodVars() {}
        InjectMethodVars.token = o.variable('token');
        InjectMethodVars.requestNodeIndex = o.variable('requestNodeIndex');
        InjectMethodVars.notFoundResult = o.variable('notFoundResult');
        return InjectMethodVars;
    }();
    exports.InjectMethodVars = InjectMethodVars;
    var DetectChangesVars = function () {
        function DetectChangesVars() {}
        DetectChangesVars.throwOnChange = o.variable("throwOnChange");
        DetectChangesVars.changes = o.variable("changes");
        DetectChangesVars.changed = o.variable("changed");
        DetectChangesVars.valUnwrapper = o.variable("valUnwrapper");
        return DetectChangesVars;
    }();
    exports.DetectChangesVars = DetectChangesVars;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/compiler@2.0.0-rc.5/core_private.js", ["@angular/core"], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var core_1 = $__require("@angular/core");
  exports.isDefaultChangeDetectionStrategy = core_1.__core_private__.isDefaultChangeDetectionStrategy;
  exports.ChangeDetectorStatus = core_1.__core_private__.ChangeDetectorStatus;
  exports.CHANGE_DETECTION_STRATEGY_VALUES = core_1.__core_private__.CHANGE_DETECTION_STRATEGY_VALUES;
  exports.constructDependencies = core_1.__core_private__.constructDependencies;
  exports.LifecycleHooks = core_1.__core_private__.LifecycleHooks;
  exports.LIFECYCLE_HOOKS_VALUES = core_1.__core_private__.LIFECYCLE_HOOKS_VALUES;
  exports.ReflectorReader = core_1.__core_private__.ReflectorReader;
  exports.AppElement = core_1.__core_private__.AppElement;
  exports.CodegenComponentFactoryResolver = core_1.__core_private__.CodegenComponentFactoryResolver;
  exports.AppView = core_1.__core_private__.AppView;
  exports.DebugAppView = core_1.__core_private__.DebugAppView;
  exports.NgModuleInjector = core_1.__core_private__.NgModuleInjector;
  exports.ViewType = core_1.__core_private__.ViewType;
  exports.MAX_INTERPOLATION_VALUES = core_1.__core_private__.MAX_INTERPOLATION_VALUES;
  exports.checkBinding = core_1.__core_private__.checkBinding;
  exports.flattenNestedViewRenderNodes = core_1.__core_private__.flattenNestedViewRenderNodes;
  exports.interpolate = core_1.__core_private__.interpolate;
  exports.ViewUtils = core_1.__core_private__.ViewUtils;
  exports.VIEW_ENCAPSULATION_VALUES = core_1.__core_private__.VIEW_ENCAPSULATION_VALUES;
  exports.DebugContext = core_1.__core_private__.DebugContext;
  exports.StaticNodeDebugInfo = core_1.__core_private__.StaticNodeDebugInfo;
  exports.devModeEqual = core_1.__core_private__.devModeEqual;
  exports.UNINITIALIZED = core_1.__core_private__.UNINITIALIZED;
  exports.ValueUnwrapper = core_1.__core_private__.ValueUnwrapper;
  exports.TemplateRef_ = core_1.__core_private__.TemplateRef_;
  exports.RenderDebugInfo = core_1.__core_private__.RenderDebugInfo;
  exports.createProvider = core_1.__core_private__.createProvider;
  exports.isProviderLiteral = core_1.__core_private__.isProviderLiteral;
  exports.EMPTY_ARRAY = core_1.__core_private__.EMPTY_ARRAY;
  exports.EMPTY_MAP = core_1.__core_private__.EMPTY_MAP;
  exports.pureProxy1 = core_1.__core_private__.pureProxy1;
  exports.pureProxy2 = core_1.__core_private__.pureProxy2;
  exports.pureProxy3 = core_1.__core_private__.pureProxy3;
  exports.pureProxy4 = core_1.__core_private__.pureProxy4;
  exports.pureProxy5 = core_1.__core_private__.pureProxy5;
  exports.pureProxy6 = core_1.__core_private__.pureProxy6;
  exports.pureProxy7 = core_1.__core_private__.pureProxy7;
  exports.pureProxy8 = core_1.__core_private__.pureProxy8;
  exports.pureProxy9 = core_1.__core_private__.pureProxy9;
  exports.pureProxy10 = core_1.__core_private__.pureProxy10;
  exports.castByValue = core_1.__core_private__.castByValue;
  exports.Console = core_1.__core_private__.Console;
  exports.reflector = core_1.__core_private__.reflector;
  exports.Reflector = core_1.__core_private__.Reflector;
  exports.ReflectionCapabilities = core_1.__core_private__.ReflectionCapabilities;
  exports.NoOpAnimationPlayer = core_1.__core_private__.NoOpAnimationPlayer;
  exports.AnimationPlayer = core_1.__core_private__.AnimationPlayer;
  exports.AnimationSequencePlayer = core_1.__core_private__.AnimationSequencePlayer;
  exports.AnimationGroupPlayer = core_1.__core_private__.AnimationGroupPlayer;
  exports.AnimationKeyframe = core_1.__core_private__.AnimationKeyframe;
  exports.AnimationStyles = core_1.__core_private__.AnimationStyles;
  exports.ANY_STATE = core_1.__core_private__.ANY_STATE;
  exports.DEFAULT_STATE = core_1.__core_private__.DEFAULT_STATE;
  exports.EMPTY_STATE = core_1.__core_private__.EMPTY_STATE;
  exports.FILL_STYLE_FLAG = core_1.__core_private__.FILL_STYLE_FLAG;
  exports.prepareFinalAnimationStyles = core_1.__core_private__.prepareFinalAnimationStyles;
  exports.balanceAnimationKeyframes = core_1.__core_private__.balanceAnimationKeyframes;
  exports.flattenStyles = core_1.__core_private__.flattenStyles;
  exports.clearStyles = core_1.__core_private__.clearStyles;
  exports.collectAndResolveStyles = core_1.__core_private__.collectAndResolveStyles;
  exports.renderStyles = core_1.__core_private__.renderStyles;
  

  return module.exports;
});
System.registerDynamic("npm:@angular/compiler@2.0.0-rc.5/src/facade/base_wrapped_exception.js", ["reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * A base class for the WrappedException that can be used to identify
     * a WrappedException from ExceptionHandler without adding circular
     * dependency.
     */
    var BaseWrappedException = function (_super) {
        __extends(BaseWrappedException, _super);
        function BaseWrappedException(message) {
            _super.call(this, message);
        }
        Object.defineProperty(BaseWrappedException.prototype, "wrapperMessage", {
            get: function () {
                return '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseWrappedException.prototype, "wrapperStack", {
            get: function () {
                return null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseWrappedException.prototype, "originalException", {
            get: function () {
                return null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseWrappedException.prototype, "originalStack", {
            get: function () {
                return null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseWrappedException.prototype, "context", {
            get: function () {
                return null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseWrappedException.prototype, "message", {
            get: function () {
                return '';
            },
            enumerable: true,
            configurable: true
        });
        return BaseWrappedException;
    }(Error);
    exports.BaseWrappedException = BaseWrappedException;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/facade/exception_handler.js', ['./base_wrapped_exception', './collection', './lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var base_wrapped_exception_1 = $__require('./base_wrapped_exception');
    var collection_1 = $__require('./collection');
    var lang_1 = $__require('./lang');
    var _ArrayLogger = function () {
        function _ArrayLogger() {
            this.res = [];
        }
        _ArrayLogger.prototype.log = function (s) {
            this.res.push(s);
        };
        _ArrayLogger.prototype.logError = function (s) {
            this.res.push(s);
        };
        _ArrayLogger.prototype.logGroup = function (s) {
            this.res.push(s);
        };
        _ArrayLogger.prototype.logGroupEnd = function () {};
        ;
        return _ArrayLogger;
    }();
    /**
     * Provides a hook for centralized exception handling.
     *
     * The default implementation of `ExceptionHandler` prints error messages to the `Console`. To
     * intercept error handling,
     * write a custom exception handler that replaces this default as appropriate for your app.
     *
     * ### Example
     *
     * ```javascript
     *
     * class MyExceptionHandler implements ExceptionHandler {
     *   call(error, stackTrace = null, reason = null) {
     *     // do something with the exception
     *   }
     * }
     *
     * bootstrap(MyApp, [{provide: ExceptionHandler, useClass: MyExceptionHandler}])
     *
     * ```
     * @stable
     */
    var ExceptionHandler = function () {
        function ExceptionHandler(_logger, _rethrowException) {
            if (_rethrowException === void 0) {
                _rethrowException = true;
            }
            this._logger = _logger;
            this._rethrowException = _rethrowException;
        }
        ExceptionHandler.exceptionToString = function (exception, stackTrace, reason) {
            if (stackTrace === void 0) {
                stackTrace = null;
            }
            if (reason === void 0) {
                reason = null;
            }
            var l = new _ArrayLogger();
            var e = new ExceptionHandler(l, false);
            e.call(exception, stackTrace, reason);
            return l.res.join('\n');
        };
        ExceptionHandler.prototype.call = function (exception, stackTrace, reason) {
            if (stackTrace === void 0) {
                stackTrace = null;
            }
            if (reason === void 0) {
                reason = null;
            }
            var originalException = this._findOriginalException(exception);
            var originalStack = this._findOriginalStack(exception);
            var context = this._findContext(exception);
            this._logger.logGroup("EXCEPTION: " + this._extractMessage(exception));
            if (lang_1.isPresent(stackTrace) && lang_1.isBlank(originalStack)) {
                this._logger.logError('STACKTRACE:');
                this._logger.logError(this._longStackTrace(stackTrace));
            }
            if (lang_1.isPresent(reason)) {
                this._logger.logError("REASON: " + reason);
            }
            if (lang_1.isPresent(originalException)) {
                this._logger.logError("ORIGINAL EXCEPTION: " + this._extractMessage(originalException));
            }
            if (lang_1.isPresent(originalStack)) {
                this._logger.logError('ORIGINAL STACKTRACE:');
                this._logger.logError(this._longStackTrace(originalStack));
            }
            if (lang_1.isPresent(context)) {
                this._logger.logError('ERROR CONTEXT:');
                this._logger.logError(context);
            }
            this._logger.logGroupEnd();
            // We rethrow exceptions, so operations like 'bootstrap' will result in an error
            // when an exception happens. If we do not rethrow, bootstrap will always succeed.
            if (this._rethrowException) throw exception;
        };
        /** @internal */
        ExceptionHandler.prototype._extractMessage = function (exception) {
            return exception instanceof base_wrapped_exception_1.BaseWrappedException ? exception.wrapperMessage : exception.toString();
        };
        /** @internal */
        ExceptionHandler.prototype._longStackTrace = function (stackTrace) {
            return collection_1.isListLikeIterable(stackTrace) ? stackTrace.join('\n\n-----async gap-----\n') : stackTrace.toString();
        };
        /** @internal */
        ExceptionHandler.prototype._findContext = function (exception) {
            try {
                if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
                return lang_1.isPresent(exception.context) ? exception.context : this._findContext(exception.originalException);
            } catch (e) {
                // exception.context can throw an exception. if it happens, we ignore the context.
                return null;
            }
        };
        /** @internal */
        ExceptionHandler.prototype._findOriginalException = function (exception) {
            if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
            var e = exception.originalException;
            while (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
                e = e.originalException;
            }
            return e;
        };
        /** @internal */
        ExceptionHandler.prototype._findOriginalStack = function (exception) {
            if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
            var e = exception;
            var stack = exception.originalStack;
            while (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
                e = e.originalException;
                if (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
                    stack = e.originalStack;
                }
            }
            return stack;
        };
        return ExceptionHandler;
    }();
    exports.ExceptionHandler = ExceptionHandler;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/facade/exceptions.js', ['./base_wrapped_exception', './exception_handler', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var base_wrapped_exception_1 = $__require('./base_wrapped_exception');
    var exception_handler_1 = $__require('./exception_handler');
    var exception_handler_2 = $__require('./exception_handler');
    exports.ExceptionHandler = exception_handler_2.ExceptionHandler;
    /**
     * @stable
     */
    var BaseException = function (_super) {
        __extends(BaseException, _super);
        function BaseException(message) {
            if (message === void 0) {
                message = '--';
            }
            _super.call(this, message);
            this.message = message;
            this.stack = new Error(message).stack;
        }
        BaseException.prototype.toString = function () {
            return this.message;
        };
        return BaseException;
    }(Error);
    exports.BaseException = BaseException;
    /**
     * Wraps an exception and provides additional context or information.
     * @stable
     */
    var WrappedException = function (_super) {
        __extends(WrappedException, _super);
        function WrappedException(_wrapperMessage, _originalException /** TODO #9100 */, _originalStack /** TODO #9100 */, _context /** TODO #9100 */) {
            _super.call(this, _wrapperMessage);
            this._wrapperMessage = _wrapperMessage;
            this._originalException = _originalException;
            this._originalStack = _originalStack;
            this._context = _context;
            this._wrapperStack = new Error(_wrapperMessage).stack;
        }
        Object.defineProperty(WrappedException.prototype, "wrapperMessage", {
            get: function () {
                return this._wrapperMessage;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WrappedException.prototype, "wrapperStack", {
            get: function () {
                return this._wrapperStack;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WrappedException.prototype, "originalException", {
            get: function () {
                return this._originalException;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WrappedException.prototype, "originalStack", {
            get: function () {
                return this._originalStack;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WrappedException.prototype, "context", {
            get: function () {
                return this._context;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WrappedException.prototype, "message", {
            get: function () {
                return exception_handler_1.ExceptionHandler.exceptionToString(this);
            },
            enumerable: true,
            configurable: true
        });
        WrappedException.prototype.toString = function () {
            return this.message;
        };
        return WrappedException;
    }(base_wrapped_exception_1.BaseWrappedException);
    exports.WrappedException = WrappedException;
    function makeTypeError(message) {
        return new TypeError(message);
    }
    exports.makeTypeError = makeTypeError;
    function unimplemented() {
        throw new BaseException('unimplemented');
    }
    exports.unimplemented = unimplemented;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/selector.js', ['./facade/collection', './facade/exceptions', './facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var collection_1 = $__require('./facade/collection');
    var exceptions_1 = $__require('./facade/exceptions');
    var lang_1 = $__require('./facade/lang');
    var _EMPTY_ATTR_VALUE = '';
    var _SELECTOR_REGEXP = new RegExp('(\\:not\\()|' + '([-\\w]+)|' + '(?:\\.([-\\w]+))|' + '(?:\\[([-\\w*]+)(?:=([^\\]]*))?\\])|' + '(\\))|' + '(\\s*,\\s*)', // ","
    'g');
    /**
     * A css selector contains an element name,
     * css classes and attribute/value pairs with the purpose
     * of selecting subsets out of them.
     */
    var CssSelector = function () {
        function CssSelector() {
            this.element = null;
            this.classNames = [];
            this.attrs = [];
            this.notSelectors = [];
        }
        CssSelector.parse = function (selector) {
            var results = [];
            var _addResult = function (res, cssSel) {
                if (cssSel.notSelectors.length > 0 && lang_1.isBlank(cssSel.element) && collection_1.ListWrapper.isEmpty(cssSel.classNames) && collection_1.ListWrapper.isEmpty(cssSel.attrs)) {
                    cssSel.element = '*';
                }
                res.push(cssSel);
            };
            var cssSelector = new CssSelector();
            var match;
            var current = cssSelector;
            var inNot = false;
            _SELECTOR_REGEXP.lastIndex = 0;
            while (lang_1.isPresent(match = _SELECTOR_REGEXP.exec(selector))) {
                if (lang_1.isPresent(match[1])) {
                    if (inNot) {
                        throw new exceptions_1.BaseException('Nesting :not is not allowed in a selector');
                    }
                    inNot = true;
                    current = new CssSelector();
                    cssSelector.notSelectors.push(current);
                }
                if (lang_1.isPresent(match[2])) {
                    current.setElement(match[2]);
                }
                if (lang_1.isPresent(match[3])) {
                    current.addClassName(match[3]);
                }
                if (lang_1.isPresent(match[4])) {
                    current.addAttribute(match[4], match[5]);
                }
                if (lang_1.isPresent(match[6])) {
                    inNot = false;
                    current = cssSelector;
                }
                if (lang_1.isPresent(match[7])) {
                    if (inNot) {
                        throw new exceptions_1.BaseException('Multiple selectors in :not are not supported');
                    }
                    _addResult(results, cssSelector);
                    cssSelector = current = new CssSelector();
                }
            }
            _addResult(results, cssSelector);
            return results;
        };
        CssSelector.prototype.isElementSelector = function () {
            return lang_1.isPresent(this.element) && collection_1.ListWrapper.isEmpty(this.classNames) && collection_1.ListWrapper.isEmpty(this.attrs) && this.notSelectors.length === 0;
        };
        CssSelector.prototype.setElement = function (element) {
            if (element === void 0) {
                element = null;
            }
            this.element = element;
        };
        /** Gets a template string for an element that matches the selector. */
        CssSelector.prototype.getMatchingElementTemplate = function () {
            var tagName = lang_1.isPresent(this.element) ? this.element : 'div';
            var classAttr = this.classNames.length > 0 ? " class=\"" + this.classNames.join(' ') + "\"" : '';
            var attrs = '';
            for (var i = 0; i < this.attrs.length; i += 2) {
                var attrName = this.attrs[i];
                var attrValue = this.attrs[i + 1] !== '' ? "=\"" + this.attrs[i + 1] + "\"" : '';
                attrs += " " + attrName + attrValue;
            }
            return "<" + tagName + classAttr + attrs + "></" + tagName + ">";
        };
        CssSelector.prototype.addAttribute = function (name, value) {
            if (value === void 0) {
                value = _EMPTY_ATTR_VALUE;
            }
            this.attrs.push(name);
            if (lang_1.isPresent(value)) {
                value = value.toLowerCase();
            } else {
                value = _EMPTY_ATTR_VALUE;
            }
            this.attrs.push(value);
        };
        CssSelector.prototype.addClassName = function (name) {
            this.classNames.push(name.toLowerCase());
        };
        CssSelector.prototype.toString = function () {
            var res = '';
            if (lang_1.isPresent(this.element)) {
                res += this.element;
            }
            if (lang_1.isPresent(this.classNames)) {
                for (var i = 0; i < this.classNames.length; i++) {
                    res += '.' + this.classNames[i];
                }
            }
            if (lang_1.isPresent(this.attrs)) {
                for (var i = 0; i < this.attrs.length;) {
                    var attrName = this.attrs[i++];
                    var attrValue = this.attrs[i++];
                    res += '[' + attrName;
                    if (attrValue.length > 0) {
                        res += '=' + attrValue;
                    }
                    res += ']';
                }
            }
            this.notSelectors.forEach(function (notSelector) {
                return res += ":not(" + notSelector + ")";
            });
            return res;
        };
        return CssSelector;
    }();
    exports.CssSelector = CssSelector;
    /**
     * Reads a list of CssSelectors and allows to calculate which ones
     * are contained in a given CssSelector.
     */
    var SelectorMatcher = function () {
        function SelectorMatcher() {
            this._elementMap = new Map();
            this._elementPartialMap = new Map();
            this._classMap = new Map();
            this._classPartialMap = new Map();
            this._attrValueMap = new Map();
            this._attrValuePartialMap = new Map();
            this._listContexts = [];
        }
        SelectorMatcher.createNotMatcher = function (notSelectors) {
            var notMatcher = new SelectorMatcher();
            notMatcher.addSelectables(notSelectors, null);
            return notMatcher;
        };
        SelectorMatcher.prototype.addSelectables = function (cssSelectors, callbackCtxt) {
            var listContext = null;
            if (cssSelectors.length > 1) {
                listContext = new SelectorListContext(cssSelectors);
                this._listContexts.push(listContext);
            }
            for (var i = 0; i < cssSelectors.length; i++) {
                this._addSelectable(cssSelectors[i], callbackCtxt, listContext);
            }
        };
        /**
         * Add an object that can be found later on by calling `match`.
         * @param cssSelector A css selector
         * @param callbackCtxt An opaque object that will be given to the callback of the `match` function
         */
        SelectorMatcher.prototype._addSelectable = function (cssSelector, callbackCtxt, listContext) {
            var matcher = this;
            var element = cssSelector.element;
            var classNames = cssSelector.classNames;
            var attrs = cssSelector.attrs;
            var selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);
            if (lang_1.isPresent(element)) {
                var isTerminal = attrs.length === 0 && classNames.length === 0;
                if (isTerminal) {
                    this._addTerminal(matcher._elementMap, element, selectable);
                } else {
                    matcher = this._addPartial(matcher._elementPartialMap, element);
                }
            }
            if (lang_1.isPresent(classNames)) {
                for (var index = 0; index < classNames.length; index++) {
                    var isTerminal = attrs.length === 0 && index === classNames.length - 1;
                    var className = classNames[index];
                    if (isTerminal) {
                        this._addTerminal(matcher._classMap, className, selectable);
                    } else {
                        matcher = this._addPartial(matcher._classPartialMap, className);
                    }
                }
            }
            if (lang_1.isPresent(attrs)) {
                for (var index = 0; index < attrs.length;) {
                    var isTerminal = index === attrs.length - 2;
                    var attrName = attrs[index++];
                    var attrValue = attrs[index++];
                    if (isTerminal) {
                        var terminalMap = matcher._attrValueMap;
                        var terminalValuesMap = terminalMap.get(attrName);
                        if (lang_1.isBlank(terminalValuesMap)) {
                            terminalValuesMap = new Map();
                            terminalMap.set(attrName, terminalValuesMap);
                        }
                        this._addTerminal(terminalValuesMap, attrValue, selectable);
                    } else {
                        var parttialMap = matcher._attrValuePartialMap;
                        var partialValuesMap = parttialMap.get(attrName);
                        if (lang_1.isBlank(partialValuesMap)) {
                            partialValuesMap = new Map();
                            parttialMap.set(attrName, partialValuesMap);
                        }
                        matcher = this._addPartial(partialValuesMap, attrValue);
                    }
                }
            }
        };
        SelectorMatcher.prototype._addTerminal = function (map, name, selectable) {
            var terminalList = map.get(name);
            if (lang_1.isBlank(terminalList)) {
                terminalList = [];
                map.set(name, terminalList);
            }
            terminalList.push(selectable);
        };
        SelectorMatcher.prototype._addPartial = function (map, name) {
            var matcher = map.get(name);
            if (lang_1.isBlank(matcher)) {
                matcher = new SelectorMatcher();
                map.set(name, matcher);
            }
            return matcher;
        };
        /**
         * Find the objects that have been added via `addSelectable`
         * whose css selector is contained in the given css selector.
         * @param cssSelector A css selector
         * @param matchedCallback This callback will be called with the object handed into `addSelectable`
         * @return boolean true if a match was found
        */
        SelectorMatcher.prototype.match = function (cssSelector, matchedCallback) {
            var result = false;
            var element = cssSelector.element;
            var classNames = cssSelector.classNames;
            var attrs = cssSelector.attrs;
            for (var i = 0; i < this._listContexts.length; i++) {
                this._listContexts[i].alreadyMatched = false;
            }
            result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;
            result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) || result;
            if (lang_1.isPresent(classNames)) {
                for (var index = 0; index < classNames.length; index++) {
                    var className = classNames[index];
                    result = this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;
                    result = this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) || result;
                }
            }
            if (lang_1.isPresent(attrs)) {
                for (var index = 0; index < attrs.length;) {
                    var attrName = attrs[index++];
                    var attrValue = attrs[index++];
                    var terminalValuesMap = this._attrValueMap.get(attrName);
                    if (!lang_1.StringWrapper.equals(attrValue, _EMPTY_ATTR_VALUE)) {
                        result = this._matchTerminal(terminalValuesMap, _EMPTY_ATTR_VALUE, cssSelector, matchedCallback) || result;
                    }
                    result = this._matchTerminal(terminalValuesMap, attrValue, cssSelector, matchedCallback) || result;
                    var partialValuesMap = this._attrValuePartialMap.get(attrName);
                    if (!lang_1.StringWrapper.equals(attrValue, _EMPTY_ATTR_VALUE)) {
                        result = this._matchPartial(partialValuesMap, _EMPTY_ATTR_VALUE, cssSelector, matchedCallback) || result;
                    }
                    result = this._matchPartial(partialValuesMap, attrValue, cssSelector, matchedCallback) || result;
                }
            }
            return result;
        };
        /** @internal */
        SelectorMatcher.prototype._matchTerminal = function (map, name, cssSelector, matchedCallback) {
            if (lang_1.isBlank(map) || lang_1.isBlank(name)) {
                return false;
            }
            var selectables = map.get(name);
            var starSelectables = map.get('*');
            if (lang_1.isPresent(starSelectables)) {
                selectables = selectables.concat(starSelectables);
            }
            if (lang_1.isBlank(selectables)) {
                return false;
            }
            var selectable;
            var result = false;
            for (var index = 0; index < selectables.length; index++) {
                selectable = selectables[index];
                result = selectable.finalize(cssSelector, matchedCallback) || result;
            }
            return result;
        };
        /** @internal */
        SelectorMatcher.prototype._matchPartial = function (map, name, cssSelector, matchedCallback) {
            if (lang_1.isBlank(map) || lang_1.isBlank(name)) {
                return false;
            }
            var nestedSelector = map.get(name);
            if (lang_1.isBlank(nestedSelector)) {
                return false;
            }
            // TODO(perf): get rid of recursion and measure again
            // TODO(perf): don't pass the whole selector into the recursion,
            // but only the not processed parts
            return nestedSelector.match(cssSelector, matchedCallback);
        };
        return SelectorMatcher;
    }();
    exports.SelectorMatcher = SelectorMatcher;
    var SelectorListContext = function () {
        function SelectorListContext(selectors) {
            this.selectors = selectors;
            this.alreadyMatched = false;
        }
        return SelectorListContext;
    }();
    exports.SelectorListContext = SelectorListContext;
    // Store context to pass back selector and context when a selector is matched
    var SelectorContext = function () {
        function SelectorContext(selector, cbContext, listContext) {
            this.selector = selector;
            this.cbContext = cbContext;
            this.listContext = listContext;
            this.notSelectors = selector.notSelectors;
        }
        SelectorContext.prototype.finalize = function (cssSelector, callback) {
            var result = true;
            if (this.notSelectors.length > 0 && (lang_1.isBlank(this.listContext) || !this.listContext.alreadyMatched)) {
                var notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);
                result = !notMatcher.match(cssSelector, null);
            }
            if (result && lang_1.isPresent(callback) && (lang_1.isBlank(this.listContext) || !this.listContext.alreadyMatched)) {
                if (lang_1.isPresent(this.listContext)) {
                    this.listContext.alreadyMatched = true;
                }
                callback(this.selector, this.cbContext);
            }
            return result;
        };
        return SelectorContext;
    }();
    exports.SelectorContext = SelectorContext;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/url_resolver.js', ['@angular/core', './facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var lang_1 = $__require('./facade/lang');
    var _ASSET_SCHEME = 'asset:';
    /**
     * Create a {@link UrlResolver} with no package prefix.
     */
    function createUrlResolverWithoutPackagePrefix() {
        return new UrlResolver();
    }
    exports.createUrlResolverWithoutPackagePrefix = createUrlResolverWithoutPackagePrefix;
    function createOfflineCompileUrlResolver() {
        return new UrlResolver(_ASSET_SCHEME);
    }
    exports.createOfflineCompileUrlResolver = createOfflineCompileUrlResolver;
    /**
     * A default provider for {@link PACKAGE_ROOT_URL} that maps to '/'.
     */
    exports.DEFAULT_PACKAGE_URL_PROVIDER = {
        provide: core_1.PACKAGE_ROOT_URL,
        useValue: '/'
    };
    var UrlResolver = function () {
        function UrlResolver(_packagePrefix) {
            if (_packagePrefix === void 0) {
                _packagePrefix = null;
            }
            this._packagePrefix = _packagePrefix;
        }
        /**
         * Resolves the `url` given the `baseUrl`:
         * - when the `url` is null, the `baseUrl` is returned,
         * - if `url` is relative ('path/to/here', './path/to/here'), the resolved url is a combination of
         * `baseUrl` and `url`,
         * - if `url` is absolute (it has a scheme: 'http://', 'https://' or start with '/'), the `url` is
         * returned as is (ignoring the `baseUrl`)
         */
        UrlResolver.prototype.resolve = function (baseUrl, url) {
            var resolvedUrl = url;
            if (lang_1.isPresent(baseUrl) && baseUrl.length > 0) {
                resolvedUrl = _resolveUrl(baseUrl, resolvedUrl);
            }
            var resolvedParts = _split(resolvedUrl);
            var prefix = this._packagePrefix;
            if (lang_1.isPresent(prefix) && lang_1.isPresent(resolvedParts) && resolvedParts[_ComponentIndex.Scheme] == 'package') {
                var path = resolvedParts[_ComponentIndex.Path];
                if (this._packagePrefix === _ASSET_SCHEME) {
                    var pathSegements = path.split(/\//);
                    resolvedUrl = "asset:" + pathSegements[0] + "/lib/" + pathSegements.slice(1).join('/');
                } else {
                    prefix = lang_1.StringWrapper.stripRight(prefix, '/');
                    path = lang_1.StringWrapper.stripLeft(path, '/');
                    return prefix + "/" + path;
                }
            }
            return resolvedUrl;
        };
        /** @nocollapse */
        UrlResolver.decorators = [{ type: core_1.Injectable }];
        /** @nocollapse */
        UrlResolver.ctorParameters = [{ type: undefined, decorators: [{ type: core_1.Inject, args: [core_1.PACKAGE_ROOT_URL] }] }];
        return UrlResolver;
    }();
    exports.UrlResolver = UrlResolver;
    /**
     * Extract the scheme of a URL.
     */
    function getUrlScheme(url) {
        var match = _split(url);
        return match && match[_ComponentIndex.Scheme] || '';
    }
    exports.getUrlScheme = getUrlScheme;
    // The code below is adapted from Traceur:
    // https://github.com/google/traceur-compiler/blob/9511c1dafa972bf0de1202a8a863bad02f0f95a8/src/runtime/url.js
    /**
     * Builds a URI string from already-encoded parts.
     *
     * No encoding is performed.  Any component may be omitted as either null or
     * undefined.
     *
     * @param opt_scheme The scheme such as 'http'.
     * @param opt_userInfo The user name before the '@'.
     * @param opt_domain The domain such as 'www.google.com', already
     *     URI-encoded.
     * @param opt_port The port number.
     * @param opt_path The path, already URI-encoded.  If it is not
     *     empty, it must begin with a slash.
     * @param opt_queryData The URI-encoded query data.
     * @param opt_fragment The URI-encoded fragment identifier.
     * @return The fully combined URI.
     */
    function _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
        var out = [];
        if (lang_1.isPresent(opt_scheme)) {
            out.push(opt_scheme + ':');
        }
        if (lang_1.isPresent(opt_domain)) {
            out.push('//');
            if (lang_1.isPresent(opt_userInfo)) {
                out.push(opt_userInfo + '@');
            }
            out.push(opt_domain);
            if (lang_1.isPresent(opt_port)) {
                out.push(':' + opt_port);
            }
        }
        if (lang_1.isPresent(opt_path)) {
            out.push(opt_path);
        }
        if (lang_1.isPresent(opt_queryData)) {
            out.push('?' + opt_queryData);
        }
        if (lang_1.isPresent(opt_fragment)) {
            out.push('#' + opt_fragment);
        }
        return out.join('');
    }
    /**
     * A regular expression for breaking a URI into its component parts.
     *
     * {@link http://www.gbiv.com/protocols/uri/rfc/rfc3986.html#RFC2234} says
     * As the "first-match-wins" algorithm is identical to the "greedy"
     * disambiguation method used by POSIX regular expressions, it is natural and
     * commonplace to use a regular expression for parsing the potential five
     * components of a URI reference.
     *
     * The following line is the regular expression for breaking-down a
     * well-formed URI reference into its components.
     *
     * <pre>
     * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?
     *  12            3  4          5       6  7        8 9
     * </pre>
     *
     * The numbers in the second line above are only to assist readability; they
     * indicate the reference points for each subexpression (i.e., each paired
     * parenthesis). We refer to the value matched for subexpression <n> as $<n>.
     * For example, matching the above expression to
     * <pre>
     *     http://www.ics.uci.edu/pub/ietf/uri/#Related
     * </pre>
     * results in the following subexpression matches:
     * <pre>
     *    $1 = http:
     *    $2 = http
     *    $3 = //www.ics.uci.edu
     *    $4 = www.ics.uci.edu
     *    $5 = /pub/ietf/uri/
     *    $6 = <undefined>
     *    $7 = <undefined>
     *    $8 = #Related
     *    $9 = Related
     * </pre>
     * where <undefined> indicates that the component is not present, as is the
     * case for the query component in the above example. Therefore, we can
     * determine the value of the five components as
     * <pre>
     *    scheme    = $2
     *    authority = $4
     *    path      = $5
     *    query     = $7
     *    fragment  = $9
     * </pre>
     *
     * The regular expression has been modified slightly to expose the
     * userInfo, domain, and port separately from the authority.
     * The modified version yields
     * <pre>
     *    $1 = http              scheme
     *    $2 = <undefined>       userInfo -\
     *    $3 = www.ics.uci.edu   domain     | authority
     *    $4 = <undefined>       port     -/
     *    $5 = /pub/ietf/uri/    path
     *    $6 = <undefined>       query without ?
     *    $7 = Related           fragment without #
     * </pre>
     * @type {!RegExp}
     * @internal
     */
    var _splitRe = new RegExp('^' + '(?:' + '([^:/?#.]+)' +
    // used by other URL parts such as :,
    // ?, /, #, and .
    ':)?' + '(?://' + '(?:([^/?#]*)@)?' + '([\\w\\d\\-\\u0100-\\uffff.%]*)' +
    // digits, dashes, dots, percent
    // escapes, and unicode characters.
    '(?::([0-9]+))?' + ')?' + '([^?#]+)?' + '(?:\\?([^#]*))?' + '(?:#(.*))?' + '$');
    /**
     * The index of each URI component in the return value of goog.uri.utils.split.
     * @enum {number}
     */
    var _ComponentIndex;
    (function (_ComponentIndex) {
        _ComponentIndex[_ComponentIndex["Scheme"] = 1] = "Scheme";
        _ComponentIndex[_ComponentIndex["UserInfo"] = 2] = "UserInfo";
        _ComponentIndex[_ComponentIndex["Domain"] = 3] = "Domain";
        _ComponentIndex[_ComponentIndex["Port"] = 4] = "Port";
        _ComponentIndex[_ComponentIndex["Path"] = 5] = "Path";
        _ComponentIndex[_ComponentIndex["QueryData"] = 6] = "QueryData";
        _ComponentIndex[_ComponentIndex["Fragment"] = 7] = "Fragment";
    })(_ComponentIndex || (_ComponentIndex = {}));
    /**
     * Splits a URI into its component parts.
     *
     * Each component can be accessed via the component indices; for example:
     * <pre>
     * goog.uri.utils.split(someStr)[goog.uri.utils.CompontentIndex.QUERY_DATA];
     * </pre>
     *
     * @param uri The URI string to examine.
     * @return Each component still URI-encoded.
     *     Each component that is present will contain the encoded value, whereas
     *     components that are not present will be undefined or empty, depending
     *     on the browser's regular expression implementation.  Never null, since
     *     arbitrary strings may still look like path names.
     */
    function _split(uri) {
        return uri.match(_splitRe);
    }
    /**
      * Removes dot segments in given path component, as described in
      * RFC 3986, section 5.2.4.
      *
      * @param path A non-empty path component.
      * @return Path component with removed dot segments.
      */
    function _removeDotSegments(path) {
        if (path == '/') return '/';
        var leadingSlash = path[0] == '/' ? '/' : '';
        var trailingSlash = path[path.length - 1] === '/' ? '/' : '';
        var segments = path.split('/');
        var out = [];
        var up = 0;
        for (var pos = 0; pos < segments.length; pos++) {
            var segment = segments[pos];
            switch (segment) {
                case '':
                case '.':
                    break;
                case '..':
                    if (out.length > 0) {
                        out.pop();
                    } else {
                        up++;
                    }
                    break;
                default:
                    out.push(segment);
            }
        }
        if (leadingSlash == '') {
            while (up-- > 0) {
                out.unshift('..');
            }
            if (out.length === 0) out.push('.');
        }
        return leadingSlash + out.join('/') + trailingSlash;
    }
    /**
     * Takes an array of the parts from split and canonicalizes the path part
     * and then joins all the parts.
     */
    function _joinAndCanonicalizePath(parts) {
        var path = parts[_ComponentIndex.Path];
        path = lang_1.isBlank(path) ? '' : _removeDotSegments(path);
        parts[_ComponentIndex.Path] = path;
        return _buildFromEncodedParts(parts[_ComponentIndex.Scheme], parts[_ComponentIndex.UserInfo], parts[_ComponentIndex.Domain], parts[_ComponentIndex.Port], path, parts[_ComponentIndex.QueryData], parts[_ComponentIndex.Fragment]);
    }
    /**
     * Resolves a URL.
     * @param base The URL acting as the base URL.
     * @param to The URL to resolve.
     */
    function _resolveUrl(base, url) {
        var parts = _split(encodeURI(url));
        var baseParts = _split(base);
        if (lang_1.isPresent(parts[_ComponentIndex.Scheme])) {
            return _joinAndCanonicalizePath(parts);
        } else {
            parts[_ComponentIndex.Scheme] = baseParts[_ComponentIndex.Scheme];
        }
        for (var i = _ComponentIndex.Scheme; i <= _ComponentIndex.Port; i++) {
            if (lang_1.isBlank(parts[i])) {
                parts[i] = baseParts[i];
            }
        }
        if (parts[_ComponentIndex.Path][0] == '/') {
            return _joinAndCanonicalizePath(parts);
        }
        var path = baseParts[_ComponentIndex.Path];
        if (lang_1.isBlank(path)) path = '/';
        var index = path.lastIndexOf('/');
        path = path.substring(0, index + 1) + parts[_ComponentIndex.Path];
        parts[_ComponentIndex.Path] = path;
        return _joinAndCanonicalizePath(parts);
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/compile_metadata.js', ['@angular/core', '../core_private', './facade/collection', './facade/exceptions', './facade/lang', './selector', './url_resolver', './util', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var core_1 = $__require('@angular/core');
    var core_private_1 = $__require('../core_private');
    var collection_1 = $__require('./facade/collection');
    var exceptions_1 = $__require('./facade/exceptions');
    var lang_1 = $__require('./facade/lang');
    var selector_1 = $__require('./selector');
    var url_resolver_1 = $__require('./url_resolver');
    var util_1 = $__require('./util');
    // group 0: "[prop] or (event) or @trigger"
    // group 1: "prop" from "[prop]"
    // group 2: "event" from "(event)"
    // group 3: "@trigger" from "@trigger"
    var HOST_REG_EXP = /^(?:(?:\[([^\]]+)\])|(?:\(([^\)]+)\)))|(\@[-\w]+)$/;
    var UNDEFINED = new Object();
    var CompileMetadataWithIdentifier = function () {
        function CompileMetadataWithIdentifier() {}
        Object.defineProperty(CompileMetadataWithIdentifier.prototype, "identifier", {
            get: function () {
                return exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CompileMetadataWithIdentifier.prototype, "runtimeCacheKey", {
            get: function () {
                return exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CompileMetadataWithIdentifier.prototype, "assetCacheKey", {
            get: function () {
                return exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        CompileMetadataWithIdentifier.prototype.equalsTo = function (id2) {
            return exceptions_1.unimplemented();
        };
        return CompileMetadataWithIdentifier;
    }();
    exports.CompileMetadataWithIdentifier = CompileMetadataWithIdentifier;
    var CompileAnimationEntryMetadata = function () {
        function CompileAnimationEntryMetadata(name, definitions) {
            if (name === void 0) {
                name = null;
            }
            if (definitions === void 0) {
                definitions = null;
            }
            this.name = name;
            this.definitions = definitions;
        }
        return CompileAnimationEntryMetadata;
    }();
    exports.CompileAnimationEntryMetadata = CompileAnimationEntryMetadata;
    var CompileAnimationStateMetadata = function () {
        function CompileAnimationStateMetadata() {}
        return CompileAnimationStateMetadata;
    }();
    exports.CompileAnimationStateMetadata = CompileAnimationStateMetadata;
    var CompileAnimationStateDeclarationMetadata = function (_super) {
        __extends(CompileAnimationStateDeclarationMetadata, _super);
        function CompileAnimationStateDeclarationMetadata(stateNameExpr, styles) {
            _super.call(this);
            this.stateNameExpr = stateNameExpr;
            this.styles = styles;
        }
        return CompileAnimationStateDeclarationMetadata;
    }(CompileAnimationStateMetadata);
    exports.CompileAnimationStateDeclarationMetadata = CompileAnimationStateDeclarationMetadata;
    var CompileAnimationStateTransitionMetadata = function (_super) {
        __extends(CompileAnimationStateTransitionMetadata, _super);
        function CompileAnimationStateTransitionMetadata(stateChangeExpr, steps) {
            _super.call(this);
            this.stateChangeExpr = stateChangeExpr;
            this.steps = steps;
        }
        return CompileAnimationStateTransitionMetadata;
    }(CompileAnimationStateMetadata);
    exports.CompileAnimationStateTransitionMetadata = CompileAnimationStateTransitionMetadata;
    var CompileAnimationMetadata = function () {
        function CompileAnimationMetadata() {}
        return CompileAnimationMetadata;
    }();
    exports.CompileAnimationMetadata = CompileAnimationMetadata;
    var CompileAnimationKeyframesSequenceMetadata = function (_super) {
        __extends(CompileAnimationKeyframesSequenceMetadata, _super);
        function CompileAnimationKeyframesSequenceMetadata(steps) {
            if (steps === void 0) {
                steps = [];
            }
            _super.call(this);
            this.steps = steps;
        }
        return CompileAnimationKeyframesSequenceMetadata;
    }(CompileAnimationMetadata);
    exports.CompileAnimationKeyframesSequenceMetadata = CompileAnimationKeyframesSequenceMetadata;
    var CompileAnimationStyleMetadata = function (_super) {
        __extends(CompileAnimationStyleMetadata, _super);
        function CompileAnimationStyleMetadata(offset, styles) {
            if (styles === void 0) {
                styles = null;
            }
            _super.call(this);
            this.offset = offset;
            this.styles = styles;
        }
        return CompileAnimationStyleMetadata;
    }(CompileAnimationMetadata);
    exports.CompileAnimationStyleMetadata = CompileAnimationStyleMetadata;
    var CompileAnimationAnimateMetadata = function (_super) {
        __extends(CompileAnimationAnimateMetadata, _super);
        function CompileAnimationAnimateMetadata(timings, styles) {
            if (timings === void 0) {
                timings = 0;
            }
            if (styles === void 0) {
                styles = null;
            }
            _super.call(this);
            this.timings = timings;
            this.styles = styles;
        }
        return CompileAnimationAnimateMetadata;
    }(CompileAnimationMetadata);
    exports.CompileAnimationAnimateMetadata = CompileAnimationAnimateMetadata;
    var CompileAnimationWithStepsMetadata = function (_super) {
        __extends(CompileAnimationWithStepsMetadata, _super);
        function CompileAnimationWithStepsMetadata(steps) {
            if (steps === void 0) {
                steps = null;
            }
            _super.call(this);
            this.steps = steps;
        }
        return CompileAnimationWithStepsMetadata;
    }(CompileAnimationMetadata);
    exports.CompileAnimationWithStepsMetadata = CompileAnimationWithStepsMetadata;
    var CompileAnimationSequenceMetadata = function (_super) {
        __extends(CompileAnimationSequenceMetadata, _super);
        function CompileAnimationSequenceMetadata(steps) {
            if (steps === void 0) {
                steps = null;
            }
            _super.call(this, steps);
        }
        return CompileAnimationSequenceMetadata;
    }(CompileAnimationWithStepsMetadata);
    exports.CompileAnimationSequenceMetadata = CompileAnimationSequenceMetadata;
    var CompileAnimationGroupMetadata = function (_super) {
        __extends(CompileAnimationGroupMetadata, _super);
        function CompileAnimationGroupMetadata(steps) {
            if (steps === void 0) {
                steps = null;
            }
            _super.call(this, steps);
        }
        return CompileAnimationGroupMetadata;
    }(CompileAnimationWithStepsMetadata);
    exports.CompileAnimationGroupMetadata = CompileAnimationGroupMetadata;
    var CompileIdentifierMetadata = function () {
        function CompileIdentifierMetadata(_a) {
            var _b = _a === void 0 ? {} : _a,
                runtime = _b.runtime,
                name = _b.name,
                moduleUrl = _b.moduleUrl,
                prefix = _b.prefix,
                value = _b.value;
            this._assetCacheKey = UNDEFINED;
            this.runtime = runtime;
            this.name = name;
            this.prefix = prefix;
            this.moduleUrl = moduleUrl;
            this.value = value;
        }
        Object.defineProperty(CompileIdentifierMetadata.prototype, "identifier", {
            get: function () {
                return this;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CompileIdentifierMetadata.prototype, "runtimeCacheKey", {
            get: function () {
                return this.identifier.runtime;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CompileIdentifierMetadata.prototype, "assetCacheKey", {
            get: function () {
                if (this._assetCacheKey === UNDEFINED) {
                    if (lang_1.isPresent(this.moduleUrl) && lang_1.isPresent(url_resolver_1.getUrlScheme(this.moduleUrl))) {
                        var uri = core_private_1.reflector.importUri({ 'filePath': this.moduleUrl, 'name': this.name });
                        this._assetCacheKey = this.name + "|" + uri;
                    } else {
                        this._assetCacheKey = null;
                    }
                }
                return this._assetCacheKey;
            },
            enumerable: true,
            configurable: true
        });
        CompileIdentifierMetadata.prototype.equalsTo = function (id2) {
            var rk = this.runtimeCacheKey;
            var ak = this.assetCacheKey;
            return lang_1.isPresent(rk) && rk == id2.runtimeCacheKey || lang_1.isPresent(ak) && ak == id2.assetCacheKey;
        };
        return CompileIdentifierMetadata;
    }();
    exports.CompileIdentifierMetadata = CompileIdentifierMetadata;
    var CompileDiDependencyMetadata = function () {
        function CompileDiDependencyMetadata(_a) {
            var _b = _a === void 0 ? {} : _a,
                isAttribute = _b.isAttribute,
                isSelf = _b.isSelf,
                isHost = _b.isHost,
                isSkipSelf = _b.isSkipSelf,
                isOptional = _b.isOptional,
                isValue = _b.isValue,
                query = _b.query,
                viewQuery = _b.viewQuery,
                token = _b.token,
                value = _b.value;
            this.isAttribute = lang_1.normalizeBool(isAttribute);
            this.isSelf = lang_1.normalizeBool(isSelf);
            this.isHost = lang_1.normalizeBool(isHost);
            this.isSkipSelf = lang_1.normalizeBool(isSkipSelf);
            this.isOptional = lang_1.normalizeBool(isOptional);
            this.isValue = lang_1.normalizeBool(isValue);
            this.query = query;
            this.viewQuery = viewQuery;
            this.token = token;
            this.value = value;
        }
        return CompileDiDependencyMetadata;
    }();
    exports.CompileDiDependencyMetadata = CompileDiDependencyMetadata;
    var CompileProviderMetadata = function () {
        function CompileProviderMetadata(_a) {
            var token = _a.token,
                useClass = _a.useClass,
                useValue = _a.useValue,
                useExisting = _a.useExisting,
                useFactory = _a.useFactory,
                deps = _a.deps,
                multi = _a.multi;
            this.token = token;
            this.useClass = useClass;
            this.useValue = useValue;
            this.useExisting = useExisting;
            this.useFactory = useFactory;
            this.deps = lang_1.normalizeBlank(deps);
            this.multi = lang_1.normalizeBool(multi);
        }
        return CompileProviderMetadata;
    }();
    exports.CompileProviderMetadata = CompileProviderMetadata;
    var CompileFactoryMetadata = function (_super) {
        __extends(CompileFactoryMetadata, _super);
        function CompileFactoryMetadata(_a) {
            var runtime = _a.runtime,
                name = _a.name,
                moduleUrl = _a.moduleUrl,
                prefix = _a.prefix,
                diDeps = _a.diDeps,
                value = _a.value;
            _super.call(this, { runtime: runtime, name: name, prefix: prefix, moduleUrl: moduleUrl, value: value });
            this.diDeps = _normalizeArray(diDeps);
        }
        return CompileFactoryMetadata;
    }(CompileIdentifierMetadata);
    exports.CompileFactoryMetadata = CompileFactoryMetadata;
    var CompileTokenMetadata = function () {
        function CompileTokenMetadata(_a) {
            var value = _a.value,
                identifier = _a.identifier,
                identifierIsInstance = _a.identifierIsInstance;
            this.value = value;
            this.identifier = identifier;
            this.identifierIsInstance = lang_1.normalizeBool(identifierIsInstance);
        }
        Object.defineProperty(CompileTokenMetadata.prototype, "runtimeCacheKey", {
            get: function () {
                if (lang_1.isPresent(this.identifier)) {
                    return this.identifier.runtimeCacheKey;
                } else {
                    return this.value;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CompileTokenMetadata.prototype, "assetCacheKey", {
            get: function () {
                if (lang_1.isPresent(this.identifier)) {
                    return this.identifier.assetCacheKey;
                } else {
                    return this.value;
                }
            },
            enumerable: true,
            configurable: true
        });
        CompileTokenMetadata.prototype.equalsTo = function (token2) {
            var rk = this.runtimeCacheKey;
            var ak = this.assetCacheKey;
            return lang_1.isPresent(rk) && rk == token2.runtimeCacheKey || lang_1.isPresent(ak) && ak == token2.assetCacheKey;
        };
        Object.defineProperty(CompileTokenMetadata.prototype, "name", {
            get: function () {
                return lang_1.isPresent(this.value) ? util_1.sanitizeIdentifier(this.value) : this.identifier.name;
            },
            enumerable: true,
            configurable: true
        });
        return CompileTokenMetadata;
    }();
    exports.CompileTokenMetadata = CompileTokenMetadata;
    /**
     * Note: We only need this in places where we need to support identifiers that
     * don't have a `runtime` value given by the `StaticReflector`. E.g. see the `identifiers`
     * file where we have some identifiers hard coded by name/module path.
     *
     * TODO(tbosch): Eventually, all of these places should go through the static reflector
     * as well, providing them with a valid `StaticSymbol` that is again a singleton.
     */
    var CompileIdentifierMap = function () {
        function CompileIdentifierMap() {
            this._valueMap = new Map();
            this._values = [];
            this._tokens = [];
        }
        CompileIdentifierMap.prototype.add = function (token, value) {
            var existing = this.get(token);
            if (lang_1.isPresent(existing)) {
                throw new exceptions_1.BaseException("Cannot overwrite in a CompileIdentifierMap! Token: " + token.identifier.name);
            }
            this._tokens.push(token);
            this._values.push(value);
            var rk = token.runtimeCacheKey;
            if (lang_1.isPresent(rk)) {
                this._valueMap.set(rk, value);
            }
            var ak = token.assetCacheKey;
            if (lang_1.isPresent(ak)) {
                this._valueMap.set(ak, value);
            }
        };
        CompileIdentifierMap.prototype.get = function (token) {
            var rk = token.runtimeCacheKey;
            var ak = token.assetCacheKey;
            var result;
            if (lang_1.isPresent(rk)) {
                result = this._valueMap.get(rk);
            }
            if (lang_1.isBlank(result) && lang_1.isPresent(ak)) {
                result = this._valueMap.get(ak);
            }
            return result;
        };
        CompileIdentifierMap.prototype.keys = function () {
            return this._tokens;
        };
        CompileIdentifierMap.prototype.values = function () {
            return this._values;
        };
        Object.defineProperty(CompileIdentifierMap.prototype, "size", {
            get: function () {
                return this._values.length;
            },
            enumerable: true,
            configurable: true
        });
        return CompileIdentifierMap;
    }();
    exports.CompileIdentifierMap = CompileIdentifierMap;
    /**
     * Metadata regarding compilation of a type.
     */
    var CompileTypeMetadata = function (_super) {
        __extends(CompileTypeMetadata, _super);
        function CompileTypeMetadata(_a) {
            var _b = _a === void 0 ? {} : _a,
                runtime = _b.runtime,
                name = _b.name,
                moduleUrl = _b.moduleUrl,
                prefix = _b.prefix,
                isHost = _b.isHost,
                value = _b.value,
                diDeps = _b.diDeps,
                lifecycleHooks = _b.lifecycleHooks;
            _super.call(this, { runtime: runtime, name: name, moduleUrl: moduleUrl, prefix: prefix, value: value });
            this.isHost = lang_1.normalizeBool(isHost);
            this.diDeps = _normalizeArray(diDeps);
            this.lifecycleHooks = _normalizeArray(lifecycleHooks);
        }
        return CompileTypeMetadata;
    }(CompileIdentifierMetadata);
    exports.CompileTypeMetadata = CompileTypeMetadata;
    var CompileQueryMetadata = function () {
        function CompileQueryMetadata(_a) {
            var _b = _a === void 0 ? {} : _a,
                selectors = _b.selectors,
                descendants = _b.descendants,
                first = _b.first,
                propertyName = _b.propertyName,
                read = _b.read;
            this.selectors = selectors;
            this.descendants = lang_1.normalizeBool(descendants);
            this.first = lang_1.normalizeBool(first);
            this.propertyName = propertyName;
            this.read = read;
        }
        return CompileQueryMetadata;
    }();
    exports.CompileQueryMetadata = CompileQueryMetadata;
    /**
     * Metadata about a stylesheet
     */
    var CompileStylesheetMetadata = function () {
        function CompileStylesheetMetadata(_a) {
            var _b = _a === void 0 ? {} : _a,
                moduleUrl = _b.moduleUrl,
                styles = _b.styles,
                styleUrls = _b.styleUrls;
            this.moduleUrl = moduleUrl;
            this.styles = _normalizeArray(styles);
            this.styleUrls = _normalizeArray(styleUrls);
        }
        return CompileStylesheetMetadata;
    }();
    exports.CompileStylesheetMetadata = CompileStylesheetMetadata;
    /**
     * Metadata regarding compilation of a template.
     */
    var CompileTemplateMetadata = function () {
        function CompileTemplateMetadata(_a) {
            var _b = _a === void 0 ? {} : _a,
                encapsulation = _b.encapsulation,
                template = _b.template,
                templateUrl = _b.templateUrl,
                styles = _b.styles,
                styleUrls = _b.styleUrls,
                externalStylesheets = _b.externalStylesheets,
                animations = _b.animations,
                ngContentSelectors = _b.ngContentSelectors,
                interpolation = _b.interpolation;
            this.encapsulation = encapsulation;
            this.template = template;
            this.templateUrl = templateUrl;
            this.styles = _normalizeArray(styles);
            this.styleUrls = _normalizeArray(styleUrls);
            this.externalStylesheets = _normalizeArray(externalStylesheets);
            this.animations = lang_1.isPresent(animations) ? collection_1.ListWrapper.flatten(animations) : [];
            this.ngContentSelectors = lang_1.isPresent(ngContentSelectors) ? ngContentSelectors : [];
            if (lang_1.isPresent(interpolation) && interpolation.length != 2) {
                throw new exceptions_1.BaseException("'interpolation' should have a start and an end symbol.");
            }
            this.interpolation = interpolation;
        }
        return CompileTemplateMetadata;
    }();
    exports.CompileTemplateMetadata = CompileTemplateMetadata;
    /**
     * Metadata regarding compilation of a directive.
     */
    var CompileDirectiveMetadata = function () {
        function CompileDirectiveMetadata(_a) {
            var _b = _a === void 0 ? {} : _a,
                type = _b.type,
                isComponent = _b.isComponent,
                selector = _b.selector,
                exportAs = _b.exportAs,
                changeDetection = _b.changeDetection,
                inputs = _b.inputs,
                outputs = _b.outputs,
                hostListeners = _b.hostListeners,
                hostProperties = _b.hostProperties,
                hostAttributes = _b.hostAttributes,
                providers = _b.providers,
                viewProviders = _b.viewProviders,
                queries = _b.queries,
                viewQueries = _b.viewQueries,
                entryComponents = _b.entryComponents,
                viewDirectives = _b.viewDirectives,
                viewPipes = _b.viewPipes,
                template = _b.template;
            this.type = type;
            this.isComponent = isComponent;
            this.selector = selector;
            this.exportAs = exportAs;
            this.changeDetection = changeDetection;
            this.inputs = inputs;
            this.outputs = outputs;
            this.hostListeners = hostListeners;
            this.hostProperties = hostProperties;
            this.hostAttributes = hostAttributes;
            this.providers = _normalizeArray(providers);
            this.viewProviders = _normalizeArray(viewProviders);
            this.queries = _normalizeArray(queries);
            this.viewQueries = _normalizeArray(viewQueries);
            this.entryComponents = _normalizeArray(entryComponents);
            this.viewDirectives = _normalizeArray(viewDirectives);
            this.viewPipes = _normalizeArray(viewPipes);
            this.template = template;
        }
        CompileDirectiveMetadata.create = function (_a) {
            var _b = _a === void 0 ? {} : _a,
                type = _b.type,
                isComponent = _b.isComponent,
                selector = _b.selector,
                exportAs = _b.exportAs,
                changeDetection = _b.changeDetection,
                inputs = _b.inputs,
                outputs = _b.outputs,
                host = _b.host,
                providers = _b.providers,
                viewProviders = _b.viewProviders,
                queries = _b.queries,
                viewQueries = _b.viewQueries,
                entryComponents = _b.entryComponents,
                viewDirectives = _b.viewDirectives,
                viewPipes = _b.viewPipes,
                template = _b.template;
            var hostListeners = {};
            var hostProperties = {};
            var hostAttributes = {};
            if (lang_1.isPresent(host)) {
                collection_1.StringMapWrapper.forEach(host, function (value, key) {
                    var matches = key.match(HOST_REG_EXP);
                    if (matches === null) {
                        hostAttributes[key] = value;
                    } else if (lang_1.isPresent(matches[1])) {
                        hostProperties[matches[1]] = value;
                    } else if (lang_1.isPresent(matches[2])) {
                        hostListeners[matches[2]] = value;
                    } else if (lang_1.isPresent(matches[3])) {
                        hostProperties['@' + matches[3]] = value;
                    }
                });
            }
            var inputsMap = {};
            if (lang_1.isPresent(inputs)) {
                inputs.forEach(function (bindConfig) {
                    // canonical syntax: `dirProp: elProp`
                    // if there is no `:`, use dirProp = elProp
                    var parts = util_1.splitAtColon(bindConfig, [bindConfig, bindConfig]);
                    inputsMap[parts[0]] = parts[1];
                });
            }
            var outputsMap = {};
            if (lang_1.isPresent(outputs)) {
                outputs.forEach(function (bindConfig) {
                    // canonical syntax: `dirProp: elProp`
                    // if there is no `:`, use dirProp = elProp
                    var parts = util_1.splitAtColon(bindConfig, [bindConfig, bindConfig]);
                    outputsMap[parts[0]] = parts[1];
                });
            }
            return new CompileDirectiveMetadata({
                type: type,
                isComponent: lang_1.normalizeBool(isComponent), selector: selector, exportAs: exportAs, changeDetection: changeDetection,
                inputs: inputsMap,
                outputs: outputsMap,
                hostListeners: hostListeners,
                hostProperties: hostProperties,
                hostAttributes: hostAttributes,
                providers: providers,
                viewProviders: viewProviders,
                queries: queries,
                viewQueries: viewQueries,
                entryComponents: entryComponents,
                viewDirectives: viewDirectives,
                viewPipes: viewPipes,
                template: template
            });
        };
        Object.defineProperty(CompileDirectiveMetadata.prototype, "identifier", {
            get: function () {
                return this.type;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CompileDirectiveMetadata.prototype, "runtimeCacheKey", {
            get: function () {
                return this.type.runtimeCacheKey;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CompileDirectiveMetadata.prototype, "assetCacheKey", {
            get: function () {
                return this.type.assetCacheKey;
            },
            enumerable: true,
            configurable: true
        });
        CompileDirectiveMetadata.prototype.equalsTo = function (other) {
            return this.type.equalsTo(other.identifier);
        };
        return CompileDirectiveMetadata;
    }();
    exports.CompileDirectiveMetadata = CompileDirectiveMetadata;
    /**
     * Construct {@link CompileDirectiveMetadata} from {@link ComponentTypeMetadata} and a selector.
     */
    function createHostComponentMeta(compMeta) {
        var template = selector_1.CssSelector.parse(compMeta.selector)[0].getMatchingElementTemplate();
        return CompileDirectiveMetadata.create({
            type: new CompileTypeMetadata({
                runtime: Object,
                name: compMeta.type.name + "_Host",
                moduleUrl: compMeta.type.moduleUrl,
                isHost: true
            }),
            template: new CompileTemplateMetadata({
                template: template,
                templateUrl: '',
                styles: [],
                styleUrls: [],
                ngContentSelectors: [],
                animations: []
            }),
            changeDetection: core_1.ChangeDetectionStrategy.Default,
            inputs: [],
            outputs: [],
            host: {},
            isComponent: true,
            selector: '*',
            providers: [],
            viewProviders: [],
            queries: [],
            viewQueries: []
        });
    }
    exports.createHostComponentMeta = createHostComponentMeta;
    var CompilePipeMetadata = function () {
        function CompilePipeMetadata(_a) {
            var _b = _a === void 0 ? {} : _a,
                type = _b.type,
                name = _b.name,
                pure = _b.pure;
            this.type = type;
            this.name = name;
            this.pure = lang_1.normalizeBool(pure);
        }
        Object.defineProperty(CompilePipeMetadata.prototype, "identifier", {
            get: function () {
                return this.type;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CompilePipeMetadata.prototype, "runtimeCacheKey", {
            get: function () {
                return this.type.runtimeCacheKey;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CompilePipeMetadata.prototype, "assetCacheKey", {
            get: function () {
                return this.type.assetCacheKey;
            },
            enumerable: true,
            configurable: true
        });
        CompilePipeMetadata.prototype.equalsTo = function (other) {
            return this.type.equalsTo(other.identifier);
        };
        return CompilePipeMetadata;
    }();
    exports.CompilePipeMetadata = CompilePipeMetadata;
    /**
     * Metadata regarding compilation of a directive.
     */
    var CompileNgModuleMetadata = function () {
        function CompileNgModuleMetadata(_a) {
            var _b = _a === void 0 ? {} : _a,
                type = _b.type,
                providers = _b.providers,
                declaredDirectives = _b.declaredDirectives,
                exportedDirectives = _b.exportedDirectives,
                declaredPipes = _b.declaredPipes,
                exportedPipes = _b.exportedPipes,
                entryComponents = _b.entryComponents,
                bootstrapComponents = _b.bootstrapComponents,
                importedModules = _b.importedModules,
                exportedModules = _b.exportedModules,
                schemas = _b.schemas,
                transitiveModule = _b.transitiveModule;
            this.type = type;
            this.declaredDirectives = _normalizeArray(declaredDirectives);
            this.exportedDirectives = _normalizeArray(exportedDirectives);
            this.declaredPipes = _normalizeArray(declaredPipes);
            this.exportedPipes = _normalizeArray(exportedPipes);
            this.providers = _normalizeArray(providers);
            this.entryComponents = _normalizeArray(entryComponents);
            this.bootstrapComponents = _normalizeArray(bootstrapComponents);
            this.importedModules = _normalizeArray(importedModules);
            this.exportedModules = _normalizeArray(exportedModules);
            this.schemas = _normalizeArray(schemas);
            this.transitiveModule = transitiveModule;
        }
        Object.defineProperty(CompileNgModuleMetadata.prototype, "identifier", {
            get: function () {
                return this.type;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CompileNgModuleMetadata.prototype, "runtimeCacheKey", {
            get: function () {
                return this.type.runtimeCacheKey;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CompileNgModuleMetadata.prototype, "assetCacheKey", {
            get: function () {
                return this.type.assetCacheKey;
            },
            enumerable: true,
            configurable: true
        });
        CompileNgModuleMetadata.prototype.equalsTo = function (other) {
            return this.type.equalsTo(other.identifier);
        };
        return CompileNgModuleMetadata;
    }();
    exports.CompileNgModuleMetadata = CompileNgModuleMetadata;
    var TransitiveCompileNgModuleMetadata = function () {
        function TransitiveCompileNgModuleMetadata(modules, providers, entryComponents, directives, pipes) {
            var _this = this;
            this.modules = modules;
            this.providers = providers;
            this.entryComponents = entryComponents;
            this.directives = directives;
            this.pipes = pipes;
            this.directivesSet = new Set();
            this.pipesSet = new Set();
            directives.forEach(function (dir) {
                return _this.directivesSet.add(dir.type.runtime);
            });
            pipes.forEach(function (pipe) {
                return _this.pipesSet.add(pipe.type.runtime);
            });
        }
        return TransitiveCompileNgModuleMetadata;
    }();
    exports.TransitiveCompileNgModuleMetadata = TransitiveCompileNgModuleMetadata;
    function removeIdentifierDuplicates(items) {
        var map = new CompileIdentifierMap();
        items.forEach(function (item) {
            if (!map.get(item)) {
                map.add(item, item);
            }
        });
        return map.keys();
    }
    exports.removeIdentifierDuplicates = removeIdentifierDuplicates;
    function _normalizeArray(obj) {
        return lang_1.isPresent(obj) ? obj : [];
    }
    function isStaticSymbol(value) {
        return lang_1.isStringMap(value) && lang_1.isPresent(value['name']) && lang_1.isPresent(value['filePath']);
    }
    exports.isStaticSymbol = isStaticSymbol;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/identifiers.js', ['@angular/core', '../core_private', './compile_metadata', './util', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var core_private_1 = $__require('../core_private');
    var compile_metadata_1 = $__require('./compile_metadata');
    var util_1 = $__require('./util');
    var APP_VIEW_MODULE_URL = util_1.assetUrl('core', 'linker/view');
    var VIEW_UTILS_MODULE_URL = util_1.assetUrl('core', 'linker/view_utils');
    var CD_MODULE_URL = util_1.assetUrl('core', 'change_detection/change_detection');
    // Reassign the imports to different variables so we can
    // define static variables with the name of the import.
    // (only needed for Dart).
    var impViewUtils = core_private_1.ViewUtils;
    var impAppView = core_private_1.AppView;
    var impDebugAppView = core_private_1.DebugAppView;
    var impDebugContext = core_private_1.DebugContext;
    var impAppElement = core_private_1.AppElement;
    var impElementRef = core_1.ElementRef;
    var impViewContainerRef = core_1.ViewContainerRef;
    var impChangeDetectorRef = core_1.ChangeDetectorRef;
    var impRenderComponentType = core_1.RenderComponentType;
    var impQueryList = core_1.QueryList;
    var impTemplateRef = core_1.TemplateRef;
    var impTemplateRef_ = core_private_1.TemplateRef_;
    var impValueUnwrapper = core_private_1.ValueUnwrapper;
    var impInjector = core_1.Injector;
    var impViewEncapsulation = core_1.ViewEncapsulation;
    var impViewType = core_private_1.ViewType;
    var impChangeDetectionStrategy = core_1.ChangeDetectionStrategy;
    var impStaticNodeDebugInfo = core_private_1.StaticNodeDebugInfo;
    var impRenderer = core_1.Renderer;
    var impSimpleChange = core_1.SimpleChange;
    var impUNINITIALIZED = core_private_1.UNINITIALIZED;
    var impChangeDetectorStatus = core_private_1.ChangeDetectorStatus;
    var impFlattenNestedViewRenderNodes = core_private_1.flattenNestedViewRenderNodes;
    var impDevModeEqual = core_private_1.devModeEqual;
    var impInterpolate = core_private_1.interpolate;
    var impCheckBinding = core_private_1.checkBinding;
    var impCastByValue = core_private_1.castByValue;
    var impEMPTY_ARRAY = core_private_1.EMPTY_ARRAY;
    var impEMPTY_MAP = core_private_1.EMPTY_MAP;
    var impAnimationGroupPlayer = core_private_1.AnimationGroupPlayer;
    var impAnimationSequencePlayer = core_private_1.AnimationSequencePlayer;
    var impAnimationKeyframe = core_private_1.AnimationKeyframe;
    var impAnimationStyles = core_private_1.AnimationStyles;
    var impNoOpAnimationPlayer = core_private_1.NoOpAnimationPlayer;
    var ANIMATION_STYLE_UTIL_ASSET_URL = util_1.assetUrl('core', 'animation/animation_style_util');
    var Identifiers = function () {
        function Identifiers() {}
        Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS = new compile_metadata_1.CompileIdentifierMetadata({
            name: 'ANALYZE_FOR_ENTRY_COMPONENTS',
            moduleUrl: util_1.assetUrl('core', 'metadata/di'),
            runtime: core_1.ANALYZE_FOR_ENTRY_COMPONENTS
        });
        Identifiers.ViewUtils = new compile_metadata_1.CompileIdentifierMetadata({ name: 'ViewUtils', moduleUrl: util_1.assetUrl('core', 'linker/view_utils'), runtime: impViewUtils });
        Identifiers.AppView = new compile_metadata_1.CompileIdentifierMetadata({ name: 'AppView', moduleUrl: APP_VIEW_MODULE_URL, runtime: impAppView });
        Identifiers.DebugAppView = new compile_metadata_1.CompileIdentifierMetadata({ name: 'DebugAppView', moduleUrl: APP_VIEW_MODULE_URL, runtime: impDebugAppView });
        Identifiers.AppElement = new compile_metadata_1.CompileIdentifierMetadata({ name: 'AppElement', moduleUrl: util_1.assetUrl('core', 'linker/element'), runtime: impAppElement });
        Identifiers.ElementRef = new compile_metadata_1.CompileIdentifierMetadata({
            name: 'ElementRef',
            moduleUrl: util_1.assetUrl('core', 'linker/element_ref'),
            runtime: impElementRef
        });
        Identifiers.ViewContainerRef = new compile_metadata_1.CompileIdentifierMetadata({
            name: 'ViewContainerRef',
            moduleUrl: util_1.assetUrl('core', 'linker/view_container_ref'),
            runtime: impViewContainerRef
        });
        Identifiers.ChangeDetectorRef = new compile_metadata_1.CompileIdentifierMetadata({
            name: 'ChangeDetectorRef',
            moduleUrl: util_1.assetUrl('core', 'change_detection/change_detector_ref'),
            runtime: impChangeDetectorRef
        });
        Identifiers.RenderComponentType = new compile_metadata_1.CompileIdentifierMetadata({
            name: 'RenderComponentType',
            moduleUrl: util_1.assetUrl('core', 'render/api'),
            runtime: impRenderComponentType
        });
        Identifiers.QueryList = new compile_metadata_1.CompileIdentifierMetadata({ name: 'QueryList', moduleUrl: util_1.assetUrl('core', 'linker/query_list'), runtime: impQueryList });
        Identifiers.TemplateRef = new compile_metadata_1.CompileIdentifierMetadata({
            name: 'TemplateRef',
            moduleUrl: util_1.assetUrl('core', 'linker/template_ref'),
            runtime: impTemplateRef
        });
        Identifiers.TemplateRef_ = new compile_metadata_1.CompileIdentifierMetadata({
            name: 'TemplateRef_',
            moduleUrl: util_1.assetUrl('core', 'linker/template_ref'),
            runtime: impTemplateRef_
        });
        Identifiers.CodegenComponentFactoryResolver = new compile_metadata_1.CompileIdentifierMetadata({
            name: 'CodegenComponentFactoryResolver',
            moduleUrl: util_1.assetUrl('core', 'linker/component_factory_resolver'),
            runtime: core_private_1.CodegenComponentFactoryResolver
        });
        Identifiers.ComponentFactoryResolver = new compile_metadata_1.CompileIdentifierMetadata({
            name: 'ComponentFactoryResolver',
            moduleUrl: util_1.assetUrl('core', 'linker/component_factory_resolver'),
            runtime: core_1.ComponentFactoryResolver
        });
        Identifiers.ComponentFactory = new compile_metadata_1.CompileIdentifierMetadata({
            name: 'ComponentFactory',
            runtime: core_1.ComponentFactory,
            moduleUrl: util_1.assetUrl('core', 'linker/component_factory')
        });
        Identifiers.NgModuleFactory = new compile_metadata_1.CompileIdentifierMetadata({
            name: 'NgModuleFactory',
            runtime: core_1.NgModuleFactory,
            moduleUrl: util_1.assetUrl('core', 'linker/ng_module_factory')
        });
        Identifiers.NgModuleInjector = new compile_metadata_1.CompileIdentifierMetadata({
            name: 'NgModuleInjector',
            runtime: core_private_1.NgModuleInjector,
            moduleUrl: util_1.assetUrl('core', 'linker/ng_module_factory')
        });
        Identifiers.ValueUnwrapper = new compile_metadata_1.CompileIdentifierMetadata({ name: 'ValueUnwrapper', moduleUrl: CD_MODULE_URL, runtime: impValueUnwrapper });
        Identifiers.Injector = new compile_metadata_1.CompileIdentifierMetadata({ name: 'Injector', moduleUrl: util_1.assetUrl('core', 'di/injector'), runtime: impInjector });
        Identifiers.ViewEncapsulation = new compile_metadata_1.CompileIdentifierMetadata({
            name: 'ViewEncapsulation',
            moduleUrl: util_1.assetUrl('core', 'metadata/view'),
            runtime: impViewEncapsulation
        });
        Identifiers.ViewType = new compile_metadata_1.CompileIdentifierMetadata({ name: 'ViewType', moduleUrl: util_1.assetUrl('core', 'linker/view_type'), runtime: impViewType });
        Identifiers.ChangeDetectionStrategy = new compile_metadata_1.CompileIdentifierMetadata({
            name: 'ChangeDetectionStrategy',
            moduleUrl: CD_MODULE_URL,
            runtime: impChangeDetectionStrategy
        });
        Identifiers.StaticNodeDebugInfo = new compile_metadata_1.CompileIdentifierMetadata({
            name: 'StaticNodeDebugInfo',
            moduleUrl: util_1.assetUrl('core', 'linker/debug_context'),
            runtime: impStaticNodeDebugInfo
        });
        Identifiers.DebugContext = new compile_metadata_1.CompileIdentifierMetadata({
            name: 'DebugContext',
            moduleUrl: util_1.assetUrl('core', 'linker/debug_context'),
            runtime: impDebugContext
        });
        Identifiers.Renderer = new compile_metadata_1.CompileIdentifierMetadata({ name: 'Renderer', moduleUrl: util_1.assetUrl('core', 'render/api'), runtime: impRenderer });
        Identifiers.SimpleChange = new compile_metadata_1.CompileIdentifierMetadata({ name: 'SimpleChange', moduleUrl: CD_MODULE_URL, runtime: impSimpleChange });
        Identifiers.UNINITIALIZED = new compile_metadata_1.CompileIdentifierMetadata({ name: 'UNINITIALIZED', moduleUrl: CD_MODULE_URL, runtime: impUNINITIALIZED });
        Identifiers.ChangeDetectorStatus = new compile_metadata_1.CompileIdentifierMetadata({ name: 'ChangeDetectorStatus', moduleUrl: CD_MODULE_URL, runtime: impChangeDetectorStatus });
        Identifiers.checkBinding = new compile_metadata_1.CompileIdentifierMetadata({ name: 'checkBinding', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: impCheckBinding });
        Identifiers.flattenNestedViewRenderNodes = new compile_metadata_1.CompileIdentifierMetadata({
            name: 'flattenNestedViewRenderNodes',
            moduleUrl: VIEW_UTILS_MODULE_URL,
            runtime: impFlattenNestedViewRenderNodes
        });
        Identifiers.devModeEqual = new compile_metadata_1.CompileIdentifierMetadata({ name: 'devModeEqual', moduleUrl: CD_MODULE_URL, runtime: impDevModeEqual });
        Identifiers.interpolate = new compile_metadata_1.CompileIdentifierMetadata({ name: 'interpolate', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: impInterpolate });
        Identifiers.castByValue = new compile_metadata_1.CompileIdentifierMetadata({ name: 'castByValue', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: impCastByValue });
        Identifiers.EMPTY_ARRAY = new compile_metadata_1.CompileIdentifierMetadata({ name: 'EMPTY_ARRAY', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: impEMPTY_ARRAY });
        Identifiers.EMPTY_MAP = new compile_metadata_1.CompileIdentifierMetadata({ name: 'EMPTY_MAP', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: impEMPTY_MAP });
        Identifiers.pureProxies = [null, new compile_metadata_1.CompileIdentifierMetadata({ name: 'pureProxy1', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: core_private_1.pureProxy1 }), new compile_metadata_1.CompileIdentifierMetadata({ name: 'pureProxy2', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: core_private_1.pureProxy2 }), new compile_metadata_1.CompileIdentifierMetadata({ name: 'pureProxy3', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: core_private_1.pureProxy3 }), new compile_metadata_1.CompileIdentifierMetadata({ name: 'pureProxy4', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: core_private_1.pureProxy4 }), new compile_metadata_1.CompileIdentifierMetadata({ name: 'pureProxy5', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: core_private_1.pureProxy5 }), new compile_metadata_1.CompileIdentifierMetadata({ name: 'pureProxy6', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: core_private_1.pureProxy6 }), new compile_metadata_1.CompileIdentifierMetadata({ name: 'pureProxy7', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: core_private_1.pureProxy7 }), new compile_metadata_1.CompileIdentifierMetadata({ name: 'pureProxy8', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: core_private_1.pureProxy8 }), new compile_metadata_1.CompileIdentifierMetadata({ name: 'pureProxy9', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: core_private_1.pureProxy9 }), new compile_metadata_1.CompileIdentifierMetadata({ name: 'pureProxy10', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: core_private_1.pureProxy10 })];
        Identifiers.SecurityContext = new compile_metadata_1.CompileIdentifierMetadata({
            name: 'SecurityContext',
            moduleUrl: util_1.assetUrl('core', 'security'),
            runtime: core_1.SecurityContext
        });
        Identifiers.AnimationKeyframe = new compile_metadata_1.CompileIdentifierMetadata({
            name: 'AnimationKeyframe',
            moduleUrl: util_1.assetUrl('core', 'animation/animation_keyframe'),
            runtime: impAnimationKeyframe
        });
        Identifiers.AnimationStyles = new compile_metadata_1.CompileIdentifierMetadata({
            name: 'AnimationStyles',
            moduleUrl: util_1.assetUrl('core', 'animation/animation_styles'),
            runtime: impAnimationStyles
        });
        Identifiers.NoOpAnimationPlayer = new compile_metadata_1.CompileIdentifierMetadata({
            name: 'NoOpAnimationPlayer',
            moduleUrl: util_1.assetUrl('core', 'animation/animation_player'),
            runtime: impNoOpAnimationPlayer
        });
        Identifiers.AnimationGroupPlayer = new compile_metadata_1.CompileIdentifierMetadata({
            name: 'AnimationGroupPlayer',
            moduleUrl: util_1.assetUrl('core', 'animation/animation_group_player'),
            runtime: impAnimationGroupPlayer
        });
        Identifiers.AnimationSequencePlayer = new compile_metadata_1.CompileIdentifierMetadata({
            name: 'AnimationSequencePlayer',
            moduleUrl: util_1.assetUrl('core', 'animation/animation_sequence_player'),
            runtime: impAnimationSequencePlayer
        });
        Identifiers.prepareFinalAnimationStyles = new compile_metadata_1.CompileIdentifierMetadata({
            name: 'prepareFinalAnimationStyles',
            moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
            runtime: core_private_1.prepareFinalAnimationStyles
        });
        Identifiers.balanceAnimationKeyframes = new compile_metadata_1.CompileIdentifierMetadata({
            name: 'balanceAnimationKeyframes',
            moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
            runtime: core_private_1.balanceAnimationKeyframes
        });
        Identifiers.clearStyles = new compile_metadata_1.CompileIdentifierMetadata({ name: 'clearStyles', moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL, runtime: core_private_1.clearStyles });
        Identifiers.renderStyles = new compile_metadata_1.CompileIdentifierMetadata({ name: 'renderStyles', moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL, runtime: core_private_1.renderStyles });
        Identifiers.collectAndResolveStyles = new compile_metadata_1.CompileIdentifierMetadata({
            name: 'collectAndResolveStyles',
            moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
            runtime: core_private_1.collectAndResolveStyles
        });
        return Identifiers;
    }();
    exports.Identifiers = Identifiers;
    function identifierToken(identifier) {
        return new compile_metadata_1.CompileTokenMetadata({ identifier: identifier });
    }
    exports.identifierToken = identifierToken;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/compiler@2.0.0-rc.5/src/facade/collection.js", ["./lang", "reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var lang_1 = $__require("./lang");
    exports.Map = lang_1.global.Map;
    exports.Set = lang_1.global.Set;
    // Safari and Internet Explorer do not support the iterable parameter to the
    // Map constructor.  We work around that by manually adding the items.
    var createMapFromPairs = function () {
        try {
            if (new exports.Map([[1, 2]]).size === 1) {
                return function createMapFromPairs(pairs) {
                    return new exports.Map(pairs);
                };
            }
        } catch (e) {}
        return function createMapAndPopulateFromPairs(pairs) {
            var map = new exports.Map();
            for (var i = 0; i < pairs.length; i++) {
                var pair = pairs[i];
                map.set(pair[0], pair[1]);
            }
            return map;
        };
    }();
    var createMapFromMap = function () {
        try {
            if (new exports.Map(new exports.Map())) {
                return function createMapFromMap(m) {
                    return new exports.Map(m);
                };
            }
        } catch (e) {}
        return function createMapAndPopulateFromMap(m) {
            var map = new exports.Map();
            m.forEach(function (v, k) {
                map.set(k, v);
            });
            return map;
        };
    }();
    var _clearValues = function () {
        if (new exports.Map().keys().next) {
            return function _clearValues(m) {
                var keyIterator = m.keys();
                var k;
                while (!(k = keyIterator.next()).done) {
                    m.set(k.value, null);
                }
            };
        } else {
            return function _clearValuesWithForeEach(m) {
                m.forEach(function (v, k) {
                    m.set(k, null);
                });
            };
        }
    }();
    // Safari doesn't implement MapIterator.next(), which is used is Traceur's polyfill of Array.from
    // TODO(mlaval): remove the work around once we have a working polyfill of Array.from
    var _arrayFromMap = function () {
        try {
            if (new exports.Map().values().next) {
                return function createArrayFromMap(m, getValues) {
                    return getValues ? Array.from(m.values()) : Array.from(m.keys());
                };
            }
        } catch (e) {}
        return function createArrayFromMapWithForeach(m, getValues) {
            var res = ListWrapper.createFixedSize(m.size),
                i = 0;
            m.forEach(function (v, k) {
                res[i] = getValues ? v : k;
                i++;
            });
            return res;
        };
    }();
    var MapWrapper = function () {
        function MapWrapper() {}
        MapWrapper.clone = function (m) {
            return createMapFromMap(m);
        };
        MapWrapper.createFromStringMap = function (stringMap) {
            var result = new exports.Map();
            for (var prop in stringMap) {
                result.set(prop, stringMap[prop]);
            }
            return result;
        };
        MapWrapper.toStringMap = function (m) {
            var r = {};
            m.forEach(function (v, k) {
                return r[k] = v;
            });
            return r;
        };
        MapWrapper.createFromPairs = function (pairs) {
            return createMapFromPairs(pairs);
        };
        MapWrapper.clearValues = function (m) {
            _clearValues(m);
        };
        MapWrapper.iterable = function (m) {
            return m;
        };
        MapWrapper.keys = function (m) {
            return _arrayFromMap(m, false);
        };
        MapWrapper.values = function (m) {
            return _arrayFromMap(m, true);
        };
        return MapWrapper;
    }();
    exports.MapWrapper = MapWrapper;
    /**
     * Wraps Javascript Objects
     */
    var StringMapWrapper = function () {
        function StringMapWrapper() {}
        StringMapWrapper.create = function () {
            // Note: We are not using Object.create(null) here due to
            // performance!
            // http://jsperf.com/ng2-object-create-null
            return {};
        };
        StringMapWrapper.contains = function (map, key) {
            return map.hasOwnProperty(key);
        };
        StringMapWrapper.get = function (map, key) {
            return map.hasOwnProperty(key) ? map[key] : undefined;
        };
        StringMapWrapper.set = function (map, key, value) {
            map[key] = value;
        };
        StringMapWrapper.keys = function (map) {
            return Object.keys(map);
        };
        StringMapWrapper.values = function (map) {
            return Object.keys(map).map(function (k) {
                return map[k];
            });
        };
        StringMapWrapper.isEmpty = function (map) {
            for (var prop in map) {
                return false;
            }
            return true;
        };
        StringMapWrapper.delete = function (map, key) {
            delete map[key];
        };
        StringMapWrapper.forEach = function (map, callback) {
            for (var _i = 0, _a = Object.keys(map); _i < _a.length; _i++) {
                var k = _a[_i];
                callback(map[k], k);
            }
        };
        StringMapWrapper.merge = function (m1, m2) {
            var m = {};
            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
                var k = _a[_i];
                m[k] = m1[k];
            }
            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
                var k = _c[_b];
                m[k] = m2[k];
            }
            return m;
        };
        StringMapWrapper.equals = function (m1, m2) {
            var k1 = Object.keys(m1);
            var k2 = Object.keys(m2);
            if (k1.length != k2.length) {
                return false;
            }
            var key;
            for (var i = 0; i < k1.length; i++) {
                key = k1[i];
                if (m1[key] !== m2[key]) {
                    return false;
                }
            }
            return true;
        };
        return StringMapWrapper;
    }();
    exports.StringMapWrapper = StringMapWrapper;
    var ListWrapper = function () {
        function ListWrapper() {}
        // JS has no way to express a statically fixed size list, but dart does so we
        // keep both methods.
        ListWrapper.createFixedSize = function (size) {
            return new Array(size);
        };
        ListWrapper.createGrowableSize = function (size) {
            return new Array(size);
        };
        ListWrapper.clone = function (array) {
            return array.slice(0);
        };
        ListWrapper.forEachWithIndex = function (array, fn) {
            for (var i = 0; i < array.length; i++) {
                fn(array[i], i);
            }
        };
        ListWrapper.first = function (array) {
            if (!array) return null;
            return array[0];
        };
        ListWrapper.last = function (array) {
            if (!array || array.length == 0) return null;
            return array[array.length - 1];
        };
        ListWrapper.indexOf = function (array, value, startIndex) {
            if (startIndex === void 0) {
                startIndex = 0;
            }
            return array.indexOf(value, startIndex);
        };
        ListWrapper.contains = function (list, el) {
            return list.indexOf(el) !== -1;
        };
        ListWrapper.reversed = function (array) {
            var a = ListWrapper.clone(array);
            return a.reverse();
        };
        ListWrapper.concat = function (a, b) {
            return a.concat(b);
        };
        ListWrapper.insert = function (list, index, value) {
            list.splice(index, 0, value);
        };
        ListWrapper.removeAt = function (list, index) {
            var res = list[index];
            list.splice(index, 1);
            return res;
        };
        ListWrapper.removeAll = function (list, items) {
            for (var i = 0; i < items.length; ++i) {
                var index = list.indexOf(items[i]);
                list.splice(index, 1);
            }
        };
        ListWrapper.remove = function (list, el) {
            var index = list.indexOf(el);
            if (index > -1) {
                list.splice(index, 1);
                return true;
            }
            return false;
        };
        ListWrapper.clear = function (list) {
            list.length = 0;
        };
        ListWrapper.isEmpty = function (list) {
            return list.length == 0;
        };
        ListWrapper.fill = function (list, value, start, end) {
            if (start === void 0) {
                start = 0;
            }
            if (end === void 0) {
                end = null;
            }
            list.fill(value, start, end === null ? list.length : end);
        };
        ListWrapper.equals = function (a, b) {
            if (a.length != b.length) return false;
            for (var i = 0; i < a.length; ++i) {
                if (a[i] !== b[i]) return false;
            }
            return true;
        };
        ListWrapper.slice = function (l, from, to) {
            if (from === void 0) {
                from = 0;
            }
            if (to === void 0) {
                to = null;
            }
            return l.slice(from, to === null ? undefined : to);
        };
        ListWrapper.splice = function (l, from, length) {
            return l.splice(from, length);
        };
        ListWrapper.sort = function (l, compareFn) {
            if (lang_1.isPresent(compareFn)) {
                l.sort(compareFn);
            } else {
                l.sort();
            }
        };
        ListWrapper.toString = function (l) {
            return l.toString();
        };
        ListWrapper.toJSON = function (l) {
            return JSON.stringify(l);
        };
        ListWrapper.maximum = function (list, predicate) {
            if (list.length == 0) {
                return null;
            }
            var solution = null;
            var maxValue = -Infinity;
            for (var index = 0; index < list.length; index++) {
                var candidate = list[index];
                if (lang_1.isBlank(candidate)) {
                    continue;
                }
                var candidateValue = predicate(candidate);
                if (candidateValue > maxValue) {
                    solution = candidate;
                    maxValue = candidateValue;
                }
            }
            return solution;
        };
        ListWrapper.flatten = function (list) {
            var target = [];
            _flattenArray(list, target);
            return target;
        };
        ListWrapper.addAll = function (list, source) {
            for (var i = 0; i < source.length; i++) {
                list.push(source[i]);
            }
        };
        return ListWrapper;
    }();
    exports.ListWrapper = ListWrapper;
    function _flattenArray(source, target) {
        if (lang_1.isPresent(source)) {
            for (var i = 0; i < source.length; i++) {
                var item = source[i];
                if (lang_1.isArray(item)) {
                    _flattenArray(item, target);
                } else {
                    target.push(item);
                }
            }
        }
        return target;
    }
    function isListLikeIterable(obj) {
        if (!lang_1.isJsObject(obj)) return false;
        return lang_1.isArray(obj) || !(obj instanceof exports.Map) && lang_1.getSymbolIterator() in obj; // JS Iterable have a Symbol.iterator prop
    }
    exports.isListLikeIterable = isListLikeIterable;
    function areIterablesEqual(a, b, comparator) {
        var iterator1 = a[lang_1.getSymbolIterator()]();
        var iterator2 = b[lang_1.getSymbolIterator()]();
        while (true) {
            var item1 = iterator1.next();
            var item2 = iterator2.next();
            if (item1.done && item2.done) return true;
            if (item1.done || item2.done) return false;
            if (!comparator(item1.value, item2.value)) return false;
        }
    }
    exports.areIterablesEqual = areIterablesEqual;
    function iterateListLike(obj, fn) {
        if (lang_1.isArray(obj)) {
            for (var i = 0; i < obj.length; i++) {
                fn(obj[i]);
            }
        } else {
            var iterator = obj[lang_1.getSymbolIterator()]();
            var item;
            while (!(item = iterator.next()).done) {
                fn(item.value);
            }
        }
    }
    exports.iterateListLike = iterateListLike;
    // Safari and Internet Explorer do not support the iterable parameter to the
    // Set constructor.  We work around that by manually adding the items.
    var createSetFromList = function () {
        var test = new exports.Set([1, 2, 3]);
        if (test.size === 3) {
            return function createSetFromList(lst) {
                return new exports.Set(lst);
            };
        } else {
            return function createSetAndPopulateFromList(lst) {
                var res = new exports.Set(lst);
                if (res.size !== lst.length) {
                    for (var i = 0; i < lst.length; i++) {
                        res.add(lst[i]);
                    }
                }
                return res;
            };
        }
    }();
    var SetWrapper = function () {
        function SetWrapper() {}
        SetWrapper.createFromList = function (lst) {
            return createSetFromList(lst);
        };
        SetWrapper.has = function (s, key) {
            return s.has(key);
        };
        SetWrapper.delete = function (m, k) {
            m.delete(k);
        };
        return SetWrapper;
    }();
    exports.SetWrapper = SetWrapper;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/facade/lang.js', ['reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var globalScope;
    if (typeof window === 'undefined') {
        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
            globalScope = self;
        } else {
            globalScope = global;
        }
    } else {
        globalScope = window;
    }
    function scheduleMicroTask(fn) {
        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
    }
    exports.scheduleMicroTask = scheduleMicroTask;
    // Need to declare a new variable for global here since TypeScript
    // exports the original value of the symbol.
    var _global = globalScope;
    exports.global = _global;
    /**
     * Runtime representation a type that a Component or other object is instances of.
     *
     * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by
     * the `MyCustomComponent` constructor function.
     *
     * @stable
     */
    exports.Type = Function;
    function getTypeNameForDebugging(type) {
        if (type['name']) {
            return type['name'];
        }
        return typeof type;
    }
    exports.getTypeNameForDebugging = getTypeNameForDebugging;
    exports.Math = _global.Math;
    exports.Date = _global.Date;
    // TODO: remove calls to assert in production environment
    // Note: Can't just export this and import in in other files
    // as `assert` is a reserved keyword in Dart
    _global.assert = function assert(condition) {
        // TODO: to be fixed properly via #2830, noop for now
    };
    function isPresent(obj) {
        return obj !== undefined && obj !== null;
    }
    exports.isPresent = isPresent;
    function isBlank(obj) {
        return obj === undefined || obj === null;
    }
    exports.isBlank = isBlank;
    function isBoolean(obj) {
        return typeof obj === 'boolean';
    }
    exports.isBoolean = isBoolean;
    function isNumber(obj) {
        return typeof obj === 'number';
    }
    exports.isNumber = isNumber;
    function isString(obj) {
        return typeof obj === 'string';
    }
    exports.isString = isString;
    function isFunction(obj) {
        return typeof obj === 'function';
    }
    exports.isFunction = isFunction;
    function isType(obj) {
        return isFunction(obj);
    }
    exports.isType = isType;
    function isStringMap(obj) {
        return typeof obj === 'object' && obj !== null;
    }
    exports.isStringMap = isStringMap;
    var STRING_MAP_PROTO = Object.getPrototypeOf({});
    function isStrictStringMap(obj) {
        return isStringMap(obj) && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
    }
    exports.isStrictStringMap = isStrictStringMap;
    function isPromise(obj) {
        // allow any Promise/A+ compliant thenable.
        // It's up to the caller to ensure that obj.then conforms to the spec
        return isPresent(obj) && isFunction(obj.then);
    }
    exports.isPromise = isPromise;
    function isArray(obj) {
        return Array.isArray(obj);
    }
    exports.isArray = isArray;
    function isDate(obj) {
        return obj instanceof exports.Date && !isNaN(obj.valueOf());
    }
    exports.isDate = isDate;
    function noop() {}
    exports.noop = noop;
    function stringify(token) {
        if (typeof token === 'string') {
            return token;
        }
        if (token === undefined || token === null) {
            return '' + token;
        }
        if (token.overriddenName) {
            return token.overriddenName;
        }
        if (token.name) {
            return token.name;
        }
        var res = token.toString();
        var newLineIndex = res.indexOf('\n');
        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
    }
    exports.stringify = stringify;
    // serialize / deserialize enum exist only for consistency with dart API
    // enums in typescript don't need to be serialized
    function serializeEnum(val) {
        return val;
    }
    exports.serializeEnum = serializeEnum;
    function deserializeEnum(val, values) {
        return val;
    }
    exports.deserializeEnum = deserializeEnum;
    function resolveEnumToken(enumValue, val) {
        return enumValue[val];
    }
    exports.resolveEnumToken = resolveEnumToken;
    var StringWrapper = function () {
        function StringWrapper() {}
        StringWrapper.fromCharCode = function (code) {
            return String.fromCharCode(code);
        };
        StringWrapper.charCodeAt = function (s, index) {
            return s.charCodeAt(index);
        };
        StringWrapper.split = function (s, regExp) {
            return s.split(regExp);
        };
        StringWrapper.equals = function (s, s2) {
            return s === s2;
        };
        StringWrapper.stripLeft = function (s, charVal) {
            if (s && s.length) {
                var pos = 0;
                for (var i = 0; i < s.length; i++) {
                    if (s[i] != charVal) break;
                    pos++;
                }
                s = s.substring(pos);
            }
            return s;
        };
        StringWrapper.stripRight = function (s, charVal) {
            if (s && s.length) {
                var pos = s.length;
                for (var i = s.length - 1; i >= 0; i--) {
                    if (s[i] != charVal) break;
                    pos--;
                }
                s = s.substring(0, pos);
            }
            return s;
        };
        StringWrapper.replace = function (s, from, replace) {
            return s.replace(from, replace);
        };
        StringWrapper.replaceAll = function (s, from, replace) {
            return s.replace(from, replace);
        };
        StringWrapper.slice = function (s, from, to) {
            if (from === void 0) {
                from = 0;
            }
            if (to === void 0) {
                to = null;
            }
            return s.slice(from, to === null ? undefined : to);
        };
        StringWrapper.replaceAllMapped = function (s, from, cb) {
            return s.replace(from, function () {
                var matches = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    matches[_i - 0] = arguments[_i];
                }
                // Remove offset & string from the result array
                matches.splice(-2, 2);
                // The callback receives match, p1, ..., pn
                return cb(matches);
            });
        };
        StringWrapper.contains = function (s, substr) {
            return s.indexOf(substr) != -1;
        };
        StringWrapper.compare = function (a, b) {
            if (a < b) {
                return -1;
            } else if (a > b) {
                return 1;
            } else {
                return 0;
            }
        };
        return StringWrapper;
    }();
    exports.StringWrapper = StringWrapper;
    var StringJoiner = function () {
        function StringJoiner(parts) {
            if (parts === void 0) {
                parts = [];
            }
            this.parts = parts;
        }
        StringJoiner.prototype.add = function (part) {
            this.parts.push(part);
        };
        StringJoiner.prototype.toString = function () {
            return this.parts.join('');
        };
        return StringJoiner;
    }();
    exports.StringJoiner = StringJoiner;
    var NumberParseError = function (_super) {
        __extends(NumberParseError, _super);
        function NumberParseError(message) {
            _super.call(this);
            this.message = message;
        }
        NumberParseError.prototype.toString = function () {
            return this.message;
        };
        return NumberParseError;
    }(Error);
    exports.NumberParseError = NumberParseError;
    var NumberWrapper = function () {
        function NumberWrapper() {}
        NumberWrapper.toFixed = function (n, fractionDigits) {
            return n.toFixed(fractionDigits);
        };
        NumberWrapper.equal = function (a, b) {
            return a === b;
        };
        NumberWrapper.parseIntAutoRadix = function (text) {
            var result = parseInt(text);
            if (isNaN(result)) {
                throw new NumberParseError('Invalid integer literal when parsing ' + text);
            }
            return result;
        };
        NumberWrapper.parseInt = function (text, radix) {
            if (radix == 10) {
                if (/^(\-|\+)?[0-9]+$/.test(text)) {
                    return parseInt(text, radix);
                }
            } else if (radix == 16) {
                if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
                    return parseInt(text, radix);
                }
            } else {
                var result = parseInt(text, radix);
                if (!isNaN(result)) {
                    return result;
                }
            }
            throw new NumberParseError('Invalid integer literal when parsing ' + text + ' in base ' + radix);
        };
        // TODO: NaN is a valid literal but is returned by parseFloat to indicate an error.
        NumberWrapper.parseFloat = function (text) {
            return parseFloat(text);
        };
        Object.defineProperty(NumberWrapper, "NaN", {
            get: function () {
                return NaN;
            },
            enumerable: true,
            configurable: true
        });
        NumberWrapper.isNumeric = function (value) {
            return !isNaN(value - parseFloat(value));
        };
        NumberWrapper.isNaN = function (value) {
            return isNaN(value);
        };
        NumberWrapper.isInteger = function (value) {
            return Number.isInteger(value);
        };
        return NumberWrapper;
    }();
    exports.NumberWrapper = NumberWrapper;
    exports.RegExp = _global.RegExp;
    var FunctionWrapper = function () {
        function FunctionWrapper() {}
        FunctionWrapper.apply = function (fn, posArgs) {
            return fn.apply(null, posArgs);
        };
        FunctionWrapper.bind = function (fn, scope) {
            return fn.bind(scope);
        };
        return FunctionWrapper;
    }();
    exports.FunctionWrapper = FunctionWrapper;
    // JS has NaN !== NaN
    function looseIdentical(a, b) {
        return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
    }
    exports.looseIdentical = looseIdentical;
    // JS considers NaN is the same as NaN for map Key (while NaN !== NaN otherwise)
    // see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map
    function getMapKey(value) {
        return value;
    }
    exports.getMapKey = getMapKey;
    function normalizeBlank(obj) {
        return isBlank(obj) ? null : obj;
    }
    exports.normalizeBlank = normalizeBlank;
    function normalizeBool(obj) {
        return isBlank(obj) ? false : obj;
    }
    exports.normalizeBool = normalizeBool;
    function isJsObject(o) {
        return o !== null && (typeof o === 'function' || typeof o === 'object');
    }
    exports.isJsObject = isJsObject;
    function print(obj) {
        console.log(obj);
    }
    exports.print = print;
    function warn(obj) {
        console.warn(obj);
    }
    exports.warn = warn;
    // Can't be all uppercase as our transpiler would think it is a special directive...
    var Json = function () {
        function Json() {}
        Json.parse = function (s) {
            return _global.JSON.parse(s);
        };
        Json.stringify = function (data) {
            // Dart doesn't take 3 arguments
            return _global.JSON.stringify(data, null, 2);
        };
        return Json;
    }();
    exports.Json = Json;
    var DateWrapper = function () {
        function DateWrapper() {}
        DateWrapper.create = function (year, month, day, hour, minutes, seconds, milliseconds) {
            if (month === void 0) {
                month = 1;
            }
            if (day === void 0) {
                day = 1;
            }
            if (hour === void 0) {
                hour = 0;
            }
            if (minutes === void 0) {
                minutes = 0;
            }
            if (seconds === void 0) {
                seconds = 0;
            }
            if (milliseconds === void 0) {
                milliseconds = 0;
            }
            return new exports.Date(year, month - 1, day, hour, minutes, seconds, milliseconds);
        };
        DateWrapper.fromISOString = function (str) {
            return new exports.Date(str);
        };
        DateWrapper.fromMillis = function (ms) {
            return new exports.Date(ms);
        };
        DateWrapper.toMillis = function (date) {
            return date.getTime();
        };
        DateWrapper.now = function () {
            return new exports.Date();
        };
        DateWrapper.toJson = function (date) {
            return date.toJSON();
        };
        return DateWrapper;
    }();
    exports.DateWrapper = DateWrapper;
    function setValueOnPath(global, path, value) {
        var parts = path.split('.');
        var obj = global;
        while (parts.length > 1) {
            var name = parts.shift();
            if (obj.hasOwnProperty(name) && isPresent(obj[name])) {
                obj = obj[name];
            } else {
                obj = obj[name] = {};
            }
        }
        if (obj === undefined || obj === null) {
            obj = {};
        }
        obj[parts.shift()] = value;
    }
    exports.setValueOnPath = setValueOnPath;
    var _symbolIterator = null;
    function getSymbolIterator() {
        if (isBlank(_symbolIterator)) {
            if (isPresent(globalScope.Symbol) && isPresent(Symbol.iterator)) {
                _symbolIterator = Symbol.iterator;
            } else {
                // es6-shim specific logic
                var keys = Object.getOwnPropertyNames(Map.prototype);
                for (var i = 0; i < keys.length; ++i) {
                    var key = keys[i];
                    if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {
                        _symbolIterator = key;
                    }
                }
            }
        }
        return _symbolIterator;
    }
    exports.getSymbolIterator = getSymbolIterator;
    function evalExpression(sourceUrl, expr, declarations, vars) {
        var fnBody = declarations + "\nreturn " + expr + "\n//# sourceURL=" + sourceUrl;
        var fnArgNames = [];
        var fnArgValues = [];
        for (var argName in vars) {
            fnArgNames.push(argName);
            fnArgValues.push(vars[argName]);
        }
        return new (Function.bind.apply(Function, [void 0].concat(fnArgNames.concat(fnBody))))().apply(void 0, fnArgValues);
    }
    exports.evalExpression = evalExpression;
    function isPrimitive(obj) {
        return !isJsObject(obj);
    }
    exports.isPrimitive = isPrimitive;
    function hasConstructor(value, type) {
        return value.constructor === type;
    }
    exports.hasConstructor = hasConstructor;
    function escape(s) {
        return _global.encodeURI(s);
    }
    exports.escape = escape;
    function escapeRegExp(s) {
        return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
    }
    exports.escapeRegExp = escapeRegExp;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/compiler@2.0.0-rc.5/src/output/output_ast.js", ["../facade/lang", "reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var lang_1 = $__require("../facade/lang");
    //// Types
    (function (TypeModifier) {
        TypeModifier[TypeModifier["Const"] = 0] = "Const";
    })(exports.TypeModifier || (exports.TypeModifier = {}));
    var TypeModifier = exports.TypeModifier;
    var Type = function () {
        function Type(modifiers) {
            if (modifiers === void 0) {
                modifiers = null;
            }
            this.modifiers = modifiers;
            if (lang_1.isBlank(modifiers)) {
                this.modifiers = [];
            }
        }
        Type.prototype.hasModifier = function (modifier) {
            return this.modifiers.indexOf(modifier) !== -1;
        };
        return Type;
    }();
    exports.Type = Type;
    (function (BuiltinTypeName) {
        BuiltinTypeName[BuiltinTypeName["Dynamic"] = 0] = "Dynamic";
        BuiltinTypeName[BuiltinTypeName["Bool"] = 1] = "Bool";
        BuiltinTypeName[BuiltinTypeName["String"] = 2] = "String";
        BuiltinTypeName[BuiltinTypeName["Int"] = 3] = "Int";
        BuiltinTypeName[BuiltinTypeName["Number"] = 4] = "Number";
        BuiltinTypeName[BuiltinTypeName["Function"] = 5] = "Function";
    })(exports.BuiltinTypeName || (exports.BuiltinTypeName = {}));
    var BuiltinTypeName = exports.BuiltinTypeName;
    var BuiltinType = function (_super) {
        __extends(BuiltinType, _super);
        function BuiltinType(name, modifiers) {
            if (modifiers === void 0) {
                modifiers = null;
            }
            _super.call(this, modifiers);
            this.name = name;
        }
        BuiltinType.prototype.visitType = function (visitor, context) {
            return visitor.visitBuiltintType(this, context);
        };
        return BuiltinType;
    }(Type);
    exports.BuiltinType = BuiltinType;
    var ExternalType = function (_super) {
        __extends(ExternalType, _super);
        function ExternalType(value, typeParams, modifiers) {
            if (typeParams === void 0) {
                typeParams = null;
            }
            if (modifiers === void 0) {
                modifiers = null;
            }
            _super.call(this, modifiers);
            this.value = value;
            this.typeParams = typeParams;
        }
        ExternalType.prototype.visitType = function (visitor, context) {
            return visitor.visitExternalType(this, context);
        };
        return ExternalType;
    }(Type);
    exports.ExternalType = ExternalType;
    var ArrayType = function (_super) {
        __extends(ArrayType, _super);
        function ArrayType(of, modifiers) {
            if (modifiers === void 0) {
                modifiers = null;
            }
            _super.call(this, modifiers);
            this.of = of;
        }
        ArrayType.prototype.visitType = function (visitor, context) {
            return visitor.visitArrayType(this, context);
        };
        return ArrayType;
    }(Type);
    exports.ArrayType = ArrayType;
    var MapType = function (_super) {
        __extends(MapType, _super);
        function MapType(valueType, modifiers) {
            if (modifiers === void 0) {
                modifiers = null;
            }
            _super.call(this, modifiers);
            this.valueType = valueType;
        }
        MapType.prototype.visitType = function (visitor, context) {
            return visitor.visitMapType(this, context);
        };
        return MapType;
    }(Type);
    exports.MapType = MapType;
    exports.DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);
    exports.BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);
    exports.INT_TYPE = new BuiltinType(BuiltinTypeName.Int);
    exports.NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);
    exports.STRING_TYPE = new BuiltinType(BuiltinTypeName.String);
    exports.FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);
    ///// Expressions
    (function (BinaryOperator) {
        BinaryOperator[BinaryOperator["Equals"] = 0] = "Equals";
        BinaryOperator[BinaryOperator["NotEquals"] = 1] = "NotEquals";
        BinaryOperator[BinaryOperator["Identical"] = 2] = "Identical";
        BinaryOperator[BinaryOperator["NotIdentical"] = 3] = "NotIdentical";
        BinaryOperator[BinaryOperator["Minus"] = 4] = "Minus";
        BinaryOperator[BinaryOperator["Plus"] = 5] = "Plus";
        BinaryOperator[BinaryOperator["Divide"] = 6] = "Divide";
        BinaryOperator[BinaryOperator["Multiply"] = 7] = "Multiply";
        BinaryOperator[BinaryOperator["Modulo"] = 8] = "Modulo";
        BinaryOperator[BinaryOperator["And"] = 9] = "And";
        BinaryOperator[BinaryOperator["Or"] = 10] = "Or";
        BinaryOperator[BinaryOperator["Lower"] = 11] = "Lower";
        BinaryOperator[BinaryOperator["LowerEquals"] = 12] = "LowerEquals";
        BinaryOperator[BinaryOperator["Bigger"] = 13] = "Bigger";
        BinaryOperator[BinaryOperator["BiggerEquals"] = 14] = "BiggerEquals";
    })(exports.BinaryOperator || (exports.BinaryOperator = {}));
    var BinaryOperator = exports.BinaryOperator;
    var Expression = function () {
        function Expression(type) {
            this.type = type;
        }
        Expression.prototype.prop = function (name) {
            return new ReadPropExpr(this, name);
        };
        Expression.prototype.key = function (index, type) {
            if (type === void 0) {
                type = null;
            }
            return new ReadKeyExpr(this, index, type);
        };
        Expression.prototype.callMethod = function (name, params) {
            return new InvokeMethodExpr(this, name, params);
        };
        Expression.prototype.callFn = function (params) {
            return new InvokeFunctionExpr(this, params);
        };
        Expression.prototype.instantiate = function (params, type) {
            if (type === void 0) {
                type = null;
            }
            return new InstantiateExpr(this, params, type);
        };
        Expression.prototype.conditional = function (trueCase, falseCase) {
            if (falseCase === void 0) {
                falseCase = null;
            }
            return new ConditionalExpr(this, trueCase, falseCase);
        };
        Expression.prototype.equals = function (rhs) {
            return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs);
        };
        Expression.prototype.notEquals = function (rhs) {
            return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs);
        };
        Expression.prototype.identical = function (rhs) {
            return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs);
        };
        Expression.prototype.notIdentical = function (rhs) {
            return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs);
        };
        Expression.prototype.minus = function (rhs) {
            return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs);
        };
        Expression.prototype.plus = function (rhs) {
            return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs);
        };
        Expression.prototype.divide = function (rhs) {
            return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs);
        };
        Expression.prototype.multiply = function (rhs) {
            return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs);
        };
        Expression.prototype.modulo = function (rhs) {
            return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs);
        };
        Expression.prototype.and = function (rhs) {
            return new BinaryOperatorExpr(BinaryOperator.And, this, rhs);
        };
        Expression.prototype.or = function (rhs) {
            return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs);
        };
        Expression.prototype.lower = function (rhs) {
            return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs);
        };
        Expression.prototype.lowerEquals = function (rhs) {
            return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs);
        };
        Expression.prototype.bigger = function (rhs) {
            return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs);
        };
        Expression.prototype.biggerEquals = function (rhs) {
            return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs);
        };
        Expression.prototype.isBlank = function () {
            // Note: We use equals by purpose here to compare to null and undefined in JS.
            return this.equals(exports.NULL_EXPR);
        };
        Expression.prototype.cast = function (type) {
            return new CastExpr(this, type);
        };
        Expression.prototype.toStmt = function () {
            return new ExpressionStatement(this);
        };
        return Expression;
    }();
    exports.Expression = Expression;
    (function (BuiltinVar) {
        BuiltinVar[BuiltinVar["This"] = 0] = "This";
        BuiltinVar[BuiltinVar["Super"] = 1] = "Super";
        BuiltinVar[BuiltinVar["CatchError"] = 2] = "CatchError";
        BuiltinVar[BuiltinVar["CatchStack"] = 3] = "CatchStack";
    })(exports.BuiltinVar || (exports.BuiltinVar = {}));
    var BuiltinVar = exports.BuiltinVar;
    var ReadVarExpr = function (_super) {
        __extends(ReadVarExpr, _super);
        function ReadVarExpr(name, type) {
            if (type === void 0) {
                type = null;
            }
            _super.call(this, type);
            if (lang_1.isString(name)) {
                this.name = name;
                this.builtin = null;
            } else {
                this.name = null;
                this.builtin = name;
            }
        }
        ReadVarExpr.prototype.visitExpression = function (visitor, context) {
            return visitor.visitReadVarExpr(this, context);
        };
        ReadVarExpr.prototype.set = function (value) {
            return new WriteVarExpr(this.name, value);
        };
        return ReadVarExpr;
    }(Expression);
    exports.ReadVarExpr = ReadVarExpr;
    var WriteVarExpr = function (_super) {
        __extends(WriteVarExpr, _super);
        function WriteVarExpr(name, value, type) {
            if (type === void 0) {
                type = null;
            }
            _super.call(this, lang_1.isPresent(type) ? type : value.type);
            this.name = name;
            this.value = value;
        }
        WriteVarExpr.prototype.visitExpression = function (visitor, context) {
            return visitor.visitWriteVarExpr(this, context);
        };
        WriteVarExpr.prototype.toDeclStmt = function (type, modifiers) {
            if (type === void 0) {
                type = null;
            }
            if (modifiers === void 0) {
                modifiers = null;
            }
            return new DeclareVarStmt(this.name, this.value, type, modifiers);
        };
        return WriteVarExpr;
    }(Expression);
    exports.WriteVarExpr = WriteVarExpr;
    var WriteKeyExpr = function (_super) {
        __extends(WriteKeyExpr, _super);
        function WriteKeyExpr(receiver, index, value, type) {
            if (type === void 0) {
                type = null;
            }
            _super.call(this, lang_1.isPresent(type) ? type : value.type);
            this.receiver = receiver;
            this.index = index;
            this.value = value;
        }
        WriteKeyExpr.prototype.visitExpression = function (visitor, context) {
            return visitor.visitWriteKeyExpr(this, context);
        };
        return WriteKeyExpr;
    }(Expression);
    exports.WriteKeyExpr = WriteKeyExpr;
    var WritePropExpr = function (_super) {
        __extends(WritePropExpr, _super);
        function WritePropExpr(receiver, name, value, type) {
            if (type === void 0) {
                type = null;
            }
            _super.call(this, lang_1.isPresent(type) ? type : value.type);
            this.receiver = receiver;
            this.name = name;
            this.value = value;
        }
        WritePropExpr.prototype.visitExpression = function (visitor, context) {
            return visitor.visitWritePropExpr(this, context);
        };
        return WritePropExpr;
    }(Expression);
    exports.WritePropExpr = WritePropExpr;
    (function (BuiltinMethod) {
        BuiltinMethod[BuiltinMethod["ConcatArray"] = 0] = "ConcatArray";
        BuiltinMethod[BuiltinMethod["SubscribeObservable"] = 1] = "SubscribeObservable";
        BuiltinMethod[BuiltinMethod["bind"] = 2] = "bind";
    })(exports.BuiltinMethod || (exports.BuiltinMethod = {}));
    var BuiltinMethod = exports.BuiltinMethod;
    var InvokeMethodExpr = function (_super) {
        __extends(InvokeMethodExpr, _super);
        function InvokeMethodExpr(receiver, method, args, type) {
            if (type === void 0) {
                type = null;
            }
            _super.call(this, type);
            this.receiver = receiver;
            this.args = args;
            if (lang_1.isString(method)) {
                this.name = method;
                this.builtin = null;
            } else {
                this.name = null;
                this.builtin = method;
            }
        }
        InvokeMethodExpr.prototype.visitExpression = function (visitor, context) {
            return visitor.visitInvokeMethodExpr(this, context);
        };
        return InvokeMethodExpr;
    }(Expression);
    exports.InvokeMethodExpr = InvokeMethodExpr;
    var InvokeFunctionExpr = function (_super) {
        __extends(InvokeFunctionExpr, _super);
        function InvokeFunctionExpr(fn, args, type) {
            if (type === void 0) {
                type = null;
            }
            _super.call(this, type);
            this.fn = fn;
            this.args = args;
        }
        InvokeFunctionExpr.prototype.visitExpression = function (visitor, context) {
            return visitor.visitInvokeFunctionExpr(this, context);
        };
        return InvokeFunctionExpr;
    }(Expression);
    exports.InvokeFunctionExpr = InvokeFunctionExpr;
    var InstantiateExpr = function (_super) {
        __extends(InstantiateExpr, _super);
        function InstantiateExpr(classExpr, args, type) {
            _super.call(this, type);
            this.classExpr = classExpr;
            this.args = args;
        }
        InstantiateExpr.prototype.visitExpression = function (visitor, context) {
            return visitor.visitInstantiateExpr(this, context);
        };
        return InstantiateExpr;
    }(Expression);
    exports.InstantiateExpr = InstantiateExpr;
    var LiteralExpr = function (_super) {
        __extends(LiteralExpr, _super);
        function LiteralExpr(value, type) {
            if (type === void 0) {
                type = null;
            }
            _super.call(this, type);
            this.value = value;
        }
        LiteralExpr.prototype.visitExpression = function (visitor, context) {
            return visitor.visitLiteralExpr(this, context);
        };
        return LiteralExpr;
    }(Expression);
    exports.LiteralExpr = LiteralExpr;
    var ExternalExpr = function (_super) {
        __extends(ExternalExpr, _super);
        function ExternalExpr(value, type, typeParams) {
            if (type === void 0) {
                type = null;
            }
            if (typeParams === void 0) {
                typeParams = null;
            }
            _super.call(this, type);
            this.value = value;
            this.typeParams = typeParams;
        }
        ExternalExpr.prototype.visitExpression = function (visitor, context) {
            return visitor.visitExternalExpr(this, context);
        };
        return ExternalExpr;
    }(Expression);
    exports.ExternalExpr = ExternalExpr;
    var ConditionalExpr = function (_super) {
        __extends(ConditionalExpr, _super);
        function ConditionalExpr(condition, trueCase, falseCase, type) {
            if (falseCase === void 0) {
                falseCase = null;
            }
            if (type === void 0) {
                type = null;
            }
            _super.call(this, lang_1.isPresent(type) ? type : trueCase.type);
            this.condition = condition;
            this.falseCase = falseCase;
            this.trueCase = trueCase;
        }
        ConditionalExpr.prototype.visitExpression = function (visitor, context) {
            return visitor.visitConditionalExpr(this, context);
        };
        return ConditionalExpr;
    }(Expression);
    exports.ConditionalExpr = ConditionalExpr;
    var NotExpr = function (_super) {
        __extends(NotExpr, _super);
        function NotExpr(condition) {
            _super.call(this, exports.BOOL_TYPE);
            this.condition = condition;
        }
        NotExpr.prototype.visitExpression = function (visitor, context) {
            return visitor.visitNotExpr(this, context);
        };
        return NotExpr;
    }(Expression);
    exports.NotExpr = NotExpr;
    var CastExpr = function (_super) {
        __extends(CastExpr, _super);
        function CastExpr(value, type) {
            _super.call(this, type);
            this.value = value;
        }
        CastExpr.prototype.visitExpression = function (visitor, context) {
            return visitor.visitCastExpr(this, context);
        };
        return CastExpr;
    }(Expression);
    exports.CastExpr = CastExpr;
    var FnParam = function () {
        function FnParam(name, type) {
            if (type === void 0) {
                type = null;
            }
            this.name = name;
            this.type = type;
        }
        return FnParam;
    }();
    exports.FnParam = FnParam;
    var FunctionExpr = function (_super) {
        __extends(FunctionExpr, _super);
        function FunctionExpr(params, statements, type) {
            if (type === void 0) {
                type = null;
            }
            _super.call(this, type);
            this.params = params;
            this.statements = statements;
        }
        FunctionExpr.prototype.visitExpression = function (visitor, context) {
            return visitor.visitFunctionExpr(this, context);
        };
        FunctionExpr.prototype.toDeclStmt = function (name, modifiers) {
            if (modifiers === void 0) {
                modifiers = null;
            }
            return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers);
        };
        return FunctionExpr;
    }(Expression);
    exports.FunctionExpr = FunctionExpr;
    var BinaryOperatorExpr = function (_super) {
        __extends(BinaryOperatorExpr, _super);
        function BinaryOperatorExpr(operator, lhs, rhs, type) {
            if (type === void 0) {
                type = null;
            }
            _super.call(this, lang_1.isPresent(type) ? type : lhs.type);
            this.operator = operator;
            this.rhs = rhs;
            this.lhs = lhs;
        }
        BinaryOperatorExpr.prototype.visitExpression = function (visitor, context) {
            return visitor.visitBinaryOperatorExpr(this, context);
        };
        return BinaryOperatorExpr;
    }(Expression);
    exports.BinaryOperatorExpr = BinaryOperatorExpr;
    var ReadPropExpr = function (_super) {
        __extends(ReadPropExpr, _super);
        function ReadPropExpr(receiver, name, type) {
            if (type === void 0) {
                type = null;
            }
            _super.call(this, type);
            this.receiver = receiver;
            this.name = name;
        }
        ReadPropExpr.prototype.visitExpression = function (visitor, context) {
            return visitor.visitReadPropExpr(this, context);
        };
        ReadPropExpr.prototype.set = function (value) {
            return new WritePropExpr(this.receiver, this.name, value);
        };
        return ReadPropExpr;
    }(Expression);
    exports.ReadPropExpr = ReadPropExpr;
    var ReadKeyExpr = function (_super) {
        __extends(ReadKeyExpr, _super);
        function ReadKeyExpr(receiver, index, type) {
            if (type === void 0) {
                type = null;
            }
            _super.call(this, type);
            this.receiver = receiver;
            this.index = index;
        }
        ReadKeyExpr.prototype.visitExpression = function (visitor, context) {
            return visitor.visitReadKeyExpr(this, context);
        };
        ReadKeyExpr.prototype.set = function (value) {
            return new WriteKeyExpr(this.receiver, this.index, value);
        };
        return ReadKeyExpr;
    }(Expression);
    exports.ReadKeyExpr = ReadKeyExpr;
    var LiteralArrayExpr = function (_super) {
        __extends(LiteralArrayExpr, _super);
        function LiteralArrayExpr(entries, type) {
            if (type === void 0) {
                type = null;
            }
            _super.call(this, type);
            this.entries = entries;
        }
        LiteralArrayExpr.prototype.visitExpression = function (visitor, context) {
            return visitor.visitLiteralArrayExpr(this, context);
        };
        return LiteralArrayExpr;
    }(Expression);
    exports.LiteralArrayExpr = LiteralArrayExpr;
    var LiteralMapExpr = function (_super) {
        __extends(LiteralMapExpr, _super);
        function LiteralMapExpr(entries, type) {
            if (type === void 0) {
                type = null;
            }
            _super.call(this, type);
            this.entries = entries;
            this.valueType = null;
            if (lang_1.isPresent(type)) {
                this.valueType = type.valueType;
            }
        }
        LiteralMapExpr.prototype.visitExpression = function (visitor, context) {
            return visitor.visitLiteralMapExpr(this, context);
        };
        return LiteralMapExpr;
    }(Expression);
    exports.LiteralMapExpr = LiteralMapExpr;
    exports.THIS_EXPR = new ReadVarExpr(BuiltinVar.This);
    exports.SUPER_EXPR = new ReadVarExpr(BuiltinVar.Super);
    exports.CATCH_ERROR_VAR = new ReadVarExpr(BuiltinVar.CatchError);
    exports.CATCH_STACK_VAR = new ReadVarExpr(BuiltinVar.CatchStack);
    exports.NULL_EXPR = new LiteralExpr(null, null);
    //// Statements
    (function (StmtModifier) {
        StmtModifier[StmtModifier["Final"] = 0] = "Final";
        StmtModifier[StmtModifier["Private"] = 1] = "Private";
    })(exports.StmtModifier || (exports.StmtModifier = {}));
    var StmtModifier = exports.StmtModifier;
    var Statement = function () {
        function Statement(modifiers) {
            if (modifiers === void 0) {
                modifiers = null;
            }
            this.modifiers = modifiers;
            if (lang_1.isBlank(modifiers)) {
                this.modifiers = [];
            }
        }
        Statement.prototype.hasModifier = function (modifier) {
            return this.modifiers.indexOf(modifier) !== -1;
        };
        return Statement;
    }();
    exports.Statement = Statement;
    var DeclareVarStmt = function (_super) {
        __extends(DeclareVarStmt, _super);
        function DeclareVarStmt(name, value, type, modifiers) {
            if (type === void 0) {
                type = null;
            }
            if (modifiers === void 0) {
                modifiers = null;
            }
            _super.call(this, modifiers);
            this.name = name;
            this.value = value;
            this.type = lang_1.isPresent(type) ? type : value.type;
        }
        DeclareVarStmt.prototype.visitStatement = function (visitor, context) {
            return visitor.visitDeclareVarStmt(this, context);
        };
        return DeclareVarStmt;
    }(Statement);
    exports.DeclareVarStmt = DeclareVarStmt;
    var DeclareFunctionStmt = function (_super) {
        __extends(DeclareFunctionStmt, _super);
        function DeclareFunctionStmt(name, params, statements, type, modifiers) {
            if (type === void 0) {
                type = null;
            }
            if (modifiers === void 0) {
                modifiers = null;
            }
            _super.call(this, modifiers);
            this.name = name;
            this.params = params;
            this.statements = statements;
            this.type = type;
        }
        DeclareFunctionStmt.prototype.visitStatement = function (visitor, context) {
            return visitor.visitDeclareFunctionStmt(this, context);
        };
        return DeclareFunctionStmt;
    }(Statement);
    exports.DeclareFunctionStmt = DeclareFunctionStmt;
    var ExpressionStatement = function (_super) {
        __extends(ExpressionStatement, _super);
        function ExpressionStatement(expr) {
            _super.call(this);
            this.expr = expr;
        }
        ExpressionStatement.prototype.visitStatement = function (visitor, context) {
            return visitor.visitExpressionStmt(this, context);
        };
        return ExpressionStatement;
    }(Statement);
    exports.ExpressionStatement = ExpressionStatement;
    var ReturnStatement = function (_super) {
        __extends(ReturnStatement, _super);
        function ReturnStatement(value) {
            _super.call(this);
            this.value = value;
        }
        ReturnStatement.prototype.visitStatement = function (visitor, context) {
            return visitor.visitReturnStmt(this, context);
        };
        return ReturnStatement;
    }(Statement);
    exports.ReturnStatement = ReturnStatement;
    var AbstractClassPart = function () {
        function AbstractClassPart(type, modifiers) {
            if (type === void 0) {
                type = null;
            }
            this.type = type;
            this.modifiers = modifiers;
            if (lang_1.isBlank(modifiers)) {
                this.modifiers = [];
            }
        }
        AbstractClassPart.prototype.hasModifier = function (modifier) {
            return this.modifiers.indexOf(modifier) !== -1;
        };
        return AbstractClassPart;
    }();
    exports.AbstractClassPart = AbstractClassPart;
    var ClassField = function (_super) {
        __extends(ClassField, _super);
        function ClassField(name, type, modifiers) {
            if (type === void 0) {
                type = null;
            }
            if (modifiers === void 0) {
                modifiers = null;
            }
            _super.call(this, type, modifiers);
            this.name = name;
        }
        return ClassField;
    }(AbstractClassPart);
    exports.ClassField = ClassField;
    var ClassMethod = function (_super) {
        __extends(ClassMethod, _super);
        function ClassMethod(name, params, body, type, modifiers) {
            if (type === void 0) {
                type = null;
            }
            if (modifiers === void 0) {
                modifiers = null;
            }
            _super.call(this, type, modifiers);
            this.name = name;
            this.params = params;
            this.body = body;
        }
        return ClassMethod;
    }(AbstractClassPart);
    exports.ClassMethod = ClassMethod;
    var ClassGetter = function (_super) {
        __extends(ClassGetter, _super);
        function ClassGetter(name, body, type, modifiers) {
            if (type === void 0) {
                type = null;
            }
            if (modifiers === void 0) {
                modifiers = null;
            }
            _super.call(this, type, modifiers);
            this.name = name;
            this.body = body;
        }
        return ClassGetter;
    }(AbstractClassPart);
    exports.ClassGetter = ClassGetter;
    var ClassStmt = function (_super) {
        __extends(ClassStmt, _super);
        function ClassStmt(name, parent, fields, getters, constructorMethod, methods, modifiers) {
            if (modifiers === void 0) {
                modifiers = null;
            }
            _super.call(this, modifiers);
            this.name = name;
            this.parent = parent;
            this.fields = fields;
            this.getters = getters;
            this.constructorMethod = constructorMethod;
            this.methods = methods;
        }
        ClassStmt.prototype.visitStatement = function (visitor, context) {
            return visitor.visitDeclareClassStmt(this, context);
        };
        return ClassStmt;
    }(Statement);
    exports.ClassStmt = ClassStmt;
    var IfStmt = function (_super) {
        __extends(IfStmt, _super);
        function IfStmt(condition, trueCase, falseCase) {
            if (falseCase === void 0) {
                falseCase = [];
            }
            _super.call(this);
            this.condition = condition;
            this.trueCase = trueCase;
            this.falseCase = falseCase;
        }
        IfStmt.prototype.visitStatement = function (visitor, context) {
            return visitor.visitIfStmt(this, context);
        };
        return IfStmt;
    }(Statement);
    exports.IfStmt = IfStmt;
    var CommentStmt = function (_super) {
        __extends(CommentStmt, _super);
        function CommentStmt(comment) {
            _super.call(this);
            this.comment = comment;
        }
        CommentStmt.prototype.visitStatement = function (visitor, context) {
            return visitor.visitCommentStmt(this, context);
        };
        return CommentStmt;
    }(Statement);
    exports.CommentStmt = CommentStmt;
    var TryCatchStmt = function (_super) {
        __extends(TryCatchStmt, _super);
        function TryCatchStmt(bodyStmts, catchStmts) {
            _super.call(this);
            this.bodyStmts = bodyStmts;
            this.catchStmts = catchStmts;
        }
        TryCatchStmt.prototype.visitStatement = function (visitor, context) {
            return visitor.visitTryCatchStmt(this, context);
        };
        return TryCatchStmt;
    }(Statement);
    exports.TryCatchStmt = TryCatchStmt;
    var ThrowStmt = function (_super) {
        __extends(ThrowStmt, _super);
        function ThrowStmt(error) {
            _super.call(this);
            this.error = error;
        }
        ThrowStmt.prototype.visitStatement = function (visitor, context) {
            return visitor.visitThrowStmt(this, context);
        };
        return ThrowStmt;
    }(Statement);
    exports.ThrowStmt = ThrowStmt;
    var ExpressionTransformer = function () {
        function ExpressionTransformer() {}
        ExpressionTransformer.prototype.visitReadVarExpr = function (ast, context) {
            return ast;
        };
        ExpressionTransformer.prototype.visitWriteVarExpr = function (expr, context) {
            return new WriteVarExpr(expr.name, expr.value.visitExpression(this, context));
        };
        ExpressionTransformer.prototype.visitWriteKeyExpr = function (expr, context) {
            return new WriteKeyExpr(expr.receiver.visitExpression(this, context), expr.index.visitExpression(this, context), expr.value.visitExpression(this, context));
        };
        ExpressionTransformer.prototype.visitWritePropExpr = function (expr, context) {
            return new WritePropExpr(expr.receiver.visitExpression(this, context), expr.name, expr.value.visitExpression(this, context));
        };
        ExpressionTransformer.prototype.visitInvokeMethodExpr = function (ast, context) {
            var method = lang_1.isPresent(ast.builtin) ? ast.builtin : ast.name;
            return new InvokeMethodExpr(ast.receiver.visitExpression(this, context), method, this.visitAllExpressions(ast.args, context), ast.type);
        };
        ExpressionTransformer.prototype.visitInvokeFunctionExpr = function (ast, context) {
            return new InvokeFunctionExpr(ast.fn.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type);
        };
        ExpressionTransformer.prototype.visitInstantiateExpr = function (ast, context) {
            return new InstantiateExpr(ast.classExpr.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type);
        };
        ExpressionTransformer.prototype.visitLiteralExpr = function (ast, context) {
            return ast;
        };
        ExpressionTransformer.prototype.visitExternalExpr = function (ast, context) {
            return ast;
        };
        ExpressionTransformer.prototype.visitConditionalExpr = function (ast, context) {
            return new ConditionalExpr(ast.condition.visitExpression(this, context), ast.trueCase.visitExpression(this, context), ast.falseCase.visitExpression(this, context));
        };
        ExpressionTransformer.prototype.visitNotExpr = function (ast, context) {
            return new NotExpr(ast.condition.visitExpression(this, context));
        };
        ExpressionTransformer.prototype.visitCastExpr = function (ast, context) {
            return new CastExpr(ast.value.visitExpression(this, context), context);
        };
        ExpressionTransformer.prototype.visitFunctionExpr = function (ast, context) {
            // Don't descend into nested functions
            return ast;
        };
        ExpressionTransformer.prototype.visitBinaryOperatorExpr = function (ast, context) {
            return new BinaryOperatorExpr(ast.operator, ast.lhs.visitExpression(this, context), ast.rhs.visitExpression(this, context), ast.type);
        };
        ExpressionTransformer.prototype.visitReadPropExpr = function (ast, context) {
            return new ReadPropExpr(ast.receiver.visitExpression(this, context), ast.name, ast.type);
        };
        ExpressionTransformer.prototype.visitReadKeyExpr = function (ast, context) {
            return new ReadKeyExpr(ast.receiver.visitExpression(this, context), ast.index.visitExpression(this, context), ast.type);
        };
        ExpressionTransformer.prototype.visitLiteralArrayExpr = function (ast, context) {
            return new LiteralArrayExpr(this.visitAllExpressions(ast.entries, context));
        };
        ExpressionTransformer.prototype.visitLiteralMapExpr = function (ast, context) {
            var _this = this;
            return new LiteralMapExpr(ast.entries.map(function (entry) {
                return [entry[0], entry[1].visitExpression(_this, context)];
            }));
        };
        ExpressionTransformer.prototype.visitAllExpressions = function (exprs, context) {
            var _this = this;
            return exprs.map(function (expr) {
                return expr.visitExpression(_this, context);
            });
        };
        ExpressionTransformer.prototype.visitDeclareVarStmt = function (stmt, context) {
            return new DeclareVarStmt(stmt.name, stmt.value.visitExpression(this, context), stmt.type, stmt.modifiers);
        };
        ExpressionTransformer.prototype.visitDeclareFunctionStmt = function (stmt, context) {
            // Don't descend into nested functions
            return stmt;
        };
        ExpressionTransformer.prototype.visitExpressionStmt = function (stmt, context) {
            return new ExpressionStatement(stmt.expr.visitExpression(this, context));
        };
        ExpressionTransformer.prototype.visitReturnStmt = function (stmt, context) {
            return new ReturnStatement(stmt.value.visitExpression(this, context));
        };
        ExpressionTransformer.prototype.visitDeclareClassStmt = function (stmt, context) {
            // Don't descend into nested functions
            return stmt;
        };
        ExpressionTransformer.prototype.visitIfStmt = function (stmt, context) {
            return new IfStmt(stmt.condition.visitExpression(this, context), this.visitAllStatements(stmt.trueCase, context), this.visitAllStatements(stmt.falseCase, context));
        };
        ExpressionTransformer.prototype.visitTryCatchStmt = function (stmt, context) {
            return new TryCatchStmt(this.visitAllStatements(stmt.bodyStmts, context), this.visitAllStatements(stmt.catchStmts, context));
        };
        ExpressionTransformer.prototype.visitThrowStmt = function (stmt, context) {
            return new ThrowStmt(stmt.error.visitExpression(this, context));
        };
        ExpressionTransformer.prototype.visitCommentStmt = function (stmt, context) {
            return stmt;
        };
        ExpressionTransformer.prototype.visitAllStatements = function (stmts, context) {
            var _this = this;
            return stmts.map(function (stmt) {
                return stmt.visitStatement(_this, context);
            });
        };
        return ExpressionTransformer;
    }();
    exports.ExpressionTransformer = ExpressionTransformer;
    var RecursiveExpressionVisitor = function () {
        function RecursiveExpressionVisitor() {}
        RecursiveExpressionVisitor.prototype.visitReadVarExpr = function (ast, context) {
            return ast;
        };
        RecursiveExpressionVisitor.prototype.visitWriteVarExpr = function (expr, context) {
            expr.value.visitExpression(this, context);
            return expr;
        };
        RecursiveExpressionVisitor.prototype.visitWriteKeyExpr = function (expr, context) {
            expr.receiver.visitExpression(this, context);
            expr.index.visitExpression(this, context);
            expr.value.visitExpression(this, context);
            return expr;
        };
        RecursiveExpressionVisitor.prototype.visitWritePropExpr = function (expr, context) {
            expr.receiver.visitExpression(this, context);
            expr.value.visitExpression(this, context);
            return expr;
        };
        RecursiveExpressionVisitor.prototype.visitInvokeMethodExpr = function (ast, context) {
            ast.receiver.visitExpression(this, context);
            this.visitAllExpressions(ast.args, context);
            return ast;
        };
        RecursiveExpressionVisitor.prototype.visitInvokeFunctionExpr = function (ast, context) {
            ast.fn.visitExpression(this, context);
            this.visitAllExpressions(ast.args, context);
            return ast;
        };
        RecursiveExpressionVisitor.prototype.visitInstantiateExpr = function (ast, context) {
            ast.classExpr.visitExpression(this, context);
            this.visitAllExpressions(ast.args, context);
            return ast;
        };
        RecursiveExpressionVisitor.prototype.visitLiteralExpr = function (ast, context) {
            return ast;
        };
        RecursiveExpressionVisitor.prototype.visitExternalExpr = function (ast, context) {
            return ast;
        };
        RecursiveExpressionVisitor.prototype.visitConditionalExpr = function (ast, context) {
            ast.condition.visitExpression(this, context);
            ast.trueCase.visitExpression(this, context);
            ast.falseCase.visitExpression(this, context);
            return ast;
        };
        RecursiveExpressionVisitor.prototype.visitNotExpr = function (ast, context) {
            ast.condition.visitExpression(this, context);
            return ast;
        };
        RecursiveExpressionVisitor.prototype.visitCastExpr = function (ast, context) {
            ast.value.visitExpression(this, context);
            return ast;
        };
        RecursiveExpressionVisitor.prototype.visitFunctionExpr = function (ast, context) {
            return ast;
        };
        RecursiveExpressionVisitor.prototype.visitBinaryOperatorExpr = function (ast, context) {
            ast.lhs.visitExpression(this, context);
            ast.rhs.visitExpression(this, context);
            return ast;
        };
        RecursiveExpressionVisitor.prototype.visitReadPropExpr = function (ast, context) {
            ast.receiver.visitExpression(this, context);
            return ast;
        };
        RecursiveExpressionVisitor.prototype.visitReadKeyExpr = function (ast, context) {
            ast.receiver.visitExpression(this, context);
            ast.index.visitExpression(this, context);
            return ast;
        };
        RecursiveExpressionVisitor.prototype.visitLiteralArrayExpr = function (ast, context) {
            this.visitAllExpressions(ast.entries, context);
            return ast;
        };
        RecursiveExpressionVisitor.prototype.visitLiteralMapExpr = function (ast, context) {
            var _this = this;
            ast.entries.forEach(function (entry) {
                return entry[1].visitExpression(_this, context);
            });
            return ast;
        };
        RecursiveExpressionVisitor.prototype.visitAllExpressions = function (exprs, context) {
            var _this = this;
            exprs.forEach(function (expr) {
                return expr.visitExpression(_this, context);
            });
        };
        RecursiveExpressionVisitor.prototype.visitDeclareVarStmt = function (stmt, context) {
            stmt.value.visitExpression(this, context);
            return stmt;
        };
        RecursiveExpressionVisitor.prototype.visitDeclareFunctionStmt = function (stmt, context) {
            // Don't descend into nested functions
            return stmt;
        };
        RecursiveExpressionVisitor.prototype.visitExpressionStmt = function (stmt, context) {
            stmt.expr.visitExpression(this, context);
            return stmt;
        };
        RecursiveExpressionVisitor.prototype.visitReturnStmt = function (stmt, context) {
            stmt.value.visitExpression(this, context);
            return stmt;
        };
        RecursiveExpressionVisitor.prototype.visitDeclareClassStmt = function (stmt, context) {
            // Don't descend into nested functions
            return stmt;
        };
        RecursiveExpressionVisitor.prototype.visitIfStmt = function (stmt, context) {
            stmt.condition.visitExpression(this, context);
            this.visitAllStatements(stmt.trueCase, context);
            this.visitAllStatements(stmt.falseCase, context);
            return stmt;
        };
        RecursiveExpressionVisitor.prototype.visitTryCatchStmt = function (stmt, context) {
            this.visitAllStatements(stmt.bodyStmts, context);
            this.visitAllStatements(stmt.catchStmts, context);
            return stmt;
        };
        RecursiveExpressionVisitor.prototype.visitThrowStmt = function (stmt, context) {
            stmt.error.visitExpression(this, context);
            return stmt;
        };
        RecursiveExpressionVisitor.prototype.visitCommentStmt = function (stmt, context) {
            return stmt;
        };
        RecursiveExpressionVisitor.prototype.visitAllStatements = function (stmts, context) {
            var _this = this;
            stmts.forEach(function (stmt) {
                return stmt.visitStatement(_this, context);
            });
        };
        return RecursiveExpressionVisitor;
    }();
    exports.RecursiveExpressionVisitor = RecursiveExpressionVisitor;
    function replaceVarInExpression(varName, newValue, expression) {
        var transformer = new _ReplaceVariableTransformer(varName, newValue);
        return expression.visitExpression(transformer, null);
    }
    exports.replaceVarInExpression = replaceVarInExpression;
    var _ReplaceVariableTransformer = function (_super) {
        __extends(_ReplaceVariableTransformer, _super);
        function _ReplaceVariableTransformer(_varName, _newValue) {
            _super.call(this);
            this._varName = _varName;
            this._newValue = _newValue;
        }
        _ReplaceVariableTransformer.prototype.visitReadVarExpr = function (ast, context) {
            return ast.name == this._varName ? this._newValue : ast;
        };
        return _ReplaceVariableTransformer;
    }(ExpressionTransformer);
    function findReadVarNames(stmts) {
        var finder = new _VariableFinder();
        finder.visitAllStatements(stmts, null);
        return finder.varNames;
    }
    exports.findReadVarNames = findReadVarNames;
    var _VariableFinder = function (_super) {
        __extends(_VariableFinder, _super);
        function _VariableFinder() {
            _super.apply(this, arguments);
            this.varNames = new Set();
        }
        _VariableFinder.prototype.visitReadVarExpr = function (ast, context) {
            this.varNames.add(ast.name);
            return null;
        };
        return _VariableFinder;
    }(RecursiveExpressionVisitor);
    function variable(name, type) {
        if (type === void 0) {
            type = null;
        }
        return new ReadVarExpr(name, type);
    }
    exports.variable = variable;
    function importExpr(id, typeParams) {
        if (typeParams === void 0) {
            typeParams = null;
        }
        return new ExternalExpr(id, null, typeParams);
    }
    exports.importExpr = importExpr;
    function importType(id, typeParams, typeModifiers) {
        if (typeParams === void 0) {
            typeParams = null;
        }
        if (typeModifiers === void 0) {
            typeModifiers = null;
        }
        return lang_1.isPresent(id) ? new ExternalType(id, typeParams, typeModifiers) : null;
    }
    exports.importType = importType;
    function literalArr(values, type) {
        if (type === void 0) {
            type = null;
        }
        return new LiteralArrayExpr(values, type);
    }
    exports.literalArr = literalArr;
    function literalMap(values, type) {
        if (type === void 0) {
            type = null;
        }
        return new LiteralMapExpr(values, type);
    }
    exports.literalMap = literalMap;
    function not(expr) {
        return new NotExpr(expr);
    }
    exports.not = not;
    function fn(params, body, type) {
        if (type === void 0) {
            type = null;
        }
        return new FunctionExpr(params, body, type);
    }
    exports.fn = fn;
    function literal(value, type) {
        if (type === void 0) {
            type = null;
        }
        return new LiteralExpr(value, type);
    }
    exports.literal = literal;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/util.js', ['./facade/collection', './facade/lang', './output/output_ast', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var collection_1 = $__require('./facade/collection');
    var lang_1 = $__require('./facade/lang');
    var o = $__require('./output/output_ast');
    exports.MODULE_SUFFIX = '';
    var CAMEL_CASE_REGEXP = /([A-Z])/g;
    function camelCaseToDashCase(input) {
        return lang_1.StringWrapper.replaceAllMapped(input, CAMEL_CASE_REGEXP, function (m) {
            return '-' + m[1].toLowerCase();
        });
    }
    exports.camelCaseToDashCase = camelCaseToDashCase;
    function splitAtColon(input, defaultValues) {
        var colonIndex = input.indexOf(':');
        if (colonIndex == -1) return defaultValues;
        return [input.slice(0, colonIndex).trim(), input.slice(colonIndex + 1).trim()];
    }
    exports.splitAtColon = splitAtColon;
    function sanitizeIdentifier(name) {
        return lang_1.StringWrapper.replaceAll(name, /\W/g, '_');
    }
    exports.sanitizeIdentifier = sanitizeIdentifier;
    function visitValue(value, visitor, context) {
        if (lang_1.isArray(value)) {
            return visitor.visitArray(value, context);
        } else if (lang_1.isStrictStringMap(value)) {
            return visitor.visitStringMap(value, context);
        } else if (lang_1.isBlank(value) || lang_1.isPrimitive(value)) {
            return visitor.visitPrimitive(value, context);
        } else {
            return visitor.visitOther(value, context);
        }
    }
    exports.visitValue = visitValue;
    var ValueTransformer = function () {
        function ValueTransformer() {}
        ValueTransformer.prototype.visitArray = function (arr, context) {
            var _this = this;
            return arr.map(function (value) {
                return visitValue(value, _this, context);
            });
        };
        ValueTransformer.prototype.visitStringMap = function (map, context) {
            var _this = this;
            var result = {};
            collection_1.StringMapWrapper.forEach(map, function (value /** TODO #9100 */, key /** TODO #9100 */) {
                result[key] = visitValue(value, _this, context);
            });
            return result;
        };
        ValueTransformer.prototype.visitPrimitive = function (value, context) {
            return value;
        };
        ValueTransformer.prototype.visitOther = function (value, context) {
            return value;
        };
        return ValueTransformer;
    }();
    exports.ValueTransformer = ValueTransformer;
    function assetUrl(pkg, path, type) {
        if (path === void 0) {
            path = null;
        }
        if (type === void 0) {
            type = 'src';
        }
        if (path == null) {
            return "asset:@angular/lib/" + pkg + "/index";
        } else {
            return "asset:@angular/lib/" + pkg + "/src/" + path;
        }
    }
    exports.assetUrl = assetUrl;
    function createDiTokenExpression(token) {
        if (lang_1.isPresent(token.value)) {
            return o.literal(token.value);
        } else if (token.identifierIsInstance) {
            return o.importExpr(token.identifier).instantiate([], o.importType(token.identifier, [], [o.TypeModifier.Const]));
        } else {
            return o.importExpr(token.identifier);
        }
    }
    exports.createDiTokenExpression = createDiTokenExpression;
    var SyncAsyncResult = function () {
        function SyncAsyncResult(syncResult, asyncResult) {
            if (asyncResult === void 0) {
                asyncResult = null;
            }
            this.syncResult = syncResult;
            this.asyncResult = asyncResult;
            if (!asyncResult) {
                this.asyncResult = Promise.resolve(syncResult);
            }
        }
        return SyncAsyncResult;
    }();
    exports.SyncAsyncResult = SyncAsyncResult;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/view_compiler/util.js', ['../facade/exceptions', '../facade/lang', '../identifiers', '../output/output_ast', '../util', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var exceptions_1 = $__require('../facade/exceptions');
    var lang_1 = $__require('../facade/lang');
    var identifiers_1 = $__require('../identifiers');
    var o = $__require('../output/output_ast');
    var util_1 = $__require('../util');
    function getPropertyInView(property, callingView, definedView) {
        if (callingView === definedView) {
            return property;
        } else {
            var viewProp = o.THIS_EXPR;
            var currView = callingView;
            while (currView !== definedView && lang_1.isPresent(currView.declarationElement.view)) {
                currView = currView.declarationElement.view;
                viewProp = viewProp.prop('parent');
            }
            if (currView !== definedView) {
                throw new exceptions_1.BaseException("Internal error: Could not calculate a property in a parent view: " + property);
            }
            if (property instanceof o.ReadPropExpr) {
                var readPropExpr_1 = property;
                // Note: Don't cast for members of the AppView base class...
                if (definedView.fields.some(function (field) {
                    return field.name == readPropExpr_1.name;
                }) || definedView.getters.some(function (field) {
                    return field.name == readPropExpr_1.name;
                })) {
                    viewProp = viewProp.cast(definedView.classType);
                }
            }
            return o.replaceVarInExpression(o.THIS_EXPR.name, viewProp, property);
        }
    }
    exports.getPropertyInView = getPropertyInView;
    function injectFromViewParentInjector(token, optional) {
        var args = [util_1.createDiTokenExpression(token)];
        if (optional) {
            args.push(o.NULL_EXPR);
        }
        return o.THIS_EXPR.prop('parentInjector').callMethod('get', args);
    }
    exports.injectFromViewParentInjector = injectFromViewParentInjector;
    function getViewFactoryName(component, embeddedTemplateIndex) {
        return "viewFactory_" + component.type.name + embeddedTemplateIndex;
    }
    exports.getViewFactoryName = getViewFactoryName;
    function createFlatArray(expressions) {
        var lastNonArrayExpressions = [];
        var result = o.literalArr([]);
        for (var i = 0; i < expressions.length; i++) {
            var expr = expressions[i];
            if (expr.type instanceof o.ArrayType) {
                if (lastNonArrayExpressions.length > 0) {
                    result = result.callMethod(o.BuiltinMethod.ConcatArray, [o.literalArr(lastNonArrayExpressions)]);
                    lastNonArrayExpressions = [];
                }
                result = result.callMethod(o.BuiltinMethod.ConcatArray, [expr]);
            } else {
                lastNonArrayExpressions.push(expr);
            }
        }
        if (lastNonArrayExpressions.length > 0) {
            result = result.callMethod(o.BuiltinMethod.ConcatArray, [o.literalArr(lastNonArrayExpressions)]);
        }
        return result;
    }
    exports.createFlatArray = createFlatArray;
    function createPureProxy(fn, argCount, pureProxyProp, view) {
        view.fields.push(new o.ClassField(pureProxyProp.name, null));
        var pureProxyId = argCount < identifiers_1.Identifiers.pureProxies.length ? identifiers_1.Identifiers.pureProxies[argCount] : null;
        if (lang_1.isBlank(pureProxyId)) {
            throw new exceptions_1.BaseException("Unsupported number of argument for pure functions: " + argCount);
        }
        view.createMethod.addStmt(o.THIS_EXPR.prop(pureProxyProp.name).set(o.importExpr(pureProxyId).callFn([fn])).toStmt());
    }
    exports.createPureProxy = createPureProxy;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/view_compiler/view_builder.js', ['@angular/core', '../../core_private', '../animation/animation_compiler', '../compile_metadata', '../facade/collection', '../facade/lang', '../identifiers', '../output/output_ast', '../template_parser/template_ast', '../util', './compile_element', './compile_view', './constants', './util', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var core_private_1 = $__require('../../core_private');
    var animation_compiler_1 = $__require('../animation/animation_compiler');
    var compile_metadata_1 = $__require('../compile_metadata');
    var collection_1 = $__require('../facade/collection');
    var lang_1 = $__require('../facade/lang');
    var identifiers_1 = $__require('../identifiers');
    var o = $__require('../output/output_ast');
    var template_ast_1 = $__require('../template_parser/template_ast');
    var util_1 = $__require('../util');
    var compile_element_1 = $__require('./compile_element');
    var compile_view_1 = $__require('./compile_view');
    var constants_1 = $__require('./constants');
    var util_2 = $__require('./util');
    var IMPLICIT_TEMPLATE_VAR = '\$implicit';
    var CLASS_ATTR = 'class';
    var STYLE_ATTR = 'style';
    var NG_CONTAINER_TAG = 'ng-container';
    var parentRenderNodeVar = o.variable('parentRenderNode');
    var rootSelectorVar = o.variable('rootSelector');
    var ViewFactoryDependency = function () {
        function ViewFactoryDependency(comp, placeholder) {
            this.comp = comp;
            this.placeholder = placeholder;
        }
        return ViewFactoryDependency;
    }();
    exports.ViewFactoryDependency = ViewFactoryDependency;
    var ComponentFactoryDependency = function () {
        function ComponentFactoryDependency(comp, placeholder) {
            this.comp = comp;
            this.placeholder = placeholder;
        }
        return ComponentFactoryDependency;
    }();
    exports.ComponentFactoryDependency = ComponentFactoryDependency;
    function buildView(view, template, targetDependencies) {
        var builderVisitor = new ViewBuilderVisitor(view, targetDependencies);
        template_ast_1.templateVisitAll(builderVisitor, template, view.declarationElement.isNull() ? view.declarationElement : view.declarationElement.parent);
        return builderVisitor.nestedViewCount;
    }
    exports.buildView = buildView;
    function finishView(view, targetStatements) {
        view.afterNodes();
        createViewTopLevelStmts(view, targetStatements);
        view.nodes.forEach(function (node) {
            if (node instanceof compile_element_1.CompileElement && node.hasEmbeddedView) {
                finishView(node.embeddedView, targetStatements);
            }
        });
    }
    exports.finishView = finishView;
    var ViewBuilderVisitor = function () {
        function ViewBuilderVisitor(view, targetDependencies) {
            this.view = view;
            this.targetDependencies = targetDependencies;
            this.nestedViewCount = 0;
            this._animationCompiler = new animation_compiler_1.AnimationCompiler();
        }
        ViewBuilderVisitor.prototype._isRootNode = function (parent) {
            return parent.view !== this.view;
        };
        ViewBuilderVisitor.prototype._addRootNodeAndProject = function (node) {
            var projectedNode = _getOuterContainerOrSelf(node);
            var parent = projectedNode.parent;
            var ngContentIndex = projectedNode.sourceAst.ngContentIndex;
            var vcAppEl = node instanceof compile_element_1.CompileElement && node.hasViewContainer ? node.appElement : null;
            if (this._isRootNode(parent)) {
                // store appElement as root node only for ViewContainers
                if (this.view.viewType !== core_private_1.ViewType.COMPONENT) {
                    this.view.rootNodesOrAppElements.push(lang_1.isPresent(vcAppEl) ? vcAppEl : node.renderNode);
                }
            } else if (lang_1.isPresent(parent.component) && lang_1.isPresent(ngContentIndex)) {
                parent.addContentNode(ngContentIndex, lang_1.isPresent(vcAppEl) ? vcAppEl : node.renderNode);
            }
        };
        ViewBuilderVisitor.prototype._getParentRenderNode = function (parent) {
            parent = _getOuterContainerParentOrSelf(parent);
            if (this._isRootNode(parent)) {
                if (this.view.viewType === core_private_1.ViewType.COMPONENT) {
                    return parentRenderNodeVar;
                } else {
                    // root node of an embedded/host view
                    return o.NULL_EXPR;
                }
            } else {
                return lang_1.isPresent(parent.component) && parent.component.template.encapsulation !== core_1.ViewEncapsulation.Native ? o.NULL_EXPR : parent.renderNode;
            }
        };
        ViewBuilderVisitor.prototype.visitBoundText = function (ast, parent) {
            return this._visitText(ast, '', parent);
        };
        ViewBuilderVisitor.prototype.visitText = function (ast, parent) {
            return this._visitText(ast, ast.value, parent);
        };
        ViewBuilderVisitor.prototype._visitText = function (ast, value, parent) {
            var fieldName = "_text_" + this.view.nodes.length;
            this.view.fields.push(new o.ClassField(fieldName, o.importType(this.view.genConfig.renderTypes.renderText)));
            var renderNode = o.THIS_EXPR.prop(fieldName);
            var compileNode = new compile_element_1.CompileNode(parent, this.view, this.view.nodes.length, renderNode, ast);
            var createRenderNode = o.THIS_EXPR.prop(fieldName).set(constants_1.ViewProperties.renderer.callMethod('createText', [this._getParentRenderNode(parent), o.literal(value), this.view.createMethod.resetDebugInfoExpr(this.view.nodes.length, ast)])).toStmt();
            this.view.nodes.push(compileNode);
            this.view.createMethod.addStmt(createRenderNode);
            this._addRootNodeAndProject(compileNode);
            return renderNode;
        };
        ViewBuilderVisitor.prototype.visitNgContent = function (ast, parent) {
            // the projected nodes originate from a different view, so we don't
            // have debug information for them...
            this.view.createMethod.resetDebugInfo(null, ast);
            var parentRenderNode = this._getParentRenderNode(parent);
            var nodesExpression = constants_1.ViewProperties.projectableNodes.key(o.literal(ast.index), new o.ArrayType(o.importType(this.view.genConfig.renderTypes.renderNode)));
            if (parentRenderNode !== o.NULL_EXPR) {
                this.view.createMethod.addStmt(constants_1.ViewProperties.renderer.callMethod('projectNodes', [parentRenderNode, o.importExpr(identifiers_1.Identifiers.flattenNestedViewRenderNodes).callFn([nodesExpression])]).toStmt());
            } else if (this._isRootNode(parent)) {
                if (this.view.viewType !== core_private_1.ViewType.COMPONENT) {
                    // store root nodes only for embedded/host views
                    this.view.rootNodesOrAppElements.push(nodesExpression);
                }
            } else {
                if (lang_1.isPresent(parent.component) && lang_1.isPresent(ast.ngContentIndex)) {
                    parent.addContentNode(ast.ngContentIndex, nodesExpression);
                }
            }
            return null;
        };
        ViewBuilderVisitor.prototype.visitElement = function (ast, parent) {
            var _this = this;
            var nodeIndex = this.view.nodes.length;
            var createRenderNodeExpr;
            var debugContextExpr = this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast);
            if (nodeIndex === 0 && this.view.viewType === core_private_1.ViewType.HOST) {
                createRenderNodeExpr = o.THIS_EXPR.callMethod('selectOrCreateHostElement', [o.literal(ast.name), rootSelectorVar, debugContextExpr]);
            } else {
                if (ast.name === NG_CONTAINER_TAG) {
                    createRenderNodeExpr = constants_1.ViewProperties.renderer.callMethod('createTemplateAnchor', [this._getParentRenderNode(parent), debugContextExpr]);
                } else {
                    createRenderNodeExpr = constants_1.ViewProperties.renderer.callMethod('createElement', [this._getParentRenderNode(parent), o.literal(ast.name), debugContextExpr]);
                }
            }
            var fieldName = "_el_" + nodeIndex;
            this.view.fields.push(new o.ClassField(fieldName, o.importType(this.view.genConfig.renderTypes.renderElement)));
            this.view.createMethod.addStmt(o.THIS_EXPR.prop(fieldName).set(createRenderNodeExpr).toStmt());
            var renderNode = o.THIS_EXPR.prop(fieldName);
            var directives = ast.directives.map(function (directiveAst) {
                return directiveAst.directive;
            });
            var component = directives.find(function (directive) {
                return directive.isComponent;
            });
            var htmlAttrs = _readHtmlAttrs(ast.attrs);
            var attrNameAndValues = _mergeHtmlAndDirectiveAttrs(htmlAttrs, directives);
            for (var i = 0; i < attrNameAndValues.length; i++) {
                var attrName = attrNameAndValues[i][0];
                var attrValue = attrNameAndValues[i][1];
                this.view.createMethod.addStmt(constants_1.ViewProperties.renderer.callMethod('setElementAttribute', [renderNode, o.literal(attrName), o.literal(attrValue)]).toStmt());
            }
            var compileElement = new compile_element_1.CompileElement(parent, this.view, nodeIndex, renderNode, ast, component, directives, ast.providers, ast.hasViewContainer, false, ast.references);
            this.view.nodes.push(compileElement);
            var compViewExpr = null;
            if (lang_1.isPresent(component)) {
                var nestedComponentIdentifier = new compile_metadata_1.CompileIdentifierMetadata({ name: util_2.getViewFactoryName(component, 0) });
                this.targetDependencies.push(new ViewFactoryDependency(component.type, nestedComponentIdentifier));
                var entryComponentIdentifiers = component.entryComponents.map(function (entryComponent) {
                    var id = new compile_metadata_1.CompileIdentifierMetadata({ name: entryComponent.name });
                    _this.targetDependencies.push(new ComponentFactoryDependency(entryComponent, id));
                    return id;
                });
                compileElement.createComponentFactoryResolver(entryComponentIdentifiers);
                compViewExpr = o.variable("compView_" + nodeIndex); // fix highlighting: `
                compileElement.setComponentView(compViewExpr);
                this.view.createMethod.addStmt(compViewExpr.set(o.importExpr(nestedComponentIdentifier).callFn([constants_1.ViewProperties.viewUtils, compileElement.injector, compileElement.appElement])).toDeclStmt());
            }
            compileElement.beforeChildren();
            this._addRootNodeAndProject(compileElement);
            template_ast_1.templateVisitAll(this, ast.children, compileElement);
            compileElement.afterChildren(this.view.nodes.length - nodeIndex - 1);
            if (lang_1.isPresent(compViewExpr)) {
                var codeGenContentNodes;
                if (this.view.component.type.isHost) {
                    codeGenContentNodes = constants_1.ViewProperties.projectableNodes;
                } else {
                    codeGenContentNodes = o.literalArr(compileElement.contentNodesByNgContentIndex.map(function (nodes) {
                        return util_2.createFlatArray(nodes);
                    }));
                }
                this.view.createMethod.addStmt(compViewExpr.callMethod('create', [compileElement.getComponent(), codeGenContentNodes, o.NULL_EXPR]).toStmt());
            }
            return null;
        };
        ViewBuilderVisitor.prototype.visitEmbeddedTemplate = function (ast, parent) {
            var nodeIndex = this.view.nodes.length;
            var fieldName = "_anchor_" + nodeIndex;
            this.view.fields.push(new o.ClassField(fieldName, o.importType(this.view.genConfig.renderTypes.renderComment)));
            this.view.createMethod.addStmt(o.THIS_EXPR.prop(fieldName).set(constants_1.ViewProperties.renderer.callMethod('createTemplateAnchor', [this._getParentRenderNode(parent), this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast)])).toStmt());
            var renderNode = o.THIS_EXPR.prop(fieldName);
            var templateVariableBindings = ast.variables.map(function (varAst) {
                return [varAst.value.length > 0 ? varAst.value : IMPLICIT_TEMPLATE_VAR, varAst.name];
            });
            var directives = ast.directives.map(function (directiveAst) {
                return directiveAst.directive;
            });
            var compileElement = new compile_element_1.CompileElement(parent, this.view, nodeIndex, renderNode, ast, null, directives, ast.providers, ast.hasViewContainer, true, ast.references);
            this.view.nodes.push(compileElement);
            var compiledAnimations = this._animationCompiler.compileComponent(this.view.component, [ast]);
            this.nestedViewCount++;
            var embeddedView = new compile_view_1.CompileView(this.view.component, this.view.genConfig, this.view.pipeMetas, o.NULL_EXPR, compiledAnimations, this.view.viewIndex + this.nestedViewCount, compileElement, templateVariableBindings);
            this.nestedViewCount += buildView(embeddedView, ast.children, this.targetDependencies);
            compileElement.beforeChildren();
            this._addRootNodeAndProject(compileElement);
            compileElement.afterChildren(0);
            return null;
        };
        ViewBuilderVisitor.prototype.visitAttr = function (ast, ctx) {
            return null;
        };
        ViewBuilderVisitor.prototype.visitDirective = function (ast, ctx) {
            return null;
        };
        ViewBuilderVisitor.prototype.visitEvent = function (ast, eventTargetAndNames) {
            return null;
        };
        ViewBuilderVisitor.prototype.visitReference = function (ast, ctx) {
            return null;
        };
        ViewBuilderVisitor.prototype.visitVariable = function (ast, ctx) {
            return null;
        };
        ViewBuilderVisitor.prototype.visitDirectiveProperty = function (ast, context) {
            return null;
        };
        ViewBuilderVisitor.prototype.visitElementProperty = function (ast, context) {
            return null;
        };
        return ViewBuilderVisitor;
    }();
    /**
     * Walks up the nodes while the direct parent is a container.
     *
     * Returns the outer container or the node itself when it is not a direct child of a container.
     *
     * @internal
     */
    function _getOuterContainerOrSelf(node) {
        var view = node.view;
        while (_isNgContainer(node.parent, view)) {
            node = node.parent;
        }
        return node;
    }
    /**
     * Walks up the nodes while they are container and returns the first parent which is not.
     *
     * Returns the parent of the outer container or the node itself when it is not a container.
     *
     * @internal
     */
    function _getOuterContainerParentOrSelf(el) {
        var view = el.view;
        while (_isNgContainer(el, view)) {
            el = el.parent;
        }
        return el;
    }
    function _isNgContainer(node, view) {
        return !node.isNull() && node.sourceAst.name === NG_CONTAINER_TAG && node.view === view;
    }
    function _mergeHtmlAndDirectiveAttrs(declaredHtmlAttrs, directives) {
        var result = {};
        collection_1.StringMapWrapper.forEach(declaredHtmlAttrs, function (value, key) {
            result[key] = value;
        });
        directives.forEach(function (directiveMeta) {
            collection_1.StringMapWrapper.forEach(directiveMeta.hostAttributes, function (value, name) {
                var prevValue = result[name];
                result[name] = lang_1.isPresent(prevValue) ? mergeAttributeValue(name, prevValue, value) : value;
            });
        });
        return mapToKeyValueArray(result);
    }
    function _readHtmlAttrs(attrs) {
        var htmlAttrs = {};
        attrs.forEach(function (ast) {
            htmlAttrs[ast.name] = ast.value;
        });
        return htmlAttrs;
    }
    function mergeAttributeValue(attrName, attrValue1, attrValue2) {
        if (attrName == CLASS_ATTR || attrName == STYLE_ATTR) {
            return attrValue1 + " " + attrValue2;
        } else {
            return attrValue2;
        }
    }
    function mapToKeyValueArray(data) {
        var entryArray = [];
        collection_1.StringMapWrapper.forEach(data, function (value, name) {
            entryArray.push([name, value]);
        });
        // We need to sort to get a defined output order
        // for tests and for caching generated artifacts...
        collection_1.ListWrapper.sort(entryArray, function (entry1, entry2) {
            return lang_1.StringWrapper.compare(entry1[0], entry2[0]);
        });
        return entryArray;
    }
    function createViewTopLevelStmts(view, targetStatements) {
        var nodeDebugInfosVar = o.NULL_EXPR;
        if (view.genConfig.genDebugInfo) {
            nodeDebugInfosVar = o.variable("nodeDebugInfos_" + view.component.type.name + view.viewIndex); // fix highlighting: `
            targetStatements.push(nodeDebugInfosVar.set(o.literalArr(view.nodes.map(createStaticNodeDebugInfo), new o.ArrayType(new o.ExternalType(identifiers_1.Identifiers.StaticNodeDebugInfo), [o.TypeModifier.Const]))).toDeclStmt(null, [o.StmtModifier.Final]));
        }
        var renderCompTypeVar = o.variable("renderType_" + view.component.type.name); // fix highlighting: `
        if (view.viewIndex === 0) {
            targetStatements.push(renderCompTypeVar.set(o.NULL_EXPR).toDeclStmt(o.importType(identifiers_1.Identifiers.RenderComponentType)));
        }
        var viewClass = createViewClass(view, renderCompTypeVar, nodeDebugInfosVar);
        targetStatements.push(viewClass);
        targetStatements.push(createViewFactory(view, viewClass, renderCompTypeVar));
    }
    function createStaticNodeDebugInfo(node) {
        var compileElement = node instanceof compile_element_1.CompileElement ? node : null;
        var providerTokens = [];
        var componentToken = o.NULL_EXPR;
        var varTokenEntries = [];
        if (lang_1.isPresent(compileElement)) {
            providerTokens = compileElement.getProviderTokens();
            if (lang_1.isPresent(compileElement.component)) {
                componentToken = util_1.createDiTokenExpression(identifiers_1.identifierToken(compileElement.component.type));
            }
            collection_1.StringMapWrapper.forEach(compileElement.referenceTokens, function (token, varName) {
                varTokenEntries.push([varName, lang_1.isPresent(token) ? util_1.createDiTokenExpression(token) : o.NULL_EXPR]);
            });
        }
        return o.importExpr(identifiers_1.Identifiers.StaticNodeDebugInfo).instantiate([o.literalArr(providerTokens, new o.ArrayType(o.DYNAMIC_TYPE, [o.TypeModifier.Const])), componentToken, o.literalMap(varTokenEntries, new o.MapType(o.DYNAMIC_TYPE, [o.TypeModifier.Const]))], o.importType(identifiers_1.Identifiers.StaticNodeDebugInfo, null, [o.TypeModifier.Const]));
    }
    function createViewClass(view, renderCompTypeVar, nodeDebugInfosVar) {
        var viewConstructorArgs = [new o.FnParam(constants_1.ViewConstructorVars.viewUtils.name, o.importType(identifiers_1.Identifiers.ViewUtils)), new o.FnParam(constants_1.ViewConstructorVars.parentInjector.name, o.importType(identifiers_1.Identifiers.Injector)), new o.FnParam(constants_1.ViewConstructorVars.declarationEl.name, o.importType(identifiers_1.Identifiers.AppElement))];
        var superConstructorArgs = [o.variable(view.className), renderCompTypeVar, constants_1.ViewTypeEnum.fromValue(view.viewType), constants_1.ViewConstructorVars.viewUtils, constants_1.ViewConstructorVars.parentInjector, constants_1.ViewConstructorVars.declarationEl, constants_1.ChangeDetectorStatusEnum.fromValue(getChangeDetectionMode(view))];
        if (view.genConfig.genDebugInfo) {
            superConstructorArgs.push(nodeDebugInfosVar);
        }
        var viewConstructor = new o.ClassMethod(null, viewConstructorArgs, [o.SUPER_EXPR.callFn(superConstructorArgs).toStmt()]);
        var viewMethods = [new o.ClassMethod('createInternal', [new o.FnParam(rootSelectorVar.name, o.STRING_TYPE)], generateCreateMethod(view), o.importType(identifiers_1.Identifiers.AppElement)), new o.ClassMethod('injectorGetInternal', [new o.FnParam(constants_1.InjectMethodVars.token.name, o.DYNAMIC_TYPE),
        // Note: Can't use o.INT_TYPE here as the method in AppView uses number
        new o.FnParam(constants_1.InjectMethodVars.requestNodeIndex.name, o.NUMBER_TYPE), new o.FnParam(constants_1.InjectMethodVars.notFoundResult.name, o.DYNAMIC_TYPE)], addReturnValuefNotEmpty(view.injectorGetMethod.finish(), constants_1.InjectMethodVars.notFoundResult), o.DYNAMIC_TYPE), new o.ClassMethod('detectChangesInternal', [new o.FnParam(constants_1.DetectChangesVars.throwOnChange.name, o.BOOL_TYPE)], generateDetectChangesMethod(view)), new o.ClassMethod('dirtyParentQueriesInternal', [], view.dirtyParentQueriesMethod.finish()), new o.ClassMethod('destroyInternal', [], view.destroyMethod.finish()), new o.ClassMethod('detachInternal', [], view.detachMethod.finish())].concat(view.eventHandlerMethods);
        var superClass = view.genConfig.genDebugInfo ? identifiers_1.Identifiers.DebugAppView : identifiers_1.Identifiers.AppView;
        var viewClass = new o.ClassStmt(view.className, o.importExpr(superClass, [getContextType(view)]), view.fields, view.getters, viewConstructor, viewMethods.filter(function (method) {
            return method.body.length > 0;
        }));
        return viewClass;
    }
    function createViewFactory(view, viewClass, renderCompTypeVar) {
        var viewFactoryArgs = [new o.FnParam(constants_1.ViewConstructorVars.viewUtils.name, o.importType(identifiers_1.Identifiers.ViewUtils)), new o.FnParam(constants_1.ViewConstructorVars.parentInjector.name, o.importType(identifiers_1.Identifiers.Injector)), new o.FnParam(constants_1.ViewConstructorVars.declarationEl.name, o.importType(identifiers_1.Identifiers.AppElement))];
        var initRenderCompTypeStmts = [];
        var templateUrlInfo;
        if (view.component.template.templateUrl == view.component.type.moduleUrl) {
            templateUrlInfo = view.component.type.moduleUrl + " class " + view.component.type.name + " - inline template";
        } else {
            templateUrlInfo = view.component.template.templateUrl;
        }
        if (view.viewIndex === 0) {
            var animationsExpr = o.literalMap(view.animations.map(function (entry) {
                return [entry.name, entry.fnVariable];
            }));
            initRenderCompTypeStmts = [new o.IfStmt(renderCompTypeVar.identical(o.NULL_EXPR), [renderCompTypeVar.set(constants_1.ViewConstructorVars.viewUtils.callMethod('createRenderComponentType', [o.literal(templateUrlInfo), o.literal(view.component.template.ngContentSelectors.length), constants_1.ViewEncapsulationEnum.fromValue(view.component.template.encapsulation), view.styles, animationsExpr])).toStmt()])];
        }
        return o.fn(viewFactoryArgs, initRenderCompTypeStmts.concat([new o.ReturnStatement(o.variable(viewClass.name).instantiate(viewClass.constructorMethod.params.map(function (param) {
            return o.variable(param.name);
        })))]), o.importType(identifiers_1.Identifiers.AppView, [getContextType(view)])).toDeclStmt(view.viewFactory.name, [o.StmtModifier.Final]);
    }
    function generateCreateMethod(view) {
        var parentRenderNodeExpr = o.NULL_EXPR;
        var parentRenderNodeStmts = [];
        if (view.viewType === core_private_1.ViewType.COMPONENT) {
            parentRenderNodeExpr = constants_1.ViewProperties.renderer.callMethod('createViewRoot', [o.THIS_EXPR.prop('declarationAppElement').prop('nativeElement')]);
            parentRenderNodeStmts = [parentRenderNodeVar.set(parentRenderNodeExpr).toDeclStmt(o.importType(view.genConfig.renderTypes.renderNode), [o.StmtModifier.Final])];
        }
        var resultExpr;
        if (view.viewType === core_private_1.ViewType.HOST) {
            resultExpr = view.nodes[0].appElement;
        } else {
            resultExpr = o.NULL_EXPR;
        }
        return parentRenderNodeStmts.concat(view.createMethod.finish(), [o.THIS_EXPR.callMethod('init', [util_2.createFlatArray(view.rootNodesOrAppElements), o.literalArr(view.nodes.map(function (node) {
            return node.renderNode;
        })), o.literalArr(view.disposables), o.literalArr(view.subscriptions)]).toStmt(), new o.ReturnStatement(resultExpr)]);
    }
    function generateDetectChangesMethod(view) {
        var stmts = [];
        if (view.detectChangesInInputsMethod.isEmpty() && view.updateContentQueriesMethod.isEmpty() && view.afterContentLifecycleCallbacksMethod.isEmpty() && view.detectChangesRenderPropertiesMethod.isEmpty() && view.updateViewQueriesMethod.isEmpty() && view.afterViewLifecycleCallbacksMethod.isEmpty()) {
            return stmts;
        }
        collection_1.ListWrapper.addAll(stmts, view.detectChangesInInputsMethod.finish());
        stmts.push(o.THIS_EXPR.callMethod('detectContentChildrenChanges', [constants_1.DetectChangesVars.throwOnChange]).toStmt());
        var afterContentStmts = view.updateContentQueriesMethod.finish().concat(view.afterContentLifecycleCallbacksMethod.finish());
        if (afterContentStmts.length > 0) {
            stmts.push(new o.IfStmt(o.not(constants_1.DetectChangesVars.throwOnChange), afterContentStmts));
        }
        collection_1.ListWrapper.addAll(stmts, view.detectChangesRenderPropertiesMethod.finish());
        stmts.push(o.THIS_EXPR.callMethod('detectViewChildrenChanges', [constants_1.DetectChangesVars.throwOnChange]).toStmt());
        var afterViewStmts = view.updateViewQueriesMethod.finish().concat(view.afterViewLifecycleCallbacksMethod.finish());
        if (afterViewStmts.length > 0) {
            stmts.push(new o.IfStmt(o.not(constants_1.DetectChangesVars.throwOnChange), afterViewStmts));
        }
        var varStmts = [];
        var readVars = o.findReadVarNames(stmts);
        if (collection_1.SetWrapper.has(readVars, constants_1.DetectChangesVars.changed.name)) {
            varStmts.push(constants_1.DetectChangesVars.changed.set(o.literal(true)).toDeclStmt(o.BOOL_TYPE));
        }
        if (collection_1.SetWrapper.has(readVars, constants_1.DetectChangesVars.changes.name)) {
            varStmts.push(constants_1.DetectChangesVars.changes.set(o.NULL_EXPR).toDeclStmt(new o.MapType(o.importType(identifiers_1.Identifiers.SimpleChange))));
        }
        if (collection_1.SetWrapper.has(readVars, constants_1.DetectChangesVars.valUnwrapper.name)) {
            varStmts.push(constants_1.DetectChangesVars.valUnwrapper.set(o.importExpr(identifiers_1.Identifiers.ValueUnwrapper).instantiate([])).toDeclStmt(null, [o.StmtModifier.Final]));
        }
        return varStmts.concat(stmts);
    }
    function addReturnValuefNotEmpty(statements, value) {
        if (statements.length > 0) {
            return statements.concat([new o.ReturnStatement(value)]);
        } else {
            return statements;
        }
    }
    function getContextType(view) {
        if (view.viewType === core_private_1.ViewType.COMPONENT) {
            return o.importType(view.component.type);
        }
        return o.DYNAMIC_TYPE;
    }
    function getChangeDetectionMode(view) {
        var mode;
        if (view.viewType === core_private_1.ViewType.COMPONENT) {
            mode = core_private_1.isDefaultChangeDetectionStrategy(view.component.changeDetection) ? core_private_1.ChangeDetectorStatus.CheckAlways : core_private_1.ChangeDetectorStatus.CheckOnce;
        } else {
            mode = core_private_1.ChangeDetectorStatus.CheckAlways;
        }
        return mode;
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/src/view_compiler/view_compiler.js', ['@angular/core', '../animation/animation_compiler', '../config', './compile_element', './compile_view', './view_binder', './view_builder', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var animation_compiler_1 = $__require('../animation/animation_compiler');
    var config_1 = $__require('../config');
    var compile_element_1 = $__require('./compile_element');
    var compile_view_1 = $__require('./compile_view');
    var view_binder_1 = $__require('./view_binder');
    var view_builder_1 = $__require('./view_builder');
    var view_builder_2 = $__require('./view_builder');
    exports.ComponentFactoryDependency = view_builder_2.ComponentFactoryDependency;
    exports.ViewFactoryDependency = view_builder_2.ViewFactoryDependency;
    var ViewCompileResult = function () {
        function ViewCompileResult(statements, viewFactoryVar, dependencies) {
            this.statements = statements;
            this.viewFactoryVar = viewFactoryVar;
            this.dependencies = dependencies;
        }
        return ViewCompileResult;
    }();
    exports.ViewCompileResult = ViewCompileResult;
    var ViewCompiler = function () {
        function ViewCompiler(_genConfig) {
            this._genConfig = _genConfig;
            this._animationCompiler = new animation_compiler_1.AnimationCompiler();
        }
        ViewCompiler.prototype.compileComponent = function (component, template, styles, pipes) {
            var dependencies = [];
            var compiledAnimations = this._animationCompiler.compileComponent(component, template);
            var statements = [];
            compiledAnimations.map(function (entry) {
                statements.push(entry.statesMapStatement);
                statements.push(entry.fnStatement);
            });
            var view = new compile_view_1.CompileView(component, this._genConfig, pipes, styles, compiledAnimations, 0, compile_element_1.CompileElement.createNull(), []);
            view_builder_1.buildView(view, template, dependencies);
            // Need to separate binding from creation to be able to refer to
            // variables that have been declared after usage.
            view_binder_1.bindView(view, template);
            view_builder_1.finishView(view, statements);
            return new ViewCompileResult(statements, view.viewFactory.name, dependencies);
        };
        /** @nocollapse */
        ViewCompiler.decorators = [{ type: core_1.Injectable }];
        /** @nocollapse */
        ViewCompiler.ctorParameters = [{ type: config_1.CompilerConfig }];
        return ViewCompiler;
    }();
    exports.ViewCompiler = ViewCompiler;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/private_export.js', ['./src/directive_normalizer', './src/expression_parser/lexer', './src/expression_parser/parser', './src/metadata_resolver', './src/ml_parser/html_parser', './src/ml_parser/interpolation_config', './src/ng_module_compiler', './src/output/path_util', './src/output/ts_emitter', './src/parse_util', './src/schema/dom_element_schema_registry', './src/selector', './src/style_compiler', './src/template_parser/template_parser', './src/view_compiler/view_compiler'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var directive_normalizer = $__require('./src/directive_normalizer');
    var lexer = $__require('./src/expression_parser/lexer');
    var parser = $__require('./src/expression_parser/parser');
    var metadata_resolver = $__require('./src/metadata_resolver');
    var html_parser = $__require('./src/ml_parser/html_parser');
    var interpolation_config = $__require('./src/ml_parser/interpolation_config');
    var ng_module_compiler = $__require('./src/ng_module_compiler');
    var path_util = $__require('./src/output/path_util');
    var ts_emitter = $__require('./src/output/ts_emitter');
    var parse_util = $__require('./src/parse_util');
    var dom_element_schema_registry = $__require('./src/schema/dom_element_schema_registry');
    var selector = $__require('./src/selector');
    var style_compiler = $__require('./src/style_compiler');
    var template_parser = $__require('./src/template_parser/template_parser');
    var view_compiler = $__require('./src/view_compiler/view_compiler');
    var __compiler_private__;
    (function (__compiler_private__) {
        __compiler_private__.SelectorMatcher = selector.SelectorMatcher;
        __compiler_private__.CssSelector = selector.CssSelector;
        __compiler_private__.AssetUrl = path_util.AssetUrl;
        __compiler_private__.ImportGenerator = path_util.ImportGenerator;
        __compiler_private__.CompileMetadataResolver = metadata_resolver.CompileMetadataResolver;
        __compiler_private__.HtmlParser = html_parser.HtmlParser;
        __compiler_private__.InterpolationConfig = interpolation_config.InterpolationConfig;
        __compiler_private__.DirectiveNormalizer = directive_normalizer.DirectiveNormalizer;
        __compiler_private__.Lexer = lexer.Lexer;
        __compiler_private__.Parser = parser.Parser;
        __compiler_private__.ParseLocation = parse_util.ParseLocation;
        __compiler_private__.ParseError = parse_util.ParseError;
        __compiler_private__.ParseErrorLevel = parse_util.ParseErrorLevel;
        __compiler_private__.ParseSourceFile = parse_util.ParseSourceFile;
        __compiler_private__.ParseSourceSpan = parse_util.ParseSourceSpan;
        __compiler_private__.TemplateParser = template_parser.TemplateParser;
        __compiler_private__.DomElementSchemaRegistry = dom_element_schema_registry.DomElementSchemaRegistry;
        __compiler_private__.StyleCompiler = style_compiler.StyleCompiler;
        __compiler_private__.ViewCompiler = view_compiler.ViewCompiler;
        __compiler_private__.NgModuleCompiler = ng_module_compiler.NgModuleCompiler;
        __compiler_private__.TypeScriptEmitter = ts_emitter.TypeScriptEmitter;
    })(__compiler_private__ = exports.__compiler_private__ || (exports.__compiler_private__ = {}));
    

    return module.exports;
});
System.registerDynamic("npm:@angular/compiler@2.0.0-rc.5.json", [], false, function() {
  return {
    "main": "index.js",
    "meta": {
      "src/*.js": {
        "deps": [
          "reflect-metadata",
          "zone.js"
        ]
      }
    },
    "format": "cjs",
    "map": {
      "./src/i18n": "./src/i18n/index.js"
    }
  };
});

System.registerDynamic('npm:@angular/compiler@2.0.0-rc.5/index.js', ['./src/i18n/index', './src/compiler', './src/ml_parser/interpolation_config', './src/schema/element_schema_registry', './src/template_parser/template_ast', './private_export'], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
  }
  /**
   * @module
   * @description
   * Starting point to import all compiler APIs.
   */
  var i18n = $__require('./src/i18n/index');
  exports.i18n = i18n;
  var compiler_1 = $__require('./src/compiler');
  exports.COMPILER_PROVIDERS = compiler_1.COMPILER_PROVIDERS;
  exports.CompileDiDependencyMetadata = compiler_1.CompileDiDependencyMetadata;
  exports.CompileDirectiveMetadata = compiler_1.CompileDirectiveMetadata;
  exports.CompileFactoryMetadata = compiler_1.CompileFactoryMetadata;
  exports.CompileIdentifierMetadata = compiler_1.CompileIdentifierMetadata;
  exports.CompileMetadataWithIdentifier = compiler_1.CompileMetadataWithIdentifier;
  exports.CompilePipeMetadata = compiler_1.CompilePipeMetadata;
  exports.CompileProviderMetadata = compiler_1.CompileProviderMetadata;
  exports.CompileQueryMetadata = compiler_1.CompileQueryMetadata;
  exports.CompileTemplateMetadata = compiler_1.CompileTemplateMetadata;
  exports.CompileTokenMetadata = compiler_1.CompileTokenMetadata;
  exports.CompileTypeMetadata = compiler_1.CompileTypeMetadata;
  exports.CompilerConfig = compiler_1.CompilerConfig;
  exports.DEFAULT_PACKAGE_URL_PROVIDER = compiler_1.DEFAULT_PACKAGE_URL_PROVIDER;
  exports.DirectiveResolver = compiler_1.DirectiveResolver;
  exports.NgModuleResolver = compiler_1.NgModuleResolver;
  exports.OfflineCompiler = compiler_1.OfflineCompiler;
  exports.PipeResolver = compiler_1.PipeResolver;
  exports.RenderTypes = compiler_1.RenderTypes;
  exports.RuntimeCompiler = compiler_1.RuntimeCompiler;
  exports.SourceModule = compiler_1.SourceModule;
  exports.TEMPLATE_TRANSFORMS = compiler_1.TEMPLATE_TRANSFORMS;
  exports.UrlResolver = compiler_1.UrlResolver;
  exports.XHR = compiler_1.XHR;
  exports.analyzeAppProvidersForDeprecatedConfiguration = compiler_1.analyzeAppProvidersForDeprecatedConfiguration;
  exports.createOfflineCompileUrlResolver = compiler_1.createOfflineCompileUrlResolver;
  exports.platformCoreDynamic = compiler_1.platformCoreDynamic;
  var interpolation_config_1 = $__require('./src/ml_parser/interpolation_config');
  exports.InterpolationConfig = interpolation_config_1.InterpolationConfig;
  var element_schema_registry_1 = $__require('./src/schema/element_schema_registry');
  exports.ElementSchemaRegistry = element_schema_registry_1.ElementSchemaRegistry;
  __export($__require('./src/template_parser/template_ast'));
  __export($__require('./private_export'));
  

  return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser-dynamic@2.0.0-rc.5/src/facade/lang.js', ['reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var globalScope;
    if (typeof window === 'undefined') {
        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
            globalScope = self;
        } else {
            globalScope = global;
        }
    } else {
        globalScope = window;
    }
    function scheduleMicroTask(fn) {
        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
    }
    exports.scheduleMicroTask = scheduleMicroTask;
    // Need to declare a new variable for global here since TypeScript
    // exports the original value of the symbol.
    var _global = globalScope;
    exports.global = _global;
    /**
     * Runtime representation a type that a Component or other object is instances of.
     *
     * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by
     * the `MyCustomComponent` constructor function.
     *
     * @stable
     */
    exports.Type = Function;
    function getTypeNameForDebugging(type) {
        if (type['name']) {
            return type['name'];
        }
        return typeof type;
    }
    exports.getTypeNameForDebugging = getTypeNameForDebugging;
    exports.Math = _global.Math;
    exports.Date = _global.Date;
    // TODO: remove calls to assert in production environment
    // Note: Can't just export this and import in in other files
    // as `assert` is a reserved keyword in Dart
    _global.assert = function assert(condition) {
        // TODO: to be fixed properly via #2830, noop for now
    };
    function isPresent(obj) {
        return obj !== undefined && obj !== null;
    }
    exports.isPresent = isPresent;
    function isBlank(obj) {
        return obj === undefined || obj === null;
    }
    exports.isBlank = isBlank;
    function isBoolean(obj) {
        return typeof obj === 'boolean';
    }
    exports.isBoolean = isBoolean;
    function isNumber(obj) {
        return typeof obj === 'number';
    }
    exports.isNumber = isNumber;
    function isString(obj) {
        return typeof obj === 'string';
    }
    exports.isString = isString;
    function isFunction(obj) {
        return typeof obj === 'function';
    }
    exports.isFunction = isFunction;
    function isType(obj) {
        return isFunction(obj);
    }
    exports.isType = isType;
    function isStringMap(obj) {
        return typeof obj === 'object' && obj !== null;
    }
    exports.isStringMap = isStringMap;
    var STRING_MAP_PROTO = Object.getPrototypeOf({});
    function isStrictStringMap(obj) {
        return isStringMap(obj) && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
    }
    exports.isStrictStringMap = isStrictStringMap;
    function isPromise(obj) {
        // allow any Promise/A+ compliant thenable.
        // It's up to the caller to ensure that obj.then conforms to the spec
        return isPresent(obj) && isFunction(obj.then);
    }
    exports.isPromise = isPromise;
    function isArray(obj) {
        return Array.isArray(obj);
    }
    exports.isArray = isArray;
    function isDate(obj) {
        return obj instanceof exports.Date && !isNaN(obj.valueOf());
    }
    exports.isDate = isDate;
    function noop() {}
    exports.noop = noop;
    function stringify(token) {
        if (typeof token === 'string') {
            return token;
        }
        if (token === undefined || token === null) {
            return '' + token;
        }
        if (token.overriddenName) {
            return token.overriddenName;
        }
        if (token.name) {
            return token.name;
        }
        var res = token.toString();
        var newLineIndex = res.indexOf('\n');
        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
    }
    exports.stringify = stringify;
    // serialize / deserialize enum exist only for consistency with dart API
    // enums in typescript don't need to be serialized
    function serializeEnum(val) {
        return val;
    }
    exports.serializeEnum = serializeEnum;
    function deserializeEnum(val, values) {
        return val;
    }
    exports.deserializeEnum = deserializeEnum;
    function resolveEnumToken(enumValue, val) {
        return enumValue[val];
    }
    exports.resolveEnumToken = resolveEnumToken;
    var StringWrapper = function () {
        function StringWrapper() {}
        StringWrapper.fromCharCode = function (code) {
            return String.fromCharCode(code);
        };
        StringWrapper.charCodeAt = function (s, index) {
            return s.charCodeAt(index);
        };
        StringWrapper.split = function (s, regExp) {
            return s.split(regExp);
        };
        StringWrapper.equals = function (s, s2) {
            return s === s2;
        };
        StringWrapper.stripLeft = function (s, charVal) {
            if (s && s.length) {
                var pos = 0;
                for (var i = 0; i < s.length; i++) {
                    if (s[i] != charVal) break;
                    pos++;
                }
                s = s.substring(pos);
            }
            return s;
        };
        StringWrapper.stripRight = function (s, charVal) {
            if (s && s.length) {
                var pos = s.length;
                for (var i = s.length - 1; i >= 0; i--) {
                    if (s[i] != charVal) break;
                    pos--;
                }
                s = s.substring(0, pos);
            }
            return s;
        };
        StringWrapper.replace = function (s, from, replace) {
            return s.replace(from, replace);
        };
        StringWrapper.replaceAll = function (s, from, replace) {
            return s.replace(from, replace);
        };
        StringWrapper.slice = function (s, from, to) {
            if (from === void 0) {
                from = 0;
            }
            if (to === void 0) {
                to = null;
            }
            return s.slice(from, to === null ? undefined : to);
        };
        StringWrapper.replaceAllMapped = function (s, from, cb) {
            return s.replace(from, function () {
                var matches = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    matches[_i - 0] = arguments[_i];
                }
                // Remove offset & string from the result array
                matches.splice(-2, 2);
                // The callback receives match, p1, ..., pn
                return cb(matches);
            });
        };
        StringWrapper.contains = function (s, substr) {
            return s.indexOf(substr) != -1;
        };
        StringWrapper.compare = function (a, b) {
            if (a < b) {
                return -1;
            } else if (a > b) {
                return 1;
            } else {
                return 0;
            }
        };
        return StringWrapper;
    }();
    exports.StringWrapper = StringWrapper;
    var StringJoiner = function () {
        function StringJoiner(parts) {
            if (parts === void 0) {
                parts = [];
            }
            this.parts = parts;
        }
        StringJoiner.prototype.add = function (part) {
            this.parts.push(part);
        };
        StringJoiner.prototype.toString = function () {
            return this.parts.join('');
        };
        return StringJoiner;
    }();
    exports.StringJoiner = StringJoiner;
    var NumberParseError = function (_super) {
        __extends(NumberParseError, _super);
        function NumberParseError(message) {
            _super.call(this);
            this.message = message;
        }
        NumberParseError.prototype.toString = function () {
            return this.message;
        };
        return NumberParseError;
    }(Error);
    exports.NumberParseError = NumberParseError;
    var NumberWrapper = function () {
        function NumberWrapper() {}
        NumberWrapper.toFixed = function (n, fractionDigits) {
            return n.toFixed(fractionDigits);
        };
        NumberWrapper.equal = function (a, b) {
            return a === b;
        };
        NumberWrapper.parseIntAutoRadix = function (text) {
            var result = parseInt(text);
            if (isNaN(result)) {
                throw new NumberParseError('Invalid integer literal when parsing ' + text);
            }
            return result;
        };
        NumberWrapper.parseInt = function (text, radix) {
            if (radix == 10) {
                if (/^(\-|\+)?[0-9]+$/.test(text)) {
                    return parseInt(text, radix);
                }
            } else if (radix == 16) {
                if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
                    return parseInt(text, radix);
                }
            } else {
                var result = parseInt(text, radix);
                if (!isNaN(result)) {
                    return result;
                }
            }
            throw new NumberParseError('Invalid integer literal when parsing ' + text + ' in base ' + radix);
        };
        // TODO: NaN is a valid literal but is returned by parseFloat to indicate an error.
        NumberWrapper.parseFloat = function (text) {
            return parseFloat(text);
        };
        Object.defineProperty(NumberWrapper, "NaN", {
            get: function () {
                return NaN;
            },
            enumerable: true,
            configurable: true
        });
        NumberWrapper.isNumeric = function (value) {
            return !isNaN(value - parseFloat(value));
        };
        NumberWrapper.isNaN = function (value) {
            return isNaN(value);
        };
        NumberWrapper.isInteger = function (value) {
            return Number.isInteger(value);
        };
        return NumberWrapper;
    }();
    exports.NumberWrapper = NumberWrapper;
    exports.RegExp = _global.RegExp;
    var FunctionWrapper = function () {
        function FunctionWrapper() {}
        FunctionWrapper.apply = function (fn, posArgs) {
            return fn.apply(null, posArgs);
        };
        FunctionWrapper.bind = function (fn, scope) {
            return fn.bind(scope);
        };
        return FunctionWrapper;
    }();
    exports.FunctionWrapper = FunctionWrapper;
    // JS has NaN !== NaN
    function looseIdentical(a, b) {
        return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
    }
    exports.looseIdentical = looseIdentical;
    // JS considers NaN is the same as NaN for map Key (while NaN !== NaN otherwise)
    // see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map
    function getMapKey(value) {
        return value;
    }
    exports.getMapKey = getMapKey;
    function normalizeBlank(obj) {
        return isBlank(obj) ? null : obj;
    }
    exports.normalizeBlank = normalizeBlank;
    function normalizeBool(obj) {
        return isBlank(obj) ? false : obj;
    }
    exports.normalizeBool = normalizeBool;
    function isJsObject(o) {
        return o !== null && (typeof o === 'function' || typeof o === 'object');
    }
    exports.isJsObject = isJsObject;
    function print(obj) {
        console.log(obj);
    }
    exports.print = print;
    function warn(obj) {
        console.warn(obj);
    }
    exports.warn = warn;
    // Can't be all uppercase as our transpiler would think it is a special directive...
    var Json = function () {
        function Json() {}
        Json.parse = function (s) {
            return _global.JSON.parse(s);
        };
        Json.stringify = function (data) {
            // Dart doesn't take 3 arguments
            return _global.JSON.stringify(data, null, 2);
        };
        return Json;
    }();
    exports.Json = Json;
    var DateWrapper = function () {
        function DateWrapper() {}
        DateWrapper.create = function (year, month, day, hour, minutes, seconds, milliseconds) {
            if (month === void 0) {
                month = 1;
            }
            if (day === void 0) {
                day = 1;
            }
            if (hour === void 0) {
                hour = 0;
            }
            if (minutes === void 0) {
                minutes = 0;
            }
            if (seconds === void 0) {
                seconds = 0;
            }
            if (milliseconds === void 0) {
                milliseconds = 0;
            }
            return new exports.Date(year, month - 1, day, hour, minutes, seconds, milliseconds);
        };
        DateWrapper.fromISOString = function (str) {
            return new exports.Date(str);
        };
        DateWrapper.fromMillis = function (ms) {
            return new exports.Date(ms);
        };
        DateWrapper.toMillis = function (date) {
            return date.getTime();
        };
        DateWrapper.now = function () {
            return new exports.Date();
        };
        DateWrapper.toJson = function (date) {
            return date.toJSON();
        };
        return DateWrapper;
    }();
    exports.DateWrapper = DateWrapper;
    function setValueOnPath(global, path, value) {
        var parts = path.split('.');
        var obj = global;
        while (parts.length > 1) {
            var name = parts.shift();
            if (obj.hasOwnProperty(name) && isPresent(obj[name])) {
                obj = obj[name];
            } else {
                obj = obj[name] = {};
            }
        }
        if (obj === undefined || obj === null) {
            obj = {};
        }
        obj[parts.shift()] = value;
    }
    exports.setValueOnPath = setValueOnPath;
    var _symbolIterator = null;
    function getSymbolIterator() {
        if (isBlank(_symbolIterator)) {
            if (isPresent(globalScope.Symbol) && isPresent(Symbol.iterator)) {
                _symbolIterator = Symbol.iterator;
            } else {
                // es6-shim specific logic
                var keys = Object.getOwnPropertyNames(Map.prototype);
                for (var i = 0; i < keys.length; ++i) {
                    var key = keys[i];
                    if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {
                        _symbolIterator = key;
                    }
                }
            }
        }
        return _symbolIterator;
    }
    exports.getSymbolIterator = getSymbolIterator;
    function evalExpression(sourceUrl, expr, declarations, vars) {
        var fnBody = declarations + "\nreturn " + expr + "\n//# sourceURL=" + sourceUrl;
        var fnArgNames = [];
        var fnArgValues = [];
        for (var argName in vars) {
            fnArgNames.push(argName);
            fnArgValues.push(vars[argName]);
        }
        return new (Function.bind.apply(Function, [void 0].concat(fnArgNames.concat(fnBody))))().apply(void 0, fnArgValues);
    }
    exports.evalExpression = evalExpression;
    function isPrimitive(obj) {
        return !isJsObject(obj);
    }
    exports.isPrimitive = isPrimitive;
    function hasConstructor(value, type) {
        return value.constructor === type;
    }
    exports.hasConstructor = hasConstructor;
    function escape(s) {
        return _global.encodeURI(s);
    }
    exports.escape = escape;
    function escapeRegExp(s) {
        return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
    }
    exports.escapeRegExp = escapeRegExp;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser-dynamic@2.0.0-rc.5/src/xhr/xhr_impl.js', ['@angular/compiler', '@angular/core', '../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var compiler_1 = $__require('@angular/compiler');
    var core_1 = $__require('@angular/core');
    var lang_1 = $__require('../facade/lang');
    var XHRImpl = function (_super) {
        __extends(XHRImpl, _super);
        function XHRImpl() {
            _super.apply(this, arguments);
        }
        XHRImpl.prototype.get = function (url) {
            var resolve;
            var reject;
            var promise = new Promise(function (res, rej) {
                resolve = res;
                reject = rej;
            });
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, true);
            xhr.responseType = 'text';
            xhr.onload = function () {
                // responseText is the old-school way of retrieving response (supported by IE8 & 9)
                // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)
                var response = lang_1.isPresent(xhr.response) ? xhr.response : xhr.responseText;
                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
                var status = xhr.status === 1223 ? 204 : xhr.status;
                // fix status code when it is 0 (0 status is undocumented).
                // Occurs when accessing file resources or on Android 4.1 stock browser
                // while retrieving files from application cache.
                if (status === 0) {
                    status = response ? 200 : 0;
                }
                if (200 <= status && status <= 300) {
                    resolve(response);
                } else {
                    reject("Failed to load " + url);
                }
            };
            xhr.onerror = function () {
                reject("Failed to load " + url);
            };
            xhr.send();
            return promise;
        };
        /** @nocollapse */
        XHRImpl.decorators = [{ type: core_1.Injectable }];
        return XHRImpl;
    }(compiler_1.XHR);
    exports.XHRImpl = XHRImpl;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/platform-browser-dynamic@2.0.0-rc.5.json", [], false, function() {
  return {
    "main": "index.js",
    "meta": {
      "src/*.js": {
        "deps": [
          "reflect-metadata",
          "zone.js"
        ]
      }
    },
    "format": "cjs"
  };
});

System.registerDynamic('npm:@angular/platform-browser-dynamic@2.0.0-rc.5/index.js', ['@angular/compiler', '@angular/core', '@angular/platform-browser', './core_private', './src/platform_providers', './src/xhr/xhr_cache', './src/xhr/xhr_impl'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var compiler_1 = $__require('@angular/compiler');
    var core_1 = $__require('@angular/core');
    var platform_browser_1 = $__require('@angular/platform-browser');
    var core_private_1 = $__require('./core_private');
    var platform_providers_1 = $__require('./src/platform_providers');
    var xhr_cache_1 = $__require('./src/xhr/xhr_cache');
    var xhr_impl_1 = $__require('./src/xhr/xhr_impl');
    /**
     * @deprecated The compiler providers are already included in the {@link CompilerFactory} that is
     * contained the {@link browserDynamicPlatform}()`.
     */
    exports.BROWSER_APP_COMPILER_PROVIDERS = [];
    /**
     * @experimental
     */
    exports.CACHED_TEMPLATE_PROVIDER = [{ provide: compiler_1.XHR, useClass: xhr_cache_1.CachedXHR }];
    /**
     * @experimental API related to bootstrapping are still under review.
     */
    exports.platformBrowserDynamic = core_1.createPlatformFactory(compiler_1.platformCoreDynamic, 'browserDynamic', platform_providers_1.INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);
    /**
     * @deprecated Use {@link platformBrowserDynamic} instead
     */
    exports.browserDynamicPlatform = exports.platformBrowserDynamic;
    /**
     * Bootstrapping for Angular applications.
     *
     * You instantiate an Angular application by explicitly specifying a component to use
     * as the root component for your application via the `bootstrap()` method.
     *
     * ## Simple Example
     *
     * Assuming this `index.html`:
     *
     * ```html
     * <html>
     *   <!-- load Angular script tags here. -->
     *   <body>
     *     <my-app>loading...</my-app>
     *   </body>
     * </html>
     * ```
     *
     * An application is bootstrapped inside an existing browser DOM, typically `index.html`.
     * Unlike Angular 1, Angular 2 does not compile/process providers in `index.html`. This is
     * mainly for security reasons, as well as architectural changes in Angular 2. This means
     * that `index.html` can safely be processed using server-side technologies such as
     * providers. Bindings can thus use double-curly `{{ syntax }}` without collision from
     * Angular 2 component double-curly `{{ syntax }}`.
     *
     * We can use this script code:
     *
     * {@example core/ts/bootstrap/bootstrap.ts region='bootstrap'}
     *
     * When the app developer invokes `bootstrap()` with the root component `MyApp` as its
     * argument, Angular performs the following tasks:
     *
     *  1. It uses the component's `selector` property to locate the DOM element which needs
     *     to be upgraded into the angular component.
     *  2. It creates a new child injector (from the platform injector). Optionally, you can
     *     also override the injector configuration for an app by invoking `bootstrap` with the
     *     `componentInjectableBindings` argument.
     *  3. It creates a new `Zone` and connects it to the angular application's change detection
     *     domain instance.
     *  4. It creates an emulated or shadow DOM on the selected component's host element and loads the
     *     template into it.
     *  5. It instantiates the specified component.
     *  6. Finally, Angular performs change detection to apply the initial data providers for the
     *     application.
     *
     *
     * ## Bootstrapping Multiple Applications
     *
     * When working within a browser window, there are many singleton resources: cookies, title,
     * location, and others. Angular services that represent these resources must likewise be
     * shared across all Angular applications that occupy the same browser window. For this
     * reason, Angular creates exactly one global platform object which stores all shared
     * services, and each angular application injector has the platform injector as its parent.
     *
     * Each application has its own private injector as well. When there are multiple
     * applications on a page, Angular treats each application injector's services as private
     * to that application.
     *
     * ## API (version 1)
     *
     * - `appComponentType`: The root component which should act as the application. This is
     *   a reference to a `Type` which is annotated with `@Component(...)`.
     * - `customProviders`: An additional set of providers that can be added to the
     *   app injector to override default injection behavior.
     *
     * ## API (version 2)
     * - `appComponentType`: The root component which should act as the application. This is
     *   a reference to a `Type` which is annotated with `@Component(...)`.
     * - `providers`, `declarations`, `imports`, `entryComponents`: Defines the properties
     *   of the dynamically created module that is used to bootstrap the module.
     * - to configure the compiler, use the `compilerOptions` parameter.
     *
     * Returns a `Promise` of {@link ComponentRef}.
     *
     * @deprecated This api cannot be used with the offline compiler. Use
     * `PlatformRef.boostrapModule()` instead.
     */
    // Note: We are using typescript overloads here to have 2 function signatures!
    function bootstrap(appComponentType, customProviders) {
        var compilerOptions;
        var declarations = [];
        var entryComponents = [];
        var deprecationMessages = [];
        var deprecatedConfiguration = compiler_1.analyzeAppProvidersForDeprecatedConfiguration(customProviders);
        declarations = deprecatedConfiguration.moduleDeclarations.concat(declarations);
        compilerOptions = deprecatedConfiguration.compilerOptions;
        deprecationMessages = deprecatedConfiguration.deprecationMessages;
        var DynamicModule = function () {
            function DynamicModule() {}
            /** @nocollapse */
            DynamicModule.decorators = [{ type: core_1.NgModule, args: [{
                    providers: customProviders,
                    declarations: declarations.concat([appComponentType]),
                    imports: [platform_browser_1.BrowserModule],
                    entryComponents: entryComponents,
                    bootstrap: [appComponentType],
                    schemas: [core_1.CUSTOM_ELEMENTS_SCHEMA]
                }] }];
            return DynamicModule;
        }();
        return exports.platformBrowserDynamic().bootstrapModule(DynamicModule, compilerOptions).then(function (moduleRef) {
            var console = moduleRef.injector.get(core_private_1.Console);
            deprecationMessages.forEach(function (msg) {
                return console.warn(msg);
            });
            var appRef = moduleRef.injector.get(core_1.ApplicationRef);
            return appRef.components[0];
        });
    }
    exports.bootstrap = bootstrap;
    /**
     * Bootstraps the worker ui.
     *
     * @experimental
     */
    function bootstrapWorkerUi(workerScriptUri, customProviders) {
        if (customProviders === void 0) {
            customProviders = [];
        }
        // For now, just creates the worker ui platform...
        return Promise.resolve(platform_browser_1.platformWorkerUi([{
            provide: platform_browser_1.WORKER_SCRIPT,
            useValue: workerScriptUri
        }].concat(customProviders)));
    }
    exports.bootstrapWorkerUi = bootstrapWorkerUi;
    /**
     * @experimental API related to bootstrapping are still under review.
     */
    exports.platformWorkerAppDynamic = core_1.createPlatformFactory(compiler_1.platformCoreDynamic, 'workerAppDynamic', [{
        provide: core_1.COMPILER_OPTIONS,
        useValue: { providers: [{ provide: compiler_1.XHR, useClass: xhr_impl_1.XHRImpl }] },
        multi: true
    }]);
    /**
     * @deprecated Use {@link platformWorkerAppDynamic} instead
     */
    exports.workerAppDynamicPlatform = exports.platformWorkerAppDynamic;
    /**
     * @deprecated Create an {@link NgModule} that includes the {@link WorkerAppModule} and use {@link
     * bootstrapModule}
     * with the {@link workerAppDynamicPlatform}() instead.
     */
    function bootstrapWorkerApp(appComponentType, customProviders) {
        console.warn('bootstrapWorkerApp is deprecated. Create an @NgModule that includes the `WorkerAppModule` and use `bootstrapModule` with the `workerAppDynamicPlatform()` instead.');
        var deprecatedConfiguration = compiler_1.analyzeAppProvidersForDeprecatedConfiguration(customProviders);
        var declarations = [deprecatedConfiguration.moduleDeclarations.concat([appComponentType])];
        var DynamicModule = function () {
            function DynamicModule() {}
            /** @nocollapse */
            DynamicModule.decorators = [{ type: core_1.NgModule, args: [{
                    providers: customProviders,
                    declarations: declarations,
                    imports: [platform_browser_1.WorkerAppModule],
                    bootstrap: [appComponentType]
                }] }];
            return DynamicModule;
        }();
        return exports.platformWorkerAppDynamic().bootstrapModule(DynamicModule, deprecatedConfiguration.compilerOptions).then(function (moduleRef) {
            var console = moduleRef.injector.get(core_private_1.Console);
            deprecatedConfiguration.deprecationMessages.forEach(function (msg) {
                return console.warn(msg);
            });
            var appRef = moduleRef.injector.get(core_1.ApplicationRef);
            return appRef.components[0];
        });
    }
    exports.bootstrapWorkerApp = bootstrapWorkerApp;
    function normalizeArray(arr) {
        return arr ? arr : [];
    }
    

    return module.exports;
});
System.registerDynamic("npm:rxjs@5.0.0-beta.6/operator/let.js", [], true, function ($__require, exports, module) {
  "use strict";
  /**
   * @param func
   * @return {Observable<R>}
   * @method let
   * @owner Observable
   */

  var define,
      global = this || self,
      GLOBAL = global;
  function letProto(func) {
    return func(this);
  }
  exports.letProto = letProto;
  

  return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/add/operator/let.js', ['../../Observable', '../../operator/let'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('../../Observable');
  var let_1 = $__require('../../operator/let');
  Observable_1.Observable.prototype.let = let_1.letProto;
  Observable_1.Observable.prototype.letBind = let_1.letProto;
  

  return module.exports;
});
'use strict';

System.register('catundercover/reducers/index.js', ['rxjs/add/operator/map', 'rxjs/add/operator/let', 'rxjs/Observable', '@ngrx/store', './tags', './works', './moodboard'], function (_export, _context) {
    "use strict";

    var Observable, combineReducers, tagsState, tagsReducers, worksState, worksReducers, moodboardState, moodboardReducers, state, reducers;
    return {
        setters: [function (_rxjsAddOperatorMap) {}, function (_rxjsAddOperatorLet) {}, function (_rxjsObservable) {
            Observable = _rxjsObservable.Observable;
        }, function (_ngrxStore) {
            combineReducers = _ngrxStore.combineReducers;
        }, function (_tags) {
            tagsState = _tags.tagsState;
            tagsReducers = _tags.tagsReducers;
        }, function (_works) {
            worksState = _works.worksState;
            worksReducers = _works.worksReducers;
        }, function (_moodboard) {
            moodboardState = _moodboard.moodboardState;
            moodboardReducers = _moodboard.moodboardReducers;
        }],
        execute: function () {
            _export('state', state = {
                tags: tagsState,
                works: worksState,
                moodboard: moodboardState
            });

            _export('state', state);

            _export('reducers', reducers = combineReducers({
                tags: tagsReducers,
                works: worksReducers,
                moodboard: moodboardReducers
            }));

            _export('reducers', reducers);
        }
    };
});
System.register("catundercover/components/about/about.component.html!github:systemjs/plugin-text@0.0.8/text.js", [], function (_export, _context) {
  "use strict";

  return {
    setters: [],
    execute: function () {
      _export("default", "<section class=\"about\">\n    <md-card class=\"about__card\">\n        <div class=\"page\">\n            <div class=\"general\">\n                <div class=\"description\">\n                    <p>Well hello! I am Corina.</p>\n                    <p>I am a graphic designer & illustrator. <br/>\n                        I’ve had experience in web & app design, as well <br/>\n                        as graphic event design for cool events like TEDx. <br/>\n                        Totally in love with good typography, japanese poster design &<br/>\n                        quircky layouts. Currently based in Berlin with my loving <br/>\n                        partner in “crime” & a sweet feline.\n                    </p>\n                    <p>Have you seen my <a>works</a> yet?</p>\n                    <br/>\n                    <p class=\"sansSerifFont\" style=\"letter-spacing:1px;\">\n                        <span class=\"uppercase bolder\" style=\"font-size: 12px;\">Let’s get the party started</span>:\n                        <span class=\"emphasis bolder\" style=\"font-size: 14px;\">corinaciripitca[at]gmail.com</span>\n                    </p>\n                </div>\n                <div class=\"picture\">\n                    <img src=\"/assets/images/me.jpg\">\n                </div>\n                <div class=\"clear\"></div>\n            </div>\n            <div class=\"cv\">\n                <div class=\"cv__block\">\n                    <p class=\"title\">web & graphic design</p>\n                    <div class=\"content separated\">\n                        <p>A wonderful serenity has taken possession of my entire soul, like these sweet mornings of spring which I enjoy with my whole heart. I am alone, and feel the charm of existence in this spot, which was created for the bliss of souls like mine. I am so happy, my dear friend, so absorbed in the exquisite sense of mere tranquil existence, that I neglect my talents. </p>\n                        <p>I should be incapable of drawing a single stroke at the present moment; and yet I feel that I never was a greater artist than now.</p>\n                    </div>\n                </div>\n\n                <div class=\"cv__block\">\n                    <div class=\"separator separated\">\n                        <span class=\"circle red\"></span>\n                        <span class=\"circle yellow\"></span>\n                        <span class=\"circle blue\"></span>\n                    </div>\n                    <p class=\"title separated\">illustration</p>\n                    <div class=\"content separated\">\n                        <p>A wonderful serenity has taken possession of my entire soul, like these sweet mornings of spring which I enjoy with my whole heart. I am alone, and feel the charm of existence in this spot, which was created for the bliss of souls like mine. I am so happy, my dear friend, so absorbed in the exquisite sense of mere tranquil existence, that I neglect my talents. </p>\n                        <p>I should be incapable of drawing a single stroke at the present moment; and yet I feel that I never was a greater artist than now. When, while the lovely valley teems with vapour around me, and the meridian sun strikes the upper surface of the impenetrable.</p>\n                    </div>\n                </div>\n\n                <div class=\"cv__block\">\n                    <div class=\"separator separated\">\n                        <span class=\"circle red\"></span>\n                        <span class=\"circle yellow\"></span>\n                        <span class=\"circle blue\"></span>\n                    </div>\n                    <p class=\"title separated\">future plans</p>\n                    <div class=\"content separated\">\n                        <p>A wonderful serenity has taken possession of my entire soul, like these sweet mornings of spring which I enjoy with my whole heart. I am alone, and feel the charm of existence in this spot, which was created for the bliss of souls like mine. I am so happy, my dear friend, so absorbed in the exquisite sense of mere.</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </md-card>\n</section>");
    }
  };
});
'use strict';

System.register('catundercover/components/about/about.component.js', ['npm:systemjs-plugin-babel@0.0.12/babel-helpers/classCallCheck.js', 'npm:systemjs-plugin-babel@0.0.12/babel-helpers/createClass.js', '@angular/core', '@angular/router', '@angular2-material/card', './about.component.html!text', './about.component.less!'], function (_export, _context) {
    "use strict";

    var _classCallCheck, _createClass, Component, ViewEncapsulation, ROUTER_DIRECTIVES, MD_CARD_DIRECTIVES, componentTemplate, componentStyles, AboutComponent;

    return {
        setters: [function (_npmSystemjsPluginBabel0012BabelHelpersClassCallCheckJs) {
            _classCallCheck = _npmSystemjsPluginBabel0012BabelHelpersClassCallCheckJs.default;
        }, function (_npmSystemjsPluginBabel0012BabelHelpersCreateClassJs) {
            _createClass = _npmSystemjsPluginBabel0012BabelHelpersCreateClassJs.default;
        }, function (_angularCore) {
            Component = _angularCore.Component;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
        }, function (_angularRouter) {
            ROUTER_DIRECTIVES = _angularRouter.ROUTER_DIRECTIVES;
        }, function (_angular2MaterialCard) {
            MD_CARD_DIRECTIVES = _angular2MaterialCard.MD_CARD_DIRECTIVES;
        }, function (_aboutComponentHtmlText) {
            componentTemplate = _aboutComponentHtmlText.default;
        }, function (_aboutComponentLess) {
            componentStyles = _aboutComponentLess.default;
        }],
        execute: function () {
            AboutComponent = function () {
                function AboutComponent() {
                    _classCallCheck(this, AboutComponent);
                }

                _createClass(AboutComponent, null, [{
                    key: 'annotations',
                    get: function get() {
                        return [new Component({
                            selector: 'about',
                            template: componentTemplate,
                            styles: [componentStyles],
                            directives: [ROUTER_DIRECTIVES, MD_CARD_DIRECTIVES],
                            encapsulation: ViewEncapsulation.None
                        })];
                    }
                }]);

                return AboutComponent;
            }();

            _export('default', AboutComponent);
        }
    };
});
'use strict';

System.register('catundercover/pages/about/index.component.js', ['npm:systemjs-plugin-babel@0.0.12/babel-helpers/classCallCheck.js', 'npm:systemjs-plugin-babel@0.0.12/babel-helpers/createClass.js', '@angular/core', './../../components/about/about.component'], function (_export, _context) {
    "use strict";

    var _classCallCheck, _createClass, Component, ViewEncapsulation, AboutComponent, AboutIndexPage;

    return {
        setters: [function (_npmSystemjsPluginBabel0012BabelHelpersClassCallCheckJs) {
            _classCallCheck = _npmSystemjsPluginBabel0012BabelHelpersClassCallCheckJs.default;
        }, function (_npmSystemjsPluginBabel0012BabelHelpersCreateClassJs) {
            _createClass = _npmSystemjsPluginBabel0012BabelHelpersCreateClassJs.default;
        }, function (_angularCore) {
            Component = _angularCore.Component;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
        }, function (_componentsAboutAboutComponent) {
            AboutComponent = _componentsAboutAboutComponent.default;
        }],
        execute: function () {
            AboutIndexPage = function () {
                function AboutIndexPage() {
                    _classCallCheck(this, AboutIndexPage);
                }

                _createClass(AboutIndexPage, null, [{
                    key: 'annotations',
                    get: function get() {
                        return [new Component({
                            selector: 'about-page',
                            directives: [AboutComponent],
                            template: '\n                    <about></about>\n                '
                        })];
                    }
                }]);

                return AboutIndexPage;
            }();

            _export('default', AboutIndexPage);
        }
    };
});
System.register("catundercover/components/moodboard/moodboard.component.html!github:systemjs/plugin-text@0.0.8/text.js", [], function (_export, _context) {
  "use strict";

  return {
    setters: [],
    execute: function () {
      _export("default", "<section class=\"moodboard\">\n    <div class=\"page\">\n        <div class=\"banner__outer\">\n        <span class=\"banner__inner uppercase\">\n            &lt;&lt;Welcome to my visual &amp; audio diary. This is what gets my creative mojo running&gt;&gt;\n        </span>\n        </div>\n\n        <md-grid-list class=\"moodboard__items\" cols=\"4\" rowHeight=\"1:1\" gutterSize=\"1em\">\n            <md-grid-tile class=\"moodboard__item\" *ngFor=\"let tile of tiles\" [colspan]=\"tile.cols\" [rowspan]=\"tile.rows\">\n                <a [href]=\"tile.src\" class=\"moodboard__item__image\" [style.background-image]=\"'url(' + tile.src + ')'\" *ngIf=\"tile.src\" data-lightbox=\"tile.src\"></a>\n                <a [href]=\"tile.href\" class=\"moodboard__item__audio\" *ngIf=\"tile.href\" target=\"_blank\">\n                    <div>\n                        <span class=\"play\"></span>\n                        <span class=\"meta\">\n                        <span class=\"interpreter\">{{tile.interpreter}}</span>\n                        <span class=\"title\">\"{{tile.title}}\"</span>\n                    </span>\n                    </div>\n                </a>\n            </md-grid-tile>\n        </md-grid-list>\n    </div>\n</section>");
    }
  };
});
'use strict';

// import _ from 'lodash';
// import Actions from './../actions/index';

System.register('catundercover/reducers/moodboard.js', [], function (_export, _context) {
    "use strict";

    var moodboardState, moodboardReducers, getItems, getFilter;
    return {
        setters: [],
        execute: function () {
            _export('moodboardState', moodboardState = {
                filter: null,
                items: [{ cols: 1, rows: 1, src: '/assets/moodboard/0b48ffb79fcb9b01eaadfa3326659277.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/0c131a18f1380b4c6ce05c62d95b5718.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/1c5ac812279b800d5532b7033d44fe27.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/1e37fb60035b5f8b06ed34ecc5c4baa6.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/1fe77d17f130a81f9edb0ef1ba073037.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/3e5089c1742613090b57b78a030ad920.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/4dbab44b4855cdebfcbb8d67668c1517.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/6d6acb9ca4b75faf03f7395a556a6d94.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/7f02a895c995d17e5118768dd815937e.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/8c780e308b58a872f4051412ba9613b9.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/32e1ad823553e9f00a9b39e3831ed75c.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/35b0e99e2dcb366357f87817a847a0e7.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/49fd316171eef50abff7dea2c6e1e080.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/60d044dcea27f51714045ddcdec3babd.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/61ddfde077845f638508e971deb9272d.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/69e9fc5bd9dc3fab4063982dc1c0c9ea.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/88f1658d7b33d70ed17ba75bca5f0050.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/90f15feb46965a07873a8dcb49c4bb48.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/280c16751d2df7ef7c265c1eaf498707.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/373ffa8f632a3ad71379e2c76917e984.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/7794b2ad30c5a5da93c58c15e1c4db45.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/8353aa540abd59f44375d6b86df9c464.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/9834d8e4396fc80f4b2dc7e6fc209d56.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/92394cc70608d41a5e58161a557e6777.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/06088775f11c6c1b4c7a112bad0f2ff5.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/609530776da4605c8ffcc5ed6d34159b.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/b509da46ca9d12a3a435b88d18b504a1.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/b1058a4f16ad8183724c793dee4616a1.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/b17500b0785216cc2e4be0fca6637bd3.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/b348669e2f5a3a5f2888f9e05b44bf0c.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/c5acaf0516c5f0aa3decff70ebbdb947.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/c96988fd3a124dbe373751fecf616ae6.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/e0af5cefa140ae688521ae4848d344b3.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/f9730128dc65a5f4a755f3ee936d43b8.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/febd16d8bb8e7c555eea90206c820d0a.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/tumblr_m94lyzqUEb1r5ucj5o1_540.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/tumblr_mmuyr8ZAIL1qzq84io1_1280.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/tumblr_mqg864ZBcB1qhbgzpo1_500.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/tumblr_murfqoaP721spzmhno1_1280.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/tumblr_na3xodzDTq1qza249o1_500.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/tumblr_o1lri4VEvY1rw1seco1_1280.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/tumblr_o5wtkcGqOL1qbt59oo1_500.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/tumblr_oa3d3ilBwj1rw1seco1_1280.jpg' }, { cols: 1, rows: 1, src: '/assets/moodboard/tumblr_oc43a47dSF1rw1seco1_1280.jpg' }, { cols: 1, rows: 0.35, href: 'https://soundcloud.com/castlevania-cod-cd2/western-underworld', title: 'Western Underworld', interpreter: 'Lazarus' }]
            });

            _export('moodboardState', moodboardState);

            _export('moodboardReducers', moodboardReducers = function moodboardReducers(iState, iAction) {
                switch (iAction.type) {
                    default:
                        return iState;
                }
            });

            _export('moodboardReducers', moodboardReducers);

            _export('getItems', getItems = function getItems() {
                return function (state) {
                    return state.map(function (moodboardState) {
                        return moodboardState.items;
                    });
                };
            });

            _export('getItems', getItems);

            _export('getFilter', getFilter = function getFilter() {
                return function (state) {
                    return state.map(function (moodboardState) {
                        return moodboardState.filter;
                    });
                };
            });

            _export('getFilter', getFilter);
        }
    };
});
'use strict';

System.register('catundercover/components/moodboard/moodboard.component.js', ['npm:systemjs-plugin-babel@0.0.12/babel-helpers/classCallCheck.js', 'npm:systemjs-plugin-babel@0.0.12/babel-helpers/createClass.js', '@angular/core', '@angular/router', '@angular2-material/grid-list', '@ngrx/store', './moodboard.component.html!text', './moodboard.component.less!', './../../reducers/moodboard'], function (_export, _context) {
    "use strict";

    var _classCallCheck, _createClass, Component, ViewEncapsulation, ROUTER_DIRECTIVES, MD_GRID_LIST_DIRECTIVES, Store, componentTemplate, componentStyles, getItems, MoodboardComponent;

    return {
        setters: [function (_npmSystemjsPluginBabel0012BabelHelpersClassCallCheckJs) {
            _classCallCheck = _npmSystemjsPluginBabel0012BabelHelpersClassCallCheckJs.default;
        }, function (_npmSystemjsPluginBabel0012BabelHelpersCreateClassJs) {
            _createClass = _npmSystemjsPluginBabel0012BabelHelpersCreateClassJs.default;
        }, function (_angularCore) {
            Component = _angularCore.Component;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
        }, function (_angularRouter) {
            ROUTER_DIRECTIVES = _angularRouter.ROUTER_DIRECTIVES;
        }, function (_angular2MaterialGridList) {
            MD_GRID_LIST_DIRECTIVES = _angular2MaterialGridList.MD_GRID_LIST_DIRECTIVES;
        }, function (_ngrxStore) {
            Store = _ngrxStore.Store;
        }, function (_moodboardComponentHtmlText) {
            componentTemplate = _moodboardComponentHtmlText.default;
        }, function (_moodboardComponentLess) {
            componentStyles = _moodboardComponentLess.default;
        }, function (_reducersMoodboard) {
            getItems = _reducersMoodboard.getItems;
        }],
        execute: function () {
            MoodboardComponent = function () {
                _createClass(MoodboardComponent, null, [{
                    key: 'annotations',
                    get: function get() {
                        return [new Component({
                            selector: 'moodboard',
                            template: componentTemplate,
                            styles: [componentStyles],
                            directives: [ROUTER_DIRECTIVES, MD_GRID_LIST_DIRECTIVES],
                            encapsulation: ViewEncapsulation.None
                        })];
                    }
                }, {
                    key: 'parameters',
                    get: function get() {
                        return [[Store]];
                    }
                }]);

                function MoodboardComponent(store) {
                    var _this = this;

                    _classCallCheck(this, MoodboardComponent);

                    this.store = store;

                    this.store.select('moodboard').let(getItems()).subscribe(function (items) {
                        _this.tiles = items;
                    });
                }

                _createClass(MoodboardComponent, [{
                    key: 'ngOnInit',
                    value: function ngOnInit() {
                        function hideBanner() {
                            var banner = document.querySelector('.moodboard .banner__outer');

                            if (banner) {
                                banner.style.opacity = 0;
                            }

                            window.removeEventListener('scroll', hideBanner);
                        }
                        window.addEventListener('scroll', hideBanner);
                    }
                }]);

                return MoodboardComponent;
            }();

            _export('default', MoodboardComponent);
        }
    };
});
'use strict';

System.register('catundercover/pages/moodboard/index.component.js', ['npm:systemjs-plugin-babel@0.0.12/babel-helpers/classCallCheck.js', 'npm:systemjs-plugin-babel@0.0.12/babel-helpers/createClass.js', '@angular/core', './../../components/moodboard/moodboard.component'], function (_export, _context) {
    "use strict";

    var _classCallCheck, _createClass, Component, ViewEncapsulation, MoodboardComponent, MoodboardIndexPage;

    return {
        setters: [function (_npmSystemjsPluginBabel0012BabelHelpersClassCallCheckJs) {
            _classCallCheck = _npmSystemjsPluginBabel0012BabelHelpersClassCallCheckJs.default;
        }, function (_npmSystemjsPluginBabel0012BabelHelpersCreateClassJs) {
            _createClass = _npmSystemjsPluginBabel0012BabelHelpersCreateClassJs.default;
        }, function (_angularCore) {
            Component = _angularCore.Component;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
        }, function (_componentsMoodboardMoodboardComponent) {
            MoodboardComponent = _componentsMoodboardMoodboardComponent.default;
        }],
        execute: function () {
            MoodboardIndexPage = function () {
                function MoodboardIndexPage() {
                    _classCallCheck(this, MoodboardIndexPage);
                }

                _createClass(MoodboardIndexPage, null, [{
                    key: 'annotations',
                    get: function get() {
                        return [new Component({
                            selector: 'moodboard-page',
                            directives: [MoodboardComponent],
                            template: '\n                    <moodboard></moodboard>\n                '
                        })];
                    }
                }]);

                return MoodboardIndexPage;
            }();

            _export('default', MoodboardIndexPage);
        }
    };
});
'use strict';

System.register('catundercover/pages/thoughts/index.component.js', ['npm:systemjs-plugin-babel@0.0.12/babel-helpers/classCallCheck.js', 'npm:systemjs-plugin-babel@0.0.12/babel-helpers/createClass.js', '@angular/core', '@angular/router'], function (_export, _context) {
    "use strict";

    var _classCallCheck, _createClass, Component, ViewEncapsulation, Router, ThoughtsIndexPage;

    return {
        setters: [function (_npmSystemjsPluginBabel0012BabelHelpersClassCallCheckJs) {
            _classCallCheck = _npmSystemjsPluginBabel0012BabelHelpersClassCallCheckJs.default;
        }, function (_npmSystemjsPluginBabel0012BabelHelpersCreateClassJs) {
            _createClass = _npmSystemjsPluginBabel0012BabelHelpersCreateClassJs.default;
        }, function (_angularCore) {
            Component = _angularCore.Component;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
        }, function (_angularRouter) {
            Router = _angularRouter.Router;
        }],
        execute: function () {
            ThoughtsIndexPage = function () {
                _createClass(ThoughtsIndexPage, null, [{
                    key: 'annotations',
                    get: function get() {
                        return [new Component({
                            selector: 'thoughts-page',
                            template: 'Please wait'
                        })];
                    }
                }, {
                    key: 'parameters',
                    get: function get() {
                        return [[Router]];
                    }
                }]);

                function ThoughtsIndexPage(router) {
                    _classCallCheck(this, ThoughtsIndexPage);

                    this.router = router;

                    this.router.navigateByUrl('work');
                }

                return ThoughtsIndexPage;
            }();

            _export('default', ThoughtsIndexPage);
        }
    };
});
System.register("catundercover/components/portfolio/portfolio.component.html!github:systemjs/plugin-text@0.0.8/text.js", [], function (_export, _context) {
  "use strict";

  return {
    setters: [],
    execute: function () {
      _export("default", "<section class=\"portfolio\">\n    <md-card class=\"portfolio__card\">\n        <div class=\"page\">\n            <md-toolbar [color]=\"primary\" class=\"navbar\">\n            <span class=\"navbar__item\" *ngFor=\"let tag of tags | async; let last = last\">\n                <a href=\"javascript:;\" [class.selected]=\"isSelectedTag(tag)\" (click)=\"filterWorksByTag(tag)\" md-button>{{tag.title | uppercase}}</a>\n                <span *ngIf=\"!last\">/</span>\n            </span>\n            </md-toolbar>\n\n            <portfolio-showcase [items]=\"items\"></portfolio-showcase>\n        </div>\n    </md-card>\n</section>");
    }
  };
});
System.register("catundercover/components/portfolio/portfolio-showcase.component.html!github:systemjs/plugin-text@0.0.8/text.js", [], function (_export, _context) {
  "use strict";

  return {
    setters: [],
    execute: function () {
      _export("default", "<md-card class=\"portfolio-showcase\">\n    <div class=\"portfolio-showcase-wrapper\">\n\n        <div class=\"showcase-column showcase-column-center\">\n            <md-card class=\"screen\" *ngIf=\"item\">\n                <div class=\"screen__wrapper\" [style.background-image]=\"'url('+item.image+')'\">\n                    <div class=\"screen__item\">\n                        <div class=\"inner\">\n                            <a [routerLink]=\"['/work', item.slug]\">\n                                <h1 class=\"title\">{{item.title}}</h1>\n                            </a>\n                            <div class=\"separator\">\n                                <span class=\"circle red\"></span>\n                                <span class=\"circle yellow\"></span>\n                                <span class=\"circle blue\"></span>\n                            </div>\n                            <a [routerLink]=\"['/work', item.slug]\" class=\"view-project\">View Project</a>\n                        </div>\n                    </div>\n                </div>\n            </md-card>\n\n            <md-card class=\"navigation\">\n                <div class=\"navigation__items\">\n                    <a class=\"navigation__item\"\n                       href=\"javascript:;\"\n                       *ngFor=\"let item of items | async; let i = index;\"\n                       [class.selected]=\"selected == i\"\n                       (click)=\"select(i)\"\n                    >{{formatIndex(i)}}</a>\n                </div>\n            </md-card>\n        </div>\n\n\n        <div class=\"showcase-column showcase-column-left\">\n            <a href=\"javascript:;\" class=\"showcase-nav\" (click)=\"selectPrev()\"></a>\n        </div>\n\n        <div class=\"showcase-column showcase-column-right\">\n            <a href=\"javascript:;\" class=\"showcase-nav\" (click)=\"selectNext()\"></a>\n        </div>\n\n        <div class=\"clear\"></div>\n    </div>\n</md-card>");
    }
  };
});
'use strict';

System.register('catundercover/components/portfolio/portfolio-showcase.component.js', ['npm:systemjs-plugin-babel@0.0.12/babel-helpers/classCallCheck.js', 'npm:systemjs-plugin-babel@0.0.12/babel-helpers/createClass.js', '@angular/core', '@ngrx/store', '@angular2-material/card', '@angular/router', './portfolio-showcase.component.html!text', './portfolio-showcase.component.less!'], function (_export, _context) {
    "use strict";

    var _classCallCheck, _createClass, Component, ViewEncapsulation, Store, MD_CARD_DIRECTIVES, ROUTER_DIRECTIVES, componentTemplate, componentStyles, PortfolioShowcaseComponent;

    return {
        setters: [function (_npmSystemjsPluginBabel0012BabelHelpersClassCallCheckJs) {
            _classCallCheck = _npmSystemjsPluginBabel0012BabelHelpersClassCallCheckJs.default;
        }, function (_npmSystemjsPluginBabel0012BabelHelpersCreateClassJs) {
            _createClass = _npmSystemjsPluginBabel0012BabelHelpersCreateClassJs.default;
        }, function (_angularCore) {
            Component = _angularCore.Component;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
        }, function (_ngrxStore) {
            Store = _ngrxStore.Store;
        }, function (_angular2MaterialCard) {
            MD_CARD_DIRECTIVES = _angular2MaterialCard.MD_CARD_DIRECTIVES;
        }, function (_angularRouter) {
            ROUTER_DIRECTIVES = _angularRouter.ROUTER_DIRECTIVES;
        }, function (_portfolioShowcaseComponentHtmlText) {
            componentTemplate = _portfolioShowcaseComponentHtmlText.default;
        }, function (_portfolioShowcaseComponentLess) {
            componentStyles = _portfolioShowcaseComponentLess.default;
        }],
        execute: function () {
            PortfolioShowcaseComponent = function () {
                _createClass(PortfolioShowcaseComponent, null, [{
                    key: 'annotations',
                    get: function get() {
                        return [new Component({
                            selector: 'portfolio-showcase',
                            template: componentTemplate,
                            styles: [componentStyles],
                            directives: [MD_CARD_DIRECTIVES, ROUTER_DIRECTIVES],
                            inputs: ['items'],
                            encapsulation: ViewEncapsulation.None
                        })];
                    }
                }, {
                    key: 'parameters',
                    get: function get() {
                        return [[Store]];
                    }
                }]);

                function PortfolioShowcaseComponent(store) {
                    _classCallCheck(this, PortfolioShowcaseComponent);

                    this.store = store;
                    this.selected = 0;
                    this.item = null;
                    this.items_ = [];
                }

                _createClass(PortfolioShowcaseComponent, [{
                    key: 'ngOnInit',
                    value: function ngOnInit() {
                        var _this = this;

                        this.items.subscribe(function (items) {
                            _this.items_ = items;
                            _this.select(0);
                        });
                    }
                }, {
                    key: 'select',
                    value: function select(idx) {
                        this.selected = idx;
                        this.item = this.items_[this.selected] || this.items_[0];
                    }
                }, {
                    key: 'selectPrev',
                    value: function selectPrev() {
                        this.selected = this.items_[this.selected - 1] ? this.selected - 1 : this.items_.length - 1;
                        this.item = this.items_[this.selected];
                    }
                }, {
                    key: 'selectNext',
                    value: function selectNext() {
                        this.selected = this.items_[this.selected + 1] ? this.selected + 1 : 0;
                        this.item = this.items_[this.selected];
                    }
                }, {
                    key: 'formatIndex',
                    value: function formatIndex(idx) {
                        var output = String(idx + 1);

                        if (output.length === 1) {
                            output = '0' + output;
                        }

                        return output;
                    }
                }]);

                return PortfolioShowcaseComponent;
            }();

            _export('default', PortfolioShowcaseComponent);
        }
    };
});
'use strict';

System.register('catundercover/components/portfolio/portfolio.component.js', ['npm:systemjs-plugin-babel@0.0.12/babel-helpers/classCallCheck.js', 'npm:systemjs-plugin-babel@0.0.12/babel-helpers/createClass.js', '@angular/core', '@ngrx/store', '@angular/router', '@angular2-material/card', '@angular2-material/toolbar', '@angular2-material/grid-list', './portfolio.component.html!text', './portfolio.component.less!', './../../reducers/works', './../../actions/index', './portfolio-showcase.component'], function (_export, _context) {
    "use strict";

    var _classCallCheck, _createClass, Component, ViewEncapsulation, Store, ROUTER_DIRECTIVES, MD_CARD_DIRECTIVES, MD_TOOLBAR_DIRECTIVES, MD_GRID_LIST_DIRECTIVES, componentTemplate, componentStyles, getFilteredItems, getFilter, Actions, PortfolioShowcase, PortfolioComponent;

    return {
        setters: [function (_npmSystemjsPluginBabel0012BabelHelpersClassCallCheckJs) {
            _classCallCheck = _npmSystemjsPluginBabel0012BabelHelpersClassCallCheckJs.default;
        }, function (_npmSystemjsPluginBabel0012BabelHelpersCreateClassJs) {
            _createClass = _npmSystemjsPluginBabel0012BabelHelpersCreateClassJs.default;
        }, function (_angularCore) {
            Component = _angularCore.Component;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
        }, function (_ngrxStore) {
            Store = _ngrxStore.Store;
        }, function (_angularRouter) {
            ROUTER_DIRECTIVES = _angularRouter.ROUTER_DIRECTIVES;
        }, function (_angular2MaterialCard) {
            MD_CARD_DIRECTIVES = _angular2MaterialCard.MD_CARD_DIRECTIVES;
        }, function (_angular2MaterialToolbar) {
            MD_TOOLBAR_DIRECTIVES = _angular2MaterialToolbar.MD_TOOLBAR_DIRECTIVES;
        }, function (_angular2MaterialGridList) {
            MD_GRID_LIST_DIRECTIVES = _angular2MaterialGridList.MD_GRID_LIST_DIRECTIVES;
        }, function (_portfolioComponentHtmlText) {
            componentTemplate = _portfolioComponentHtmlText.default;
        }, function (_portfolioComponentLess) {
            componentStyles = _portfolioComponentLess.default;
        }, function (_reducersWorks) {
            getFilteredItems = _reducersWorks.getFilteredItems;
            getFilter = _reducersWorks.getFilter;
        }, function (_actionsIndex) {
            Actions = _actionsIndex.default;
        }, function (_portfolioShowcaseComponent) {
            PortfolioShowcase = _portfolioShowcaseComponent.default;
        }],
        execute: function () {
            PortfolioComponent = function () {
                _createClass(PortfolioComponent, null, [{
                    key: 'annotations',
                    get: function get() {
                        return [new Component({
                            selector: 'portfolio',
                            template: componentTemplate,
                            styles: [componentStyles],
                            directives: [ROUTER_DIRECTIVES, MD_CARD_DIRECTIVES, MD_TOOLBAR_DIRECTIVES, MD_GRID_LIST_DIRECTIVES, PortfolioShowcase],
                            encapsulation: ViewEncapsulation.None
                        })];
                    }
                }, {
                    key: 'parameters',
                    get: function get() {
                        return [[Store]];
                    }
                }]);

                function PortfolioComponent(store) {
                    var _this = this;

                    _classCallCheck(this, PortfolioComponent);

                    this.store = store;
                    this.tags = this.store.select('tags');
                    this.items = this.store.select('works').let(getFilteredItems());
                    this.store.select('works').let(getFilter()).subscribe(function (filter) {
                        _this.selectedTags = filter;
                    });
                }

                _createClass(PortfolioComponent, [{
                    key: 'ngOnInit',
                    value: function ngOnInit() {
                        var _this2 = this;

                        this.selectedTags = [];

                        this.tags.subscribe(function (tags) {
                            tags.length ? _this2.filterWorksByTag(tags[0]) : null;
                        });
                    }
                }, {
                    key: 'filterWorksByTag',
                    value: function filterWorksByTag(iTag) {
                        this.store.dispatch(Actions.tags.filterWorksByTag(iTag));

                        return this;
                    }
                }, {
                    key: 'isSelectedTag',
                    value: function isSelectedTag(iTag) {
                        return _.find(this.selectedTags, { slug: iTag.slug });
                    }
                }]);

                return PortfolioComponent;
            }();

            _export('default', PortfolioComponent);
        }
    };
});
'use strict';

System.register('catundercover/pages/work/index.component.js', ['npm:systemjs-plugin-babel@0.0.12/babel-helpers/classCallCheck.js', 'npm:systemjs-plugin-babel@0.0.12/babel-helpers/createClass.js', '@angular/core', './../../components/portfolio/portfolio.component'], function (_export, _context) {
    "use strict";

    var _classCallCheck, _createClass, Component, PortfolioComponent, WorkIndexPage;

    return {
        setters: [function (_npmSystemjsPluginBabel0012BabelHelpersClassCallCheckJs) {
            _classCallCheck = _npmSystemjsPluginBabel0012BabelHelpersClassCallCheckJs.default;
        }, function (_npmSystemjsPluginBabel0012BabelHelpersCreateClassJs) {
            _createClass = _npmSystemjsPluginBabel0012BabelHelpersCreateClassJs.default;
        }, function (_angularCore) {
            Component = _angularCore.Component;
        }, function (_componentsPortfolioPortfolioComponent) {
            PortfolioComponent = _componentsPortfolioPortfolioComponent.default;
        }],
        execute: function () {
            WorkIndexPage = function () {
                function WorkIndexPage() {
                    _classCallCheck(this, WorkIndexPage);
                }

                _createClass(WorkIndexPage, null, [{
                    key: 'annotations',
                    get: function get() {
                        return [new Component({
                            selector: 'works-page',
                            directives: [PortfolioComponent],
                            template: '<portfolio></portfolio>'
                        })];
                    }
                }]);

                return WorkIndexPage;
            }();

            _export('default', WorkIndexPage);
        }
    };
});
System.registerDynamic("npm:@angular2-material/card@2.0.0-alpha.5-2.json", [], false, function() {
  return {
    "main": "card.js",
    "format": "cjs",
    "meta": {
      "*.json": {
        "format": "json"
      }
    }
  };
});

System.registerDynamic("npm:@angular2-material/card@2.0.0-alpha.5-2/card.js", ["@angular/core"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("@angular/core");
    /*
    
    <md-card> is a basic content container component that adds the styles of a material design card.
    
    While you can use this component alone,
    it also provides a number of preset styles for common card sections, including:
     - md-card-title
     - md-card-subtitle
     - md-card-content
     - md-card-actions
     - md-card-footer
    
     You can see some examples of cards here:
     http://embed.plnkr.co/s5O4YcyvbLhIApSrIhtj/
    
     TODO(kara): update link to demo site when it exists
    
    */
    var MdCard = function () {
        function MdCard() {}
        MdCard = __decorate([core_1.Component({
            moduleId: module.id,
            selector: 'md-card',
            template: "<div class=\"md-card\"> <ng-content></ng-content> </div> ",
            styles: ["/** * A collection of mixins and CSS classes that can be used to apply elevation to a material * element. * See: https://www.google.com/design/spec/what-is-material/elevation-shadows.html * Examples: * * * .md-foo { *   @include $md-elevation(2); * *   &:active { *     @include $md-elevation(8); *   } * } * * <div id=\"external-card\" class=\"md-elevation-z2\"><p>Some content</p></div> * * For an explanation of the design behind how elevation is implemented, see the design doc at * https://goo.gl/Kq0k9Z. */ /** * The css property used for elevation. In most cases this should not be changed. It is exposed * as a variable for abstraction / easy use when needing to reference the property directly, for * example in a will-change rule. */ /** The default duration value for elevation transitions. */ /** The default easing value for elevation transitions. */ /** * Applies the correct css rules to an element to give it the elevation specified by $zValue. * The $zValue must be between 0 and 24. */ /** * Returns a string that can be used as the value for a transition property for elevation. * Calling this function directly is useful in situations where a component needs to transition * more than one property. * * .foo { *   transition: md-elevation-transition-property-value(), opacity 100ms ease; *   will-change: $md-elevation-property, opacity; * } */ /** * Applies the correct css rules needed to have an element transition between elevations. * This mixin should be applied to elements whose elevation values will change depending on their * context (e.g. when active or disabled). */ md-card { box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12); -webkit-transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1); transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1); will-change: box-shadow; display: block; position: relative; padding: 24px; border-radius: 2px; font-family: Roboto, \"Helvetica Neue\", sans-serif; background: white; } md-card:hover { box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12); } .md-card-flat { box-shadow: none; } md-card-title, md-card-subtitle, md-card-content, md-card-actions { display: block; margin-bottom: 16px; } md-card-title { font-size: 24px; font-weight: 400; } md-card-subtitle { font-size: 14px; color: rgba(0, 0, 0, 0.54); } md-card-content { font-size: 14px; } md-card-actions { margin-left: -16px; margin-right: -16px; padding: 8px 0; } md-card-actions[align='end'] { display: -webkit-box; display: -webkit-flex; display: -ms-flexbox; display: flex; -webkit-box-pack: end; -webkit-justify-content: flex-end; -ms-flex-pack: end; justify-content: flex-end; } [md-card-image] { width: calc(100% + 48px); margin: 0 -24px 16px -24px; } [md-card-xl-image] { width: 240px; height: 240px; margin: -8px; } md-card-footer { position: absolute; bottom: 0; } md-card-actions [md-button], md-card-actions [md-raised-button] { margin: 0 4px; } /* HEADER STYLES */ md-card-header { display: -webkit-box; display: -webkit-flex; display: -ms-flexbox; display: flex; -webkit-box-orient: horizontal; -webkit-box-direction: normal; -webkit-flex-direction: row; -ms-flex-direction: row; flex-direction: row; height: 40px; margin: -8px 0 16px 0; } .md-card-header-text { height: 40px; margin: 0 8px; } [md-card-avatar] { height: 40px; width: 40px; border-radius: 50%; } md-card-header md-card-title { font-size: 14px; } /* TITLE-GROUP STYLES */ [md-card-sm-image], [md-card-md-image], [md-card-lg-image] { margin: -8px 0; } md-card-title-group { display: -webkit-box; display: -webkit-flex; display: -ms-flexbox; display: flex; -webkit-box-pack: justify; -webkit-justify-content: space-between; -ms-flex-pack: justify; justify-content: space-between; margin: 0 -8px; } [md-card-sm-image] { width: 80px; height: 80px; } [md-card-md-image] { width: 112px; height: 112px; } [md-card-lg-image] { width: 152px; height: 152px; } /* MEDIA QUERIES */ @media (max-width: 600px) { md-card { padding: 24px 16px; } [md-card-image] { width: calc(100% + 32px); margin: 16px -16px; } md-card-title-group { margin: 0; } [md-card-xl-image] { margin-left: 0; margin-right: 0; } md-card-header { margin: -8px 0 0 0; } } /* FIRST/LAST CHILD ADJUSTMENTS */ .md-card > :first-child, md-card-content > :first-child { margin-top: 0; } .md-card > :last-child, md-card-content > :last-child { margin-bottom: 0; } [md-card-image]:first-child { margin-top: -24px; } .md-card > md-card-actions:last-child { margin-bottom: -16px; padding-bottom: 0; } md-card-actions [md-button]:first-child, md-card-actions [md-raised-button]:first-child { margin-left: 0; margin-right: 0; } md-card-title:not(:first-child), md-card-subtitle:not(:first-child) { margin-top: -4px; } md-card-header md-card-subtitle:not(:first-child) { margin-top: -8px; } .md-card > [md-card-xl-image]:first-child { margin-top: -8px; } .md-card > [md-card-xl-image]:last-child { margin-bottom: -8px; } "],
            encapsulation: core_1.ViewEncapsulation.None,
            changeDetection: core_1.ChangeDetectionStrategy.OnPush
        }), __metadata('design:paramtypes', [])], MdCard);
        return MdCard;
    }();
    exports.MdCard = MdCard;
    /*  The following components don't have any behavior.
     They simply use content projection to wrap user content
     for flex layout purposes in <md-card> (and thus allow a cleaner, boilerplate-free API).
    
    
    <md-card-header> is a component intended to be used within the <md-card> component.
    It adds styles for a preset header section (i.e. a title, subtitle, and avatar layout).
    
    You can see an example of a card with a header here:
    http://embed.plnkr.co/tvJl19z3gZTQd6WmwkIa/
    
    TODO(kara): update link to demo site when it exists
    */
    var MdCardHeader = function () {
        function MdCardHeader() {}
        MdCardHeader = __decorate([core_1.Component({
            moduleId: module.id,
            selector: 'md-card-header',
            template: "<ng-content select=\"[md-card-avatar]\"></ng-content> <div class=\"md-card-header-text\"> <ng-content select=\"md-card-title, md-card-subtitle\"></ng-content> </div> <ng-content></ng-content> ",
            encapsulation: core_1.ViewEncapsulation.None,
            changeDetection: core_1.ChangeDetectionStrategy.OnPush
        }), __metadata('design:paramtypes', [])], MdCardHeader);
        return MdCardHeader;
    }();
    exports.MdCardHeader = MdCardHeader;
    /*
    
    <md-card-title-group> is a component intended to be used within the <md-card> component.
    It adds styles for a preset layout that groups an image with a title section.
    
    You can see an example of a card with a title-group section here:
    http://embed.plnkr.co/EDfgCF9eKcXjini1WODm/
    
    TODO(kara): update link to demo site when it exists
    */
    var MdCardTitleGroup = function () {
        function MdCardTitleGroup() {}
        MdCardTitleGroup = __decorate([core_1.Component({
            moduleId: module.id,
            selector: 'md-card-title-group',
            template: "<div> <ng-content select=\"md-card-title, md-card-subtitle\"></ng-content> </div> <ng-content select=\"img\"></ng-content> <ng-content></ng-content> ",
            encapsulation: core_1.ViewEncapsulation.None,
            changeDetection: core_1.ChangeDetectionStrategy.OnPush
        }), __metadata('design:paramtypes', [])], MdCardTitleGroup);
        return MdCardTitleGroup;
    }();
    exports.MdCardTitleGroup = MdCardTitleGroup;
    exports.MD_CARD_DIRECTIVES = [MdCard, MdCardHeader, MdCardTitleGroup];
    

    return module.exports;
});
System.registerDynamic("npm:@angular2-material/grid-list@2.0.0-alpha.5-2/grid-tile.js", ["@angular/core", "./grid-list", "@angular2-material/core/line/line"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("@angular/core");
    var grid_list_1 = $__require("./grid-list");
    var line_1 = $__require("@angular2-material/core/line/line");
    var MdGridTile = function () {
        function MdGridTile(_renderer, _element) {
            this._renderer = _renderer;
            this._element = _element;
            this._rowspan = 1;
            this._colspan = 1;
        }
        Object.defineProperty(MdGridTile.prototype, "rowspan", {
            get: function () {
                return this._rowspan;
            },
            set: function (value) {
                this._rowspan = grid_list_1.coerceToNumber(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdGridTile.prototype, "colspan", {
            get: function () {
                return this._colspan;
            },
            set: function (value) {
                this._colspan = grid_list_1.coerceToNumber(value);
            },
            enumerable: true,
            configurable: true
        });
        /** Sets the style of the grid-tile element.  Needs to be set manually to avoid
         * "Changed after checked" errors that would occur with HostBinding.
         * @internal
         */
        MdGridTile.prototype.setStyle = function (property, value) {
            this._renderer.setElementStyle(this._element.nativeElement, property, value);
        };
        __decorate([core_1.Input(), __metadata('design:type', Object)], MdGridTile.prototype, "rowspan", null);
        __decorate([core_1.Input(), __metadata('design:type', Object)], MdGridTile.prototype, "colspan", null);
        MdGridTile = __decorate([core_1.Component({
            moduleId: module.id,
            selector: 'md-grid-tile',
            host: { 'role': 'listitem' },
            template: "<!-- TODO(kara): Revisit why this is a figure.--> <figure> <ng-content></ng-content> </figure>",
            styles: ["/** * This mixin provides all md-line styles, changing secondary font size * based on whether the list is in dense mode. */ /** * This mixin provides base styles for the wrapper around md-line * elements in a list. */ /** * This mixin normalizes default element styles, e.g. font weight for heading text. */ /* height of tile header or footer if it has one line */ /* height of tile header or footer if it has two lines */ /* side padding for text in tile headers and footers */ /* font styles for text in tile headers and footers */ md-grid-list { display: block; position: relative; } md-grid-tile { display: block; position: absolute; } md-grid-tile figure { display: -webkit-box; display: -webkit-flex; display: -ms-flexbox; display: flex; position: absolute; -webkit-box-align: center; -webkit-align-items: center; -ms-flex-align: center; align-items: center; -webkit-box-pack: center; -webkit-justify-content: center; -ms-flex-pack: center; justify-content: center; height: 100%; top: 0; right: 0; bottom: 0; left: 0; padding: 0; margin: 0; } md-grid-tile md-grid-tile-header, md-grid-tile md-grid-tile-footer { display: -webkit-box; display: -webkit-flex; display: -ms-flexbox; display: flex; -webkit-box-align: center; -webkit-align-items: center; -ms-flex-align: center; align-items: center; height: 48px; color: #fff; background: rgba(0, 0, 0, 0.18); overflow: hidden; padding: 0 16px; font-size: 16px; position: absolute; left: 0; right: 0; } md-grid-tile md-grid-tile-header [md-line], md-grid-tile md-grid-tile-footer [md-line] { display: block; white-space: nowrap; overflow-x: hidden; text-overflow: ellipsis; box-sizing: border-box; } md-grid-tile md-grid-tile-header [md-line]:nth-child(n+2), md-grid-tile md-grid-tile-footer [md-line]:nth-child(n+2) { font-size: 12px; } md-grid-tile md-grid-tile-header > *, md-grid-tile md-grid-tile-footer > * { margin: 0; padding: 0; font-weight: normal; font-size: inherit; } md-grid-tile md-grid-tile-header.md-2-line, md-grid-tile md-grid-tile-footer.md-2-line { height: 68px; } md-grid-tile .md-grid-list-text { display: -webkit-box; display: -webkit-flex; display: -ms-flexbox; display: flex; -webkit-box-orient: vertical; -webkit-box-direction: normal; -webkit-flex-direction: column; -ms-flex-direction: column; flex-direction: column; width: 100%; box-sizing: border-box; overflow: hidden; } md-grid-tile .md-grid-list-text > * { margin: 0; padding: 0; font-weight: normal; font-size: inherit; } md-grid-tile .md-grid-list-text:empty { display: none; } md-grid-tile md-grid-tile-header { top: 0; } md-grid-tile md-grid-tile-footer { bottom: 0; } md-grid-tile [md-grid-avatar] { padding-right: 16px; } [dir='rtl'] md-grid-tile [md-grid-avatar] { padding-right: 0; padding-left: 16px; } md-grid-tile [md-grid-avatar]:empty { display: none; } "],
            encapsulation: core_1.ViewEncapsulation.None
        }), __metadata('design:paramtypes', [core_1.Renderer, core_1.ElementRef])], MdGridTile);
        return MdGridTile;
    }();
    exports.MdGridTile = MdGridTile;
    var MdGridTileText = function () {
        function MdGridTileText(_renderer, _element) {
            this._renderer = _renderer;
            this._element = _element;
        }
        MdGridTileText.prototype.ngAfterContentInit = function () {
            this._lineSetter = new line_1.MdLineSetter(this._lines, this._renderer, this._element);
        };
        __decorate([core_1.ContentChildren(line_1.MdLine), __metadata('design:type', core_1.QueryList)], MdGridTileText.prototype, "_lines", void 0);
        MdGridTileText = __decorate([core_1.Component({
            moduleId: module.id,
            selector: 'md-grid-tile-header, md-grid-tile-footer',
            template: "<ng-content select=\"[md-grid-avatar]\"></ng-content> <div class=\"md-grid-list-text\"><ng-content select=\"[md-line]\"></ng-content></div> <ng-content></ng-content>"
        }), __metadata('design:paramtypes', [core_1.Renderer, core_1.ElementRef])], MdGridTileText);
        return MdGridTileText;
    }();
    exports.MdGridTileText = MdGridTileText;
    

    return module.exports;
});
System.registerDynamic("npm:@angular2-material/grid-list@2.0.0-alpha.5-2/tile-coordinator.js", ["./grid-list-errors"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var grid_list_errors_1 = $__require("./grid-list-errors");
    /**
     * Class for determining, from a list of tiles, the (row, col) position of each of those tiles
     * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)
     * because the tiles can have a rowspan.
     *
     * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid
     * large enough to accommodate it so that the tiles still render in the same order in which they
     * are given.
     *
     * The basis of the algorithm is the use of an array to track the already placed tiles. Each
     * element of the array corresponds to a column, and the value indicates how many cells in that
     * column are already occupied; zero indicates an empty cell. Moving "down" to the next row
     * decrements each value in the tracking array (indicating that the column is one cell closer to
     * being free).
     */
    var TileCoordinator = function () {
        function TileCoordinator(numColumns, tiles) {
            var _this = this;
            /** Index at which the search for the next gap will start. */
            this.columnIndex = 0;
            /** The current row index. */
            this.rowIndex = 0;
            this.tracker = new Array(numColumns);
            this.tracker.fill(0, 0, this.tracker.length);
            this.positions = tiles.map(function (tile) {
                return _this._trackTile(tile);
            });
        }
        Object.defineProperty(TileCoordinator.prototype, "rowCount", {
            /** Gets the total number of rows occupied by tiles */
            get: function () {
                return this.rowIndex + 1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileCoordinator.prototype, "rowspan", {
            /** Gets the total span of rows occupied by tiles.
             * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2. */
            get: function () {
                var lastRowMax = Math.max.apply(Math, this.tracker);
                // if any of the tiles has a rowspan that pushes it beyond the total row count,
                // add the difference to the rowcount
                return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;
            },
            enumerable: true,
            configurable: true
        });
        /** Calculates the row and col position of a tile. */
        TileCoordinator.prototype._trackTile = function (tile) {
            // Find a gap large enough for this tile.
            var gapStartIndex = this._findMatchingGap(tile.colspan);
            // Place tile in the resulting gap.
            this._markTilePosition(gapStartIndex, tile);
            // The next time we look for a gap, the search will start at columnIndex, which should be
            // immediately after the tile that has just been placed.
            this.columnIndex = gapStartIndex + tile.colspan;
            return new TilePosition(this.rowIndex, gapStartIndex);
        };
        /** Finds the next available space large enough to fit the tile. */
        TileCoordinator.prototype._findMatchingGap = function (tileCols) {
            if (tileCols > this.tracker.length) {
                throw new grid_list_errors_1.MdGridTileTooWideError(tileCols, this.tracker.length);
            }
            // Start index is inclusive, end index is exclusive.
            var gapStartIndex = -1;
            var gapEndIndex = -1;
            // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.
            do {
                // If we've reached the end of the row, go to the next row.
                if (this.columnIndex + tileCols > this.tracker.length) {
                    this._nextRow();
                    continue;
                }
                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);
                // If there are no more empty spaces in this row at all, move on to the next row.
                if (gapStartIndex == -1) {
                    this._nextRow();
                    continue;
                }
                gapEndIndex = this._findGapEndIndex(gapStartIndex);
                // If a gap large enough isn't found, we want to start looking immediately after the current
                // gap on the next iteration.
                this.columnIndex = gapStartIndex + 1;
            } while (gapEndIndex - gapStartIndex < tileCols);
            return gapStartIndex;
        };
        /** Move "down" to the next row. */
        TileCoordinator.prototype._nextRow = function () {
            this.columnIndex = 0;
            this.rowIndex++;
            // Decrement all spaces by one to reflect moving down one row.
            for (var i = 0; i < this.tracker.length; i++) {
                this.tracker[i] = Math.max(0, this.tracker[i] - 1);
            }
        };
        /**
         * Finds the end index (exclusive) of a gap given the index from which to start looking.
         * The gap ends when a non-zero value is found.
         */
        TileCoordinator.prototype._findGapEndIndex = function (gapStartIndex) {
            for (var i = gapStartIndex + 1; i < this.tracker.length; i++) {
                if (this.tracker[i] != 0) {
                    return i;
                }
            }
            // The gap ends with the end of the row.
            return this.tracker.length;
        };
        /** Update the tile tracker to account for the given tile in the given space. */
        TileCoordinator.prototype._markTilePosition = function (start, tile) {
            for (var i = 0; i < tile.colspan; i++) {
                this.tracker[start + i] = tile.rowspan;
            }
        };
        return TileCoordinator;
    }();
    exports.TileCoordinator = TileCoordinator;
    /** Simple data structure for tile position (row, col).
     * @internal
     */
    var TilePosition = function () {
        function TilePosition(row, col) {
            this.row = row;
            this.col = col;
        }
        return TilePosition;
    }();
    exports.TilePosition = TilePosition;
    

    return module.exports;
});
System.registerDynamic("npm:@angular2-material/grid-list@2.0.0-alpha.5-2/tile-styler.js", ["./grid-list-errors"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var grid_list_errors_1 = $__require("./grid-list-errors");
    /* Sets the style properties for an individual tile, given the position calculated by the
    * Tile Coordinator. */
    var TileStyler = function () {
        function TileStyler() {
            this._rows = 0;
            this._rowspan = 0;
        }
        /** Adds grid-list layout info once it is available. Cannot be processed in the constructor
         * because these properties haven't been calculated by that point.
         * @internal
         * */
        TileStyler.prototype.init = function (_gutterSize, tracker, cols, direction) {
            this._gutterSize = normalizeUnits(_gutterSize);
            this._rows = tracker.rowCount;
            this._rowspan = tracker.rowspan;
            this._cols = cols;
            this._direction = direction;
        };
        /**
         * Computes the amount of space a single 1x1 tile would take up (width or height).
         * Used as a basis for other calculations.
         * @internal
         * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.
         * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.
         * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().
         */
        TileStyler.prototype.getBaseTileSize = function (sizePercent, gutterFraction) {
            // Take the base size percent (as would be if evenly dividing the size between cells),
            // and then subtracting the size of one gutter. However, since there are no gutters on the
            // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter
            // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the
            // edge evenly among the cells).
            return "(" + sizePercent + "% - ( " + this._gutterSize + " * " + gutterFraction + " ))";
        };
        /**
         * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.
         * @internal
         * @param offset Number of tiles that have already been rendered in the row/column.
         * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).
         * @return Position of the tile as a CSS calc() expression.
         */
        TileStyler.prototype.getTilePosition = function (baseSize, offset) {
            // The position comes the size of a 1x1 tile plus gutter for each previous tile in the
            // row/column (offset).
            return calc("(" + baseSize + " + " + this._gutterSize + ") * " + offset);
        };
        /**
         * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.
         * @internal
         * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).
         * @param span The tile's rowspan or colspan.
         * @return Size of the tile as a CSS calc() expression.
         */
        TileStyler.prototype.getTileSize = function (baseSize, span) {
            return "(" + baseSize + " * " + span + ") + (" + (span - 1) + " * " + this._gutterSize + ")";
        };
        /** Gets the style properties to be applied to a tile for the given row and column index.
         * @internal
         */
        TileStyler.prototype.setStyle = function (tile, rowIndex, colIndex) {
            // Percent of the available horizontal space that one column takes up.
            var percentWidthPerTile = 100 / this._cols;
            // Fraction of the vertical gutter size that each column takes up.
            // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.
            var gutterWidthFractionPerTile = (this._cols - 1) / this._cols;
            this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);
            this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);
        };
        /** Sets the horizontal placement of the tile in the list.
         * @internal
         */
        TileStyler.prototype.setColStyles = function (tile, colIndex, percentWidth, gutterWidth) {
            // Base horizontal size of a column.
            var baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);
            // The width and horizontal position of each tile is always calculated the same way, but the
            // height and vertical position depends on the rowMode.
            var side = this._direction === 'ltr' ? 'left' : 'right';
            tile.setStyle(side, this.getTilePosition(baseTileWidth, colIndex));
            tile.setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));
        };
        /** Calculates the total size taken up by gutters across one axis of a list.
         * @internal
         */
        TileStyler.prototype.getGutterSpan = function () {
            return this._gutterSize + " * (" + this._rowspan + " - 1)";
        };
        /** Calculates the total size taken up by tiles across one axis of a list.
         * @internal
         */
        TileStyler.prototype.getTileSpan = function (tileHeight) {
            return this._rowspan + " * " + this.getTileSize(tileHeight, 1);
        };
        /** Sets the vertical placement of the tile in the list.
        * This method will be implemented by each type of TileStyler.
        * @internal
        */
        TileStyler.prototype.setRowStyles = function (tile, rowIndex, percentWidth, gutterWidth) {};
        /** Calculates the computed height and returns the correct style property to set.
        * This method will be implemented by each type of TileStyler.
        * @internal
        */
        TileStyler.prototype.getComputedHeight = function () {
            return null;
        };
        return TileStyler;
    }();
    exports.TileStyler = TileStyler;
    /*  This type of styler is instantiated when the user passes in a fixed row height
    *   Example <md-grid-list cols="3" rowHeight="100px"> */
    var FixedTileStyler = function (_super) {
        __extends(FixedTileStyler, _super);
        function FixedTileStyler(fixedRowHeight) {
            _super.call(this);
            this.fixedRowHeight = fixedRowHeight;
        }
        /** @internal */
        FixedTileStyler.prototype.init = function (gutterSize, tracker, cols, direction) {
            _super.prototype.init.call(this, gutterSize, tracker, cols, direction);
            this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);
        };
        /** @internal */
        FixedTileStyler.prototype.setRowStyles = function (tile, rowIndex, percentWidth, gutterWidth) {
            tile.setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));
            tile.setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));
        };
        /** @internal */
        FixedTileStyler.prototype.getComputedHeight = function () {
            return ['height', calc(this.getTileSpan(this.fixedRowHeight) + " + " + this.getGutterSpan())];
        };
        return FixedTileStyler;
    }(TileStyler);
    exports.FixedTileStyler = FixedTileStyler;
    /*  This type of styler is instantiated when the user passes in a width:height ratio
     *  for the row height.  Example <md-grid-list cols="3" rowHeight="3:1"> */
    var RatioTileStyler = function (_super) {
        __extends(RatioTileStyler, _super);
        function RatioTileStyler(value) {
            _super.call(this);
            this._parseRatio(value);
        }
        /** @internal */
        RatioTileStyler.prototype.setRowStyles = function (tile, rowIndex, percentWidth, gutterWidth) {
            var percentHeightPerTile = percentWidth / this.rowHeightRatio;
            this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);
            // Use paddingTop and marginTop to maintain the given aspect ratio, as
            // a percentage-based value for these properties is applied versus the *width* of the
            // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties
            tile.setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));
            tile.setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));
        };
        /** @internal */
        RatioTileStyler.prototype.getComputedHeight = function () {
            return ['paddingBottom', calc(this.getTileSpan(this.baseTileHeight) + " + " + this.getGutterSpan())];
        };
        /** @internal */
        RatioTileStyler.prototype._parseRatio = function (value) {
            var ratioParts = value.split(':');
            if (ratioParts.length !== 2) {
                throw new grid_list_errors_1.MdGridListBadRatioError(value);
            }
            this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);
        };
        return RatioTileStyler;
    }(TileStyler);
    exports.RatioTileStyler = RatioTileStyler;
    /*  This type of styler is instantiated when the user selects a "fit" row height mode.
     *  In other words, the row height will reflect the total height of the container divided
     *  by the number of rows.  Example <md-grid-list cols="3" rowHeight="fit"> */
    var FitTileStyler = function (_super) {
        __extends(FitTileStyler, _super);
        function FitTileStyler() {
            _super.apply(this, arguments);
        }
        /** @internal */
        FitTileStyler.prototype.setRowStyles = function (tile, rowIndex, percentWidth, gutterWidth) {
            // Percent of the available vertical space that one row takes up.
            var percentHeightPerTile = 100 / this._rowspan;
            // Fraction of the horizontal gutter size that each column takes up.
            var gutterHeightPerTile = (this._rows - 1) / this._rows;
            // Base vertical size of a column.
            var baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);
            tile.setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));
            tile.setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));
        };
        return FitTileStyler;
    }(TileStyler);
    exports.FitTileStyler = FitTileStyler;
    /** Wraps a CSS string in a calc function
     * @internal
     */
    function calc(exp) {
        return "calc(" + exp + ")";
    }
    /** Appends pixels to a CSS string if no units are given.
     * @internal
     */
    function normalizeUnits(value) {
        return value.match(/px|em|rem/) ? value : value + 'px';
    }
    

    return module.exports;
});
System.registerDynamic("npm:@angular2-material/core@2.0.0-alpha.5-2/errors/error.js", [], true, function ($__require, exports, module) {
    // TODO(kara): Revisit why error messages are not being properly set.
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * Wrapper around Error that sets the error message.
     */
    var MdError = function (_super) {
        __extends(MdError, _super);
        function MdError(value) {
            _super.call(this);
            _super.prototype.message = value;
        }
        return MdError;
    }(Error);
    exports.MdError = MdError;
    

    return module.exports;
});
System.registerDynamic("npm:@angular2-material/grid-list@2.0.0-alpha.5-2/grid-list-errors.js", ["@angular2-material/core/errors/error"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var error_1 = $__require("@angular2-material/core/errors/error");
    /**
     * Exception thrown when cols property is missing from grid-list
     */
    var MdGridListColsError = function (_super) {
        __extends(MdGridListColsError, _super);
        function MdGridListColsError() {
            _super.call(this, "md-grid-list: must pass in number of columns. Example: <md-grid-list cols=\"3\">");
        }
        return MdGridListColsError;
    }(error_1.MdError);
    exports.MdGridListColsError = MdGridListColsError;
    /**
     * Exception thrown when a tile's colspan is longer than the number of cols in list
     */
    var MdGridTileTooWideError = function (_super) {
        __extends(MdGridTileTooWideError, _super);
        function MdGridTileTooWideError(cols, listLength) {
            _super.call(this, "md-grid-list: tile with colspan " + cols + " is wider than grid with cols=\"" + listLength + "\".");
        }
        return MdGridTileTooWideError;
    }(error_1.MdError);
    exports.MdGridTileTooWideError = MdGridTileTooWideError;
    /**
     * Exception thrown when an invalid ratio is passed in as a rowHeight
     */
    var MdGridListBadRatioError = function (_super) {
        __extends(MdGridListBadRatioError, _super);
        function MdGridListBadRatioError(value) {
            _super.call(this, "md-grid-list: invalid ratio given for row-height: \"" + value + "\"");
        }
        return MdGridListBadRatioError;
    }(error_1.MdError);
    exports.MdGridListBadRatioError = MdGridListBadRatioError;
    

    return module.exports;
});
System.registerDynamic("npm:@angular2-material/core@2.0.0-alpha.5-2/rtl/dir.js", ["@angular/core"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("@angular/core");
    /**
     * Directive to listen to changes of direction of part of the DOM.
     *
     * Applications should use this directive instead of the native attribute so that Material
     * components can listen on changes of direction.
     */
    var Dir = function () {
        function Dir() {
            this._dir = 'ltr';
            this.dirChange = new core_1.EventEmitter();
        }
        Object.defineProperty(Dir.prototype, "dir", {
            get: function () {
                return this._dir;
            },
            set: function (v) {
                var old = this._dir;
                this._dir = v;
                if (old != this._dir) {
                    this.dirChange.emit(null);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Dir.prototype, "value", {
            get: function () {
                return this.dir;
            },
            set: function (v) {
                this.dir = v;
            },
            enumerable: true,
            configurable: true
        });
        __decorate([core_1.Input('dir'), __metadata('design:type', String)], Dir.prototype, "_dir", void 0);
        __decorate([core_1.Output(), __metadata('design:type', Object)], Dir.prototype, "dirChange", void 0);
        __decorate([core_1.HostBinding('attr.dir'), __metadata('design:type', String)], Dir.prototype, "dir", null);
        Dir = __decorate([core_1.Directive({
            selector: '[dir]',
            // TODO(hansl): maybe `$implicit` isn't the best option here, but for now that's the best we got.
            exportAs: '$implicit'
        }), __metadata('design:paramtypes', [])], Dir);
        return Dir;
    }();
    exports.Dir = Dir;
    

    return module.exports;
});
System.registerDynamic("npm:@angular2-material/core@2.0.0-alpha.5-2.json", [], false, function() {
  return {
    "main": "core.js",
    "format": "cjs",
    "meta": {
      "*.json": {
        "format": "json"
      },
      "core.d.ts": {
        "format": "esm"
      }
    },
    "map": {
      "@angular2-material/core": "."
    }
  };
});

System.registerDynamic("npm:@angular2-material/core@2.0.0-alpha.5-2/line/line.js", ["@angular/core"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("@angular/core");
    /**
     * Shared directive to count lines inside a text area, such as a list item.
     * Line elements can be extracted with a @ContentChildren(MdLine) query, then
     * counted by checking the query list's length.
     */
    var MdLine = function () {
        function MdLine() {}
        MdLine = __decorate([core_1.Directive({ selector: '[md-line]' }), __metadata('design:paramtypes', [])], MdLine);
        return MdLine;
    }();
    exports.MdLine = MdLine;
    /* Helper that takes a query list of lines and sets the correct class on the host */
    var MdLineSetter = function () {
        function MdLineSetter(_lines, _renderer, _element) {
            var _this = this;
            this._lines = _lines;
            this._renderer = _renderer;
            this._element = _element;
            this._setLineClass(this._lines.length);
            this._lines.changes.subscribe(function () {
                _this._setLineClass(_this._lines.length);
            });
        }
        MdLineSetter.prototype._setLineClass = function (count) {
            this._resetClasses();
            if (count === 2 || count === 3) {
                this._setClass("md-" + count + "-line", true);
            }
        };
        MdLineSetter.prototype._resetClasses = function () {
            this._setClass('md-2-line', false);
            this._setClass('md-3-line', false);
        };
        MdLineSetter.prototype._setClass = function (className, bool) {
            this._renderer.setElementClass(this._element.nativeElement, className, bool);
        };
        return MdLineSetter;
    }();
    exports.MdLineSetter = MdLineSetter;
    

    return module.exports;
});
System.registerDynamic("npm:@angular2-material/grid-list@2.0.0-alpha.5-2.json", [], false, function() {
  return {
    "main": "grid-list.js",
    "format": "cjs",
    "meta": {
      "*.json": {
        "format": "json"
      }
    }
  };
});

System.registerDynamic("npm:@angular2-material/grid-list@2.0.0-alpha.5-2/grid-list.js", ["@angular/core", "./grid-tile", "./tile-coordinator", "./tile-styler", "./grid-list-errors", "@angular2-material/core/rtl/dir", "@angular2-material/core/line/line"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var __param = this && this.__param || function (paramIndex, decorator) {
        return function (target, key) {
            decorator(target, key, paramIndex);
        };
    };
    var core_1 = $__require("@angular/core");
    var grid_tile_1 = $__require("./grid-tile");
    var tile_coordinator_1 = $__require("./tile-coordinator");
    var tile_styler_1 = $__require("./tile-styler");
    var grid_list_errors_1 = $__require("./grid-list-errors");
    var dir_1 = $__require("@angular2-material/core/rtl/dir");
    var line_1 = $__require("@angular2-material/core/line/line");
    // TODO(kara): Conditional (responsive) column count / row size.
    // TODO(kara): Re-layout on window resize / media change (debounced).
    // TODO(kara): gridTileHeader and gridTileFooter.
    var MD_FIT_MODE = 'fit';
    var MdGridList = function () {
        function MdGridList(_renderer, _element, _dir) {
            this._renderer = _renderer;
            this._element = _element;
            this._dir = _dir;
            /** The amount of space between tiles. This will be something like '5px' or '2em'. */
            this._gutter = '1px';
        }
        Object.defineProperty(MdGridList.prototype, "cols", {
            get: function () {
                return this._cols;
            },
            set: function (value) {
                this._cols = coerceToNumber(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdGridList.prototype, "gutterSize", {
            get: function () {
                return this._gutter;
            },
            set: function (value) {
                this._gutter = coerceToString(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdGridList.prototype, "rowHeight", {
            /** Set internal representation of row height from the user-provided value. */
            set: function (value) {
                this._rowHeight = coerceToString(value);
                this._setTileStyler();
            },
            enumerable: true,
            configurable: true
        });
        /** TODO: internal */
        MdGridList.prototype.ngOnInit = function () {
            this._checkCols();
            this._checkRowHeight();
        };
        /**
         * The layout calculation is fairly cheap if nothing changes, so there's little cost
         * to run it frequently.
         * TODO: internal
         */
        MdGridList.prototype.ngAfterContentChecked = function () {
            this._layoutTiles();
        };
        /** Throw a friendly error if cols property is missing */
        MdGridList.prototype._checkCols = function () {
            if (!this.cols) {
                throw new grid_list_errors_1.MdGridListColsError();
            }
        };
        /** Default to equal width:height if rowHeight property is missing */
        MdGridList.prototype._checkRowHeight = function () {
            if (!this._rowHeight) {
                this._tileStyler = new tile_styler_1.RatioTileStyler('1:1');
            }
        };
        /** Creates correct Tile Styler subtype based on rowHeight passed in by user */
        MdGridList.prototype._setTileStyler = function () {
            if (this._rowHeight === MD_FIT_MODE) {
                this._tileStyler = new tile_styler_1.FitTileStyler();
            } else if (this._rowHeight && this._rowHeight.match(/:/g)) {
                this._tileStyler = new tile_styler_1.RatioTileStyler(this._rowHeight);
            } else {
                this._tileStyler = new tile_styler_1.FixedTileStyler(this._rowHeight);
            }
        };
        /** Computes and applies the size and position for all children grid tiles. */
        MdGridList.prototype._layoutTiles = function () {
            var tiles = this._tiles.toArray();
            var tracker = new tile_coordinator_1.TileCoordinator(this.cols, tiles);
            var direction = this._dir ? this._dir.value : 'ltr';
            this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);
            for (var i = 0; i < tiles.length; i++) {
                var pos = tracker.positions[i];
                var tile = tiles[i];
                this._tileStyler.setStyle(tile, pos.row, pos.col);
            }
            this.setListStyle(this._tileStyler.getComputedHeight());
        };
        /**
         * Sets style on the main grid-list element, given the style name and value.
         * @internal
         */
        MdGridList.prototype.setListStyle = function (style) {
            if (style) {
                this._renderer.setElementStyle(this._element.nativeElement, style[0], style[1]);
            }
        };
        __decorate([core_1.ContentChildren(grid_tile_1.MdGridTile), __metadata('design:type', core_1.QueryList)], MdGridList.prototype, "_tiles", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], MdGridList.prototype, "cols", null);
        __decorate([core_1.Input('gutterSize'), __metadata('design:type', Object)], MdGridList.prototype, "gutterSize", null);
        __decorate([core_1.Input(), __metadata('design:type', Object), __metadata('design:paramtypes', [Object])], MdGridList.prototype, "rowHeight", null);
        MdGridList = __decorate([core_1.Component({
            moduleId: module.id,
            selector: 'md-grid-list',
            template: "<div class=\"md-grid-list\"> <ng-content></ng-content> </div>",
            styles: ["/** * This mixin provides all md-line styles, changing secondary font size * based on whether the list is in dense mode. */ /** * This mixin provides base styles for the wrapper around md-line * elements in a list. */ /** * This mixin normalizes default element styles, e.g. font weight for heading text. */ /* height of tile header or footer if it has one line */ /* height of tile header or footer if it has two lines */ /* side padding for text in tile headers and footers */ /* font styles for text in tile headers and footers */ md-grid-list { display: block; position: relative; } md-grid-tile { display: block; position: absolute; } md-grid-tile figure { display: -webkit-box; display: -webkit-flex; display: -ms-flexbox; display: flex; position: absolute; -webkit-box-align: center; -webkit-align-items: center; -ms-flex-align: center; align-items: center; -webkit-box-pack: center; -webkit-justify-content: center; -ms-flex-pack: center; justify-content: center; height: 100%; top: 0; right: 0; bottom: 0; left: 0; padding: 0; margin: 0; } md-grid-tile md-grid-tile-header, md-grid-tile md-grid-tile-footer { display: -webkit-box; display: -webkit-flex; display: -ms-flexbox; display: flex; -webkit-box-align: center; -webkit-align-items: center; -ms-flex-align: center; align-items: center; height: 48px; color: #fff; background: rgba(0, 0, 0, 0.18); overflow: hidden; padding: 0 16px; font-size: 16px; position: absolute; left: 0; right: 0; } md-grid-tile md-grid-tile-header [md-line], md-grid-tile md-grid-tile-footer [md-line] { display: block; white-space: nowrap; overflow-x: hidden; text-overflow: ellipsis; box-sizing: border-box; } md-grid-tile md-grid-tile-header [md-line]:nth-child(n+2), md-grid-tile md-grid-tile-footer [md-line]:nth-child(n+2) { font-size: 12px; } md-grid-tile md-grid-tile-header > *, md-grid-tile md-grid-tile-footer > * { margin: 0; padding: 0; font-weight: normal; font-size: inherit; } md-grid-tile md-grid-tile-header.md-2-line, md-grid-tile md-grid-tile-footer.md-2-line { height: 68px; } md-grid-tile .md-grid-list-text { display: -webkit-box; display: -webkit-flex; display: -ms-flexbox; display: flex; -webkit-box-orient: vertical; -webkit-box-direction: normal; -webkit-flex-direction: column; -ms-flex-direction: column; flex-direction: column; width: 100%; box-sizing: border-box; overflow: hidden; } md-grid-tile .md-grid-list-text > * { margin: 0; padding: 0; font-weight: normal; font-size: inherit; } md-grid-tile .md-grid-list-text:empty { display: none; } md-grid-tile md-grid-tile-header { top: 0; } md-grid-tile md-grid-tile-footer { bottom: 0; } md-grid-tile [md-grid-avatar] { padding-right: 16px; } [dir='rtl'] md-grid-tile [md-grid-avatar] { padding-right: 0; padding-left: 16px; } md-grid-tile [md-grid-avatar]:empty { display: none; } "],
            encapsulation: core_1.ViewEncapsulation.None
        }), __param(2, core_1.Optional()), __metadata('design:paramtypes', [core_1.Renderer, core_1.ElementRef, dir_1.Dir])], MdGridList);
        return MdGridList;
    }();
    exports.MdGridList = MdGridList;
    /**
     * Converts values into strings. Falsy values become empty strings.
     * @internal
     */
    function coerceToString(value) {
        return "" + (value || '');
    }
    exports.coerceToString = coerceToString;
    /**
     * Converts a value that might be a string into a number.
     * @internal
     */
    function coerceToNumber(value) {
        return typeof value === 'string' ? parseInt(value, 10) : value;
    }
    exports.coerceToNumber = coerceToNumber;
    exports.MD_GRID_LIST_DIRECTIVES = [MdGridList, grid_tile_1.MdGridTile, line_1.MdLine, grid_tile_1.MdGridTileText];
    

    return module.exports;
});
System.register("catundercover/components/portfolio/portfolio-item.component.html!github:systemjs/plugin-text@0.0.8/text.js", [], function (_export, _context) {
  "use strict";

  return {
    setters: [],
    execute: function () {
      _export("default", "<section class=\"work\">\n    <md-toolbar class=\"work__navigation\" [sticky] [stickyTopPx]=\"'64px'\">\n        <div class=\"side side__left\">\n            <div class=\"content\">{{work.title}}</div>\n        </div>\n        <div class=\"side side__right\">\n            <div class=\"content\">\n                <a href=\"javascript:;\" (click)=\"goToPrevious()\">Previous Project</a>\n                <span> / </span>\n                <a href=\"javascript:;\" (click)=\"goToNext()\">Next Project</a>\n            </div>\n        </div>\n    </md-toolbar>\n\n    <md-card class=\"work__description\">\n        <md-card-content>\n            <div class=\"side side__left\" [innerHTML]=\"work.description\"></div>\n            <div class=\"side side__right\">\n                <div class=\"attributes\">\n                    <div class=\"row\">\n                        <div class=\"title\">Client</div>\n                        <div class=\"description\">{{work.client}}</div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"title\">Type of work</div>\n                        <div class=\"description\">\n                            <span *ngFor=\"let tag of work.tags\">\n                                {{tag.title}}\n                                &nbsp;\n                            </span>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"title\">Year</div>\n                        <div class=\"description\">{{work.year}}</div>\n                    </div>\n                </div>\n            </div>\n        </md-card-content>\n    </md-card>\n\n    <md-card class=\"work__details\">\n        <md-card-content>\n            <div class=\"showcase\">\n                <img [src]=\"work.detailsImage\" class=\"showcase__image\"/>\n            </div>\n        </md-card-content>\n    </md-card>\n</section>");
    }
  };
});
System.registerDynamic('npm:@ngrx/store@2.0.1/dispatcher.js', ['@ngrx/core/SyncSubject'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var SyncSubject_1 = $__require('@ngrx/core/SyncSubject');
    var Dispatcher = function (_super) {
        __extends(Dispatcher, _super);
        function Dispatcher() {
            _super.call(this, { type: Dispatcher.INIT });
        }
        Dispatcher.prototype.dispatch = function (action) {
            this.next(action);
        };
        Dispatcher.prototype.complete = function () {
            // noop
        };
        Dispatcher.INIT = '@ngrx/store/init';
        return Dispatcher;
    }(SyncSubject_1.SyncSubject);
    exports.Dispatcher = Dispatcher;
    return module.exports;
});
System.registerDynamic('npm:@ngrx/store@2.0.1/ng2.js', ['./reducer', './dispatcher', './store', './state', './utils'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var reducer_1 = $__require('./reducer');
    var dispatcher_1 = $__require('./dispatcher');
    var store_1 = $__require('./store');
    var state_1 = $__require('./state');
    var utils_1 = $__require('./utils');
    exports.INITIAL_REDUCER = new String('Token ngrx/store/reducer');
    exports.INITIAL_STATE = new String('Token ngrx/store/initial-state');
    var dispatcherProvider = {
        provide: dispatcher_1.Dispatcher,
        useFactory: function () {
            return new dispatcher_1.Dispatcher();
        }
    };
    var storeProvider = {
        provide: store_1.Store,
        deps: [dispatcher_1.Dispatcher, reducer_1.Reducer, state_1.State, exports.INITIAL_STATE],
        useFactory: function (dispatcher, reducer, state$, initialState) {
            return new store_1.Store(dispatcher, reducer, state$, initialState);
        }
    };
    var stateProvider = {
        provide: state_1.State,
        deps: [exports.INITIAL_STATE, dispatcher_1.Dispatcher, reducer_1.Reducer],
        useFactory: function (initialState, dispatcher, reducer) {
            return new state_1.State(initialState, dispatcher, reducer);
        }
    };
    var reducerProvider = {
        provide: reducer_1.Reducer,
        deps: [dispatcher_1.Dispatcher, exports.INITIAL_REDUCER],
        useFactory: function (dispatcher, reducer) {
            return new reducer_1.Reducer(dispatcher, reducer);
        }
    };
    function provideStore(reducer, initialState) {
        return [{
            provide: exports.INITIAL_REDUCER,
            useFactory: function () {
                if (typeof reducer === 'function') {
                    return reducer;
                }
                return utils_1.combineReducers(reducer);
            }
        }, {
            provide: exports.INITIAL_STATE,
            deps: [exports.INITIAL_REDUCER],
            useFactory: function (reducer) {
                if (initialState === undefined) {
                    return reducer(undefined, { type: dispatcher_1.Dispatcher.INIT });
                }
                return initialState;
            }
        }, dispatcherProvider, storeProvider, stateProvider, reducerProvider];
    }
    exports.provideStore = provideStore;
    return module.exports;
});
System.registerDynamic('npm:@ngrx/store@2.0.1/reducer.js', ['@ngrx/core/SyncSubject'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var SyncSubject_1 = $__require('@ngrx/core/SyncSubject');
    var Reducer = function (_super) {
        __extends(Reducer, _super);
        function Reducer(_dispatcher, initialReducer) {
            _super.call(this, initialReducer);
            this._dispatcher = _dispatcher;
        }
        Reducer.prototype.replaceReducer = function (reducer) {
            this.next(reducer);
            this._dispatcher.dispatch({ type: Reducer.REPLACE });
        };
        Reducer.REPLACE = '@ngrx/store/replace-reducer';
        return Reducer;
    }(SyncSubject_1.SyncSubject);
    exports.Reducer = Reducer;
    return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/operator/withLatestFrom.js', ['../OuterSubscriber', '../util/subscribeToResult'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var OuterSubscriber_1 = $__require('../OuterSubscriber');
    var subscribeToResult_1 = $__require('../util/subscribeToResult');
    /**
     * Combines the source Observable with other Observables to create an Observable
     * whose values are calculated from the latest values of each, only when the
     * source emits.
     *
     * <span class="informal">Whenever the source Observable emits a value, it
     * computes a formula using that value plus the latest values from other input
     * Observables, then emits the output of that formula.</span>
     *
     * <img src="./img/withLatestFrom.png" width="100%">
     *
     * `withLatestFrom` combines each value from the source Observable (the
     * instance) with the latest values from the other input Observables only when
     * the source emits a value, optionally using a `project` function to determine
     * the value to be emitted on the output Observable. All input Observables must
     * emit at least one value before the output Observable will emit a value.
     *
     * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var timer = Rx.Observable.interval(1000);
     * var result = clicks.withLatestFrom(timer);
     * result.subscribe(x => console.log(x));
     *
     * @see {@link combineLatest}
     *
     * @param {Observable} other An input Observable to combine with the source
     * Observable. More than one input Observables may be given as argument.
     * @param {Function} [project] Projection function for combining values
     * together. Receives all values in order of the Observables passed, where the
     * first parameter is a value from the source Observable. (e.g.
     * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not
     * passed, arrays will be emitted on the output Observable.
     * @return {Observable} An Observable of projected values from the most recent
     * values from each input Observable, or an array of the most recent values from
     * each input Observable.
     * @method withLatestFrom
     * @owner Observable
     */
    function withLatestFrom() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        var project;
        if (typeof args[args.length - 1] === 'function') {
            project = args.pop();
        }
        var observables = args;
        return this.lift(new WithLatestFromOperator(observables, project));
    }
    exports.withLatestFrom = withLatestFrom;
    /* tslint:enable:max-line-length */
    var WithLatestFromOperator = function () {
        function WithLatestFromOperator(observables, project) {
            this.observables = observables;
            this.project = project;
        }
        WithLatestFromOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));
        };
        return WithLatestFromOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var WithLatestFromSubscriber = function (_super) {
        __extends(WithLatestFromSubscriber, _super);
        function WithLatestFromSubscriber(destination, observables, project) {
            _super.call(this, destination);
            this.observables = observables;
            this.project = project;
            this.toRespond = [];
            var len = observables.length;
            this.values = new Array(len);
            for (var i = 0; i < len; i++) {
                this.toRespond.push(i);
            }
            for (var i = 0; i < len; i++) {
                var observable = observables[i];
                this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));
            }
        }
        WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.values[outerIndex] = innerValue;
            var toRespond = this.toRespond;
            if (toRespond.length > 0) {
                var found = toRespond.indexOf(outerIndex);
                if (found !== -1) {
                    toRespond.splice(found, 1);
                }
            }
        };
        WithLatestFromSubscriber.prototype.notifyComplete = function () {
            // noop
        };
        WithLatestFromSubscriber.prototype._next = function (value) {
            if (this.toRespond.length === 0) {
                var args = [value].concat(this.values);
                if (this.project) {
                    this._tryProject(args);
                } else {
                    this.destination.next(args);
                }
            }
        };
        WithLatestFromSubscriber.prototype._tryProject = function (args) {
            var result;
            try {
                result = this.project.apply(this, args);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        return WithLatestFromSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    

    return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/operator/scan.js', ['../Subscriber'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('../Subscriber');
    /**
     * Applies an accumulation function over the source Observable, and returns each
     * intermediate result, with an optional seed value.
     *
     * <span class="informal">It's like {@link reduce}, but emits the current
     * accumulation whenever the source emits a value.</span>
     *
     * <img src="./img/scan.png" width="100%">
     *
     * Combines together all values emitted on the source, using an accumulator
     * function that knows how to join a new source value into the accumulation from
     * the past. Is similar to {@link reduce}, but emits the intermediate
     * accumulations.
     *
     * Returns an Observable that applies a specified `accumulator` function to each
     * item emitted by the source Observable. If a `seed` value is specified, then
     * that value will be used as the initial value for the accumulator. If no seed
     * value is specified, the first item of the source is used as the seed.
     *
     * @example <caption>Count the number of click events</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var ones = clicks.mapTo(1);
     * var seed = 0;
     * var count = ones.scan((acc, one) => acc + one, seed);
     * count.subscribe(x => console.log(x));
     *
     * @see {@link expand}
     * @see {@link mergeScan}
     * @see {@link reduce}
     *
     * @param {function(acc: R, value: T): R} accumulator The accumulator function
     * called on each source value.
     * @param {T|R} [seed] The initial accumulation value.
     * @return {Observable<R>} An observable of the accumulated values.
     * @method scan
     * @owner Observable
     */
    function scan(accumulator, seed) {
        return this.lift(new ScanOperator(accumulator, seed));
    }
    exports.scan = scan;
    var ScanOperator = function () {
        function ScanOperator(accumulator, seed) {
            this.accumulator = accumulator;
            this.seed = seed;
        }
        ScanOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed));
        };
        return ScanOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var ScanSubscriber = function (_super) {
        __extends(ScanSubscriber, _super);
        function ScanSubscriber(destination, accumulator, seed) {
            _super.call(this, destination);
            this.accumulator = accumulator;
            this.accumulatorSet = false;
            this.seed = seed;
            this.accumulator = accumulator;
            this.accumulatorSet = typeof seed !== 'undefined';
        }
        Object.defineProperty(ScanSubscriber.prototype, "seed", {
            get: function () {
                return this._seed;
            },
            set: function (value) {
                this.accumulatorSet = true;
                this._seed = value;
            },
            enumerable: true,
            configurable: true
        });
        ScanSubscriber.prototype._next = function (value) {
            if (!this.accumulatorSet) {
                this.seed = value;
                this.destination.next(value);
            } else {
                return this._tryNext(value);
            }
        };
        ScanSubscriber.prototype._tryNext = function (value) {
            var result;
            try {
                result = this.accumulator(this.seed, value);
            } catch (err) {
                this.destination.error(err);
            }
            this.seed = result;
            this.destination.next(result);
        };
        return ScanSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
System.registerDynamic("npm:rxjs@5.0.0-beta.6/scheduler/QueueAction.js", ["./FutureAction"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var FutureAction_1 = $__require("./FutureAction");
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var QueueAction = function (_super) {
        __extends(QueueAction, _super);
        function QueueAction() {
            _super.apply(this, arguments);
        }
        QueueAction.prototype._schedule = function (state, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            if (delay > 0) {
                return _super.prototype._schedule.call(this, state, delay);
            }
            this.delay = delay;
            this.state = state;
            var scheduler = this.scheduler;
            scheduler.actions.push(this);
            scheduler.flush();
            return this;
        };
        return QueueAction;
    }(FutureAction_1.FutureAction);
    exports.QueueAction = QueueAction;
    

    return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/scheduler/FutureAction.js', ['../util/root', '../Subscription'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var root_1 = $__require('../util/root');
    var Subscription_1 = $__require('../Subscription');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var FutureAction = function (_super) {
        __extends(FutureAction, _super);
        function FutureAction(scheduler, work) {
            _super.call(this);
            this.scheduler = scheduler;
            this.work = work;
            this.pending = false;
        }
        FutureAction.prototype.execute = function () {
            if (this.isUnsubscribed) {
                this.error = new Error('executing a cancelled action');
            } else {
                try {
                    this.work(this.state);
                } catch (e) {
                    this.unsubscribe();
                    this.error = e;
                }
            }
        };
        FutureAction.prototype.schedule = function (state, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            if (this.isUnsubscribed) {
                return this;
            }
            return this._schedule(state, delay);
        };
        FutureAction.prototype._schedule = function (state, delay) {
            var _this = this;
            if (delay === void 0) {
                delay = 0;
            }
            // Always replace the current state with the new state.
            this.state = state;
            // Set the pending flag indicating that this action has been scheduled, or
            // has recursively rescheduled itself.
            this.pending = true;
            var id = this.id;
            // If this action has an intervalID and the specified delay matches the
            // delay we used to create the intervalID, don't call `setInterval` again.
            if (id != null && this.delay === delay) {
                return this;
            }
            this.delay = delay;
            // If this action has an intervalID, but was rescheduled with a different
            // `delay` time, cancel the current intervalID and call `setInterval` with
            // the new `delay` time.
            if (id != null) {
                this.id = null;
                root_1.root.clearInterval(id);
            }
            //
            // Important implementation note:
            //
            // By default, FutureAction only executes once. However, Actions have the
            // ability to be rescheduled from within the scheduled callback (mimicking
            // recursion for asynchronous methods). This allows us to implement single
            // and repeated actions with the same code path without adding API surface
            // area, and implement tail-call optimization over asynchronous boundaries.
            //
            // However, JS runtimes make a distinction between intervals scheduled by
            // repeatedly calling `setTimeout` vs. a single `setInterval` call, with
            // the latter providing a better guarantee of precision.
            //
            // In order to accommodate both single and repeatedly rescheduled actions,
            // use `setInterval` here for both cases. By default, the interval will be
            // canceled after its first execution, or if the action schedules itself to
            // run again with a different `delay` time.
            //
            // If the action recursively schedules itself to run again with the same
            // `delay` time, the interval is not canceled, but allowed to loop again.
            // The check of whether the interval should be canceled or not is run every
            // time the interval is executed. The first time an action fails to
            // reschedule itself, the interval is canceled.
            //
            this.id = root_1.root.setInterval(function () {
                _this.pending = false;
                var _a = _this,
                    id = _a.id,
                    scheduler = _a.scheduler;
                scheduler.actions.push(_this);
                scheduler.flush();
                //
                // Terminate this interval if the action didn't reschedule itself.
                // Don't call `this.unsubscribe()` here, because the action could be
                // rescheduled later. For example:
                //
                // ```
                // scheduler.schedule(function doWork(counter) {
                //   /* ... I'm a busy worker bee ... */
                //   var originalAction = this;
                //   /* wait 100ms before rescheduling this action again */
                //   setTimeout(function () {
                //     originalAction.schedule(counter + 1);
                //   }, 100);
                // }, 1000);
                // ```
                if (_this.pending === false && id != null) {
                    _this.id = null;
                    root_1.root.clearInterval(id);
                }
            }, delay);
            return this;
        };
        FutureAction.prototype._unsubscribe = function () {
            this.pending = false;
            var _a = this,
                id = _a.id,
                scheduler = _a.scheduler;
            var actions = scheduler.actions;
            var index = actions.indexOf(this);
            if (id != null) {
                this.id = null;
                root_1.root.clearInterval(id);
            }
            if (index !== -1) {
                actions.splice(index, 1);
            }
            this.work = null;
            this.state = null;
            this.scheduler = null;
        };
        return FutureAction;
    }(Subscription_1.Subscription);
    exports.FutureAction = FutureAction;
    

    return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/scheduler/QueueScheduler.js', ['./QueueAction', './FutureAction'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var QueueAction_1 = $__require('./QueueAction');
    var FutureAction_1 = $__require('./FutureAction');
    var QueueScheduler = function () {
        function QueueScheduler() {
            this.active = false;
            this.actions = []; // XXX: use `any` to remove type param `T` from `VirtualTimeScheduler`.
            this.scheduledId = null;
        }
        QueueScheduler.prototype.now = function () {
            return Date.now();
        };
        QueueScheduler.prototype.flush = function () {
            if (this.active || this.scheduledId) {
                return;
            }
            this.active = true;
            var actions = this.actions;
            // XXX: use `any` to remove type param `T` from `VirtualTimeScheduler`.
            for (var action = null; action = actions.shift();) {
                action.execute();
                if (action.error) {
                    this.active = false;
                    throw action.error;
                }
            }
            this.active = false;
        };
        QueueScheduler.prototype.schedule = function (work, delay, state) {
            if (delay === void 0) {
                delay = 0;
            }
            return delay <= 0 ? this.scheduleNow(work, state) : this.scheduleLater(work, delay, state);
        };
        QueueScheduler.prototype.scheduleNow = function (work, state) {
            return new QueueAction_1.QueueAction(this, work).schedule(state);
        };
        QueueScheduler.prototype.scheduleLater = function (work, delay, state) {
            return new FutureAction_1.FutureAction(this, work).schedule(state, delay);
        };
        return QueueScheduler;
    }();
    exports.QueueScheduler = QueueScheduler;
    

    return module.exports;
});
System.registerDynamic("npm:rxjs@5.0.0-beta.6/scheduler/queue.js", ["./QueueScheduler"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var QueueScheduler_1 = $__require("./QueueScheduler");
  exports.queue = new QueueScheduler_1.QueueScheduler();
  

  return module.exports;
});
System.registerDynamic('npm:@ngrx/store@2.0.1/state.js', ['rxjs/operator/withLatestFrom', 'rxjs/operator/scan', 'rxjs/operator/observeOn', 'rxjs/scheduler/queue', '@ngrx/core/SyncSubject'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var withLatestFrom_1 = $__require('rxjs/operator/withLatestFrom');
    var scan_1 = $__require('rxjs/operator/scan');
    var observeOn_1 = $__require('rxjs/operator/observeOn');
    var queue_1 = $__require('rxjs/scheduler/queue');
    var SyncSubject_1 = $__require('@ngrx/core/SyncSubject');
    var State = function (_super) {
        __extends(State, _super);
        function State(_initialState, action$, reducer$) {
            var _this = this;
            _super.call(this, _initialState);
            var actionInQueue$ = observeOn_1.observeOn.call(action$, queue_1.queue);
            var actionAndReducer$ = withLatestFrom_1.withLatestFrom.call(actionInQueue$, reducer$);
            var state$ = scan_1.scan.call(actionAndReducer$, function (state, _a) {
                var action = _a[0],
                    reducer = _a[1];
                return reducer(state, action);
            }, _initialState);
            state$.subscribe(function (value) {
                return _this.next(value);
            });
        }
        return State;
    }(SyncSubject_1.SyncSubject);
    exports.State = State;
    return module.exports;
});
System.registerDynamic("npm:@ngrx/core@1.0.0/SyncSubject.js", ["rxjs/Subject"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subject_1 = $__require("rxjs/Subject");
    var SyncSubject = function (_super) {
        __extends(SyncSubject, _super);
        function SyncSubject(_value) {
            _super.call(this);
            this._value = _value;
        }
        SyncSubject.prototype._subscribe = function (subscriber) {
            var subscription = _super.prototype._subscribe.call(this, subscriber);
            if (subscription && !subscription.isUnsubscribed) {
                subscriber.next(this._value);
            }
            return subscription;
        };
        SyncSubject.prototype._next = function (value) {
            _super.prototype._next.call(this, this._value = value);
        };
        SyncSubject.prototype._error = function (err) {
            this.hasErrored = true;
            _super.prototype._error.call(this, this.errorValue = err);
        };
        return SyncSubject;
    }(Subject_1.Subject);
    exports.SyncSubject = SyncSubject;
    

    return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/operator/pluck.js', ['./map'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var map_1 = $__require('./map');
    /**
     * Maps each source value (an object) to its specified nested property.
     *
     * <span class="informal">Like {@link map}, but meant only for picking one of
     * the nested properties of every emitted object.</span>
     *
     * <img src="./img/pluck.png" width="100%">
     *
     * Given a list of strings describing a path to an object property, retrieves
     * the value of a specified nested property from all values in the source
     * Observable. If a property can't be resolved, it will return `undefined` for
     * that value.
     *
     * @example <caption>Map every every click to the tagName of the clicked target element</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var tagNames = clicks.pluck('target', 'tagName');
     * tagNames.subscribe(x => console.log(x));
     *
     * @see {@link map}
     *
     * @param {...string} properties The nested properties to pluck from each source
     * value (an object).
     * @return {Observable} Returns a new Observable of property values from the
     * source values.
     * @method pluck
     * @owner Observable
     */
    function pluck() {
        var properties = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            properties[_i - 0] = arguments[_i];
        }
        var length = properties.length;
        if (length === 0) {
            throw new Error('List of properties cannot be empty.');
        }
        return map_1.map.call(this, plucker(properties, length));
    }
    exports.pluck = pluck;
    function plucker(props, length) {
        var mapper = function (x) {
            var currentProp = x;
            for (var i = 0; i < length; i++) {
                var p = currentProp[props[i]];
                if (typeof p !== 'undefined') {
                    currentProp = p;
                } else {
                    return undefined;
                }
            }
            return currentProp;
        };
        return mapper;
    }
    

    return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/operator/distinctUntilChanged.js', ['../Subscriber', '../util/tryCatch', '../util/errorObject'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('../Subscriber');
    var tryCatch_1 = $__require('../util/tryCatch');
    var errorObject_1 = $__require('../util/errorObject');
    /**
     * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.
     * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.
     * If a comparator function is not provided, an equality check is used by default.
     * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.
     * @return {Observable} an Observable that emits items from the source Observable with distinct values.
     * @method distinctUntilChanged
     * @owner Observable
     */
    function distinctUntilChanged(compare, keySelector) {
        return this.lift(new DistinctUntilChangedOperator(compare, keySelector));
    }
    exports.distinctUntilChanged = distinctUntilChanged;
    var DistinctUntilChangedOperator = function () {
        function DistinctUntilChangedOperator(compare, keySelector) {
            this.compare = compare;
            this.keySelector = keySelector;
        }
        DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));
        };
        return DistinctUntilChangedOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var DistinctUntilChangedSubscriber = function (_super) {
        __extends(DistinctUntilChangedSubscriber, _super);
        function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
            _super.call(this, destination);
            this.keySelector = keySelector;
            this.hasKey = false;
            if (typeof compare === 'function') {
                this.compare = compare;
            }
        }
        DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {
            return x === y;
        };
        DistinctUntilChangedSubscriber.prototype._next = function (value) {
            var keySelector = this.keySelector;
            var key = value;
            if (keySelector) {
                key = tryCatch_1.tryCatch(this.keySelector)(value);
                if (key === errorObject_1.errorObject) {
                    return this.destination.error(errorObject_1.errorObject.e);
                }
            }
            var result = false;
            if (this.hasKey) {
                result = tryCatch_1.tryCatch(this.compare)(this.key, key);
                if (result === errorObject_1.errorObject) {
                    return this.destination.error(errorObject_1.errorObject.e);
                }
            } else {
                this.hasKey = true;
            }
            if (Boolean(result) === false) {
                this.key = key;
                this.destination.next(value);
            }
        };
        return DistinctUntilChangedSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
System.registerDynamic("npm:@ngrx/core@1.0.0.json", [], false, function() {
  return {
    "main": "index.js",
    "format": "cjs",
    "meta": {
      "*.json": {
        "format": "json"
      },
      "es6/SyncSubject.js": {
        "format": "esm"
      },
      "es6/add/operator/enterZone.js": {
        "format": "esm"
      },
      "es6/add/operator/leaveZone.js": {
        "format": "esm"
      },
      "es6/add/operator/select.js": {
        "format": "esm"
      },
      "es6/compose.js": {
        "format": "esm"
      },
      "es6/operator/enterZone.js": {
        "format": "esm"
      },
      "es6/operator/leaveZone.js": {
        "format": "esm"
      },
      "es6/operator/select.js": {
        "format": "esm"
      }
    },
    "map": {
      "./es6": "./es6/index.js"
    }
  };
});

System.registerDynamic('npm:@ngrx/core@1.0.0/operator/select.js', ['rxjs/operator/pluck', 'rxjs/operator/map', 'rxjs/operator/distinctUntilChanged'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var pluck_1 = $__require('rxjs/operator/pluck');
    var map_1 = $__require('rxjs/operator/map');
    var distinctUntilChanged_1 = $__require('rxjs/operator/distinctUntilChanged');
    function select(pathOrMapFn) {
        var paths = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            paths[_i - 1] = arguments[_i];
        }
        var mapped$;
        if (typeof pathOrMapFn === 'string') {
            mapped$ = pluck_1.pluck.call.apply(pluck_1.pluck, [this, pathOrMapFn].concat(paths));
        } else if (typeof pathOrMapFn === 'function') {
            mapped$ = map_1.map.call(this, pathOrMapFn);
        } else {
            throw new TypeError("Unexpected type " + typeof pathOrMapFn + " in select operator," + " expected 'string' or 'function'");
        }
        return distinctUntilChanged_1.distinctUntilChanged.call(mapped$);
    }
    exports.select = select;
    

    return module.exports;
});
System.registerDynamic('npm:@ngrx/store@2.0.1/store.js', ['@ngrx/core/SyncSubject', '@ngrx/core/operator/select'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var SyncSubject_1 = $__require('@ngrx/core/SyncSubject');
    var select_1 = $__require('@ngrx/core/operator/select');
    var Store = function (_super) {
        __extends(Store, _super);
        function Store(_dispatcher, _reducer, state$, initialState) {
            var _this = this;
            _super.call(this, initialState);
            this._dispatcher = _dispatcher;
            this._reducer = _reducer;
            this.select = select_1.select.bind(this);
            state$.subscribe(function (state) {
                return _super.prototype.next.call(_this, state);
            });
        }
        Store.prototype.replaceReducer = function (reducer) {
            this._reducer.replaceReducer(reducer);
        };
        Store.prototype.dispatch = function (action) {
            this._dispatcher.dispatch(action);
        };
        Store.prototype.next = function (action) {
            this._dispatcher.dispatch(action);
        };
        Store.prototype.error = function (err) {
            this._dispatcher.error(err);
        };
        Store.prototype.complete = function () {
            // noop
        };
        return Store;
    }(SyncSubject_1.SyncSubject);
    exports.Store = Store;
    return module.exports;
});
System.registerDynamic("npm:@ngrx/store@2.0.1/utils.js", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function combineReducers(reducers) {
        var reducerKeys = Object.keys(reducers);
        var finalReducers = {};
        for (var i = 0; i < reducerKeys.length; i++) {
            var key = reducerKeys[i];
            if (typeof reducers[key] === 'function') {
                finalReducers[key] = reducers[key];
            }
        }
        var finalReducerKeys = Object.keys(finalReducers);
        return function combination(state, action) {
            if (state === void 0) {
                state = {};
            }
            var hasChanged = false;
            var nextState = {};
            for (var i = 0; i < finalReducerKeys.length; i++) {
                var key = finalReducerKeys[i];
                var reducer = finalReducers[key];
                var previousStateForKey = state[key];
                var nextStateForKey = reducer(previousStateForKey, action);
                nextState[key] = nextStateForKey;
                hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
            }
            return hasChanged ? nextState : state;
        };
    }
    exports.combineReducers = combineReducers;
    return module.exports;
});
System.registerDynamic("npm:@ngrx/store@2.0.1.json", [], false, function() {
  return {
    "main": "index.js",
    "format": "cjs",
    "meta": {
      "*.json": {
        "format": "json"
      },
      "index.d.ts": {
        "format": "esm"
      }
    }
  };
});

System.registerDynamic('npm:@ngrx/store@2.0.1/index.js', ['./dispatcher', './ng2', './reducer', './state', './store', './utils'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    __export($__require('./dispatcher'));
    __export($__require('./ng2'));
    __export($__require('./reducer'));
    __export($__require('./state'));
    __export($__require('./store'));
    __export($__require('./utils'));
    return module.exports;
});
'use strict';

System.register('catundercover/actions/tags.js', ['npm:systemjs-plugin-babel@0.0.12/babel-helpers/classCallCheck.js', 'npm:systemjs-plugin-babel@0.0.12/babel-helpers/createClass.js', '@angular/core'], function (_export, _context) {
    "use strict";

    var _classCallCheck, _createClass, Injectable, TagsActions;

    return {
        setters: [function (_npmSystemjsPluginBabel0012BabelHelpersClassCallCheckJs) {
            _classCallCheck = _npmSystemjsPluginBabel0012BabelHelpersClassCallCheckJs.default;
        }, function (_npmSystemjsPluginBabel0012BabelHelpersCreateClassJs) {
            _createClass = _npmSystemjsPluginBabel0012BabelHelpersCreateClassJs.default;
        }, function (_angularCore) {
            Injectable = _angularCore.Injectable;
        }],
        execute: function () {
            TagsActions = function () {
                function TagsActions() {
                    _classCallCheck(this, TagsActions);
                }

                _createClass(TagsActions, [{
                    key: 'filterWorksByTag',
                    value: function filterWorksByTag(tag) {
                        return {
                            type: this.FILTER_WORKS_BY_TAG,
                            payload: tag
                        };
                    }
                }, {
                    key: 'ACTION_PREFIX',
                    get: function get() {
                        return 'TAGS';
                    }
                }, {
                    key: 'FILTER_WORKS_BY_TAG',
                    get: function get() {
                        return this.ACTION_PREFIX + '.FILTER_WORKS_BY_TAG';
                    }
                }], [{
                    key: 'annotations',
                    value: function annotations() {
                        return [new Injectable()];
                    }
                }]);

                return TagsActions;
            }();

            _export('default', TagsActions);
        }
    };
});
'use strict';

System.register('catundercover/actions/works.js', ['npm:systemjs-plugin-babel@0.0.12/babel-helpers/classCallCheck.js', 'npm:systemjs-plugin-babel@0.0.12/babel-helpers/createClass.js', '@angular/core'], function (_export, _context) {
    "use strict";

    var _classCallCheck, _createClass, Injectable, WorksActions;

    return {
        setters: [function (_npmSystemjsPluginBabel0012BabelHelpersClassCallCheckJs) {
            _classCallCheck = _npmSystemjsPluginBabel0012BabelHelpersClassCallCheckJs.default;
        }, function (_npmSystemjsPluginBabel0012BabelHelpersCreateClassJs) {
            _createClass = _npmSystemjsPluginBabel0012BabelHelpersCreateClassJs.default;
        }, function (_angularCore) {
            Injectable = _angularCore.Injectable;
        }],
        execute: function () {
            WorksActions = function () {
                function WorksActions() {
                    _classCallCheck(this, WorksActions);
                }

                _createClass(WorksActions, [{
                    key: 'ACTION_PREFIX',

                    /**
                     * Namespace actions
                     * @returns {string}
                     * @constructor
                     */
                    get: function get() {
                        return 'WORKS';
                    }
                }], [{
                    key: 'annotations',
                    value: function annotations() {
                        return [new Injectable()];
                    }
                }]);

                return WorksActions;
            }();

            _export('default', WorksActions);
        }
    };
});
'use strict';

System.register('catundercover/actions/index.js', ['./tags', './works'], function (_export, _context) {
    "use strict";

    var TagsActions, WorksActions;
    return {
        setters: [function (_tags) {
            TagsActions = _tags.default;
        }, function (_works) {
            WorksActions = _works.default;
        }],
        execute: function () {
            _export('default', {
                tags: new TagsActions(),
                works: new WorksActions()
            });
        }
    };
});
'use strict';

System.register('catundercover/reducers/tags.js', [], function (_export, _context) {
    "use strict";

    var tagsState, tagsReducers;
    return {
        setters: [],
        execute: function () {
            _export('tagsState', tagsState = [{
                title: 'Web Design',
                slug: 'web-design'
            }, {
                title: 'App Design',
                slug: 'app-design'
            }, {
                title: 'Illustration',
                slug: 'illustrations'
            }]);

            _export('tagsState', tagsState);

            _export('tagsReducers', tagsReducers = function tagsReducers(iState, iAction) {
                switch (iAction.type) {
                    default:
                        return iState;
                }
            });

            _export('tagsReducers', tagsReducers);
        }
    };
});
'use strict';

System.register('catundercover/reducers/works.js', ['lodash', './../actions/index', './tags'], function (_export, _context) {
    "use strict";

    var _, Actions, tagsState, dummyDescription, worksState, worksReducers, getItems, getFilter, getFilteredItems;

    return {
        setters: [function (_lodash) {
            _ = _lodash.default;
        }, function (_actionsIndex) {
            Actions = _actionsIndex.default;
        }, function (_tags) {
            tagsState = _tags.tagsState;
        }],
        execute: function () {
            dummyDescription = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc accumsan ligula nunc, pharetra imperdiet risus malesuada et. Nulla facilisi. Suspendisse tempus nisl tortor, at pharetra ligula bibendum eget. Vivamus vehicula non neque quis pulvinar. Donec a ultricies purus. Vivamus egestas lacinia lorem, eu dignissim magna mollis sit amet. Nullam interdum, sapien id sodales luctus, metus massa faucibus elit, in malesuada metus nisl in nisl. Vivamus ut porttitor ligula. Sed vestibulum mauris mauris, vel tristique metus dapibus vel. Aliquam rhoncus nulla ut turpis feugiat ultrices. In hac habitasse platea dictumst. Nullam venenatis nec libero et mollis. Cras lacus metus, cursus quis accumsan et, gravida vitae erat. Vestibulum pretium ante hendrerit lacus vestibulum, quis finibus mi condimentum.';

            _export('worksState', worksState = {
                filter: [_.cloneDeep(tagsState[0])],
                items: [{
                    title: 'Air Moldova',
                    description: dummyDescription,
                    slug: 'air-moldova',
                    client: 'Floagency',
                    year: '2015',
                    image: '/assets/works/app/air-moldova-app-presentation-preview.png',
                    detailsImage: '/assets/works/app/air-moldova-app-presentation.png',
                    tags: [{
                        title: 'App Design',
                        slug: 'app-design'
                    }]

                }, {
                    title: 'Little Foxes',
                    description: dummyDescription,
                    slug: 'little-foxes',
                    client: 'Floagency',
                    year: '2014',
                    image: '/assets/works/illustration/illustration-little-foxes-preview.png',
                    detailsImage: '/assets/works/illustration/illustration-little-foxes.jpg',
                    tags: [{
                        title: 'Illustrations',
                        slug: 'illustrations'
                    }]

                }, {
                    title: 'Marigold&Grey',
                    description: dummyDescription,
                    slug: 'marigold-n-grey',
                    client: 'Floagency',
                    year: '2015',
                    image: '/assets/works/illustration/illustration-marigold-n-grey-preview.png',
                    detailsImage: '/assets/works/illustration/illustration-marigold-n-grey.png',
                    tags: [{
                        title: 'Illustrations',
                        slug: 'illustrations'
                    }]

                }, {
                    title: 'Occasion Banners',
                    description: dummyDescription,
                    slug: 'occasion-banner',
                    client: 'Floagency',
                    year: '',
                    image: '/assets/works/illustration/illustration-occasion-banners-preview.png',
                    detailsImage: '/assets/works/illustration/illustration-occasion-banners.png',
                    tags: [{
                        title: 'Illustrations',
                        slug: 'illustrations'
                    }]

                }, {
                    title: 'Simply Beautiful Flowers',
                    description: dummyDescription,
                    slug: 'simply-beautiful-flowers-illustration',
                    client: 'Floagency',
                    year: '2015',
                    image: '/assets/works/illustration/illustration-simply-beautiful-preview.png',
                    detailsImage: '/assets/works/illustration/illustration-simply-beautiful.jpg',
                    tags: [{
                        title: 'Illustrations',
                        slug: 'illustrations'
                    }]

                }, {
                    title: 'Fatty Sundays',
                    description: dummyDescription,
                    slug: 'fatty-sundays',
                    client: 'Floagency',
                    year: '2015',
                    image: '/assets/works/web/fs-presentation-preview.png',
                    detailsImage: '/assets/works/web/fs-presentation.png',
                    tags: [{
                        title: 'Web Design',
                        slug: 'web-design'
                    }]

                }, {
                    title: 'Karlisch Photography',
                    description: dummyDescription,
                    slug: 'karlisch-photography',
                    client: 'Floagency',
                    year: '2015',
                    image: '/assets/works/web/karlisch-preview.png',
                    detailsImage: '/assets/works/web/karlisch.jpg',
                    tags: [{
                        title: 'Web Design',
                        slug: 'web-design'
                    }]

                }, {
                    title: 'Liz Lui Photography',
                    description: dummyDescription,
                    slug: 'liz-lui-photography',
                    client: 'Floagency',
                    year: '2015',
                    image: '/assets/works/web/liz-lui-presentation-preview.png',
                    detailsImage: '/assets/works/web/liz-lui-presentation.jpg',
                    tags: [{
                        title: 'Web Design',
                        slug: 'web-design'
                    }]

                }, {
                    title: 'Simply Beautiful Flowers',
                    description: dummyDescription,
                    slug: 'simply-beautiful-flowers-website',
                    client: 'Floagency',
                    year: '2015',
                    image: '/assets/works/web/simply-beautiful-presentation-preview.png',
                    detailsImage: '/assets/works/web/simply-beautiful-presentation.jpg',
                    tags: [{
                        title: 'Web Design',
                        slug: 'web-design'
                    }]

                }, {
                    title: 'Vitra',
                    description: dummyDescription,
                    slug: 'vitra',
                    client: 'Pitch',
                    year: '2015',
                    image: '/assets/works/web/vitra-presentation-preview.png',
                    detailsImage: '/assets/works/web/vitra-presentation.jpg',
                    tags: [{
                        title: 'Web Design',
                        slug: 'web-design'
                    }]

                }]
            });

            _export('worksState', worksState);

            _export('worksReducers', worksReducers = function worksReducers(iState, iAction) {
                switch (iAction.type) {
                    case Actions.tags.FILTER_WORKS_BY_TAG:
                        var state = _.cloneDeep(iState);
                        state.filter = [iAction.payload];
                        return state;
                    default:
                        return iState;
                }
            });

            _export('worksReducers', worksReducers);

            _export('getItems', getItems = function getItems() {
                return function (state) {
                    return state.map(function (worksState) {
                        return worksState.items;
                    });
                };
            });

            _export('getItems', getItems);

            _export('getFilter', getFilter = function getFilter() {
                return function (state) {
                    return state.map(function (worksState) {
                        return worksState.filter;
                    });
                };
            });

            _export('getFilter', getFilter);

            _export('getFilteredItems', getFilteredItems = function getFilteredItems() {
                return function (state) {
                    return state.map(function (worksState) {
                        var hasAll = _.find(worksState.filter, { slug: 'all' });

                        return worksState.items.filter(function (item) {
                            return Boolean(hasAll || item.tags.find(function (tag) {
                                return Boolean(_.find(worksState.filter, { slug: tag.slug }));
                            }));
                        });
                    });
                };
            });

            _export('getFilteredItems', getFilteredItems);
        }
    };
});
'use strict';

System.register('catundercover/components/portfolio/portfolio.service.js', ['npm:systemjs-plugin-babel@0.0.12/babel-helpers/classCallCheck.js', 'npm:systemjs-plugin-babel@0.0.12/babel-helpers/createClass.js', '@angular/core', '@ngrx/store', './../../reducers/works'], function (_export, _context) {
    "use strict";

    var _classCallCheck, _createClass, Injectable, Store, getItems, PortfolioService;

    return {
        setters: [function (_npmSystemjsPluginBabel0012BabelHelpersClassCallCheckJs) {
            _classCallCheck = _npmSystemjsPluginBabel0012BabelHelpersClassCallCheckJs.default;
        }, function (_npmSystemjsPluginBabel0012BabelHelpersCreateClassJs) {
            _createClass = _npmSystemjsPluginBabel0012BabelHelpersCreateClassJs.default;
        }, function (_angularCore) {
            Injectable = _angularCore.Injectable;
        }, function (_ngrxStore) {
            Store = _ngrxStore.Store;
        }, function (_reducersWorks) {
            getItems = _reducersWorks.getItems;
        }],
        execute: function () {
            PortfolioService = function () {
                _createClass(PortfolioService, null, [{
                    key: 'annotations',
                    get: function get() {
                        return [new Injectable()];
                    }
                }, {
                    key: 'parameters',
                    get: function get() {
                        return [[Store]];
                    }
                }]);

                function PortfolioService(store) {
                    _classCallCheck(this, PortfolioService);

                    this.store = store;
                    this.works = this.store.select('works').let(getItems());
                }

                _createClass(PortfolioService, [{
                    key: 'getWorks',
                    value: function getWorks() {}
                }, {
                    key: 'getWork',
                    value: function getWork(iWorkId) {
                        var workId = String(iWorkId);
                        var work = void 0;

                        this.works.subscribe(function (works) {
                            work = _.find(works, { slug: workId });
                        });

                        return work;
                    }
                }, {
                    key: 'getWorkByIndex',
                    value: function getWorkByIndex(iIndex) {
                        var index = Number(iIndex);
                        var work = void 0;

                        this.works.subscribe(function (works) {
                            var count = works.length;
                            var absoluteIndex = index < 0 ? -1 * index : index;
                            var idx = absoluteIndex < count ? absoluteIndex : absoluteIndex % count;

                            if (index < 0) {
                                idx = count - idx - 1;
                            }

                            work = works[idx];
                        });

                        return work;
                    }
                }, {
                    key: 'getWorkIndex',
                    value: function getWorkIndex(iWorkId) {
                        var workId = String(iWorkId);
                        var index = null;

                        this.works.subscribe(function (works) {
                            works.map(function (work, idx) {
                                if (work.slug === workId) {
                                    index = idx;
                                }
                            });
                        });

                        return index;
                    }
                }]);

                return PortfolioService;
            }();

            _export('default', PortfolioService);
        }
    };
});
'use strict';

System.register('catundercover/directives/sticky.js', ['npm:systemjs-plugin-babel@0.0.12/babel-helpers/classCallCheck.js', 'npm:systemjs-plugin-babel@0.0.12/babel-helpers/createClass.js', '@angular/core'], function (_export, _context) {
    "use strict";

    var _classCallCheck, _createClass, Directive, ElementRef, StickyDirective;

    return {
        setters: [function (_npmSystemjsPluginBabel0012BabelHelpersClassCallCheckJs) {
            _classCallCheck = _npmSystemjsPluginBabel0012BabelHelpersClassCallCheckJs.default;
        }, function (_npmSystemjsPluginBabel0012BabelHelpersCreateClassJs) {
            _createClass = _npmSystemjsPluginBabel0012BabelHelpersCreateClassJs.default;
        }, function (_angularCore) {
            Directive = _angularCore.Directive;
            ElementRef = _angularCore.ElementRef;
        }],
        execute: function () {
            StickyDirective = function () {
                _createClass(StickyDirective, null, [{
                    key: 'annotations',
                    get: function get() {
                        return [new Directive({
                            selector: '[sticky]',
                            host: {
                                '(window:scroll)': 'onScroll()'
                            },
                            inputs: ['stickyTopPx']
                        })];
                    }
                }, {
                    key: 'parameters',
                    get: function get() {
                        return [[ElementRef]];
                    }
                }]);

                function StickyDirective(element) {
                    _classCallCheck(this, StickyDirective);

                    this.element = element.nativeElement;
                    window.x = this.element;
                }

                _createClass(StickyDirective, [{
                    key: 'ngOnInit',
                    value: function ngOnInit() {
                        this.elementTopPx = this.element.getBoundingClientRect().top;
                        this.stickyTopPx = parseFloat(this.stickyTopPx) || 0;
                    }
                }, {
                    key: 'onScroll',
                    value: function onScroll() {
                        var scrollTop = this.currentScroll();

                        if (scrollTop >= this.elementTopPx - this.stickyTopPx) {
                            this.element.classList.add('sticky');
                        } else {
                            this.element.classList.remove('sticky');
                        }
                    }
                }, {
                    key: 'currentScroll',
                    value: function currentScroll() {
                        return window.pageYOffset || document.documentElement.scrollTop || document.scrollingElement.scrollTop;
                    }
                }]);

                return StickyDirective;
            }();

            _export('default', StickyDirective);
        }
    };
});
'use strict';

System.register('catundercover/components/portfolio/portfolio-item.component.js', ['npm:systemjs-plugin-babel@0.0.12/babel-helpers/classCallCheck.js', 'npm:systemjs-plugin-babel@0.0.12/babel-helpers/createClass.js', '@angular/core', '@ngrx/store', '@angular/router', '@angular2-material/card', '@angular2-material/toolbar', '@angular2-material/grid-list', './portfolio-item.component.html!text', './portfolio-item.component.less!', './portfolio.service', './../../directives/sticky'], function (_export, _context) {
    "use strict";

    var _classCallCheck, _createClass, Component, ViewEncapsulation, Store, ROUTER_DIRECTIVES, Router, MD_CARD_DIRECTIVES, MD_TOOLBAR_DIRECTIVES, MD_GRID_LIST_DIRECTIVES, componentTemplate, componentStyles, PortfolioService, StickyDirective, PortfolioItemComponent;

    return {
        setters: [function (_npmSystemjsPluginBabel0012BabelHelpersClassCallCheckJs) {
            _classCallCheck = _npmSystemjsPluginBabel0012BabelHelpersClassCallCheckJs.default;
        }, function (_npmSystemjsPluginBabel0012BabelHelpersCreateClassJs) {
            _createClass = _npmSystemjsPluginBabel0012BabelHelpersCreateClassJs.default;
        }, function (_angularCore) {
            Component = _angularCore.Component;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
        }, function (_ngrxStore) {
            Store = _ngrxStore.Store;
        }, function (_angularRouter) {
            ROUTER_DIRECTIVES = _angularRouter.ROUTER_DIRECTIVES;
            Router = _angularRouter.Router;
        }, function (_angular2MaterialCard) {
            MD_CARD_DIRECTIVES = _angular2MaterialCard.MD_CARD_DIRECTIVES;
        }, function (_angular2MaterialToolbar) {
            MD_TOOLBAR_DIRECTIVES = _angular2MaterialToolbar.MD_TOOLBAR_DIRECTIVES;
        }, function (_angular2MaterialGridList) {
            MD_GRID_LIST_DIRECTIVES = _angular2MaterialGridList.MD_GRID_LIST_DIRECTIVES;
        }, function (_portfolioItemComponentHtmlText) {
            componentTemplate = _portfolioItemComponentHtmlText.default;
        }, function (_portfolioItemComponentLess) {
            componentStyles = _portfolioItemComponentLess.default;
        }, function (_portfolioService) {
            PortfolioService = _portfolioService.default;
        }, function (_directivesSticky) {
            StickyDirective = _directivesSticky.default;
        }],
        execute: function () {
            PortfolioItemComponent = function () {
                _createClass(PortfolioItemComponent, null, [{
                    key: 'annotations',
                    get: function get() {
                        return [new Component({
                            selector: 'portfolio-item',
                            template: componentTemplate,
                            styles: [componentStyles],
                            directives: [ROUTER_DIRECTIVES, MD_CARD_DIRECTIVES, MD_TOOLBAR_DIRECTIVES, MD_GRID_LIST_DIRECTIVES, StickyDirective],
                            inputs: ['id'],
                            providers: [PortfolioService],
                            encapsulation: ViewEncapsulation.None
                        })];
                    }
                }, {
                    key: 'parameters',
                    get: function get() {
                        return [[Store], [PortfolioService], [Router]];
                    }
                }]);

                function PortfolioItemComponent(store, portfolio, router) {
                    _classCallCheck(this, PortfolioItemComponent);

                    this.store = store;
                    this.portfolio = portfolio;
                    this.router = router;
                    this.work = null;
                }

                _createClass(PortfolioItemComponent, [{
                    key: 'ngOnInit',
                    value: function ngOnInit() {
                        this.work = this.portfolio.getWork(this.id);
                        this.idx = this.portfolio.getWorkIndex(this.id);
                    }
                }, {
                    key: 'goToPrevious',
                    value: function goToPrevious() {
                        this.idx -= 1;
                        this.work = this.portfolio.getWorkByIndex(this.idx);
                        this.router.navigate(['/work', this.work.slug]);
                    }
                }, {
                    key: 'goToNext',
                    value: function goToNext() {
                        this.idx += 1;
                        this.work = this.portfolio.getWorkByIndex(this.idx);
                        this.router.navigate(['/work', this.work.slug]);
                    }
                }]);

                return PortfolioItemComponent;
            }();

            _export('default', PortfolioItemComponent);
        }
    };
});
'use strict';

System.register('catundercover/pages/work/view.component.js', ['npm:systemjs-plugin-babel@0.0.12/babel-helpers/classCallCheck.js', 'npm:systemjs-plugin-babel@0.0.12/babel-helpers/createClass.js', '@angular/core', '@angular/router', './../../components/portfolio/portfolio-item.component'], function (_export, _context) {
    "use strict";

    var _classCallCheck, _createClass, Component, ActivatedRoute, PortfolioItemComponent, WorkViewPage;

    return {
        setters: [function (_npmSystemjsPluginBabel0012BabelHelpersClassCallCheckJs) {
            _classCallCheck = _npmSystemjsPluginBabel0012BabelHelpersClassCallCheckJs.default;
        }, function (_npmSystemjsPluginBabel0012BabelHelpersCreateClassJs) {
            _createClass = _npmSystemjsPluginBabel0012BabelHelpersCreateClassJs.default;
        }, function (_angularCore) {
            Component = _angularCore.Component;
        }, function (_angularRouter) {
            ActivatedRoute = _angularRouter.ActivatedRoute;
        }, function (_componentsPortfolioPortfolioItemComponent) {
            PortfolioItemComponent = _componentsPortfolioPortfolioItemComponent.default;
        }],
        execute: function () {
            WorkViewPage = function () {
                _createClass(WorkViewPage, null, [{
                    key: 'annotations',
                    get: function get() {
                        return [new Component({
                            selector: 'work-view-page',
                            directives: [PortfolioItemComponent],
                            template: '<portfolio-item [id]="workId"></portfolio-item>'
                        })];
                    }
                }, {
                    key: 'parameters',
                    get: function get() {
                        return [[ActivatedRoute]];
                    }
                }]);

                function WorkViewPage(activatedRoute) {
                    _classCallCheck(this, WorkViewPage);

                    this.route = activatedRoute;
                    this.workId = null;
                }

                _createClass(WorkViewPage, [{
                    key: 'ngOnInit',
                    value: function ngOnInit() {
                        var _this = this;

                        this.sParams = this.route.params.subscribe(function (params) {
                            _this.workId = params.workId;
                        });
                    }
                }, {
                    key: 'ngOnDestroy',
                    value: function ngOnDestroy() {
                        this.sParams.unsubscribe();
                    }
                }]);

                return WorkViewPage;
            }();

            _export('default', WorkViewPage);
        }
    };
});
'use strict';

System.register('catundercover/routes/index.js', ['@angular/router', './../pages/about/index.component', './../pages/moodboard/index.component', './../pages/thoughts/index.component', './../pages/work/index.component', './../pages/work/view.component'], function (_export, _context) {
  "use strict";

  var provideRouter, AboutIndexPage, MoodboardIndexPage, ThoughtsIndexPage, WorkIndexPage, WorkViewPage, routes;
  return {
    setters: [function (_angularRouter) {
      provideRouter = _angularRouter.provideRouter;
    }, function (_pagesAboutIndexComponent) {
      AboutIndexPage = _pagesAboutIndexComponent.default;
    }, function (_pagesMoodboardIndexComponent) {
      MoodboardIndexPage = _pagesMoodboardIndexComponent.default;
    }, function (_pagesThoughtsIndexComponent) {
      ThoughtsIndexPage = _pagesThoughtsIndexComponent.default;
    }, function (_pagesWorkIndexComponent) {
      WorkIndexPage = _pagesWorkIndexComponent.default;
    }, function (_pagesWorkViewComponent) {
      WorkViewPage = _pagesWorkViewComponent.default;
    }],
    execute: function () {
      routes = [{ path: '', component: WorkIndexPage }, { path: 'work', component: WorkIndexPage }, { path: 'work/:workId', component: WorkViewPage }, { path: 'about', component: AboutIndexPage }, { path: 'moodboard', component: MoodboardIndexPage }, { path: 'thoughts', component: ThoughtsIndexPage }];

      _export('default', [provideRouter(routes)]);
    }
  };
});
System.registerDynamic("npm:@angular2-material/button@2.0.0-alpha.5-2.json", [], false, function() {
  return {
    "main": "button.js",
    "format": "cjs",
    "meta": {
      "*.json": {
        "format": "json"
      }
    }
  };
});

System.registerDynamic("npm:@angular2-material/button@2.0.0-alpha.5-2/button.js", ["@angular/core"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("@angular/core");
    // TODO(jelbourn): Ink ripples.
    // TODO(jelbourn): Make the `isMouseDown` stuff done with one global listener.
    // TODO(kara): Convert attribute selectors to classes when attr maps become available
    var MdButton = function () {
        function MdButton(elementRef, renderer) {
            this.elementRef = elementRef;
            this.renderer = renderer;
            /** Whether the button has focus from the keyboard (not the mouse). Used for class binding. */
            this.isKeyboardFocused = false;
            /** Whether a mousedown has occurred on this element in the last 100ms. */
            this.isMouseDown = false;
        }
        Object.defineProperty(MdButton.prototype, "color", {
            get: function () {
                return this._color;
            },
            set: function (value) {
                this._updateColor(value);
            },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        MdButton.prototype.setMousedown = function () {
            var _this = this;
            // We only *show* the focus style when focus has come to the button via the keyboard.
            // The Material Design spec is silent on this topic, and without doing this, the
            // button continues to look :active after clicking.
            // @see http://marcysutton.com/button-focus-hell/
            this.isMouseDown = true;
            setTimeout(function () {
                _this.isMouseDown = false;
            }, 100);
        };
        MdButton.prototype._updateColor = function (newColor) {
            this._setElementColor(this._color, false);
            this._setElementColor(newColor, true);
            this._color = newColor;
        };
        MdButton.prototype._setElementColor = function (color, isAdd) {
            if (color != null && color != '') {
                this.renderer.setElementClass(this.elementRef.nativeElement, "md-" + color, isAdd);
            }
        };
        /** @internal */
        MdButton.prototype.setKeyboardFocus = function () {
            this.isKeyboardFocused = !this.isMouseDown;
        };
        /** @internal */
        MdButton.prototype.removeKeyboardFocus = function () {
            this.isKeyboardFocused = false;
        };
        MdButton = __decorate([core_1.Component({
            moduleId: module.id,
            selector: 'button[md-button], button[md-raised-button], button[md-icon-button], ' + 'button[md-fab], button[md-mini-fab]',
            inputs: ['color'],
            host: {
                '[class.md-button-focus]': 'isKeyboardFocused',
                '(mousedown)': 'setMousedown()',
                '(focus)': 'setKeyboardFocus()',
                '(blur)': 'removeKeyboardFocus()'
            },
            template: "<span class=\"md-button-wrapper\"><ng-content></ng-content></span> ",
            styles: ["/** * A collection of mixins and CSS classes that can be used to apply elevation to a material * element. * See: https://www.google.com/design/spec/what-is-material/elevation-shadows.html * Examples: * * * .md-foo { *   @include $md-elevation(2); * *   &:active { *     @include $md-elevation(8); *   } * } * * <div id=\"external-card\" class=\"md-elevation-z2\"><p>Some content</p></div> * * For an explanation of the design behind how elevation is implemented, see the design doc at * https://goo.gl/Kq0k9Z. */ /** * The css property used for elevation. In most cases this should not be changed. It is exposed * as a variable for abstraction / easy use when needing to reference the property directly, for * example in a will-change rule. */ /** The default duration value for elevation transitions. */ /** The default easing value for elevation transitions. */ /** * Applies the correct css rules to an element to give it the elevation specified by $zValue. * The $zValue must be between 0 and 24. */ /** * Returns a string that can be used as the value for a transition property for elevation. * Calling this function directly is useful in situations where a component needs to transition * more than one property. * * .foo { *   transition: md-elevation-transition-property-value(), opacity 100ms ease; *   will-change: $md-elevation-property, opacity; * } */ /** * Applies the correct css rules needed to have an element transition between elevations. * This mixin should be applied to elements whose elevation values will change depending on their * context (e.g. when active or disabled). */ [md-raised-button], [md-fab], [md-mini-fab], [md-button], [md-icon-button] { box-sizing: border-box; position: relative; background: transparent; text-align: center; cursor: pointer; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; outline: none; border: none; display: inline-block; white-space: nowrap; text-decoration: none; vertical-align: baseline; font-size: 14px; font-family: Roboto, \"Helvetica Neue\", sans-serif; font-weight: 500; color: currentColor; margin: 0; min-width: 88px; line-height: 36px; padding: 0 16px; border-radius: 3px; } .md-primary[md-raised-button], .md-primary[md-fab], .md-primary[md-mini-fab], .md-primary[md-button], .md-primary[md-icon-button] { color: #009688; } .md-accent[md-raised-button], .md-accent[md-fab], .md-accent[md-mini-fab], .md-accent[md-button], .md-accent[md-icon-button] { color: #9c27b0; } .md-warn[md-raised-button], .md-warn[md-fab], .md-warn[md-mini-fab], .md-warn[md-button], .md-warn[md-icon-button] { color: #f44336; } .md-primary[disabled][md-raised-button], .md-primary[disabled][md-fab], .md-primary[disabled][md-mini-fab], .md-primary[disabled][md-button], .md-primary[disabled][md-icon-button], .md-accent[disabled][md-raised-button], .md-accent[disabled][md-fab], .md-accent[disabled][md-mini-fab], .md-accent[disabled][md-button], .md-accent[disabled][md-icon-button], .md-warn[disabled][md-raised-button], .md-warn[disabled][md-fab], .md-warn[disabled][md-mini-fab], .md-warn[disabled][md-button], .md-warn[disabled][md-icon-button], [disabled][disabled][md-raised-button], [disabled][disabled][md-fab], [disabled][disabled][md-mini-fab], [disabled][disabled][md-button], [disabled][disabled][md-icon-button] { color: rgba(0, 0, 0, 0.38); } [disabled][md-raised-button], [disabled][md-fab], [disabled][md-mini-fab], [disabled][md-button], [disabled][md-icon-button] { cursor: default; } [md-raised-button], [md-fab], [md-mini-fab] { box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12); background-color: #fafafa; -webkit-transform: translate3d(0, 0, 0); transform: translate3d(0, 0, 0); -webkit-transition: background 0.4s cubic-bezier(0.25, 0.8, 0.25, 1), box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1); transition: background 0.4s cubic-bezier(0.25, 0.8, 0.25, 1), box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1); } .md-primary[md-raised-button], .md-primary[md-fab], .md-primary[md-mini-fab] { color: white; } .md-accent[md-raised-button], .md-accent[md-fab], .md-accent[md-mini-fab] { color: rgba(255, 255, 255, 0.870588); } .md-warn[md-raised-button], .md-warn[md-fab], .md-warn[md-mini-fab] { color: white; } .md-primary[disabled][md-raised-button], .md-primary[disabled][md-fab], .md-primary[disabled][md-mini-fab], .md-accent[disabled][md-raised-button], .md-accent[disabled][md-fab], .md-accent[disabled][md-mini-fab], .md-warn[disabled][md-raised-button], .md-warn[disabled][md-fab], .md-warn[disabled][md-mini-fab], [disabled][disabled][md-raised-button], [disabled][disabled][md-fab], [disabled][disabled][md-mini-fab] { color: rgba(0, 0, 0, 0.38); } .md-primary[md-raised-button], .md-primary[md-fab], .md-primary[md-mini-fab] { background-color: #009688; } .md-accent[md-raised-button], .md-accent[md-fab], .md-accent[md-mini-fab] { background-color: #9c27b0; } .md-warn[md-raised-button], .md-warn[md-fab], .md-warn[md-mini-fab] { background-color: #f44336; } .md-primary[disabled][md-raised-button], .md-primary[disabled][md-fab], .md-primary[disabled][md-mini-fab], .md-accent[disabled][md-raised-button], .md-accent[disabled][md-fab], .md-accent[disabled][md-mini-fab], .md-warn[disabled][md-raised-button], .md-warn[disabled][md-fab], .md-warn[disabled][md-mini-fab], [disabled][disabled][md-raised-button], [disabled][disabled][md-fab], [disabled][disabled][md-mini-fab] { background-color: rgba(0, 0, 0, 0.12); } [md-raised-button]:active, [md-fab]:active, [md-mini-fab]:active { box-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12); } .md-button-focus[md-raised-button], .md-button-focus[md-fab], .md-button-focus[md-mini-fab] { background-color: rgba(0, 0, 0, 0.12); } .md-button-focus.md-primary[md-raised-button], .md-button-focus.md-primary[md-fab], .md-button-focus.md-primary[md-mini-fab] { background-color: #00897b; } .md-button-focus.md-accent[md-raised-button], .md-button-focus.md-accent[md-fab], .md-button-focus.md-accent[md-mini-fab] { background-color: #8e24aa; } .md-button-focus.md-warn[md-raised-button], .md-button-focus.md-warn[md-fab], .md-button-focus.md-warn[md-mini-fab] { background-color: #e53935; } .md-button-focus.md-primary[disabled][md-raised-button], .md-button-focus.md-primary[disabled][md-fab], .md-button-focus.md-primary[disabled][md-mini-fab], .md-button-focus.md-accent[disabled][md-raised-button], .md-button-focus.md-accent[disabled][md-fab], .md-button-focus.md-accent[disabled][md-mini-fab], .md-button-focus.md-warn[disabled][md-raised-button], .md-button-focus.md-warn[disabled][md-fab], .md-button-focus.md-warn[disabled][md-mini-fab], .md-button-focus[disabled][disabled][md-raised-button], .md-button-focus[disabled][disabled][md-fab], .md-button-focus[disabled][disabled][md-mini-fab] { background-color: rgba(0, 0, 0, 0.12); } [disabled][md-raised-button], [disabled][md-fab], [disabled][md-mini-fab] { box-shadow: none; } [md-button]:hover, [md-button].md-button-focus { background-color: rgba(0, 0, 0, 0.12); } [md-button]:hover.md-primary, [md-button].md-button-focus.md-primary { background-color: rgba(0, 150, 136, 0.12); } [md-button]:hover.md-accent, [md-button].md-button-focus.md-accent { background-color: rgba(156, 39, 176, 0.12); } [md-button]:hover.md-warn, [md-button].md-button-focus.md-warn { background-color: rgba(244, 67, 54, 0.12); } [md-button]:hover.md-primary[disabled], [md-button]:hover.md-accent[disabled], [md-button]:hover.md-warn[disabled], [md-button]:hover[disabled][disabled], [md-button].md-button-focus.md-primary[disabled], [md-button].md-button-focus.md-accent[disabled], [md-button].md-button-focus.md-warn[disabled], [md-button].md-button-focus[disabled][disabled] { background-color: rgba(0, 0, 0, 0.12); } [md-button][disabled]:hover.md-primary, [md-button][disabled]:hover.md-accent, [md-button][disabled]:hover.md-warn, [md-button][disabled]:hover:hover { background-color: transparent; } [md-fab] { min-width: 0; border-radius: 50%; background-color: #9c27b0; color: rgba(255, 255, 255, 0.870588); width: 56px; height: 56px; padding: 0; } [md-fab] i, [md-fab] md-icon { padding: 16px 0; } [md-fab].md-button-focus { background-color: #8e24aa; } [md-mini-fab] { min-width: 0; border-radius: 50%; background-color: #9c27b0; color: rgba(255, 255, 255, 0.870588); width: 40px; height: 40px; padding: 0; } [md-mini-fab] i, [md-mini-fab] md-icon { padding: 8px 0; } [md-mini-fab].md-button-focus { background-color: #8e24aa; } [md-icon-button] { min-width: 0; padding: 0; width: 40px; height: 40px; line-height: 24px; border-radius: 50%; } [md-icon-button].md-button-focus { background-color: rgba(0, 0, 0, 0.12); } [md-icon-button].md-button-focus.md-primary { background-color: rgba(0, 150, 136, 0.12); } [md-icon-button].md-button-focus.md-accent { background-color: rgba(156, 39, 176, 0.12); } [md-icon-button].md-button-focus.md-warn { background-color: rgba(244, 67, 54, 0.12); } [md-icon-button].md-button-focus.md-primary[disabled], [md-icon-button].md-button-focus.md-accent[disabled], [md-icon-button].md-button-focus.md-warn[disabled], [md-icon-button].md-button-focus[disabled][disabled] { background-color: rgba(0, 0, 0, 0.12); } [md-icon-button] .md-button-wrapper > * { vertical-align: middle; } @media screen and (-ms-high-contrast: active) { .md-raised-button, .md-fab, .md-mini-fab { border: 1px solid #fff; } } "],
            encapsulation: core_1.ViewEncapsulation.None,
            changeDetection: core_1.ChangeDetectionStrategy.OnPush
        }), __metadata('design:paramtypes', [core_1.ElementRef, core_1.Renderer])], MdButton);
        return MdButton;
    }();
    exports.MdButton = MdButton;
    var MdAnchor = function (_super) {
        __extends(MdAnchor, _super);
        function MdAnchor(elementRef, renderer) {
            _super.call(this, elementRef, renderer);
            this._disabled = null;
        }
        Object.defineProperty(MdAnchor.prototype, "tabIndex", {
            get: function () {
                return this.disabled ? -1 : 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdAnchor.prototype, "isAriaDisabled", {
            get: function () {
                return this.disabled ? 'true' : 'false';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdAnchor.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            set: function (value) {
                // The presence of *any* disabled value makes the component disabled, *except* for false.
                this._disabled = value != null && value != false ? true : null;
            },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        MdAnchor.prototype.haltDisabledEvents = function (event) {
            // A disabled button shouldn't apply any actions
            if (this.disabled) {
                event.preventDefault();
                event.stopImmediatePropagation();
            }
        };
        __decorate([core_1.HostBinding('tabIndex'), __metadata('design:type', Number)], MdAnchor.prototype, "tabIndex", null);
        __decorate([core_1.HostBinding('attr.aria-disabled'), __metadata('design:type', String)], MdAnchor.prototype, "isAriaDisabled", null);
        __decorate([core_1.HostBinding('attr.disabled'), core_1.Input('disabled'), __metadata('design:type', Object)], MdAnchor.prototype, "disabled", null);
        MdAnchor = __decorate([core_1.Component({
            moduleId: module.id,
            selector: 'a[md-button], a[md-raised-button], a[md-icon-button], a[md-fab], a[md-mini-fab]',
            inputs: ['color'],
            host: {
                '[class.md-button-focus]': 'isKeyboardFocused',
                '(mousedown)': 'setMousedown()',
                '(focus)': 'setKeyboardFocus()',
                '(blur)': 'removeKeyboardFocus()',
                '(click)': 'haltDisabledEvents($event)'
            },
            template: "<span class=\"md-button-wrapper\"><ng-content></ng-content></span> ",
            styles: ["/** * A collection of mixins and CSS classes that can be used to apply elevation to a material * element. * See: https://www.google.com/design/spec/what-is-material/elevation-shadows.html * Examples: * * * .md-foo { *   @include $md-elevation(2); * *   &:active { *     @include $md-elevation(8); *   } * } * * <div id=\"external-card\" class=\"md-elevation-z2\"><p>Some content</p></div> * * For an explanation of the design behind how elevation is implemented, see the design doc at * https://goo.gl/Kq0k9Z. */ /** * The css property used for elevation. In most cases this should not be changed. It is exposed * as a variable for abstraction / easy use when needing to reference the property directly, for * example in a will-change rule. */ /** The default duration value for elevation transitions. */ /** The default easing value for elevation transitions. */ /** * Applies the correct css rules to an element to give it the elevation specified by $zValue. * The $zValue must be between 0 and 24. */ /** * Returns a string that can be used as the value for a transition property for elevation. * Calling this function directly is useful in situations where a component needs to transition * more than one property. * * .foo { *   transition: md-elevation-transition-property-value(), opacity 100ms ease; *   will-change: $md-elevation-property, opacity; * } */ /** * Applies the correct css rules needed to have an element transition between elevations. * This mixin should be applied to elements whose elevation values will change depending on their * context (e.g. when active or disabled). */ [md-raised-button], [md-fab], [md-mini-fab], [md-button], [md-icon-button] { box-sizing: border-box; position: relative; background: transparent; text-align: center; cursor: pointer; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; outline: none; border: none; display: inline-block; white-space: nowrap; text-decoration: none; vertical-align: baseline; font-size: 14px; font-family: Roboto, \"Helvetica Neue\", sans-serif; font-weight: 500; color: currentColor; margin: 0; min-width: 88px; line-height: 36px; padding: 0 16px; border-radius: 3px; } .md-primary[md-raised-button], .md-primary[md-fab], .md-primary[md-mini-fab], .md-primary[md-button], .md-primary[md-icon-button] { color: #009688; } .md-accent[md-raised-button], .md-accent[md-fab], .md-accent[md-mini-fab], .md-accent[md-button], .md-accent[md-icon-button] { color: #9c27b0; } .md-warn[md-raised-button], .md-warn[md-fab], .md-warn[md-mini-fab], .md-warn[md-button], .md-warn[md-icon-button] { color: #f44336; } .md-primary[disabled][md-raised-button], .md-primary[disabled][md-fab], .md-primary[disabled][md-mini-fab], .md-primary[disabled][md-button], .md-primary[disabled][md-icon-button], .md-accent[disabled][md-raised-button], .md-accent[disabled][md-fab], .md-accent[disabled][md-mini-fab], .md-accent[disabled][md-button], .md-accent[disabled][md-icon-button], .md-warn[disabled][md-raised-button], .md-warn[disabled][md-fab], .md-warn[disabled][md-mini-fab], .md-warn[disabled][md-button], .md-warn[disabled][md-icon-button], [disabled][disabled][md-raised-button], [disabled][disabled][md-fab], [disabled][disabled][md-mini-fab], [disabled][disabled][md-button], [disabled][disabled][md-icon-button] { color: rgba(0, 0, 0, 0.38); } [disabled][md-raised-button], [disabled][md-fab], [disabled][md-mini-fab], [disabled][md-button], [disabled][md-icon-button] { cursor: default; } [md-raised-button], [md-fab], [md-mini-fab] { box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12); background-color: #fafafa; -webkit-transform: translate3d(0, 0, 0); transform: translate3d(0, 0, 0); -webkit-transition: background 0.4s cubic-bezier(0.25, 0.8, 0.25, 1), box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1); transition: background 0.4s cubic-bezier(0.25, 0.8, 0.25, 1), box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1); } .md-primary[md-raised-button], .md-primary[md-fab], .md-primary[md-mini-fab] { color: white; } .md-accent[md-raised-button], .md-accent[md-fab], .md-accent[md-mini-fab] { color: rgba(255, 255, 255, 0.870588); } .md-warn[md-raised-button], .md-warn[md-fab], .md-warn[md-mini-fab] { color: white; } .md-primary[disabled][md-raised-button], .md-primary[disabled][md-fab], .md-primary[disabled][md-mini-fab], .md-accent[disabled][md-raised-button], .md-accent[disabled][md-fab], .md-accent[disabled][md-mini-fab], .md-warn[disabled][md-raised-button], .md-warn[disabled][md-fab], .md-warn[disabled][md-mini-fab], [disabled][disabled][md-raised-button], [disabled][disabled][md-fab], [disabled][disabled][md-mini-fab] { color: rgba(0, 0, 0, 0.38); } .md-primary[md-raised-button], .md-primary[md-fab], .md-primary[md-mini-fab] { background-color: #009688; } .md-accent[md-raised-button], .md-accent[md-fab], .md-accent[md-mini-fab] { background-color: #9c27b0; } .md-warn[md-raised-button], .md-warn[md-fab], .md-warn[md-mini-fab] { background-color: #f44336; } .md-primary[disabled][md-raised-button], .md-primary[disabled][md-fab], .md-primary[disabled][md-mini-fab], .md-accent[disabled][md-raised-button], .md-accent[disabled][md-fab], .md-accent[disabled][md-mini-fab], .md-warn[disabled][md-raised-button], .md-warn[disabled][md-fab], .md-warn[disabled][md-mini-fab], [disabled][disabled][md-raised-button], [disabled][disabled][md-fab], [disabled][disabled][md-mini-fab] { background-color: rgba(0, 0, 0, 0.12); } [md-raised-button]:active, [md-fab]:active, [md-mini-fab]:active { box-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12); } .md-button-focus[md-raised-button], .md-button-focus[md-fab], .md-button-focus[md-mini-fab] { background-color: rgba(0, 0, 0, 0.12); } .md-button-focus.md-primary[md-raised-button], .md-button-focus.md-primary[md-fab], .md-button-focus.md-primary[md-mini-fab] { background-color: #00897b; } .md-button-focus.md-accent[md-raised-button], .md-button-focus.md-accent[md-fab], .md-button-focus.md-accent[md-mini-fab] { background-color: #8e24aa; } .md-button-focus.md-warn[md-raised-button], .md-button-focus.md-warn[md-fab], .md-button-focus.md-warn[md-mini-fab] { background-color: #e53935; } .md-button-focus.md-primary[disabled][md-raised-button], .md-button-focus.md-primary[disabled][md-fab], .md-button-focus.md-primary[disabled][md-mini-fab], .md-button-focus.md-accent[disabled][md-raised-button], .md-button-focus.md-accent[disabled][md-fab], .md-button-focus.md-accent[disabled][md-mini-fab], .md-button-focus.md-warn[disabled][md-raised-button], .md-button-focus.md-warn[disabled][md-fab], .md-button-focus.md-warn[disabled][md-mini-fab], .md-button-focus[disabled][disabled][md-raised-button], .md-button-focus[disabled][disabled][md-fab], .md-button-focus[disabled][disabled][md-mini-fab] { background-color: rgba(0, 0, 0, 0.12); } [disabled][md-raised-button], [disabled][md-fab], [disabled][md-mini-fab] { box-shadow: none; } [md-button]:hover, [md-button].md-button-focus { background-color: rgba(0, 0, 0, 0.12); } [md-button]:hover.md-primary, [md-button].md-button-focus.md-primary { background-color: rgba(0, 150, 136, 0.12); } [md-button]:hover.md-accent, [md-button].md-button-focus.md-accent { background-color: rgba(156, 39, 176, 0.12); } [md-button]:hover.md-warn, [md-button].md-button-focus.md-warn { background-color: rgba(244, 67, 54, 0.12); } [md-button]:hover.md-primary[disabled], [md-button]:hover.md-accent[disabled], [md-button]:hover.md-warn[disabled], [md-button]:hover[disabled][disabled], [md-button].md-button-focus.md-primary[disabled], [md-button].md-button-focus.md-accent[disabled], [md-button].md-button-focus.md-warn[disabled], [md-button].md-button-focus[disabled][disabled] { background-color: rgba(0, 0, 0, 0.12); } [md-button][disabled]:hover.md-primary, [md-button][disabled]:hover.md-accent, [md-button][disabled]:hover.md-warn, [md-button][disabled]:hover:hover { background-color: transparent; } [md-fab] { min-width: 0; border-radius: 50%; background-color: #9c27b0; color: rgba(255, 255, 255, 0.870588); width: 56px; height: 56px; padding: 0; } [md-fab] i, [md-fab] md-icon { padding: 16px 0; } [md-fab].md-button-focus { background-color: #8e24aa; } [md-mini-fab] { min-width: 0; border-radius: 50%; background-color: #9c27b0; color: rgba(255, 255, 255, 0.870588); width: 40px; height: 40px; padding: 0; } [md-mini-fab] i, [md-mini-fab] md-icon { padding: 8px 0; } [md-mini-fab].md-button-focus { background-color: #8e24aa; } [md-icon-button] { min-width: 0; padding: 0; width: 40px; height: 40px; line-height: 24px; border-radius: 50%; } [md-icon-button].md-button-focus { background-color: rgba(0, 0, 0, 0.12); } [md-icon-button].md-button-focus.md-primary { background-color: rgba(0, 150, 136, 0.12); } [md-icon-button].md-button-focus.md-accent { background-color: rgba(156, 39, 176, 0.12); } [md-icon-button].md-button-focus.md-warn { background-color: rgba(244, 67, 54, 0.12); } [md-icon-button].md-button-focus.md-primary[disabled], [md-icon-button].md-button-focus.md-accent[disabled], [md-icon-button].md-button-focus.md-warn[disabled], [md-icon-button].md-button-focus[disabled][disabled] { background-color: rgba(0, 0, 0, 0.12); } [md-icon-button] .md-button-wrapper > * { vertical-align: middle; } @media screen and (-ms-high-contrast: active) { .md-raised-button, .md-fab, .md-mini-fab { border: 1px solid #fff; } } "],
            encapsulation: core_1.ViewEncapsulation.None
        }), __metadata('design:paramtypes', [core_1.ElementRef, core_1.Renderer])], MdAnchor);
        return MdAnchor;
    }(MdButton);
    exports.MdAnchor = MdAnchor;
    exports.MD_BUTTON_DIRECTIVES = [MdButton, MdAnchor];
    

    return module.exports;
});
System.registerDynamic("npm:lodash@4.13.1.json", [], false, function() {
  return {
    "main": "lodash.js",
    "format": "cjs",
    "meta": {
      "*.json": {
        "format": "json"
      },
      "core.js": {
        "format": "amd"
      },
      "core.min.js": {
        "format": "amd"
      },
      "isBuffer.js": {
        "globals": {
          "Buffer": "buffer/global"
        }
      },
      "lodash.js": {
        "format": "amd"
      },
      "lodash.min.js": {
        "format": "amd"
      }
    }
  };
});

(function() {
var define = System.amdDefine;
;
(function() {
  var undefined;
  var VERSION = '4.13.1';
  var LARGE_ARRAY_SIZE = 200;
  var FUNC_ERROR_TEXT = 'Expected a function';
  var HASH_UNDEFINED = '__lodash_hash_undefined__';
  var PLACEHOLDER = '__lodash_placeholder__';
  var BIND_FLAG = 1,
      BIND_KEY_FLAG = 2,
      CURRY_BOUND_FLAG = 4,
      CURRY_FLAG = 8,
      CURRY_RIGHT_FLAG = 16,
      PARTIAL_FLAG = 32,
      PARTIAL_RIGHT_FLAG = 64,
      ARY_FLAG = 128,
      REARG_FLAG = 256,
      FLIP_FLAG = 512;
  var UNORDERED_COMPARE_FLAG = 1,
      PARTIAL_COMPARE_FLAG = 2;
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';
  var HOT_COUNT = 150,
      HOT_SPAN = 16;
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';
  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
      reUnescapedHtml = /[&<>"'`]/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(\.|\[\])(?:\4|$))/g;
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;
  var reBasicWord = /[a-zA-Z0-9]+/g;
  var reEscapeChar = /\\(\\)?/g;
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
  var reFlags = /\w*$/;
  var reHasHexPrefix = /^0x/i;
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
  var reIsBinary = /^0b[01]+$/i;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var reIsOctal = /^0o[0-7]+$/i;
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;
  var reNoMatch = /($^)/;
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
      rsComboSymbolsRange = '\\u20d0-\\u20f0',
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';
  var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',
      rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptLowerContr = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptUpperContr = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
  var reApos = RegExp(rsApos, 'g');
  var reComboMark = RegExp(rsCombo, 'g');
  var reComplexSymbol = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
  var reComplexWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptLowerContr + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsUpperMisc + '+' + rsOptUpperContr + '(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')', rsUpper + '?' + rsLowerMisc + '+' + rsOptLowerContr, rsUpper + '+' + rsOptUpperContr, rsDigits, rsEmoji].join('|'), 'g');
  var reHasComplexSymbol = RegExp('[' + rsZWJ + rsAstralRange + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');
  var reHasComplexWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
  var contextProps = ['Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array', 'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object', 'Promise', 'Reflect', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array', 'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap', '_', 'isFinite', 'parseInt', 'setTimeout'];
  var templateCounter = -1;
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
  var deburredLetters = {
    '\xc0': 'A',
    '\xc1': 'A',
    '\xc2': 'A',
    '\xc3': 'A',
    '\xc4': 'A',
    '\xc5': 'A',
    '\xe0': 'a',
    '\xe1': 'a',
    '\xe2': 'a',
    '\xe3': 'a',
    '\xe4': 'a',
    '\xe5': 'a',
    '\xc7': 'C',
    '\xe7': 'c',
    '\xd0': 'D',
    '\xf0': 'd',
    '\xc8': 'E',
    '\xc9': 'E',
    '\xca': 'E',
    '\xcb': 'E',
    '\xe8': 'e',
    '\xe9': 'e',
    '\xea': 'e',
    '\xeb': 'e',
    '\xcC': 'I',
    '\xcd': 'I',
    '\xce': 'I',
    '\xcf': 'I',
    '\xeC': 'i',
    '\xed': 'i',
    '\xee': 'i',
    '\xef': 'i',
    '\xd1': 'N',
    '\xf1': 'n',
    '\xd2': 'O',
    '\xd3': 'O',
    '\xd4': 'O',
    '\xd5': 'O',
    '\xd6': 'O',
    '\xd8': 'O',
    '\xf2': 'o',
    '\xf3': 'o',
    '\xf4': 'o',
    '\xf5': 'o',
    '\xf6': 'o',
    '\xf8': 'o',
    '\xd9': 'U',
    '\xda': 'U',
    '\xdb': 'U',
    '\xdc': 'U',
    '\xf9': 'u',
    '\xfa': 'u',
    '\xfb': 'u',
    '\xfc': 'u',
    '\xdd': 'Y',
    '\xfd': 'y',
    '\xff': 'y',
    '\xc6': 'Ae',
    '\xe6': 'ae',
    '\xde': 'Th',
    '\xfe': 'th',
    '\xdf': 'ss'
  };
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
    '`': '&#96;'
  };
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'",
    '&#96;': '`'
  };
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;
  var freeExports = typeof exports == 'object' && exports;
  var freeModule = freeExports && typeof module == 'object' && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var freeGlobal = checkGlobal(typeof global == 'object' && global);
  var freeSelf = checkGlobal(typeof self == 'object' && self);
  var thisGlobal = checkGlobal(typeof this == 'object' && this);
  var root = freeGlobal || freeSelf || thisGlobal || Function('return this')();
  function addMapEntry(map, pair) {
    map.set(pair[0], pair[1]);
    return map;
  }
  function addSetEntry(set, value) {
    set.add(value);
    return set;
  }
  function apply(func, thisArg, args) {
    var length = args.length;
    switch (length) {
      case 0:
        return func.call(thisArg);
      case 1:
        return func.call(thisArg, args[0]);
      case 2:
        return func.call(thisArg, args[0], args[1]);
      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array ? array.length : 0;
    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array ? array.length : 0;
    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }
  function arrayEachRight(array, iteratee) {
    var length = array ? array.length : 0;
    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array ? array.length : 0;
    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array ? array.length : 0,
        resIndex = 0,
        result = [];
    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }
  function arrayIncludes(array, value) {
    var length = array ? array.length : 0;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array ? array.length : 0;
    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array ? array.length : 0,
        result = Array(length);
    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;
    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array ? array.length : 0;
    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array ? array.length : 0;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }
  function arraySome(array, predicate) {
    var index = -1,
        length = array ? array.length : 0;
    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);
    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }
  function baseIndexOf(array, value, fromIndex) {
    if (value !== value) {
      return indexOfNaN(array, fromIndex);
    }
    var index = fromIndex - 1,
        length = array.length;
    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;
    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }
  function baseMean(array, iteratee) {
    var length = array ? array.length : 0;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }
  function baseSortBy(array, comparer) {
    var length = array.length;
    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;
    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);
    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }
  function cacheHas(cache, key) {
    return cache.has(key);
  }
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;
    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;
    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }
  function checkGlobal(value) {
    return (value && value.Object === Object) ? value : null;
  }
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;
    while (length--) {
      if (array[length] === placeholder) {
        result++;
      }
    }
    return result;
  }
  function deburrLetter(letter) {
    return deburredLetters[letter];
  }
  function escapeHtmlChar(chr) {
    return htmlEscapes[chr];
  }
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }
  function indexOfNaN(array, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);
    while ((fromRight ? index-- : ++index < length)) {
      var other = array[index];
      if (other !== other) {
        return index;
      }
    }
    return -1;
  }
  function isHostObject(value) {
    var result = false;
    if (value != null && typeof value.toString != 'function') {
      try {
        result = !!(value + '');
      } catch (e) {}
    }
    return result;
  }
  function iteratorToArray(iterator) {
    var data,
        result = [];
    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);
    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];
    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);
    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);
    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }
  function stringSize(string) {
    if (!(string && reHasComplexSymbol.test(string))) {
      return string.length;
    }
    var result = reComplexSymbol.lastIndex = 0;
    while (reComplexSymbol.test(string)) {
      result++;
    }
    return result;
  }
  function stringToArray(string) {
    return string.match(reComplexSymbol);
  }
  function unescapeHtmlChar(chr) {
    return htmlUnescapes[chr];
  }
  function runInContext(context) {
    context = context ? _.defaults({}, context, _.pick(root, contextProps)) : root;
    var Date = context.Date,
        Error = context.Error,
        Math = context.Math,
        RegExp = context.RegExp,
        TypeError = context.TypeError;
    var arrayProto = context.Array.prototype,
        objectProto = context.Object.prototype,
        stringProto = context.String.prototype;
    var coreJsData = context['__core-js_shared__'];
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());
    var funcToString = context.Function.prototype.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var idCounter = 0;
    var objectCtorString = funcToString.call(Object);
    var objectToString = objectProto.toString;
    var oldDash = root._;
    var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
    var Buffer = moduleExports ? context.Buffer : undefined,
        Reflect = context.Reflect,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        enumerate = Reflect ? Reflect.enumerate : undefined,
        getOwnPropertySymbols = Object.getOwnPropertySymbols,
        iteratorSymbol = typeof(iteratorSymbol = Symbol && Symbol.iterator) == 'symbol' ? iteratorSymbol : undefined,
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice;
    var setTimeout = function(func, wait) {
      return context.setTimeout.call(root, func, wait);
    };
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetPrototype = Object.getPrototypeOf,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = Object.keys,
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReplace = stringProto.replace,
        nativeReverse = arrayProto.reverse,
        nativeSplit = stringProto.split;
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');
    var metaMap = WeakMap && new WeakMap;
    var nonEnumShadows = !propertyIsEnumerable.call({'valueOf': 1}, 'valueOf');
    var realNames = {};
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }
    function baseLodash() {}
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }
    lodash.templateSettings = {
      'escape': reEscape,
      'evaluate': reEvaluate,
      'interpolate': reInterpolate,
      'variable': '',
      'imports': {'_': lodash}
    };
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;
    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);
      if (!isArr || arrLength < LARGE_ARRAY_SIZE || (arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];
      outer: while (length-- && resIndex < takeCount) {
        index += dir;
        var iterIndex = -1,
            value = array[index];
        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);
          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;
    function Hash(entries) {
      var index = -1,
          length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    }
    function hashDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index = -1,
          length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
    }
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);
      return index < 0 ? undefined : data[index][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);
      if (index < 0) {
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index = -1,
          length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }
    function mapCacheDelete(key) {
      return getMapData(this, key)['delete'](key);
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      getMapData(this, key).set(key, value);
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function SetCache(values) {
      var index = -1,
          length = values ? values.length : 0;
      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    function Stack(entries) {
      this.__data__ = new ListCache(entries);
    }
    function stackClear() {
      this.__data__ = new ListCache;
    }
    function stackDelete(key) {
      return this.__data__['delete'](key);
    }
    function stackGet(key) {
      return this.__data__.get(key);
    }
    function stackHas(key) {
      return this.__data__.has(key);
    }
    function stackSet(key, value) {
      var cache = this.__data__;
      if (cache instanceof ListCache && cache.__data__.length == LARGE_ARRAY_SIZE) {
        cache = this.__data__ = new MapCache(cache.__data__);
      }
      cache.set(key, value);
      return this;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    function assignInDefaults(objValue, srcValue, key, object) {
      if (objValue === undefined || (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) || (typeof key == 'number' && value === undefined && !(key in object))) {
        object[key] = value;
      }
    }
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || (value === undefined && !(key in object))) {
        object[key] = value;
      }
    }
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }
    function baseAt(object, paths) {
      var index = -1,
          isNil = object == null,
          length = paths.length,
          result = Array(length);
      while (++index < length) {
        result[index] = isNil ? undefined : get(object, paths[index]);
      }
      return result;
    }
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }
    function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
      var result;
      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;
        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          if (isHostObject(value)) {
            return object ? value : {};
          }
          result = initCloneObject(isFunc ? {} : value);
          if (!isDeep) {
            return copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, baseClone, isDeep);
        }
      }
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);
      if (!isArr) {
        var props = isFull ? getAllKeys(value) : keys(value);
      }
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
      });
      return result;
    }
    function baseConforms(source) {
      var props = keys(source),
          length = props.length;
      return function(object) {
        if (object == null) {
          return !length;
        }
        var index = length;
        while (index--) {
          var key = props[index],
              predicate = source[key],
              value = object[key];
          if ((value === undefined && !(key in Object(object))) || !predicate(value)) {
            return false;
          }
        }
        return true;
      };
    }
    function baseCreate(proto) {
      return isObject(proto) ? objectCreate(proto) : {};
    }
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() {
        func.apply(undefined, args);
      }, wait);
    }
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;
      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      } else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer: while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;
        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        } else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }
    var baseEach = createBaseEach(baseForOwn);
    var baseEachRight = createBaseEach(baseForOwnRight, true);
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;
      while (++index < length) {
        var value = array[index],
            current = iteratee(value);
        if (current != null && (computed === undefined ? (current === current && !isSymbol(current)) : comparator(current, computed))) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }
    function baseFill(array, value, start, end) {
      var length = array.length;
      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;
      predicate || (predicate = isFlattenable);
      result || (result = []);
      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }
    var baseFor = createBaseFor();
    var baseForRight = createBaseFor(true);
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }
    function baseGet(object, path) {
      path = isKey(path, object) ? [path] : castPath(path);
      var index = 0,
          length = path.length;
      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    function baseGt(value, other) {
      return value > other;
    }
    function baseHas(object, key) {
      return object != null && (hasOwnProperty.call(object, key) || (typeof object == 'object' && key in object && getPrototype(object) === null));
    }
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];
      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120)) ? new SetCache(othIndex && array) : undefined;
      }
      array = arrays[0];
      var index = -1,
          seen = caches[0];
      outer: while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;
        value = (comparator || value !== 0) ? value : 0;
        if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }
    function baseInvoke(object, path, args) {
      if (!isKey(path, object)) {
        path = castPath(path);
        object = parent(object, path);
        path = last(path);
      }
      var func = object == null ? object : object[toKey(path)];
      return func == null ? undefined : apply(func, object, args);
    }
    function baseIsEqual(value, other, customizer, bitmask, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
    }
    function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = arrayTag,
          othTag = arrayTag;
      if (!objIsArr) {
        objTag = getTag(object);
        objTag = objTag == argsTag ? objectTag : objTag;
      }
      if (!othIsArr) {
        othTag = getTag(other);
        othTag = othTag == argsTag ? objectTag : othTag;
      }
      var objIsObj = objTag == objectTag && !isHostObject(object),
          othIsObj = othTag == objectTag && !isHostObject(other),
          isSameTag = objTag == othTag;
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object)) ? equalArrays(object, other, equalFunc, customizer, bitmask, stack) : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
      }
      if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
    }
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2]) ? data[1] !== object[data[0]] : !(data[0] in object)) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];
        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack) : result)) {
            return false;
          }
        }
      }
      return true;
    }
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseIteratee(value) {
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
      }
      return property(value);
    }
    function baseKeys(object) {
      return nativeKeys(Object(object));
    }
    function baseKeysIn(object) {
      object = object == null ? object : Object(object);
      var result = [];
      for (var key in object) {
        result.push(key);
      }
      return result;
    }
    if (enumerate && !propertyIsEnumerable.call({'valueOf': 1}, 'valueOf')) {
      baseKeysIn = function(object) {
        return iteratorToArray(enumerate(object));
      };
    }
    function baseLt(value, other) {
      return value < other;
    }
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];
      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue) ? hasIn(object, path) : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
      };
    }
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      if (!(isArray(source) || isTypedArray(source))) {
        var props = keysIn(source);
      }
      arrayEach(props || source, function(srcValue, key) {
        if (props) {
          key = srcValue;
          srcValue = source[key];
        }
        if (isObject(srcValue)) {
          stack || (stack = new Stack);
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        } else {
          var newValue = customizer ? customizer(object[key], srcValue, (key + ''), object, source, stack) : undefined;
          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      });
    }
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = object[key],
          srcValue = source[key],
          stacked = stack.get(srcValue);
      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, (key + ''), object, source, stack) : undefined;
      var isCommon = newValue === undefined;
      if (isCommon) {
        newValue = srcValue;
        if (isArray(srcValue) || isTypedArray(srcValue)) {
          if (isArray(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          } else {
            isCommon = false;
            newValue = baseClone(srcValue, true);
          }
        } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
            isCommon = false;
            newValue = baseClone(srcValue, true);
          } else {
            newValue = objValue;
          }
        } else {
          isCommon = false;
        }
      }
      stack.set(srcValue, newValue);
      if (isCommon) {
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
      }
      stack['delete'](srcValue);
      assignMergeValue(object, key, newValue);
    }
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));
      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return {
          'criteria': criteria,
          'index': ++index,
          'value': value
        };
      });
      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }
    function basePick(object, props) {
      object = Object(object);
      return arrayReduce(props, function(result, key) {
        if (key in object) {
          result[key] = object[key];
        }
        return result;
      }, {});
    }
    function basePickBy(object, predicate) {
      var index = -1,
          props = getAllKeysIn(object),
          length = props.length,
          result = {};
      while (++index < length) {
        var key = props[index],
            value = object[key];
        if (predicate(value, key)) {
          result[key] = value;
        }
      }
      return result;
    }
    function baseProperty(key) {
      return function(object) {
        return object == null ? undefined : object[key];
      };
    }
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;
      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;
        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;
      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else if (!isKey(index, array)) {
            var path = castPath(index),
                object = parent(array, path);
            if (object != null) {
              delete object[toKey(last(path))];
            }
          } else {
            delete array[toKey(index)];
          }
        }
      }
      return array;
    }
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);
      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);
      return result;
    }
    function baseSet(object, path, value, customizer) {
      path = isKey(path, object) ? [path] : castPath(path);
      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;
      while (nested != null && ++index < length) {
        var key = toKey(path[index]);
        if (isObject(nested)) {
          var newValue = value;
          if (index != lastIndex) {
            var objValue = nested[key];
            newValue = customizer ? customizer(objValue, key, nested) : undefined;
            if (newValue === undefined) {
              newValue = objValue == null ? (isIndex(path[index + 1]) ? [] : {}) : objValue;
            }
          }
          assignValue(nested, key, newValue);
        }
        nested = nested[key];
      }
      return object;
    }
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;
      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }
    function baseSome(collection, predicate) {
      var result;
      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array ? array.length : low;
      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];
          if (computed !== null && !isSymbol(computed) && (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);
      var low = 0,
          high = array ? array.length : 0,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;
      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);
        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;
        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }
    function baseToString(value) {
      if (typeof value == 'string') {
        return value;
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;
      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      } else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      } else {
        seen = iteratee ? [] : result;
      }
      outer: while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;
        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        } else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }
    function baseUnset(object, path) {
      path = isKey(path, object) ? [path] : castPath(path);
      object = parent(object, path);
      var key = toKey(last(path));
      return !(object != null && baseHas(object, key)) || delete object[key];
    }
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;
      while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}
      return isDrop ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length)) : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }
    function baseXor(arrays, iteratee, comparator) {
      var index = -1,
          length = arrays.length;
      while (++index < length) {
        var result = result ? arrayPush(baseDifference(result, arrays[index], iteratee, comparator), baseDifference(arrays[index], result, iteratee, comparator)) : arrays[index];
      }
      return (result && result.length) ? baseUniq(result, iteratee, comparator) : [];
    }
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};
      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }
    function castPath(value) {
      return isArray(value) ? value : stringToPath(value);
    }
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var result = new buffer.constructor(buffer.length);
      buffer.copy(result);
      return result;
    }
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }
    function cloneMap(map, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
      return arrayReduce(array, addMapEntry, new map.constructor);
    }
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }
    function cloneSet(set, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
      return arrayReduce(array, addSetEntry, new set.constructor);
    }
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);
        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);
        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) || (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) || (valIsNull && othIsDefined && othIsReflexive) || (!valIsDefined && othIsReflexive) || !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) || (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) || (othIsNull && valIsDefined && valIsReflexive) || (!othIsDefined && valIsReflexive) || !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;
      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      return object.index - other.index;
    }
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;
      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;
      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }
    function copyArray(source, array) {
      var index = -1,
          length = source.length;
      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }
    function copyObject(source, props, object, customizer) {
      object || (object = {});
      var index = -1,
          length = props.length;
      while (++index < length) {
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : source[key];
        assignValue(object, key, newValue);
      }
      return object;
    }
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};
        return func(collection, setter, getIteratee(iteratee), accumulator);
      };
    }
    function createAssigner(assigner) {
      return rest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;
        customizer = (assigner.length > 3 && typeof customizer == 'function') ? (length--, customizer) : undefined;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);
        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;
        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }
    function createBaseWrapper(func, bitmask, thisArg) {
      var isBind = bitmask & BIND_FLAG,
          Ctor = createCtorWrapper(func);
      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);
        var strSymbols = reHasComplexSymbol.test(string) ? stringToArray(string) : undefined;
        var chr = strSymbols ? strSymbols[0] : string.charAt(0);
        var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);
        return chr[methodName]() + trailing;
      };
    }
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }
    function createCtorWrapper(Ctor) {
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0:
            return new Ctor;
          case 1:
            return new Ctor(args[0]);
          case 2:
            return new Ctor(args[0], args[1]);
          case 3:
            return new Ctor(args[0], args[1], args[2]);
          case 4:
            return new Ctor(args[0], args[1], args[2], args[3]);
          case 5:
            return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6:
            return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7:
            return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);
        return isObject(result) ? result : thisBinding;
      };
    }
    function createCurryWrapper(func, bitmask, arity) {
      var Ctor = createCtorWrapper(func);
      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);
        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder) ? [] : replaceHolders(args, placeholder);
        length -= holders.length;
        if (length < arity) {
          return createRecurryWrapper(func, bitmask, createHybridWrapper, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        predicate = getIteratee(predicate, 3);
        if (!isArrayLike(collection)) {
          var props = keys(collection);
        }
        var index = findIndexFunc(props || collection, function(value, key) {
          if (props) {
            key = value;
            value = iterable[key];
          }
          return predicate(value, key, iterable);
        }, fromIndex);
        return index > -1 ? collection[props ? props[index] : index] : undefined;
      };
    }
    function createFlow(fromRight) {
      return rest(function(funcs) {
        funcs = baseFlatten(funcs, 1);
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;
        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];
          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;
          if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];
          if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;
          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }
    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & ARY_FLAG,
          isBind = bitmask & BIND_FLAG,
          isBindKey = bitmask & BIND_KEY_FLAG,
          isCurried = bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG),
          isFlip = bitmask & FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtorWrapper(func);
      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;
        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurryWrapper(func, bitmask, createHybridWrapper, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;
        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtorWrapper(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }
    function createMathOperation(operator) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return 0;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }
    function createOver(arrayFunc) {
      return rest(function(iteratees) {
        iteratees = (iteratees.length == 1 && isArray(iteratees[0])) ? arrayMap(iteratees[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(iteratees, 1, isFlattenableIteratee), baseUnary(getIteratee()));
        return rest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);
      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return reHasComplexSymbol.test(chars) ? castSlice(stringToArray(result), 0, length).join('') : result.slice(0, length);
    }
    function createPartialWrapper(func, bitmask, thisArg, partials) {
      var isBind = bitmask & BIND_FLAG,
          Ctor = createCtorWrapper(func);
      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        start = toNumber(start);
        start = start === start ? start : 0;
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toNumber(end) || 0;
        }
        step = step === undefined ? (start < end ? 1 : -1) : (toNumber(step) || 0);
        return baseRange(start, end, step, fromRight);
      };
    }
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }
    function createRecurryWrapper(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;
      bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);
      if (!(bitmask & CURRY_BOUND_FLAG)) {
        bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
      }
      var newData = [func, bitmask, thisArg, newPartials, newHolders, newPartialsRight, newHoldersRight, argPos, ary, arity];
      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return result;
    }
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = nativeMin(toInteger(precision), 292);
        if (precision) {
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));
          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }
    var createSet = !(Set && (1 / setToArray(new Set([, -0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }
    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;
      if (bitmask & PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;
        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);
      var newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];
      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] == null ? (isBindKey ? 0 : func.length) : nativeMax(newData[9] - length, 0);
      if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {
        bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == BIND_FLAG) {
        var result = createBaseWrapper(func, bitmask, thisArg);
      } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {
        result = createCurryWrapper(func, bitmask, arity);
      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {
        result = createPartialWrapper(func, bitmask, thisArg, partials);
      } else {
        result = createHybridWrapper.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setter(result, newData);
    }
    function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
          arrLength = array.length,
          othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var stacked = stack.get(array);
      if (stacked) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;
      stack.set(array, other);
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
            if (!seen.has(othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
              return seen.add(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      return result;
    }
    function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) || (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
          return +object == +other;
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case numberTag:
          return (object != +object) ? other != +other : object == +other;
        case regexpTag:
        case stringTag:
          return object == (other + '');
        case mapTag:
          var convert = mapToArray;
        case setTag:
          var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
          convert || (convert = setToArray);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= UNORDERED_COMPARE_FLAG;
          stack.set(object, other);
          return equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
          objProps = keys(object),
          objLength = objProps.length,
          othProps = keys(other),
          othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : baseHas(other, key))) {
          return false;
        }
      }
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }
        if (!(compared === undefined ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack)) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;
        if (objCtor != othCtor && ('constructor' in object && 'constructor' in other) && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      return result;
    }
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;
      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }
    var getLength = baseProperty('length');
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
    }
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;
      while (length--) {
        var key = result[length],
            value = object[key];
        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }
    function getPrototype(value) {
      return nativeGetPrototype(Object(value));
    }
    function getSymbols(object) {
      return getOwnPropertySymbols(Object(object));
    }
    if (!getOwnPropertySymbols) {
      getSymbols = stubArray;
    }
    var getSymbolsIn = !getOwnPropertySymbols ? getSymbols : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };
    function getTag(value) {
      return objectToString.call(value);
    }
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) || (Map && getTag(new Map) != mapTag) || (Promise && getTag(Promise.resolve()) != promiseTag) || (Set && getTag(new Set) != setTag) || (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = objectToString.call(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : undefined;
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;
      while (++index < length) {
        var data = transforms[index],
            size = data.size;
        switch (data.type) {
          case 'drop':
            start += size;
            break;
          case 'dropRight':
            end -= size;
            break;
          case 'take':
            end = nativeMin(end, start + size);
            break;
          case 'takeRight':
            start = nativeMax(start, end - size);
            break;
        }
      }
      return {
        'start': start,
        'end': end
      };
    }
    function hasPath(object, path, hasFunc) {
      path = isKey(path, object) ? [path] : castPath(path);
      var result,
          index = -1,
          length = path.length;
      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result) {
        return result;
      }
      var length = object ? object.length : 0;
      return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isString(object) || isArguments(object));
    }
    function initCloneArray(array) {
      var length = array.length,
          result = array.constructor(length);
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object)) ? baseCreate(getPrototype(object)) : {};
    }
    function initCloneByTag(object, tag, cloneFunc, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);
        case boolTag:
        case dateTag:
          return new Ctor(+object);
        case dataViewTag:
          return cloneDataView(object, isDeep);
        case float32Tag:
        case float64Tag:
        case int8Tag:
        case int16Tag:
        case int32Tag:
        case uint8Tag:
        case uint8ClampedTag:
        case uint16Tag:
        case uint32Tag:
          return cloneTypedArray(object, isDeep);
        case mapTag:
          return cloneMap(object, isDeep, cloneFunc);
        case numberTag:
        case stringTag:
          return new Ctor(object);
        case regexpTag:
          return cloneRegExp(object);
        case setTag:
          return cloneSet(object, isDeep, cloneFunc);
        case symbolTag:
          return cloneSymbol(object);
      }
    }
    function indexKeys(object) {
      var length = object ? object.length : undefined;
      if (isLength(length) && (isArray(object) || isString(object) || isArguments(object))) {
        return baseTimes(length, String);
      }
      return null;
    }
    function isFlattenable(value) {
      return isArray(value) || isArguments(value);
    }
    function isFlattenableIteratee(value) {
      return isArray(value) && !(value.length == 2 && !isFunction(value[0]));
    }
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == 'number' || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number' ? (isArrayLike(object) && isIndex(index, object.length)) : (type == 'string' && index in object)) {
        return eq(object[index], value);
      }
      return false;
    }
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || (object != null && value in Object(object));
    }
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean') ? (value !== '__proto__') : (value === null);
    }
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];
      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }
    var isMaskable = coreJsData ? isFunction : stubFalse;
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;
      return value === proto;
    }
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue && (srcValue !== undefined || (key in Object(object)));
      };
    }
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (BIND_FLAG | BIND_KEY_FLAG | ARY_FLAG);
      var isCombo = ((srcBitmask == ARY_FLAG) && (bitmask == CURRY_FLAG)) || ((srcBitmask == ARY_FLAG) && (bitmask == REARG_FLAG) && (data[7].length <= source[8])) || ((srcBitmask == (ARY_FLAG | REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == CURRY_FLAG));
      if (!(isCommon || isCombo)) {
        return data;
      }
      if (srcBitmask & BIND_FLAG) {
        data[2] = source[2];
        newBitmask |= bitmask & BIND_FLAG ? 0 : CURRY_BOUND_FLAG;
      }
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      value = source[7];
      if (value) {
        data[7] = value;
      }
      if (srcBitmask & ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      if (data[9] == null) {
        data[9] = source[9];
      }
      data[0] = source[0];
      data[1] = newBitmask;
      return data;
    }
    function mergeDefaults(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        baseMerge(objValue, srcValue, undefined, mergeDefaults, stack.set(srcValue, objValue));
      }
      return objValue;
    }
    function parent(object, path) {
      return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
    }
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);
      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }
    var setData = (function() {
      var count = 0,
          lastCalled = 0;
      return function(key, value) {
        var stamp = now(),
            remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return key;
          }
        } else {
          count = 0;
        }
        return baseSetData(key, value);
      };
    }());
    var stringToPath = memoize(function(string) {
      var result = [];
      toString(string).replace(rePropName, function(match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__ = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array ? array.length : 0;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));
      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }
    function compact(array) {
      var index = -1,
          length = array ? array.length : 0,
          resIndex = 0,
          result = [];
      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    function concat() {
      var length = arguments.length,
          args = Array(length ? length - 1 : 0),
          array = arguments[0],
          index = length;
      while (index--) {
        args[index - 1] = arguments[index];
      }
      return length ? arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1)) : [];
    }
    var difference = rest(function(array, values) {
      return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
    });
    var differenceBy = rest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee)) : [];
    });
    var differenceWith = rest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator) : [];
    });
    function drop(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }
    function dropRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }
    function dropRightWhile(array, predicate) {
      return (array && array.length) ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
    }
    function dropWhile(array, predicate) {
      return (array && array.length) ? baseWhile(array, getIteratee(predicate, 3), true) : [];
    }
    function fill(array, value, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }
    function findIndex(array, predicate, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }
    function findLastIndex(array, predicate, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }
    function flatten(array) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(array, 1) : [];
    }
    function flattenDeep(array) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(array, INFINITY) : [];
    }
    function flattenDepth(array, depth) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }
    function fromPairs(pairs) {
      var index = -1,
          length = pairs ? pairs.length : 0,
          result = {};
      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }
    function indexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }
    function initial(array) {
      return dropRight(array, 1);
    }
    var intersection = rest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0]) ? baseIntersection(mapped) : [];
    });
    var intersectionBy = rest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);
      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0]) ? baseIntersection(mapped, getIteratee(iteratee)) : [];
    });
    var intersectionWith = rest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);
      if (comparator === last(mapped)) {
        comparator = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0]) ? baseIntersection(mapped, undefined, comparator) : [];
    });
    function join(array, separator) {
      return array ? nativeJoin.call(array, separator) : '';
    }
    function last(array) {
      var length = array ? array.length : 0;
      return length ? array[length - 1] : undefined;
    }
    function lastIndexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = (index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1)) + 1;
      }
      if (value !== value) {
        return indexOfNaN(array, index - 1, true);
      }
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }
    var pull = rest(pullAll);
    function pullAll(array, values) {
      return (array && array.length && values && values.length) ? basePullAll(array, values) : array;
    }
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length) ? basePullAll(array, values, getIteratee(iteratee)) : array;
    }
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length) ? basePullAll(array, values, undefined, comparator) : array;
    }
    var pullAt = rest(function(array, indexes) {
      indexes = baseFlatten(indexes, 1);
      var length = array ? array.length : 0,
          result = baseAt(array, indexes);
      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));
      return result;
    });
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;
      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }
    function reverse(array) {
      return array ? nativeReverse.call(array) : array;
    }
    function slice(array, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      } else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee));
    }
    function sortedIndexOf(array, value) {
      var length = array ? array.length : 0;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee), true);
    }
    function sortedLastIndexOf(array, value) {
      var length = array ? array.length : 0;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }
    function sortedUniq(array) {
      return (array && array.length) ? baseSortedUniq(array) : [];
    }
    function sortedUniqBy(array, iteratee) {
      return (array && array.length) ? baseSortedUniq(array, getIteratee(iteratee)) : [];
    }
    function tail(array) {
      return drop(array, 1);
    }
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }
    function takeRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }
    function takeRightWhile(array, predicate) {
      return (array && array.length) ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
    }
    function takeWhile(array, predicate) {
      return (array && array.length) ? baseWhile(array, getIteratee(predicate, 3)) : [];
    }
    var union = rest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });
    var unionBy = rest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee));
    });
    var unionWith = rest(function(arrays) {
      var comparator = last(arrays);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee)) : [];
    }
    function uniqWith(array, comparator) {
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }
    var without = rest(function(array, values) {
      return isArrayLikeObject(array) ? baseDifference(array, values) : [];
    });
    var xor = rest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });
    var xorBy = rest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee));
    });
    var xorWith = rest(function(arrays) {
      var comparator = last(arrays);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });
    var zip = rest(unzip);
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }
    var zipWith = rest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;
      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }
    function thru(value, interceptor) {
      return interceptor(value);
    }
    var wrapperAt = rest(function(paths) {
      paths = baseFlatten(paths, 1);
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) {
            return baseAt(object, paths);
          };
      if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });
    function wrapperChain() {
      return chain(this);
    }
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];
      return {
        'done': done,
        'value': value
      };
    }
    function wrapperToIterator() {
      return this;
    }
    function wrapperPlant(value) {
      var result,
          parent = this;
      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }
    var countBy = createAggregator(function(result, value, key) {
      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
    });
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }
    var find = createFind(findIndex);
    var findLast = createFind(findLastIndex);
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        result[key] = [value];
      }
    });
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;
      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection) ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1) : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }
    var invokeMap = rest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          isProp = isKey(path),
          result = isArrayLike(collection) ? Array(collection.length) : [];
      baseEach(collection, function(value) {
        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
        result[++index] = func ? apply(func, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });
    var keyBy = createAggregator(function(result, value, key) {
      result[key] = value;
    });
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() {
      return [[], []];
    });
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;
      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;
      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      predicate = getIteratee(predicate, 3);
      return func(collection, function(value, index, collection) {
        return !predicate(value, index, collection);
      });
    }
    function sample(collection) {
      var array = isArrayLike(collection) ? collection : values(collection),
          length = array.length;
      return length > 0 ? array[baseRandom(0, length - 1)] : undefined;
    }
    function sampleSize(collection, n, guard) {
      var index = -1,
          result = toArray(collection),
          length = result.length,
          lastIndex = length - 1;
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = baseClamp(toInteger(n), 0, length);
      }
      while (++index < n) {
        var rand = baseRandom(index, lastIndex),
            value = result[rand];
        result[rand] = result[index];
        result[index] = value;
      }
      result.length = n;
      return result;
    }
    function shuffle(collection) {
      return sampleSize(collection, MAX_ARRAY_LENGTH);
    }
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        var result = collection.length;
        return (result && isString(collection)) ? stringSize(collection) : result;
      }
      if (isObjectLike(collection)) {
        var tag = getTag(collection);
        if (tag == mapTag || tag == setTag) {
          return collection.size;
        }
      }
      return keys(collection).length;
    }
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }
    var sortBy = rest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      iteratees = (iteratees.length == 1 && isArray(iteratees[0])) ? iteratees[0] : baseFlatten(iteratees, 1, isFlattenableIteratee);
      return baseOrderBy(collection, iteratees, []);
    });
    function now() {
      return Date.now();
    }
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }
    var bind = rest(function(func, thisArg, partials) {
      var bitmask = BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(func, bitmask, thisArg, partials, holders);
    });
    var bindKey = rest(function(object, key, partials) {
      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(key, bitmask, object, partials, holders);
    });
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrapper(func, CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrapper(func, CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;
        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time) {
        lastInvokeTime = time;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            result = wait - timeSinceLastCall;
        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
      }
      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) || (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }
      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        timerId = setTimeout(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        timerId = undefined;
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }
      function cancel() {
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }
      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }
      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }
    var defer = rest(function(func, args) {
      return baseDelay(func, 1, args);
    });
    var delay = rest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });
    function flip(func) {
      return createWrapper(func, FLIP_FLAG);
    }
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;
        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }
    memoize.Cache = MapCache;
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        return !predicate.apply(this, arguments);
      };
    }
    function once(func) {
      return before(2, func);
    }
    var overArgs = rest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0])) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1, isFlattenableIteratee), baseUnary(getIteratee()));
      var funcsLength = transforms.length;
      return rest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);
        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });
    var partial = rest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrapper(func, PARTIAL_FLAG, undefined, partials, holders);
    });
    var partialRight = rest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrapper(func, PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });
    var rearg = rest(function(func, indexes) {
      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes, 1));
    });
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = nativeMax(start === undefined ? (func.length - 1) : toInteger(start), 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);
        while (++index < length) {
          array[index] = args[start + index];
        }
        switch (start) {
          case 0:
            return func.call(this, array);
          case 1:
            return func.call(this, args[0], array);
          case 2:
            return func.call(this, args[0], args[1], array);
        }
        var otherArgs = Array(start + 1);
        index = -1;
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = array;
        return apply(func, this, otherArgs);
      };
    }
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? 0 : nativeMax(toInteger(start), 0);
      return rest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);
        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }
    function unary(func) {
      return ary(func, 1);
    }
    function wrap(value, wrapper) {
      wrapper = wrapper == null ? identity : wrapper;
      return partial(wrapper, value);
    }
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }
    function clone(value) {
      return baseClone(value, false, true);
    }
    function cloneWith(value, customizer) {
      return baseClone(value, false, true, customizer);
    }
    function cloneDeep(value) {
      return baseClone(value, true, true);
    }
    function cloneDeepWith(value, customizer) {
      return baseClone(value, true, true, customizer);
    }
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }
    var gt = createRelationalOperation(baseGt);
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });
    function isArguments(value) {
      return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
    }
    var isArray = Array.isArray;
    function isArrayBuffer(value) {
      return isObjectLike(value) && objectToString.call(value) == arrayBufferTag;
    }
    function isArrayLike(value) {
      return value != null && isLength(getLength(value)) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    function isBoolean(value) {
      return value === true || value === false || (isObjectLike(value) && objectToString.call(value) == boolTag);
    }
    var isBuffer = !Buffer ? stubFalse : function(value) {
      return value instanceof Buffer;
    };
    function isDate(value) {
      return isObjectLike(value) && objectToString.call(value) == dateTag;
    }
    function isElement(value) {
      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
    }
    function isEmpty(value) {
      if (isArrayLike(value) && (isArray(value) || isString(value) || isFunction(value.splice) || isArguments(value) || isBuffer(value))) {
        return !value.length;
      }
      if (isObjectLike(value)) {
        var tag = getTag(value);
        if (tag == mapTag || tag == setTag) {
          return !value.size;
        }
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return !(nonEnumShadows && keys(value).length);
    }
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, customizer) : !!result;
    }
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      return (objectToString.call(value) == errorTag) || (typeof value.message == 'string' && typeof value.name == 'string');
    }
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }
    function isFunction(value) {
      var tag = isObject(value) ? objectToString.call(value) : '';
      return tag == funcTag || tag == genTag;
    }
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }
    function isLength(value) {
      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == 'object' || type == 'function');
    }
    function isObjectLike(value) {
      return !!value && typeof value == 'object';
    }
    function isMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }
    function isNaN(value) {
      return isNumber(value) && value != +value;
    }
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error('This method is not supported with `core-js`. Try https://github.com/es-shims.');
      }
      return baseIsNative(value);
    }
    function isNull(value) {
      return value === null;
    }
    function isNil(value) {
      return value == null;
    }
    function isNumber(value) {
      return typeof value == 'number' || (isObjectLike(value) && objectToString.call(value) == numberTag);
    }
    function isPlainObject(value) {
      if (!isObjectLike(value) || objectToString.call(value) != objectTag || isHostObject(value)) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return (typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
    }
    function isRegExp(value) {
      return isObject(value) && objectToString.call(value) == regexpTag;
    }
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }
    function isSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }
    function isString(value) {
      return typeof value == 'string' || (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);
    }
    function isSymbol(value) {
      return typeof value == 'symbol' || (isObjectLike(value) && objectToString.call(value) == symbolTag);
    }
    function isTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
    }
    function isUndefined(value) {
      return value === undefined;
    }
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }
    function isWeakSet(value) {
      return isObjectLike(value) && objectToString.call(value) == weakSetTag;
    }
    var lt = createRelationalOperation(baseLt);
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (iteratorSymbol && value[iteratorSymbol]) {
        return iteratorToArray(value[iteratorSymbol]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);
      return func(value);
    }
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;
      return result === result ? (remainder ? result - remainder : result) : 0;
    }
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = isFunction(value.valueOf) ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value)) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : (reIsBadHex.test(value) ? NAN : +value);
    }
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }
    function toSafeInteger(value) {
      return baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
    }
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }
    var assign = createAssigner(function(object, source) {
      if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });
    var assignIn = createAssigner(function(object, source) {
      if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keysIn(source), object);
        return;
      }
      for (var key in source) {
        assignValue(object, key, source[key]);
      }
    });
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });
    var at = rest(function(object, paths) {
      return baseAt(object, baseFlatten(paths, 1));
    });
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties ? baseAssign(result, properties) : result;
    }
    var defaults = rest(function(args) {
      args.push(undefined, assignInDefaults);
      return apply(assignInWith, undefined, args);
    });
    var defaultsDeep = rest(function(args) {
      args.push(undefined, mergeDefaults);
      return apply(mergeWith, undefined, args);
    });
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }
    function forIn(object, iteratee) {
      return object == null ? object : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }
    function forInRight(object, iteratee) {
      return object == null ? object : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }
    var invert = createInverter(function(result, value, key) {
      result[value] = key;
    }, constant(identity));
    var invertBy = createInverter(function(result, value, key) {
      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);
    var invoke = rest(baseInvoke);
    function keys(object) {
      var isProto = isPrototype(object);
      if (!(isProto || isArrayLike(object))) {
        return baseKeys(object);
      }
      var indexes = indexKeys(object),
          skipIndexes = !!indexes,
          result = indexes || [],
          length = result.length;
      for (var key in object) {
        if (baseHas(object, key) && !(skipIndexes && (key == 'length' || isIndex(key, length))) && !(isProto && key == 'constructor')) {
          result.push(key);
        }
      }
      return result;
    }
    function keysIn(object) {
      var index = -1,
          isProto = isPrototype(object),
          props = baseKeysIn(object),
          propsLength = props.length,
          indexes = indexKeys(object),
          skipIndexes = !!indexes,
          result = indexes || [],
          length = result.length;
      while (++index < propsLength) {
        var key = props[index];
        if (!(skipIndexes && (key == 'length' || isIndex(key, length))) && !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);
      baseForOwn(object, function(value, key, object) {
        result[iteratee(value, key, object)] = value;
      });
      return result;
    }
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);
      baseForOwn(object, function(value, key, object) {
        result[key] = iteratee(value, key, object);
      });
      return result;
    }
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });
    var omit = rest(function(object, props) {
      if (object == null) {
        return {};
      }
      props = arrayMap(baseFlatten(props, 1), toKey);
      return basePick(object, baseDifference(getAllKeysIn(object), props));
    });
    function omitBy(object, predicate) {
      predicate = getIteratee(predicate);
      return basePickBy(object, function(value, key) {
        return !predicate(value, key);
      });
    }
    var pick = rest(function(object, props) {
      return object == null ? {} : basePick(object, arrayMap(baseFlatten(props, 1), toKey));
    });
    function pickBy(object, predicate) {
      return object == null ? {} : basePickBy(object, getIteratee(predicate));
    }
    function result(object, path, defaultValue) {
      path = isKey(path, object) ? [path] : castPath(path);
      var index = -1,
          length = path.length;
      if (!length) {
        object = undefined;
        length = 1;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }
    var toPairs = createToPairs(keys);
    var toPairsIn = createToPairs(keysIn);
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object) || isTypedArray(object);
      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        if (isArr || isObject(object)) {
          var Ctor = object.constructor;
          if (isArr) {
            accumulator = isArray(object) ? new Ctor : [];
          } else {
            accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
          }
        } else {
          accumulator = {};
        }
      }
      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }
    function values(object) {
      return object ? baseValues(object, keys(object)) : [];
    }
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }
    function inRange(number, start, end) {
      start = toNumber(start) || 0;
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toNumber(end) || 0;
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        } else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      } else {
        lower = toNumber(lower) || 0;
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toNumber(upper) || 0;
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
    }
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);
      var length = string.length;
      position = position === undefined ? length : baseClamp(toInteger(position), 0, length);
      position -= target.length;
      return position >= 0 && string.indexOf(target, position) == position;
    }
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string)) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
    }
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string)) ? string.replace(reRegExpChar, '\\$&') : string;
    }
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });
    var lowerFirst = createCaseFirst('toLowerCase');
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);
      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars));
    }
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);
      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length) ? (string + createPadding(length - strLength, chars)) : string;
    }
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);
      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length) ? (createPadding(length - strLength, chars) + string) : string;
    }
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      string = toString(string).replace(reTrim, '');
      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
    }
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }
    function replace() {
      var args = arguments,
          string = toString(args[0]);
      return args.length < 3 ? string : nativeReplace.call(string, args[1], args[2]);
    }
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (typeof separator == 'string' || (separator != null && !isRegExp(separator)))) {
        separator = baseToString(separator);
        if (separator == '' && reHasComplexSymbol.test(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return nativeSplit.call(string, separator, limit);
    }
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });
    function startsWith(string, target, position) {
      string = toString(string);
      position = baseClamp(toInteger(position), 0, string.length);
      return string.lastIndexOf(baseToString(target), position) == position;
    }
    function template(string, options, guard) {
      var settings = lodash.templateSettings;
      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, assignInDefaults);
      var imports = assignInWith({}, options.imports, settings.imports, assignInDefaults),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);
      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";
      var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpolate.source + '|' + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g');
      var sourceURL = '//# sourceURL=' + ('sourceURL' in options ? options.sourceURL : ('lodash.templateSources[' + (++templateCounter) + ']')) + '\n';
      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;
        return match;
      });
      source += "';\n";
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;');
      source = 'function(' + (variable || 'obj') + ') {\n' + (variable ? '' : 'obj || (obj = {});\n') + "var __t, __p = ''" + (isEscaping ? ', __e = _.escape' : '') + (isEvaluating ? ', __j = Array.prototype.join;\n' + "function print() { __p += __j.call(arguments, '') }\n" : ';\n') + source + 'return __p\n}';
      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
      });
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }
    function toLower(value) {
      return toString(value).toLowerCase();
    }
    function toUpper(value) {
      return toString(value).toUpperCase();
    }
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;
      return castSlice(strSymbols, start, end).join('');
    }
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
      return castSlice(strSymbols, 0, end).join('');
    }
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));
      return castSlice(strSymbols, start).join('');
    }
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;
      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);
      var strLength = string.length;
      if (reHasComplexSymbol.test(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols ? castSlice(strSymbols, 0, end).join('') : string.slice(0, end);
      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;
          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string)) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
    }
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });
    var upperFirst = createCaseFirst('toUpperCase');
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;
      if (pattern === undefined) {
        pattern = reHasComplexWord.test(string) ? reComplexWord : reBasicWord;
      }
      return string.match(pattern) || [];
    }
    var attempt = rest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });
    var bindAll = rest(function(object, methodNames) {
      arrayEach(baseFlatten(methodNames, 1), function(key) {
        key = toKey(key);
        object[key] = bind(object[key], object);
      });
      return object;
    });
    function cond(pairs) {
      var length = pairs ? pairs.length : 0,
          toIteratee = getIteratee();
      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });
      return rest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }
    function conforms(source) {
      return baseConforms(baseClone(source, true));
    }
    function constant(value) {
      return function() {
        return value;
      };
    }
    var flow = createFlow();
    var flowRight = createFlow(true);
    function identity(value) {
      return value;
    }
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, true));
    }
    function matches(source) {
      return baseMatches(baseClone(source, true));
    }
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, true));
    }
    var method = rest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });
    var methodOf = rest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);
      if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);
      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);
              actions.push({
                'func': func,
                'args': arguments,
                'thisArg': object
              });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });
      return object;
    }
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }
    function noop() {}
    function nthArg(n) {
      n = toInteger(n);
      return rest(function(args) {
        return baseNth(args, n);
      });
    }
    var over = createOver(arrayMap);
    var overEvery = createOver(arrayEvery);
    var overSome = createOver(arraySome);
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }
    var range = createRange();
    var rangeRight = createRange(true);
    function stubArray() {
      return [];
    }
    function stubFalse() {
      return false;
    }
    function stubObject() {
      return {};
    }
    function stubString() {
      return '';
    }
    function stubTrue() {
      return true;
    }
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);
      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;
      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(value));
    }
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    });
    var ceil = createRound('ceil');
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    });
    var floor = createRound('floor');
    function max(array) {
      return (array && array.length) ? baseExtremum(array, identity, baseGt) : undefined;
    }
    function maxBy(array, iteratee) {
      return (array && array.length) ? baseExtremum(array, getIteratee(iteratee), baseGt) : undefined;
    }
    function mean(array) {
      return baseMean(array, identity);
    }
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee));
    }
    function min(array) {
      return (array && array.length) ? baseExtremum(array, identity, baseLt) : undefined;
    }
    function minBy(array, iteratee) {
      return (array && array.length) ? baseExtremum(array, getIteratee(iteratee), baseLt) : undefined;
    }
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    });
    var round = createRound('round');
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    });
    function sum(array) {
      return (array && array.length) ? baseSum(array, identity) : 0;
    }
    function sumBy(array, iteratee) {
      return (array && array.length) ? baseSum(array, getIteratee(iteratee)) : 0;
    }
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;
    mixin(lodash, lodash);
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.deburr = deburr;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;
    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), {'chain': false});
    lodash.VERSION = VERSION;
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        var filtered = this.__filtered__;
        if (filtered && !index) {
          return new LazyWrapper(this);
        }
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);
        var result = this.clone();
        if (filtered) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };
      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');
      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');
      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });
    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };
    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };
    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };
    LazyWrapper.prototype.invokeMap = rest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });
    LazyWrapper.prototype.reject = function(predicate) {
      predicate = getIteratee(predicate, 3);
      return this.filter(function(value) {
        return !predicate(value);
      });
    };
    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);
      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };
    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };
    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);
      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);
        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };
        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;
        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({
            'func': thru,
            'args': [interceptor],
            'thisArg': undefined
          });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);
      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = (lodashFunc.name + ''),
            names = realNames[key] || (realNames[key] = []);
        names.push({
          'name': methodName,
          'func': lodashFunc
        });
      }
    });
    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
    if (iteratorSymbol) {
      lodash.prototype[iteratorSymbol] = wrapperToIterator;
    }
    return lodash;
  }
  var _ = runInContext();
  (freeSelf || {})._ = _;
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    define("npm:lodash@4.13.1/lodash.js", [], function() {
      return _;
    });
  } else if (freeModule) {
    (freeModule.exports = _)._ = _;
    freeExports._ = _;
  } else {
    root._ = _;
  }
}.call(this));

})();
'use strcit';

System.register('catundercover/pipes/split-list.pipe.js', ['npm:systemjs-plugin-babel@0.0.12/babel-helpers/classCallCheck.js', 'npm:systemjs-plugin-babel@0.0.12/babel-helpers/createClass.js', '@angular/core', 'lodash'], function (_export, _context) {
    "use strict";

    var _classCallCheck, _createClass, Pipe, PipeTransform, _, SplitListPipe;

    return {
        setters: [function (_npmSystemjsPluginBabel0012BabelHelpersClassCallCheckJs) {
            _classCallCheck = _npmSystemjsPluginBabel0012BabelHelpersClassCallCheckJs.default;
        }, function (_npmSystemjsPluginBabel0012BabelHelpersCreateClassJs) {
            _createClass = _npmSystemjsPluginBabel0012BabelHelpersCreateClassJs.default;
        }, function (_angularCore) {
            Pipe = _angularCore.Pipe;
            PipeTransform = _angularCore.PipeTransform;
        }, function (_lodash) {
            _ = _lodash.default;
        }],
        execute: function () {
            SplitListPipe = function () {
                function SplitListPipe() {
                    _classCallCheck(this, SplitListPipe);
                }

                _createClass(SplitListPipe, [{
                    key: 'transform',
                    value: function transform(iList, iPartQty, iSelectedPart) {
                        if (!_.isArray(iList)) {
                            throw new Error('Expecting an argument of type array, got ' + typeof iList);
                        }

                        var totalCount = iList.length;
                        var partQty = _.isNumber(iPartQty) && iPartQty > 0 && iPartQty < totalCount ? iPartQty : 1;
                        var partSize = totalCount / partQty;
                        var selectedPart = _.isNumber(iSelectedPart) && iSelectedPart > 0 && iSelectedPart <= partQty ? iSelectedPart : 1;
                        var upperLimit = partSize * selectedPart;
                        var lowerLimit = upperLimit - partSize;
                        var result = [];

                        _.forEach(iList, function (item, idx) {
                            if (lowerLimit <= idx && upperLimit > idx) {
                                result.push(item);
                            }
                        });

                        return result;
                    }
                }], [{
                    key: 'annotations',
                    get: function get() {
                        return [new Pipe({
                            name: 'splitList'
                        })];
                    }
                }]);

                return SplitListPipe;
            }();

            _export('default', SplitListPipe);
        }
    };
});
System.register("catundercover/components/navbar/navbar.component.html", [], function (_export, _context) {
  "use strict";

  return {
    setters: [],
    execute: function () {
      _export("default", "<span id=\"sticky-logo\">\n    <a md-button href=\"/\">{{'Cat Undercover' | uppercase}}</a>\n</span>\n<md-toolbar [color]=\"primary\" class=\"navbar\">\n    <div class=\"navbar__left\">\n        <span class=\"navbar__item\" *ngFor=\"let menuItem of menuItems | splitList:2:1\">\n            <a md-button [routerLink]=\"menuItem.routerLink\" routerLinkActive=\"active\">{{menuItem.title | uppercase}}</a>\n        </span>\n    </div>\n\n    <div class=\"navbar__center\">\n        <a href=\"/\">\n            <img src=\"/assets/images/logo.png\" class=\"logo\"/>\n        </a>\n    </div>\n\n    <div class=\"navbar__right\">\n        <span class=\"navbar__item\" *ngFor=\"let menuItem of menuItems | splitList:2:2\">\n        <a href=\"\" md-button [routerLink]=\"menuItem.routerLink\" routerLinkActive=\"active\">{{menuItem.title | uppercase}}</a>\n    </span>\n    </div>\n</md-toolbar>");
    }
  };
});
'use strict';

System.register('catundercover/components/navbar/navbar.component.js', ['npm:systemjs-plugin-babel@0.0.12/babel-helpers/classCallCheck.js', 'npm:systemjs-plugin-babel@0.0.12/babel-helpers/createClass.js', '@angular/core', '@angular/router', '@angular2-material/toolbar', '@angular2-material/button', './../../pipes/split-list.pipe', './navbar.component.html', './navbar.component.less'], function (_export, _context) {
    "use strict";

    var _classCallCheck, _createClass, Component, ViewEncapsulation, ElementRef, ROUTER_DIRECTIVES, RouterLinkActive, MD_TOOLBAR_DIRECTIVES, MD_BUTTON_DIRECTIVES, SplitListPipe, componentTemplate, componentStyles, NavbarComponent;

    return {
        setters: [function (_npmSystemjsPluginBabel0012BabelHelpersClassCallCheckJs) {
            _classCallCheck = _npmSystemjsPluginBabel0012BabelHelpersClassCallCheckJs.default;
        }, function (_npmSystemjsPluginBabel0012BabelHelpersCreateClassJs) {
            _createClass = _npmSystemjsPluginBabel0012BabelHelpersCreateClassJs.default;
        }, function (_angularCore) {
            Component = _angularCore.Component;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
            ElementRef = _angularCore.ElementRef;
        }, function (_angularRouter) {
            ROUTER_DIRECTIVES = _angularRouter.ROUTER_DIRECTIVES;
            RouterLinkActive = _angularRouter.RouterLinkActive;
        }, function (_angular2MaterialToolbar) {
            MD_TOOLBAR_DIRECTIVES = _angular2MaterialToolbar.MD_TOOLBAR_DIRECTIVES;
        }, function (_angular2MaterialButton) {
            MD_BUTTON_DIRECTIVES = _angular2MaterialButton.MD_BUTTON_DIRECTIVES;
        }, function (_pipesSplitListPipe) {
            SplitListPipe = _pipesSplitListPipe.default;
        }, function (_navbarComponentHtml) {
            componentTemplate = _navbarComponentHtml.default;
        }, function (_navbarComponentLess) {
            componentStyles = _navbarComponentLess.default;
        }],
        execute: function () {
            NavbarComponent = function () {
                _createClass(NavbarComponent, null, [{
                    key: 'annotations',
                    get: function get() {
                        return [new Component({
                            selector: 'navbar',
                            directives: [MD_TOOLBAR_DIRECTIVES, MD_BUTTON_DIRECTIVES, ROUTER_DIRECTIVES, RouterLinkActive],
                            pipes: [SplitListPipe],
                            template: componentTemplate,
                            styles: [componentStyles],
                            host: {
                                '(window:scroll)': 'onScroll()'
                            }
                        })];
                    }
                }, {
                    key: 'parameters',
                    get: function get() {
                        return [[ElementRef]];
                    }
                }]);

                function NavbarComponent(element) {
                    _classCallCheck(this, NavbarComponent);

                    this.menuItems = [{
                        title: 'Work',
                        routerLink: 'work'
                    }, {
                        title: 'Moodboard',
                        routerLink: 'moodboard'
                    }, {
                        title: 'About',
                        routerLink: 'about'
                    }, {
                        title: 'Thoughts',
                        routerLink: 'thoughts'
                    }];
                    this.element = element;
                }

                _createClass(NavbarComponent, [{
                    key: 'ngOnInit',
                    value: function ngOnInit() {
                        this.navbarElement = this.element.nativeElement.querySelector('.navbar');
                        this.logoElement = this.navbarElement.querySelector('.logo');
                        this.stickyLogoElement = document.querySelector('#sticky-logo a');
                        this.elementInitClientRect = this.navbarElement.getBoundingClientRect();
                        this.minElementHeight = parseFloat(window.getComputedStyle(this.navbarElement).minHeight);
                    }
                }, {
                    key: 'onScroll',
                    value: function onScroll() {
                        this.updateStickyState();
                    }
                }, {
                    key: 'updateStickyState',
                    value: function updateStickyState() {
                        var scrollTop = this.getCurrentScroll();
                        var height = this.elementInitClientRect.height - scrollTop;
                        if (height < this.minElementHeight) {
                            height = this.minElementHeight;
                        }

                        this.navbarElement.style.height = height + 'px';
                        this.stickyLogoElement.style.height = height + 'px';
                        this.stickyLogoElement.style.lineHeight = height + 'px';

                        var ratio = parseInt(100 * ((height - this.minElementHeight) / (this.elementInitClientRect.height - this.minElementHeight)));

                        this.logoElement.style.opacity = ratio / 100;
                        if (!ratio) {
                            this.logoElement.style.display = 'none';
                            this.stickyLogoElement.style.display = 'block';
                        } else {
                            this.logoElement.style.display = 'flex';
                            this.stickyLogoElement.style.display = 'none';
                        }
                    }
                }, {
                    key: 'getCurrentScroll',
                    value: function getCurrentScroll() {
                        return window.pageYOffset || document.documentElement.scrollTop || document.scrollingElement.scrollTop;
                    }
                }]);

                return NavbarComponent;
            }();

            _export('default', NavbarComponent);
        }
    };
});
System.register("npm:systemjs-plugin-babel@0.0.12/babel-helpers/classCallCheck.js", [], function (_export, _context) {
  "use strict";

  return {
    setters: [],
    execute: function () {
      _export("default", function (instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      });
    }
  };
});
System.registerDynamic("npm:systemjs-plugin-babel@0.0.12.json", [], false, function() {
  return {
    "main": "plugin-babel.js",
    "map": {
      "systemjs-babel-build": {
        "browser": "./systemjs-babel-browser.js",
        "default": "./systemjs-babel-browser.js"
      }
    },
    "meta": {
      "./plugin-babel.js": {
        "format": "cjs"
      }
    }
  };
});

System.register("npm:systemjs-plugin-babel@0.0.12/babel-helpers/createClass.js", [], function (_export, _context) {
  "use strict";

  return {
    setters: [],
    execute: function () {
      _export("default", function () {
        function defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        return function (Constructor, protoProps, staticProps) {
          if (protoProps) defineProperties(Constructor.prototype, protoProps);
          if (staticProps) defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }());
    }
  };
});
System.registerDynamic('npm:@angular/router@3.0.0-rc.1/src/directives/router_link.js', ['@angular/common', '@angular/core', '../router', '../router_state'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var common_1 = $__require('@angular/common');
    var core_1 = $__require('@angular/core');
    var router_1 = $__require('../router');
    var router_state_1 = $__require('../router_state');
    var RouterLink = function () {
        function RouterLink(router, route, locationStrategy) {
            this.router = router;
            this.route = route;
            this.locationStrategy = locationStrategy;
            this.commands = [];
        }
        Object.defineProperty(RouterLink.prototype, "routerLink", {
            set: function (data) {
                if (Array.isArray(data)) {
                    this.commands = data;
                } else {
                    this.commands = [data];
                }
            },
            enumerable: true,
            configurable: true
        });
        RouterLink.prototype.onClick = function (button, ctrlKey, metaKey) {
            if (button !== 0 || ctrlKey || metaKey) {
                return true;
            }
            this.router.navigateByUrl(this.urlTree);
            return false;
        };
        Object.defineProperty(RouterLink.prototype, "urlTree", {
            get: function () {
                return this.router.createUrlTree(this.commands, {
                    relativeTo: this.route,
                    queryParams: this.queryParams,
                    fragment: this.fragment,
                    preserveQueryParams: toBool(this.preserveQueryParams),
                    preserveFragment: toBool(this.preserveFragment)
                });
            },
            enumerable: true,
            configurable: true
        });
        /** @nocollapse */
        RouterLink.decorators = [{ type: core_1.Directive, args: [{ selector: ':not(a)[routerLink]' }] }];
        /** @nocollapse */
        RouterLink.ctorParameters = [{ type: router_1.Router }, { type: router_state_1.ActivatedRoute }, { type: common_1.LocationStrategy }];
        /** @nocollapse */
        RouterLink.propDecorators = {
            'queryParams': [{ type: core_1.Input }],
            'fragment': [{ type: core_1.Input }],
            'preserveQueryParams': [{ type: core_1.Input }],
            'preserveFragment': [{ type: core_1.Input }],
            'routerLink': [{ type: core_1.Input }],
            'onClick': [{ type: core_1.HostListener, args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey']] }]
        };
        return RouterLink;
    }();
    exports.RouterLink = RouterLink;
    var RouterLinkWithHref = function () {
        function RouterLinkWithHref(router, route, locationStrategy) {
            var _this = this;
            this.router = router;
            this.route = route;
            this.locationStrategy = locationStrategy;
            this.commands = [];
            this.subscription = router.events.subscribe(function (s) {
                if (s instanceof router_1.NavigationEnd) {
                    _this.updateTargetUrlAndHref();
                }
            });
        }
        Object.defineProperty(RouterLinkWithHref.prototype, "routerLink", {
            set: function (data) {
                if (Array.isArray(data)) {
                    this.commands = data;
                } else {
                    this.commands = [data];
                }
            },
            enumerable: true,
            configurable: true
        });
        RouterLinkWithHref.prototype.ngOnChanges = function (changes) {
            this.updateTargetUrlAndHref();
        };
        RouterLinkWithHref.prototype.ngOnDestroy = function () {
            this.subscription.unsubscribe();
        };
        RouterLinkWithHref.prototype.onClick = function (button, ctrlKey, metaKey) {
            if (button !== 0 || ctrlKey || metaKey) {
                return true;
            }
            if (typeof this.target === 'string' && this.target != '_self') {
                return true;
            }
            this.router.navigateByUrl(this.urlTree);
            return false;
        };
        RouterLinkWithHref.prototype.updateTargetUrlAndHref = function () {
            this.urlTree = this.router.createUrlTree(this.commands, {
                relativeTo: this.route,
                queryParams: this.queryParams,
                fragment: this.fragment,
                preserveQueryParams: toBool(this.preserveQueryParams),
                preserveFragment: toBool(this.preserveFragment)
            });
            if (this.urlTree) {
                this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));
            }
        };
        /** @nocollapse */
        RouterLinkWithHref.decorators = [{ type: core_1.Directive, args: [{ selector: 'a[routerLink]' }] }];
        /** @nocollapse */
        RouterLinkWithHref.ctorParameters = [{ type: router_1.Router }, { type: router_state_1.ActivatedRoute }, { type: common_1.LocationStrategy }];
        /** @nocollapse */
        RouterLinkWithHref.propDecorators = {
            'target': [{ type: core_1.Input }],
            'queryParams': [{ type: core_1.Input }],
            'fragment': [{ type: core_1.Input }],
            'routerLinkOptions': [{ type: core_1.Input }],
            'preserveQueryParams': [{ type: core_1.Input }],
            'preserveFragment': [{ type: core_1.Input }],
            'href': [{ type: core_1.HostBinding }],
            'routerLink': [{ type: core_1.Input }],
            'onClick': [{ type: core_1.HostListener, args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey']] }]
        };
        return RouterLinkWithHref;
    }();
    exports.RouterLinkWithHref = RouterLinkWithHref;
    function toBool(s) {
        if (s === '') return true;
        return !!s;
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/router@3.0.0-rc.1/src/directives/router_link_active.js', ['@angular/core', '../router', './router_link'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var router_1 = $__require('../router');
    var router_link_1 = $__require('./router_link');
    var RouterLinkActive = function () {
        function RouterLinkActive(router, element, renderer) {
            var _this = this;
            this.router = router;
            this.element = element;
            this.renderer = renderer;
            this.classes = [];
            this.routerLinkActiveOptions = { exact: false };
            this.subscription = router.events.subscribe(function (s) {
                if (s instanceof router_1.NavigationEnd) {
                    _this.update();
                }
            });
        }
        RouterLinkActive.prototype.ngAfterContentInit = function () {
            var _this = this;
            this.links.changes.subscribe(function (s) {
                return _this.update();
            });
            this.linksWithHrefs.changes.subscribe(function (s) {
                return _this.update();
            });
            this.update();
        };
        Object.defineProperty(RouterLinkActive.prototype, "routerLinkActive", {
            set: function (data) {
                if (Array.isArray(data)) {
                    this.classes = data;
                } else {
                    this.classes = data.split(' ');
                }
            },
            enumerable: true,
            configurable: true
        });
        RouterLinkActive.prototype.ngOnChanges = function (changes) {
            this.update();
        };
        RouterLinkActive.prototype.ngOnDestroy = function () {
            this.subscription.unsubscribe();
        };
        RouterLinkActive.prototype.update = function () {
            var _this = this;
            if (!this.links || !this.linksWithHrefs || !this.router.navigated) return;
            var isActiveLinks = this.reduceList(this.links);
            var isActiveLinksWithHrefs = this.reduceList(this.linksWithHrefs);
            this.classes.forEach(function (c) {
                return _this.renderer.setElementClass(_this.element.nativeElement, c, isActiveLinks || isActiveLinksWithHrefs);
            });
        };
        RouterLinkActive.prototype.reduceList = function (q) {
            var _this = this;
            return q.reduce(function (res, link) {
                return res || _this.router.isActive(link.urlTree, _this.routerLinkActiveOptions.exact);
            }, false);
        };
        /** @nocollapse */
        RouterLinkActive.decorators = [{ type: core_1.Directive, args: [{ selector: '[routerLinkActive]' }] }];
        /** @nocollapse */
        RouterLinkActive.ctorParameters = [{ type: router_1.Router }, { type: core_1.ElementRef }, { type: core_1.Renderer }];
        /** @nocollapse */
        RouterLinkActive.propDecorators = {
            'links': [{ type: core_1.ContentChildren, args: [router_link_1.RouterLink, { descendants: true }] }],
            'linksWithHrefs': [{ type: core_1.ContentChildren, args: [router_link_1.RouterLinkWithHref, { descendants: true }] }],
            'routerLinkActiveOptions': [{ type: core_1.Input }],
            'routerLinkActive': [{ type: core_1.Input }]
        };
        return RouterLinkActive;
    }();
    exports.RouterLinkActive = RouterLinkActive;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/router@3.0.0-rc.1/src/directives/router_outlet.js', ['@angular/core', '../router_outlet_map', '../shared'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var router_outlet_map_1 = $__require('../router_outlet_map');
    var shared_1 = $__require('../shared');
    var RouterOutlet = function () {
        function RouterOutlet(parentOutletMap, location, resolver, name) {
            this.parentOutletMap = parentOutletMap;
            this.location = location;
            this.resolver = resolver;
            this.name = name;
            this.activateEvents = new core_1.EventEmitter();
            this.deactivateEvents = new core_1.EventEmitter();
            parentOutletMap.registerOutlet(name ? name : shared_1.PRIMARY_OUTLET, this);
        }
        RouterOutlet.prototype.ngOnDestroy = function () {
            this.parentOutletMap.removeOutlet(this.name ? this.name : shared_1.PRIMARY_OUTLET);
        };
        Object.defineProperty(RouterOutlet.prototype, "isActivated", {
            get: function () {
                return !!this.activated;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouterOutlet.prototype, "component", {
            get: function () {
                if (!this.activated) throw new Error('Outlet is not activated');
                return this.activated.instance;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouterOutlet.prototype, "activatedRoute", {
            get: function () {
                if (!this.activated) throw new Error('Outlet is not activated');
                return this._activatedRoute;
            },
            enumerable: true,
            configurable: true
        });
        RouterOutlet.prototype.deactivate = function () {
            if (this.activated) {
                var c = this.component;
                this.activated.destroy();
                this.activated = null;
                this.deactivateEvents.emit(c);
            }
        };
        RouterOutlet.prototype.activate = function (activatedRoute, loadedResolver, loadedInjector, providers, outletMap) {
            this.outletMap = outletMap;
            this._activatedRoute = activatedRoute;
            var snapshot = activatedRoute._futureSnapshot;
            var component = snapshot._routeConfig.component;
            var factory;
            try {
                if (typeof component === 'string') {
                    factory = snapshot._resolvedComponentFactory;
                } else if (loadedResolver) {
                    factory = loadedResolver.resolveComponentFactory(component);
                } else {
                    factory = this.resolver.resolveComponentFactory(component);
                }
            } catch (e) {
                if (!(e instanceof core_1.NoComponentFactoryError)) throw e;
                var componentName = component ? component.name : null;
                console.warn("'" + componentName + "' not found in entryComponents array.  To ensure all components referred\n          to by the Routes are compiled, you must add '" + componentName + "' to the\n          'entryComponents' array of your application component. This will be required in a future\n          release of the router.");
                factory = snapshot._resolvedComponentFactory;
            }
            var injector = loadedInjector ? loadedInjector : this.location.parentInjector;
            var inj = core_1.ReflectiveInjector.fromResolvedProviders(providers, injector);
            this.activated = this.location.createComponent(factory, this.location.length, inj, []);
            this.activated.changeDetectorRef.detectChanges();
            this.activateEvents.emit(this.activated.instance);
        };
        /** @nocollapse */
        RouterOutlet.decorators = [{ type: core_1.Directive, args: [{ selector: 'router-outlet' }] }];
        /** @nocollapse */
        RouterOutlet.ctorParameters = [{ type: router_outlet_map_1.RouterOutletMap }, { type: core_1.ViewContainerRef }, { type: core_1.ComponentFactoryResolver }, { type: undefined, decorators: [{ type: core_1.Attribute, args: ['name'] }] }];
        /** @nocollapse */
        RouterOutlet.propDecorators = {
            'activateEvents': [{ type: core_1.Output, args: ['activate'] }],
            'deactivateEvents': [{ type: core_1.Output, args: ['deactivate'] }]
        };
        return RouterOutlet;
    }();
    exports.RouterOutlet = RouterOutlet;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/router@3.0.0-rc.1/src/router_module.js', ['@angular/common', '@angular/core', './common_router_providers', './directives/router_link', './directives/router_link_active', './directives/router_outlet', './router', './router_config_loader', './router_outlet_map', './router_state', './url_tree'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var common_1 = $__require('@angular/common');
    var core_1 = $__require('@angular/core');
    var common_router_providers_1 = $__require('./common_router_providers');
    var router_link_1 = $__require('./directives/router_link');
    var router_link_active_1 = $__require('./directives/router_link_active');
    var router_outlet_1 = $__require('./directives/router_outlet');
    var router_1 = $__require('./router');
    var router_config_loader_1 = $__require('./router_config_loader');
    var router_outlet_map_1 = $__require('./router_outlet_map');
    var router_state_1 = $__require('./router_state');
    var url_tree_1 = $__require('./url_tree');
    /**
     * @stable
     */
    exports.ROUTER_DIRECTIVES = [router_outlet_1.RouterOutlet, router_link_1.RouterLink, router_link_1.RouterLinkWithHref, router_link_active_1.RouterLinkActive];
    var pathLocationStrategy = {
        provide: common_1.LocationStrategy,
        useClass: common_1.PathLocationStrategy
    };
    var hashLocationStrategy = {
        provide: common_1.LocationStrategy,
        useClass: common_1.HashLocationStrategy
    };
    exports.ROUTER_PROVIDERS = [common_1.Location, { provide: url_tree_1.UrlSerializer, useClass: url_tree_1.DefaultUrlSerializer }, {
        provide: router_1.Router,
        useFactory: common_router_providers_1.setupRouter,
        deps: [core_1.ApplicationRef, core_1.ComponentResolver, url_tree_1.UrlSerializer, router_outlet_map_1.RouterOutletMap, common_1.Location, core_1.Injector, core_1.NgModuleFactoryLoader, router_config_loader_1.ROUTES, common_router_providers_1.ROUTER_CONFIGURATION]
    }, router_outlet_map_1.RouterOutletMap, { provide: router_state_1.ActivatedRoute, useFactory: common_router_providers_1.rootRoute, deps: [router_1.Router] }, { provide: core_1.NgModuleFactoryLoader, useClass: core_1.SystemJsNgModuleLoader }, { provide: common_router_providers_1.ROUTER_CONFIGURATION, useValue: { enableTracing: false } }];
    var RouterModule = function () {
        function RouterModule() {}
        RouterModule.forRoot = function (routes, config) {
            return {
                ngModule: RouterModule,
                providers: [exports.ROUTER_PROVIDERS, common_router_providers_1.provideRoutes(routes), { provide: common_router_providers_1.ROUTER_CONFIGURATION, useValue: config ? config : {} }, {
                    provide: common_1.LocationStrategy,
                    useFactory: provideLocationStrategy,
                    deps: [common_1.PlatformLocation, [new core_1.Inject(common_1.APP_BASE_HREF), new core_1.Optional()], common_router_providers_1.ROUTER_CONFIGURATION]
                }, common_router_providers_1.provideRouterInitializer()]
            };
        };
        RouterModule.forChild = function (routes) {
            return { ngModule: RouterModule, providers: [common_router_providers_1.provideRoutes(routes)] };
        };
        /** @nocollapse */
        RouterModule.decorators = [{ type: core_1.NgModule, args: [{ declarations: exports.ROUTER_DIRECTIVES, exports: exports.ROUTER_DIRECTIVES }] }];
        return RouterModule;
    }();
    exports.RouterModule = RouterModule;
    function provideLocationStrategy(platformLocationStrategy, baseHref, options) {
        if (options === void 0) {
            options = {};
        }
        return options.useHash ? new common_1.HashLocationStrategy(platformLocationStrategy, baseHref) : new common_1.PathLocationStrategy(platformLocationStrategy, baseHref);
    }
    exports.provideLocationStrategy = provideLocationStrategy;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/platform-browser@2.0.0-rc.5/src/browser/title.js", ["../dom/dom_adapter", "reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var dom_adapter_1 = $__require("../dom/dom_adapter");
  /**
   * A service that can be used to get and set the title of a current HTML document.
   *
   * Since an Angular 2 application can't be bootstrapped on the entire HTML document (`<html>` tag)
   * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements
   * (representing the `<title>` tag). Instead, this service can be used to set and get the current
   * title value.
   *
   * @experimental
   */
  var Title = function () {
    function Title() {}
    /**
     * Get the title of the current HTML document.
     * @returns {string}
     */
    Title.prototype.getTitle = function () {
      return dom_adapter_1.getDOM().getTitle();
    };
    /**
     * Set the title of the current HTML document.
     * @param newTitle
     */
    Title.prototype.setTitle = function (newTitle) {
      dom_adapter_1.getDOM().setTitle(newTitle);
    };
    return Title;
  }();
  exports.Title = Title;
  

  return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/facade/browser.js', ['reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";
  /**
   * JS version of browser APIs. This library can only run in the browser.
   */

  var define,
      global = this || self,
      GLOBAL = global;
  var win = typeof window !== 'undefined' && window || {};
  exports.window = win;
  exports.document = win.document;
  exports.location = win.location;
  exports.gc = win['gc'] ? function () {
    return win['gc']();
  } : function () {
    return null;
  };
  exports.performance = win['performance'] ? win['performance'] : null;
  exports.Event = win['Event'];
  exports.MouseEvent = win['MouseEvent'];
  exports.KeyboardEvent = win['KeyboardEvent'];
  exports.EventTarget = win['EventTarget'];
  exports.History = win['History'];
  exports.Location = win['Location'];
  exports.EventListener = win['EventListener'];
  

  return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/browser/tools/common_tools.js', ['@angular/core', '../../dom/dom_adapter', '../../facade/browser', '../../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var dom_adapter_1 = $__require('../../dom/dom_adapter');
    var browser_1 = $__require('../../facade/browser');
    var lang_1 = $__require('../../facade/lang');
    var ChangeDetectionPerfRecord = function () {
        function ChangeDetectionPerfRecord(msPerTick, numTicks) {
            this.msPerTick = msPerTick;
            this.numTicks = numTicks;
        }
        return ChangeDetectionPerfRecord;
    }();
    exports.ChangeDetectionPerfRecord = ChangeDetectionPerfRecord;
    /**
     * Entry point for all Angular debug tools. This object corresponds to the `ng`
     * global variable accessible in the dev console.
     */
    var AngularTools = function () {
        function AngularTools(ref) {
            this.profiler = new AngularProfiler(ref);
        }
        return AngularTools;
    }();
    exports.AngularTools = AngularTools;
    /**
     * Entry point for all Angular profiling-related debug tools. This object
     * corresponds to the `ng.profiler` in the dev console.
     */
    var AngularProfiler = function () {
        function AngularProfiler(ref) {
            this.appRef = ref.injector.get(core_1.ApplicationRef);
        }
        /**
         * Exercises change detection in a loop and then prints the average amount of
         * time in milliseconds how long a single round of change detection takes for
         * the current state of the UI. It runs a minimum of 5 rounds for a minimum
         * of 500 milliseconds.
         *
         * Optionally, a user may pass a `config` parameter containing a map of
         * options. Supported options are:
         *
         * `record` (boolean) - causes the profiler to record a CPU profile while
         * it exercises the change detector. Example:
         *
         * ```
         * ng.profiler.timeChangeDetection({record: true})
         * ```
         */
        AngularProfiler.prototype.timeChangeDetection = function (config) {
            var record = lang_1.isPresent(config) && config['record'];
            var profileName = 'Change Detection';
            // Profiler is not available in Android browsers, nor in IE 9 without dev tools opened
            var isProfilerAvailable = lang_1.isPresent(browser_1.window.console.profile);
            if (record && isProfilerAvailable) {
                browser_1.window.console.profile(profileName);
            }
            var start = dom_adapter_1.getDOM().performanceNow();
            var numTicks = 0;
            while (numTicks < 5 || dom_adapter_1.getDOM().performanceNow() - start < 500) {
                this.appRef.tick();
                numTicks++;
            }
            var end = dom_adapter_1.getDOM().performanceNow();
            if (record && isProfilerAvailable) {
                // need to cast to <any> because type checker thinks there's no argument
                // while in fact there is:
                //
                // https://developer.mozilla.org/en-US/docs/Web/API/Console/profileEnd
                browser_1.window.console.profileEnd(profileName);
            }
            var msPerTick = (end - start) / numTicks;
            browser_1.window.console.log("ran " + numTicks + " change detection cycles");
            browser_1.window.console.log(lang_1.NumberWrapper.toFixed(msPerTick, 2) + " ms per check");
            return new ChangeDetectionPerfRecord(msPerTick, numTicks);
        };
        return AngularProfiler;
    }();
    exports.AngularProfiler = AngularProfiler;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/browser/tools/tools.js', ['../../facade/lang', './common_tools', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var lang_1 = $__require('../../facade/lang');
  var common_tools_1 = $__require('./common_tools');
  var context = lang_1.global;
  /**
   * Enabled Angular 2 debug tools that are accessible via your browser's
   * developer console.
   *
   * Usage:
   *
   * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)
   * 1. Type `ng.` (usually the console will show auto-complete suggestion)
   * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`
   *    then hit Enter.
   *
   * @experimental All debugging apis are currently experimental.
   */
  function enableDebugTools(ref) {
    context.ng = new common_tools_1.AngularTools(ref);
    return ref;
  }
  exports.enableDebugTools = enableDebugTools;
  /**
   * Disables Angular 2 tools.
   *
   * @experimental All debugging apis are currently experimental.
   */
  function disableDebugTools() {
    delete context.ng;
  }
  exports.disableDebugTools = disableDebugTools;
  

  return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/dom/debug/by.js', ['../../dom/dom_adapter', '../../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var dom_adapter_1 = $__require('../../dom/dom_adapter');
  var lang_1 = $__require('../../facade/lang');
  /**
   * Predicates for use with {@link DebugElement}'s query functions.
   *
   * @experimental All debugging apis are currently experimental.
   */
  var By = function () {
    function By() {}
    /**
     * Match all elements.
     *
     * ## Example
     *
     * {@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}
     */
    By.all = function () {
      return function (debugElement) {
        return true;
      };
    };
    /**
     * Match elements by the given CSS selector.
     *
     * ## Example
     *
     * {@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}
     */
    By.css = function (selector) {
      return function (debugElement) {
        return lang_1.isPresent(debugElement.nativeElement) ? dom_adapter_1.getDOM().elementMatches(debugElement.nativeElement, selector) : false;
      };
    };
    /**
     * Match elements that have the given directive present.
     *
     * ## Example
     *
     * {@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}
     */
    By.directive = function (type) {
      return function (debugElement) {
        return debugElement.providerTokens.indexOf(type) !== -1;
      };
    };
    return By;
  }();
  exports.By = By;
  

  return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/web_workers/worker/platform_location.js', ['@angular/common', '@angular/core', '../../facade/collection', '../../facade/exceptions', '../../facade/lang', '../shared/client_message_broker', '../shared/message_bus', '../shared/messaging_api', '../shared/serialized_types', '../shared/serializer', './event_deserializer', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var common_1 = $__require('@angular/common');
    var core_1 = $__require('@angular/core');
    var collection_1 = $__require('../../facade/collection');
    var exceptions_1 = $__require('../../facade/exceptions');
    var lang_1 = $__require('../../facade/lang');
    var client_message_broker_1 = $__require('../shared/client_message_broker');
    var message_bus_1 = $__require('../shared/message_bus');
    var messaging_api_1 = $__require('../shared/messaging_api');
    var serialized_types_1 = $__require('../shared/serialized_types');
    var serializer_1 = $__require('../shared/serializer');
    var event_deserializer_1 = $__require('./event_deserializer');
    var WebWorkerPlatformLocation = function (_super) {
        __extends(WebWorkerPlatformLocation, _super);
        function WebWorkerPlatformLocation(brokerFactory, bus, _serializer) {
            var _this = this;
            _super.call(this);
            this._serializer = _serializer;
            this._popStateListeners = [];
            this._hashChangeListeners = [];
            this._location = null;
            this._broker = brokerFactory.createMessageBroker(messaging_api_1.ROUTER_CHANNEL);
            this._channelSource = bus.from(messaging_api_1.ROUTER_CHANNEL);
            this._channelSource.subscribe({
                next: function (msg) {
                    var listeners = null;
                    if (collection_1.StringMapWrapper.contains(msg, 'event')) {
                        var type = msg['event']['type'];
                        if (lang_1.StringWrapper.equals(type, 'popstate')) {
                            listeners = _this._popStateListeners;
                        } else if (lang_1.StringWrapper.equals(type, 'hashchange')) {
                            listeners = _this._hashChangeListeners;
                        }
                        if (listeners !== null) {
                            var e_1 = event_deserializer_1.deserializeGenericEvent(msg['event']);
                            // There was a popState or hashChange event, so the location object thas been updated
                            _this._location = _this._serializer.deserialize(msg['location'], serialized_types_1.LocationType);
                            listeners.forEach(function (fn) {
                                return fn(e_1);
                            });
                        }
                    }
                }
            });
        }
        /** @internal **/
        WebWorkerPlatformLocation.prototype.init = function () {
            var _this = this;
            var args = new client_message_broker_1.UiArguments('getLocation');
            var locationPromise = this._broker.runOnService(args, serialized_types_1.LocationType);
            return locationPromise.then(function (val) {
                _this._location = val;
                return true;
            }, function (err) {
                throw new exceptions_1.BaseException(err);
            });
        };
        WebWorkerPlatformLocation.prototype.getBaseHrefFromDOM = function () {
            throw new exceptions_1.BaseException('Attempt to get base href from DOM from WebWorker. You must either provide a value for the APP_BASE_HREF token through DI or use the hash location strategy.');
        };
        WebWorkerPlatformLocation.prototype.onPopState = function (fn) {
            this._popStateListeners.push(fn);
        };
        WebWorkerPlatformLocation.prototype.onHashChange = function (fn) {
            this._hashChangeListeners.push(fn);
        };
        Object.defineProperty(WebWorkerPlatformLocation.prototype, "pathname", {
            get: function () {
                if (this._location === null) {
                    return null;
                }
                return this._location.pathname;
            },
            set: function (newPath) {
                if (this._location === null) {
                    throw new exceptions_1.BaseException('Attempt to set pathname before value is obtained from UI');
                }
                this._location.pathname = newPath;
                var fnArgs = [new client_message_broker_1.FnArg(newPath, serializer_1.PRIMITIVE)];
                var args = new client_message_broker_1.UiArguments('setPathname', fnArgs);
                this._broker.runOnService(args, null);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebWorkerPlatformLocation.prototype, "search", {
            get: function () {
                if (this._location === null) {
                    return null;
                }
                return this._location.search;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebWorkerPlatformLocation.prototype, "hash", {
            get: function () {
                if (this._location === null) {
                    return null;
                }
                return this._location.hash;
            },
            enumerable: true,
            configurable: true
        });
        WebWorkerPlatformLocation.prototype.pushState = function (state, title, url) {
            var fnArgs = [new client_message_broker_1.FnArg(state, serializer_1.PRIMITIVE), new client_message_broker_1.FnArg(title, serializer_1.PRIMITIVE), new client_message_broker_1.FnArg(url, serializer_1.PRIMITIVE)];
            var args = new client_message_broker_1.UiArguments('pushState', fnArgs);
            this._broker.runOnService(args, null);
        };
        WebWorkerPlatformLocation.prototype.replaceState = function (state, title, url) {
            var fnArgs = [new client_message_broker_1.FnArg(state, serializer_1.PRIMITIVE), new client_message_broker_1.FnArg(title, serializer_1.PRIMITIVE), new client_message_broker_1.FnArg(url, serializer_1.PRIMITIVE)];
            var args = new client_message_broker_1.UiArguments('replaceState', fnArgs);
            this._broker.runOnService(args, null);
        };
        WebWorkerPlatformLocation.prototype.forward = function () {
            var args = new client_message_broker_1.UiArguments('forward');
            this._broker.runOnService(args, null);
        };
        WebWorkerPlatformLocation.prototype.back = function () {
            var args = new client_message_broker_1.UiArguments('back');
            this._broker.runOnService(args, null);
        };
        /** @nocollapse */
        WebWorkerPlatformLocation.decorators = [{ type: core_1.Injectable }];
        /** @nocollapse */
        WebWorkerPlatformLocation.ctorParameters = [{ type: client_message_broker_1.ClientMessageBrokerFactory }, { type: message_bus_1.MessageBus }, { type: serializer_1.Serializer }];
        return WebWorkerPlatformLocation;
    }(common_1.PlatformLocation);
    exports.WebWorkerPlatformLocation = WebWorkerPlatformLocation;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/web_workers/worker/location_providers.js', ['@angular/common', '@angular/core', './platform_location', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var common_1 = $__require('@angular/common');
    var core_1 = $__require('@angular/core');
    var platform_location_1 = $__require('./platform_location');
    /**
     * Those providers should be added when the router is used in a worker context in addition to the
     * {@link ROUTER_PROVIDERS} and after them.
     * @experimental
     */
    exports.WORKER_APP_LOCATION_PROVIDERS = [{ provide: common_1.PlatformLocation, useClass: platform_location_1.WebWorkerPlatformLocation }, {
        provide: core_1.APP_INITIALIZER,
        useFactory: appInitFnFactory,
        multi: true,
        deps: [common_1.PlatformLocation, core_1.NgZone]
    }];
    function appInitFnFactory(platformLocation, zone) {
        return function () {
            return zone.runGuarded(function () {
                return platformLocation.init();
            });
        };
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/web_workers/ui/platform_location.js', ['@angular/core', '../../browser/location/browser_platform_location', '../../facade/lang', '../shared/message_bus', '../shared/messaging_api', '../shared/serialized_types', '../shared/serializer', '../shared/service_message_broker', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var browser_platform_location_1 = $__require('../../browser/location/browser_platform_location');
    var lang_1 = $__require('../../facade/lang');
    var message_bus_1 = $__require('../shared/message_bus');
    var messaging_api_1 = $__require('../shared/messaging_api');
    var serialized_types_1 = $__require('../shared/serialized_types');
    var serializer_1 = $__require('../shared/serializer');
    var service_message_broker_1 = $__require('../shared/service_message_broker');
    var MessageBasedPlatformLocation = function () {
        function MessageBasedPlatformLocation(_brokerFactory, _platformLocation, bus, _serializer) {
            this._brokerFactory = _brokerFactory;
            this._platformLocation = _platformLocation;
            this._serializer = _serializer;
            this._platformLocation.onPopState(lang_1.FunctionWrapper.bind(this._sendUrlChangeEvent, this));
            this._platformLocation.onHashChange(lang_1.FunctionWrapper.bind(this._sendUrlChangeEvent, this));
            this._broker = this._brokerFactory.createMessageBroker(messaging_api_1.ROUTER_CHANNEL);
            this._channelSink = bus.to(messaging_api_1.ROUTER_CHANNEL);
        }
        MessageBasedPlatformLocation.prototype.start = function () {
            this._broker.registerMethod('getLocation', null, lang_1.FunctionWrapper.bind(this._getLocation, this), serialized_types_1.LocationType);
            this._broker.registerMethod('setPathname', [serializer_1.PRIMITIVE], lang_1.FunctionWrapper.bind(this._setPathname, this));
            this._broker.registerMethod('pushState', [serializer_1.PRIMITIVE, serializer_1.PRIMITIVE, serializer_1.PRIMITIVE], lang_1.FunctionWrapper.bind(this._platformLocation.pushState, this._platformLocation));
            this._broker.registerMethod('replaceState', [serializer_1.PRIMITIVE, serializer_1.PRIMITIVE, serializer_1.PRIMITIVE], lang_1.FunctionWrapper.bind(this._platformLocation.replaceState, this._platformLocation));
            this._broker.registerMethod('forward', null, lang_1.FunctionWrapper.bind(this._platformLocation.forward, this._platformLocation));
            this._broker.registerMethod('back', null, lang_1.FunctionWrapper.bind(this._platformLocation.back, this._platformLocation));
        };
        MessageBasedPlatformLocation.prototype._getLocation = function () {
            return Promise.resolve(this._platformLocation.location);
        };
        MessageBasedPlatformLocation.prototype._sendUrlChangeEvent = function (e) {
            var loc = this._serializer.serialize(this._platformLocation.location, serialized_types_1.LocationType);
            var serializedEvent = { 'type': e.type };
            this._channelSink.emit({ 'event': serializedEvent, 'location': loc });
        };
        MessageBasedPlatformLocation.prototype._setPathname = function (pathname) {
            this._platformLocation.pathname = pathname;
        };
        /** @nocollapse */
        MessageBasedPlatformLocation.decorators = [{ type: core_1.Injectable }];
        /** @nocollapse */
        MessageBasedPlatformLocation.ctorParameters = [{ type: service_message_broker_1.ServiceMessageBrokerFactory }, { type: browser_platform_location_1.BrowserPlatformLocation }, { type: message_bus_1.MessageBus }, { type: serializer_1.Serializer }];
        return MessageBasedPlatformLocation;
    }();
    exports.MessageBasedPlatformLocation = MessageBasedPlatformLocation;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/web_workers/ui/location_providers.js', ['@angular/core', '../../browser/location/browser_platform_location', './platform_location', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var browser_platform_location_1 = $__require('../../browser/location/browser_platform_location');
    var platform_location_1 = $__require('./platform_location');
    /**
     * A list of {@link Provider}s. To use the router in a Worker enabled application you must
     * include these providers when setting up the render thread.
     * @experimental
     */
    exports.WORKER_UI_LOCATION_PROVIDERS = [platform_location_1.MessageBasedPlatformLocation, browser_platform_location_1.BrowserPlatformLocation, { provide: core_1.PLATFORM_INITIALIZER, useFactory: initUiLocation, multi: true, deps: [core_1.Injector] }];
    function initUiLocation(injector) {
        return function () {
            var zone = injector.get(core_1.NgZone);
            zone.runGuarded(function () {
                return injector.get(platform_location_1.MessageBasedPlatformLocation).start();
            });
        };
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/web_workers/ui/event_serializer.js', ['../../facade/collection', '../../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var collection_1 = $__require('../../facade/collection');
    var lang_1 = $__require('../../facade/lang');
    var MOUSE_EVENT_PROPERTIES = ['altKey', 'button', 'clientX', 'clientY', 'metaKey', 'movementX', 'movementY', 'offsetX', 'offsetY', 'region', 'screenX', 'screenY', 'shiftKey'];
    var KEYBOARD_EVENT_PROPERTIES = ['altkey', 'charCode', 'code', 'ctrlKey', 'isComposing', 'key', 'keyCode', 'location', 'metaKey', 'repeat', 'shiftKey', 'which'];
    var TRANSITION_EVENT_PROPERTIES = ['propertyName', 'elapsedTime', 'pseudoElement'];
    var EVENT_PROPERTIES = ['type', 'bubbles', 'cancelable'];
    var NODES_WITH_VALUE = new collection_1.Set(['input', 'select', 'option', 'button', 'li', 'meter', 'progress', 'param', 'textarea']);
    function serializeGenericEvent(e) {
        return serializeEvent(e, EVENT_PROPERTIES);
    }
    exports.serializeGenericEvent = serializeGenericEvent;
    // TODO(jteplitz602): Allow users to specify the properties they need rather than always
    // adding value and files #3374
    function serializeEventWithTarget(e) {
        var serializedEvent = serializeEvent(e, EVENT_PROPERTIES);
        return addTarget(e, serializedEvent);
    }
    exports.serializeEventWithTarget = serializeEventWithTarget;
    function serializeMouseEvent(e) {
        return serializeEvent(e, MOUSE_EVENT_PROPERTIES);
    }
    exports.serializeMouseEvent = serializeMouseEvent;
    function serializeKeyboardEvent(e) {
        var serializedEvent = serializeEvent(e, KEYBOARD_EVENT_PROPERTIES);
        return addTarget(e, serializedEvent);
    }
    exports.serializeKeyboardEvent = serializeKeyboardEvent;
    function serializeTransitionEvent(e) {
        var serializedEvent = serializeEvent(e, TRANSITION_EVENT_PROPERTIES);
        return addTarget(e, serializedEvent);
    }
    exports.serializeTransitionEvent = serializeTransitionEvent;
    // TODO(jteplitz602): #3374. See above.
    function addTarget(e, serializedEvent) {
        if (NODES_WITH_VALUE.has(e.target.tagName.toLowerCase())) {
            var target = e.target;
            serializedEvent['target'] = { 'value': target.value };
            if (lang_1.isPresent(target.files)) {
                serializedEvent['target']['files'] = target.files;
            }
        }
        return serializedEvent;
    }
    function serializeEvent(e, properties) {
        var serialized = {};
        for (var i = 0; i < properties.length; i++) {
            var prop = properties[i];
            serialized[prop] = e[prop];
        }
        return serialized;
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/web_workers/ui/event_dispatcher.js', ['../../facade/exceptions', '../shared/serializer', './event_serializer', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var exceptions_1 = $__require('../../facade/exceptions');
    var serializer_1 = $__require('../shared/serializer');
    var event_serializer_1 = $__require('./event_serializer');
    var EventDispatcher = function () {
        function EventDispatcher(_sink, _serializer) {
            this._sink = _sink;
            this._serializer = _serializer;
        }
        EventDispatcher.prototype.dispatchRenderEvent = function (element, eventTarget, eventName, event) {
            var serializedEvent;
            // TODO (jteplitz602): support custom events #3350
            switch (event.type) {
                case 'click':
                case 'mouseup':
                case 'mousedown':
                case 'dblclick':
                case 'contextmenu':
                case 'mouseenter':
                case 'mouseleave':
                case 'mousemove':
                case 'mouseout':
                case 'mouseover':
                case 'show':
                    serializedEvent = event_serializer_1.serializeMouseEvent(event);
                    break;
                case 'keydown':
                case 'keypress':
                case 'keyup':
                    serializedEvent = event_serializer_1.serializeKeyboardEvent(event);
                    break;
                case 'input':
                case 'change':
                case 'blur':
                    serializedEvent = event_serializer_1.serializeEventWithTarget(event);
                    break;
                case 'abort':
                case 'afterprint':
                case 'beforeprint':
                case 'cached':
                case 'canplay':
                case 'canplaythrough':
                case 'chargingchange':
                case 'chargingtimechange':
                case 'close':
                case 'dischargingtimechange':
                case 'DOMContentLoaded':
                case 'downloading':
                case 'durationchange':
                case 'emptied':
                case 'ended':
                case 'error':
                case 'fullscreenchange':
                case 'fullscreenerror':
                case 'invalid':
                case 'languagechange':
                case 'levelfchange':
                case 'loadeddata':
                case 'loadedmetadata':
                case 'obsolete':
                case 'offline':
                case 'online':
                case 'open':
                case 'orientatoinchange':
                case 'pause':
                case 'pointerlockchange':
                case 'pointerlockerror':
                case 'play':
                case 'playing':
                case 'ratechange':
                case 'readystatechange':
                case 'reset':
                case 'scroll':
                case 'seeked':
                case 'seeking':
                case 'stalled':
                case 'submit':
                case 'success':
                case 'suspend':
                case 'timeupdate':
                case 'updateready':
                case 'visibilitychange':
                case 'volumechange':
                case 'waiting':
                    serializedEvent = event_serializer_1.serializeGenericEvent(event);
                    break;
                case 'transitionend':
                    serializedEvent = event_serializer_1.serializeTransitionEvent(event);
                    break;
                default:
                    throw new exceptions_1.BaseException(eventName + ' not supported on WebWorkers');
            }
            this._sink.emit({
                'element': this._serializer.serialize(element, serializer_1.RenderStoreObject),
                'eventName': eventName,
                'eventTarget': eventTarget,
                'event': serializedEvent
            });
            // TODO(kegluneq): Eventually, we want the user to indicate from the UI side whether the event
            // should be canceled, but for now just call `preventDefault` on the original DOM event.
            return false;
        };
        return EventDispatcher;
    }();
    exports.EventDispatcher = EventDispatcher;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/web_workers/ui/renderer.js', ['@angular/core', '../../facade/lang', '../shared/message_bus', '../shared/messaging_api', '../shared/render_store', '../shared/serializer', '../shared/service_message_broker', '../ui/event_dispatcher', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var lang_1 = $__require('../../facade/lang');
    var message_bus_1 = $__require('../shared/message_bus');
    var messaging_api_1 = $__require('../shared/messaging_api');
    var render_store_1 = $__require('../shared/render_store');
    var serializer_1 = $__require('../shared/serializer');
    var service_message_broker_1 = $__require('../shared/service_message_broker');
    var event_dispatcher_1 = $__require('../ui/event_dispatcher');
    var MessageBasedRenderer = function () {
        function MessageBasedRenderer(_brokerFactory, _bus, _serializer, _renderStore, _rootRenderer) {
            this._brokerFactory = _brokerFactory;
            this._bus = _bus;
            this._serializer = _serializer;
            this._renderStore = _renderStore;
            this._rootRenderer = _rootRenderer;
        }
        MessageBasedRenderer.prototype.start = function () {
            var broker = this._brokerFactory.createMessageBroker(messaging_api_1.RENDERER_CHANNEL);
            this._bus.initChannel(messaging_api_1.EVENT_CHANNEL);
            this._eventDispatcher = new event_dispatcher_1.EventDispatcher(this._bus.to(messaging_api_1.EVENT_CHANNEL), this._serializer);
            broker.registerMethod('renderComponent', [core_1.RenderComponentType, serializer_1.PRIMITIVE], lang_1.FunctionWrapper.bind(this._renderComponent, this));
            broker.registerMethod('selectRootElement', [serializer_1.RenderStoreObject, serializer_1.PRIMITIVE, serializer_1.PRIMITIVE], lang_1.FunctionWrapper.bind(this._selectRootElement, this));
            broker.registerMethod('createElement', [serializer_1.RenderStoreObject, serializer_1.RenderStoreObject, serializer_1.PRIMITIVE, serializer_1.PRIMITIVE], lang_1.FunctionWrapper.bind(this._createElement, this));
            broker.registerMethod('createViewRoot', [serializer_1.RenderStoreObject, serializer_1.RenderStoreObject, serializer_1.PRIMITIVE], lang_1.FunctionWrapper.bind(this._createViewRoot, this));
            broker.registerMethod('createTemplateAnchor', [serializer_1.RenderStoreObject, serializer_1.RenderStoreObject, serializer_1.PRIMITIVE], lang_1.FunctionWrapper.bind(this._createTemplateAnchor, this));
            broker.registerMethod('createText', [serializer_1.RenderStoreObject, serializer_1.RenderStoreObject, serializer_1.PRIMITIVE, serializer_1.PRIMITIVE], lang_1.FunctionWrapper.bind(this._createText, this));
            broker.registerMethod('projectNodes', [serializer_1.RenderStoreObject, serializer_1.RenderStoreObject, serializer_1.RenderStoreObject], lang_1.FunctionWrapper.bind(this._projectNodes, this));
            broker.registerMethod('attachViewAfter', [serializer_1.RenderStoreObject, serializer_1.RenderStoreObject, serializer_1.RenderStoreObject], lang_1.FunctionWrapper.bind(this._attachViewAfter, this));
            broker.registerMethod('detachView', [serializer_1.RenderStoreObject, serializer_1.RenderStoreObject], lang_1.FunctionWrapper.bind(this._detachView, this));
            broker.registerMethod('destroyView', [serializer_1.RenderStoreObject, serializer_1.RenderStoreObject, serializer_1.RenderStoreObject], lang_1.FunctionWrapper.bind(this._destroyView, this));
            broker.registerMethod('setElementProperty', [serializer_1.RenderStoreObject, serializer_1.RenderStoreObject, serializer_1.PRIMITIVE, serializer_1.PRIMITIVE], lang_1.FunctionWrapper.bind(this._setElementProperty, this));
            broker.registerMethod('setElementAttribute', [serializer_1.RenderStoreObject, serializer_1.RenderStoreObject, serializer_1.PRIMITIVE, serializer_1.PRIMITIVE], lang_1.FunctionWrapper.bind(this._setElementAttribute, this));
            broker.registerMethod('setBindingDebugInfo', [serializer_1.RenderStoreObject, serializer_1.RenderStoreObject, serializer_1.PRIMITIVE, serializer_1.PRIMITIVE], lang_1.FunctionWrapper.bind(this._setBindingDebugInfo, this));
            broker.registerMethod('setElementClass', [serializer_1.RenderStoreObject, serializer_1.RenderStoreObject, serializer_1.PRIMITIVE, serializer_1.PRIMITIVE], lang_1.FunctionWrapper.bind(this._setElementClass, this));
            broker.registerMethod('setElementStyle', [serializer_1.RenderStoreObject, serializer_1.RenderStoreObject, serializer_1.PRIMITIVE, serializer_1.PRIMITIVE], lang_1.FunctionWrapper.bind(this._setElementStyle, this));
            broker.registerMethod('invokeElementMethod', [serializer_1.RenderStoreObject, serializer_1.RenderStoreObject, serializer_1.PRIMITIVE, serializer_1.PRIMITIVE], lang_1.FunctionWrapper.bind(this._invokeElementMethod, this));
            broker.registerMethod('setText', [serializer_1.RenderStoreObject, serializer_1.RenderStoreObject, serializer_1.PRIMITIVE], lang_1.FunctionWrapper.bind(this._setText, this));
            broker.registerMethod('listen', [serializer_1.RenderStoreObject, serializer_1.RenderStoreObject, serializer_1.PRIMITIVE, serializer_1.PRIMITIVE], lang_1.FunctionWrapper.bind(this._listen, this));
            broker.registerMethod('listenGlobal', [serializer_1.RenderStoreObject, serializer_1.PRIMITIVE, serializer_1.PRIMITIVE, serializer_1.PRIMITIVE], lang_1.FunctionWrapper.bind(this._listenGlobal, this));
            broker.registerMethod('listenDone', [serializer_1.RenderStoreObject, serializer_1.RenderStoreObject], lang_1.FunctionWrapper.bind(this._listenDone, this));
        };
        MessageBasedRenderer.prototype._renderComponent = function (renderComponentType, rendererId) {
            var renderer = this._rootRenderer.renderComponent(renderComponentType);
            this._renderStore.store(renderer, rendererId);
        };
        MessageBasedRenderer.prototype._selectRootElement = function (renderer, selector, elId) {
            this._renderStore.store(renderer.selectRootElement(selector, null), elId);
        };
        MessageBasedRenderer.prototype._createElement = function (renderer, parentElement, name, elId) {
            this._renderStore.store(renderer.createElement(parentElement, name, null), elId);
        };
        MessageBasedRenderer.prototype._createViewRoot = function (renderer, hostElement, elId) {
            var viewRoot = renderer.createViewRoot(hostElement);
            if (this._renderStore.serialize(hostElement) !== elId) {
                this._renderStore.store(viewRoot, elId);
            }
        };
        MessageBasedRenderer.prototype._createTemplateAnchor = function (renderer, parentElement, elId) {
            this._renderStore.store(renderer.createTemplateAnchor(parentElement, null), elId);
        };
        MessageBasedRenderer.prototype._createText = function (renderer, parentElement, value, elId) {
            this._renderStore.store(renderer.createText(parentElement, value, null), elId);
        };
        MessageBasedRenderer.prototype._projectNodes = function (renderer, parentElement, nodes) {
            renderer.projectNodes(parentElement, nodes);
        };
        MessageBasedRenderer.prototype._attachViewAfter = function (renderer, node, viewRootNodes) {
            renderer.attachViewAfter(node, viewRootNodes);
        };
        MessageBasedRenderer.prototype._detachView = function (renderer, viewRootNodes) {
            renderer.detachView(viewRootNodes);
        };
        MessageBasedRenderer.prototype._destroyView = function (renderer, hostElement, viewAllNodes) {
            renderer.destroyView(hostElement, viewAllNodes);
            for (var i = 0; i < viewAllNodes.length; i++) {
                this._renderStore.remove(viewAllNodes[i]);
            }
        };
        MessageBasedRenderer.prototype._setElementProperty = function (renderer, renderElement, propertyName, propertyValue) {
            renderer.setElementProperty(renderElement, propertyName, propertyValue);
        };
        MessageBasedRenderer.prototype._setElementAttribute = function (renderer, renderElement, attributeName, attributeValue) {
            renderer.setElementAttribute(renderElement, attributeName, attributeValue);
        };
        MessageBasedRenderer.prototype._setBindingDebugInfo = function (renderer, renderElement, propertyName, propertyValue) {
            renderer.setBindingDebugInfo(renderElement, propertyName, propertyValue);
        };
        MessageBasedRenderer.prototype._setElementClass = function (renderer, renderElement, className, isAdd) {
            renderer.setElementClass(renderElement, className, isAdd);
        };
        MessageBasedRenderer.prototype._setElementStyle = function (renderer, renderElement, styleName, styleValue) {
            renderer.setElementStyle(renderElement, styleName, styleValue);
        };
        MessageBasedRenderer.prototype._invokeElementMethod = function (renderer, renderElement, methodName, args) {
            renderer.invokeElementMethod(renderElement, methodName, args);
        };
        MessageBasedRenderer.prototype._setText = function (renderer, renderNode, text) {
            renderer.setText(renderNode, text);
        };
        MessageBasedRenderer.prototype._listen = function (renderer, renderElement, eventName, unlistenId) {
            var _this = this;
            var unregisterCallback = renderer.listen(renderElement, eventName, function (event /** TODO #9100 */) {
                return _this._eventDispatcher.dispatchRenderEvent(renderElement, null, eventName, event);
            });
            this._renderStore.store(unregisterCallback, unlistenId);
        };
        MessageBasedRenderer.prototype._listenGlobal = function (renderer, eventTarget, eventName, unlistenId) {
            var _this = this;
            var unregisterCallback = renderer.listenGlobal(eventTarget, eventName, function (event /** TODO #9100 */) {
                return _this._eventDispatcher.dispatchRenderEvent(null, eventTarget, eventName, event);
            });
            this._renderStore.store(unregisterCallback, unlistenId);
        };
        MessageBasedRenderer.prototype._listenDone = function (renderer, unlistenCallback) {
            unlistenCallback();
        };
        /** @nocollapse */
        MessageBasedRenderer.decorators = [{ type: core_1.Injectable }];
        /** @nocollapse */
        MessageBasedRenderer.ctorParameters = [{ type: service_message_broker_1.ServiceMessageBrokerFactory }, { type: message_bus_1.MessageBus }, { type: serializer_1.Serializer }, { type: render_store_1.RenderStore }, { type: core_1.RootRenderer }];
        return MessageBasedRenderer;
    }();
    exports.MessageBasedRenderer = MessageBasedRenderer;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/worker_render.js', ['@angular/core', '../core_private', './browser', './browser/browser_adapter', './browser/testability', './dom/animation_driver', './dom/dom_adapter', './dom/dom_renderer', './dom/dom_tokens', './dom/events/dom_events', './dom/events/event_manager', './dom/events/hammer_gestures', './dom/events/key_events', './dom/shared_styles_host', './facade/exceptions', './web_workers/shared/api', './web_workers/shared/client_message_broker', './web_workers/shared/message_bus', './web_workers/shared/post_message_bus', './web_workers/shared/render_store', './web_workers/shared/serializer', './web_workers/shared/service_message_broker', './web_workers/ui/renderer', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var core_private_1 = $__require('../core_private');
    var browser_1 = $__require('./browser');
    var browser_adapter_1 = $__require('./browser/browser_adapter');
    var testability_1 = $__require('./browser/testability');
    var animation_driver_1 = $__require('./dom/animation_driver');
    var dom_adapter_1 = $__require('./dom/dom_adapter');
    var dom_renderer_1 = $__require('./dom/dom_renderer');
    var dom_tokens_1 = $__require('./dom/dom_tokens');
    var dom_events_1 = $__require('./dom/events/dom_events');
    var event_manager_1 = $__require('./dom/events/event_manager');
    var hammer_gestures_1 = $__require('./dom/events/hammer_gestures');
    var key_events_1 = $__require('./dom/events/key_events');
    var shared_styles_host_1 = $__require('./dom/shared_styles_host');
    var exceptions_1 = $__require('./facade/exceptions');
    var api_1 = $__require('./web_workers/shared/api');
    var client_message_broker_1 = $__require('./web_workers/shared/client_message_broker');
    var message_bus_1 = $__require('./web_workers/shared/message_bus');
    var post_message_bus_1 = $__require('./web_workers/shared/post_message_bus');
    var render_store_1 = $__require('./web_workers/shared/render_store');
    var serializer_1 = $__require('./web_workers/shared/serializer');
    var service_message_broker_1 = $__require('./web_workers/shared/service_message_broker');
    var renderer_1 = $__require('./web_workers/ui/renderer');
    var WebWorkerInstance = function () {
        function WebWorkerInstance() {}
        /** @internal */
        WebWorkerInstance.prototype.init = function (worker, bus) {
            this.worker = worker;
            this.bus = bus;
        };
        /** @nocollapse */
        WebWorkerInstance.decorators = [{ type: core_1.Injectable }];
        return WebWorkerInstance;
    }();
    exports.WebWorkerInstance = WebWorkerInstance;
    /**
     * @experimental WebWorker support is currently experimental.
     */
    exports.WORKER_SCRIPT = new core_1.OpaqueToken('WebWorkerScript');
    /**
     * A multiple providers used to automatically call the `start()` method after the service is
     * created.
     *
     * TODO(vicb): create an interface for startable services to implement
     * @experimental WebWorker support is currently experimental.
     */
    exports.WORKER_UI_STARTABLE_MESSAGING_SERVICE = new core_1.OpaqueToken('WorkerRenderStartableMsgService');
    /**
     * @experimental WebWorker support is currently experimental.
     */
    exports._WORKER_UI_PLATFORM_PROVIDERS = [{ provide: core_1.NgZone, useFactory: createNgZone, deps: [] }, renderer_1.MessageBasedRenderer, { provide: exports.WORKER_UI_STARTABLE_MESSAGING_SERVICE, useExisting: renderer_1.MessageBasedRenderer, multi: true }, browser_1.BROWSER_SANITIZATION_PROVIDERS, { provide: core_1.ExceptionHandler, useFactory: _exceptionHandler, deps: [] }, { provide: dom_tokens_1.DOCUMENT, useFactory: _document, deps: [] },
    // TODO(jteplitz602): Investigate if we definitely need EVENT_MANAGER on the render thread
    // #5298
    { provide: event_manager_1.EVENT_MANAGER_PLUGINS, useClass: dom_events_1.DomEventsPlugin, multi: true }, { provide: event_manager_1.EVENT_MANAGER_PLUGINS, useClass: key_events_1.KeyEventsPlugin, multi: true }, { provide: event_manager_1.EVENT_MANAGER_PLUGINS, useClass: hammer_gestures_1.HammerGesturesPlugin, multi: true }, { provide: hammer_gestures_1.HAMMER_GESTURE_CONFIG, useClass: hammer_gestures_1.HammerGestureConfig }, { provide: dom_renderer_1.DomRootRenderer, useClass: dom_renderer_1.DomRootRenderer_ }, { provide: core_1.RootRenderer, useExisting: dom_renderer_1.DomRootRenderer }, { provide: shared_styles_host_1.SharedStylesHost, useExisting: shared_styles_host_1.DomSharedStylesHost }, { provide: service_message_broker_1.ServiceMessageBrokerFactory, useClass: service_message_broker_1.ServiceMessageBrokerFactory_ }, { provide: client_message_broker_1.ClientMessageBrokerFactory, useClass: client_message_broker_1.ClientMessageBrokerFactory_ }, { provide: animation_driver_1.AnimationDriver, useFactory: _resolveDefaultAnimationDriver }, serializer_1.Serializer, { provide: api_1.ON_WEB_WORKER, useValue: false }, render_store_1.RenderStore, shared_styles_host_1.DomSharedStylesHost, core_1.Testability, event_manager_1.EventManager, WebWorkerInstance, {
        provide: core_1.PLATFORM_INITIALIZER,
        useFactory: initWebWorkerRenderPlatform,
        multi: true,
        deps: [core_1.Injector]
    }, { provide: message_bus_1.MessageBus, useFactory: messageBusFactory, deps: [WebWorkerInstance] }];
    /**
     * * @deprecated Use `platformWorkerUi()` or create a custom platform factory via
     * `createPlatformFactory(platformWorkerUi, ...)`
     */
    exports.WORKER_UI_PLATFORM_PROVIDERS = [core_1.PLATFORM_COMMON_PROVIDERS, exports._WORKER_UI_PLATFORM_PROVIDERS];
    /**
     * @deprecated Worker UI only has a platform but no application
     */
    exports.WORKER_UI_APPLICATION_PROVIDERS = [];
    function initializeGenericWorkerRenderer(injector) {
        var bus = injector.get(message_bus_1.MessageBus);
        var zone = injector.get(core_1.NgZone);
        bus.attachToZone(zone);
        // initialize message services after the bus has been created
        var services = injector.get(exports.WORKER_UI_STARTABLE_MESSAGING_SERVICE);
        zone.runGuarded(function () {
            services.forEach(function (svc) {
                svc.start();
            });
        });
    }
    function messageBusFactory(instance) {
        return instance.bus;
    }
    function initWebWorkerRenderPlatform(injector) {
        return function () {
            browser_adapter_1.BrowserDomAdapter.makeCurrent();
            core_private_1.wtfInit();
            testability_1.BrowserGetTestability.init();
            var scriptUri;
            try {
                scriptUri = injector.get(exports.WORKER_SCRIPT);
            } catch (e) {
                throw new exceptions_1.BaseException('You must provide your WebWorker\'s initialization script with the WORKER_SCRIPT token');
            }
            var instance = injector.get(WebWorkerInstance);
            spawnWebWorker(scriptUri, instance);
            initializeGenericWorkerRenderer(injector);
        };
    }
    /**
     * @experimental WebWorker support is currently experimental.
     */
    exports.platformWorkerUi = core_1.createPlatformFactory(core_1.platformCore, 'workerUi', exports._WORKER_UI_PLATFORM_PROVIDERS);
    /**
     * @deprecated Use {@link platformWorkerUi} instead
     */
    exports.workerUiPlatform = exports.platformWorkerUi;
    function _exceptionHandler() {
        return new core_1.ExceptionHandler(dom_adapter_1.getDOM());
    }
    function _document() {
        return dom_adapter_1.getDOM().defaultDoc();
    }
    function createNgZone() {
        return new core_1.NgZone({ enableLongStackTrace: core_1.isDevMode() });
    }
    /**
     * Spawns a new class and initializes the WebWorkerInstance
     */
    function spawnWebWorker(uri, instance) {
        var webWorker = new Worker(uri);
        var sink = new post_message_bus_1.PostMessageBusSink(webWorker);
        var source = new post_message_bus_1.PostMessageBusSource(webWorker);
        var bus = new post_message_bus_1.PostMessageBus(sink, source);
        instance.init(webWorker, bus);
    }
    function _resolveDefaultAnimationDriver() {
        // web workers have not been tested or configured to
        // work with animations just yet...
        return animation_driver_1.AnimationDriver.NOOP;
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/web_workers/shared/api.js', ['@angular/core', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var core_1 = $__require('@angular/core');
  exports.ON_WEB_WORKER = new core_1.OpaqueToken('WebWorker.onWebWorker');
  

  return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/facade/async.js', ['rxjs/Subject', 'rxjs/Observable', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subject_1 = $__require('rxjs/Subject');
    var Observable_1 = $__require('rxjs/Observable');
    exports.Observable = Observable_1.Observable;
    var Subject_2 = $__require('rxjs/Subject');
    exports.Subject = Subject_2.Subject;
    /**
     * Use by directives and components to emit custom Events.
     *
     * ### Examples
     *
     * In the following example, `Zippy` alternatively emits `open` and `close` events when its
     * title gets clicked:
     *
     * ```
     * @Component({
     *   selector: 'zippy',
     *   template: `
     *   <div class="zippy">
     *     <div (click)="toggle()">Toggle</div>
     *     <div [hidden]="!visible">
     *       <ng-content></ng-content>
     *     </div>
     *  </div>`})
     * export class Zippy {
     *   visible: boolean = true;
     *   @Output() open: EventEmitter<any> = new EventEmitter();
     *   @Output() close: EventEmitter<any> = new EventEmitter();
     *
     *   toggle() {
     *     this.visible = !this.visible;
     *     if (this.visible) {
     *       this.open.emit(null);
     *     } else {
     *       this.close.emit(null);
     *     }
     *   }
     * }
     * ```
     *
     * The events payload can be accessed by the parameter `$event` on the components output event
     * handler:
     *
     * ```
     * <zippy (open)="onOpen($event)" (close)="onClose($event)"></zippy>
     * ```
     *
     * Uses Rx.Observable but provides an adapter to make it work as specified here:
     * https://github.com/jhusain/observable-spec
     *
     * Once a reference implementation of the spec is available, switch to it.
     * @stable
     */
    var EventEmitter = function (_super) {
        __extends(EventEmitter, _super);
        /**
         * Creates an instance of [EventEmitter], which depending on [isAsync],
         * delivers events synchronously or asynchronously.
         */
        function EventEmitter(isAsync) {
            if (isAsync === void 0) {
                isAsync = false;
            }
            _super.call(this);
            this.__isAsync = isAsync;
        }
        EventEmitter.prototype.emit = function (value) {
            _super.prototype.next.call(this, value);
        };
        /**
         * @deprecated - use .emit(value) instead
         */
        EventEmitter.prototype.next = function (value) {
            _super.prototype.next.call(this, value);
        };
        EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {
            var schedulerFn;
            var errorFn = function (err) {
                return null;
            };
            var completeFn = function () {
                return null;
            };
            if (generatorOrNext && typeof generatorOrNext === 'object') {
                schedulerFn = this.__isAsync ? function (value /** TODO #9100 */) {
                    setTimeout(function () {
                        return generatorOrNext.next(value);
                    });
                } : function (value /** TODO #9100 */) {
                    generatorOrNext.next(value);
                };
                if (generatorOrNext.error) {
                    errorFn = this.__isAsync ? function (err) {
                        setTimeout(function () {
                            return generatorOrNext.error(err);
                        });
                    } : function (err) {
                        generatorOrNext.error(err);
                    };
                }
                if (generatorOrNext.complete) {
                    completeFn = this.__isAsync ? function () {
                        setTimeout(function () {
                            return generatorOrNext.complete();
                        });
                    } : function () {
                        generatorOrNext.complete();
                    };
                }
            } else {
                schedulerFn = this.__isAsync ? function (value /** TODO #9100 */) {
                    setTimeout(function () {
                        return generatorOrNext(value);
                    });
                } : function (value /** TODO #9100 */) {
                    generatorOrNext(value);
                };
                if (error) {
                    errorFn = this.__isAsync ? function (err) {
                        setTimeout(function () {
                            return error(err);
                        });
                    } : function (err) {
                        error(err);
                    };
                }
                if (complete) {
                    completeFn = this.__isAsync ? function () {
                        setTimeout(function () {
                            return complete();
                        });
                    } : function () {
                        complete();
                    };
                }
            }
            return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
        };
        return EventEmitter;
    }(Subject_1.Subject);
    exports.EventEmitter = EventEmitter;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/web_workers/shared/post_message_bus.js', ['@angular/core', '../../facade/async', '../../facade/collection', '../../facade/exceptions', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var async_1 = $__require('../../facade/async');
    var collection_1 = $__require('../../facade/collection');
    var exceptions_1 = $__require('../../facade/exceptions');
    var PostMessageBusSink = function () {
        function PostMessageBusSink(_postMessageTarget) {
            this._postMessageTarget = _postMessageTarget;
            this._channels = collection_1.StringMapWrapper.create();
            this._messageBuffer = [];
        }
        PostMessageBusSink.prototype.attachToZone = function (zone) {
            var _this = this;
            this._zone = zone;
            this._zone.runOutsideAngular(function () {
                _this._zone.onStable.subscribe({ next: function () {
                        _this._handleOnEventDone();
                    } });
            });
        };
        PostMessageBusSink.prototype.initChannel = function (channel, runInZone) {
            var _this = this;
            if (runInZone === void 0) {
                runInZone = true;
            }
            if (collection_1.StringMapWrapper.contains(this._channels, channel)) {
                throw new exceptions_1.BaseException(channel + " has already been initialized");
            }
            var emitter = new async_1.EventEmitter(false);
            var channelInfo = new _Channel(emitter, runInZone);
            this._channels[channel] = channelInfo;
            emitter.subscribe(function (data) {
                var message = { channel: channel, message: data };
                if (runInZone) {
                    _this._messageBuffer.push(message);
                } else {
                    _this._sendMessages([message]);
                }
            });
        };
        PostMessageBusSink.prototype.to = function (channel) {
            if (collection_1.StringMapWrapper.contains(this._channels, channel)) {
                return this._channels[channel].emitter;
            } else {
                throw new exceptions_1.BaseException(channel + " is not set up. Did you forget to call initChannel?");
            }
        };
        PostMessageBusSink.prototype._handleOnEventDone = function () {
            if (this._messageBuffer.length > 0) {
                this._sendMessages(this._messageBuffer);
                this._messageBuffer = [];
            }
        };
        PostMessageBusSink.prototype._sendMessages = function (messages) {
            this._postMessageTarget.postMessage(messages);
        };
        return PostMessageBusSink;
    }();
    exports.PostMessageBusSink = PostMessageBusSink;
    var PostMessageBusSource = function () {
        function PostMessageBusSource(eventTarget) {
            var _this = this;
            this._channels = collection_1.StringMapWrapper.create();
            if (eventTarget) {
                eventTarget.addEventListener('message', function (ev) {
                    return _this._handleMessages(ev);
                });
            } else {
                // if no eventTarget is given we assume we're in a WebWorker and listen on the global scope
                var workerScope = self;
                workerScope.addEventListener('message', function (ev) {
                    return _this._handleMessages(ev);
                });
            }
        }
        PostMessageBusSource.prototype.attachToZone = function (zone) {
            this._zone = zone;
        };
        PostMessageBusSource.prototype.initChannel = function (channel, runInZone) {
            if (runInZone === void 0) {
                runInZone = true;
            }
            if (collection_1.StringMapWrapper.contains(this._channels, channel)) {
                throw new exceptions_1.BaseException(channel + " has already been initialized");
            }
            var emitter = new async_1.EventEmitter(false);
            var channelInfo = new _Channel(emitter, runInZone);
            this._channels[channel] = channelInfo;
        };
        PostMessageBusSource.prototype.from = function (channel) {
            if (collection_1.StringMapWrapper.contains(this._channels, channel)) {
                return this._channels[channel].emitter;
            } else {
                throw new exceptions_1.BaseException(channel + " is not set up. Did you forget to call initChannel?");
            }
        };
        PostMessageBusSource.prototype._handleMessages = function (ev) {
            var messages = ev.data;
            for (var i = 0; i < messages.length; i++) {
                this._handleMessage(messages[i]);
            }
        };
        PostMessageBusSource.prototype._handleMessage = function (data) {
            var channel = data.channel;
            if (collection_1.StringMapWrapper.contains(this._channels, channel)) {
                var channelInfo = this._channels[channel];
                if (channelInfo.runInZone) {
                    this._zone.run(function () {
                        channelInfo.emitter.emit(data.message);
                    });
                } else {
                    channelInfo.emitter.emit(data.message);
                }
            }
        };
        return PostMessageBusSource;
    }();
    exports.PostMessageBusSource = PostMessageBusSource;
    var PostMessageBus = function () {
        function PostMessageBus(sink, source) {
            this.sink = sink;
            this.source = source;
        }
        PostMessageBus.prototype.attachToZone = function (zone) {
            this.source.attachToZone(zone);
            this.sink.attachToZone(zone);
        };
        PostMessageBus.prototype.initChannel = function (channel, runInZone) {
            if (runInZone === void 0) {
                runInZone = true;
            }
            this.source.initChannel(channel, runInZone);
            this.sink.initChannel(channel, runInZone);
        };
        PostMessageBus.prototype.from = function (channel) {
            return this.source.from(channel);
        };
        PostMessageBus.prototype.to = function (channel) {
            return this.sink.to(channel);
        };
        /** @nocollapse */
        PostMessageBus.decorators = [{ type: core_1.Injectable }];
        /** @nocollapse */
        PostMessageBus.ctorParameters = [{ type: PostMessageBusSink }, { type: PostMessageBusSource }];
        return PostMessageBus;
    }();
    exports.PostMessageBus = PostMessageBus;
    /**
     * Helper class that wraps a channel's {@link EventEmitter} and
     * keeps track of if it should run in the zone.
     */
    var _Channel = function () {
        function _Channel(emitter, runInZone) {
            this.emitter = emitter;
            this.runInZone = runInZone;
        }
        return _Channel;
    }();
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/web_workers/shared/service_message_broker.js', ['@angular/core', '../../facade/collection', '../../facade/lang', '../shared/message_bus', '../shared/serializer', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var core_1 = $__require('@angular/core');
    var collection_1 = $__require('../../facade/collection');
    var lang_1 = $__require('../../facade/lang');
    var message_bus_1 = $__require('../shared/message_bus');
    var serializer_1 = $__require('../shared/serializer');
    /**
     * @experimental WebWorker support in Angular is currently experimental.
     */
    var ServiceMessageBrokerFactory = function () {
        function ServiceMessageBrokerFactory() {}
        return ServiceMessageBrokerFactory;
    }();
    exports.ServiceMessageBrokerFactory = ServiceMessageBrokerFactory;
    var ServiceMessageBrokerFactory_ = function (_super) {
        __extends(ServiceMessageBrokerFactory_, _super);
        function ServiceMessageBrokerFactory_(_messageBus, _serializer) {
            _super.call(this);
            this._messageBus = _messageBus;
            this._serializer = _serializer;
        }
        ServiceMessageBrokerFactory_.prototype.createMessageBroker = function (channel, runInZone) {
            if (runInZone === void 0) {
                runInZone = true;
            }
            this._messageBus.initChannel(channel, runInZone);
            return new ServiceMessageBroker_(this._messageBus, this._serializer, channel);
        };
        /** @nocollapse */
        ServiceMessageBrokerFactory_.decorators = [{ type: core_1.Injectable }];
        /** @nocollapse */
        ServiceMessageBrokerFactory_.ctorParameters = [{ type: message_bus_1.MessageBus }, { type: serializer_1.Serializer }];
        return ServiceMessageBrokerFactory_;
    }(ServiceMessageBrokerFactory);
    exports.ServiceMessageBrokerFactory_ = ServiceMessageBrokerFactory_;
    /**
     * Helper class for UIComponents that allows components to register methods.
     * If a registered method message is received from the broker on the worker,
     * the UIMessageBroker deserializes its arguments and calls the registered method.
     * If that method returns a promise, the UIMessageBroker returns the result to the worker.
     *
     * @experimental WebWorker support in Angular is currently experimental.
     */
    var ServiceMessageBroker = function () {
        function ServiceMessageBroker() {}
        return ServiceMessageBroker;
    }();
    exports.ServiceMessageBroker = ServiceMessageBroker;
    var ServiceMessageBroker_ = function (_super) {
        __extends(ServiceMessageBroker_, _super);
        function ServiceMessageBroker_(messageBus, _serializer, channel /** TODO #9100 */) {
            var _this = this;
            _super.call(this);
            this._serializer = _serializer;
            this.channel = channel;
            this._methods = new collection_1.Map();
            this._sink = messageBus.to(channel);
            var source = messageBus.from(channel);
            source.subscribe({ next: function (message) {
                    return _this._handleMessage(message);
                } });
        }
        ServiceMessageBroker_.prototype.registerMethod = function (methodName, signature, method, returnType) {
            var _this = this;
            this._methods.set(methodName, function (message) {
                var serializedArgs = message.args;
                var numArgs = signature === null ? 0 : signature.length;
                var deserializedArgs = collection_1.ListWrapper.createFixedSize(numArgs);
                for (var i = 0; i < numArgs; i++) {
                    var serializedArg = serializedArgs[i];
                    deserializedArgs[i] = _this._serializer.deserialize(serializedArg, signature[i]);
                }
                var promise = lang_1.FunctionWrapper.apply(method, deserializedArgs);
                if (lang_1.isPresent(returnType) && lang_1.isPresent(promise)) {
                    _this._wrapWebWorkerPromise(message.id, promise, returnType);
                }
            });
        };
        ServiceMessageBroker_.prototype._handleMessage = function (map) {
            var message = new ReceivedMessage(map);
            if (this._methods.has(message.method)) {
                this._methods.get(message.method)(message);
            }
        };
        ServiceMessageBroker_.prototype._wrapWebWorkerPromise = function (id, promise, type) {
            var _this = this;
            promise.then(function (result) {
                _this._sink.emit({ 'type': 'result', 'value': _this._serializer.serialize(result, type), 'id': id });
            });
        };
        return ServiceMessageBroker_;
    }(ServiceMessageBroker);
    exports.ServiceMessageBroker_ = ServiceMessageBroker_;
    /**
     * @experimental WebWorker support in Angular is currently experimental.
     */
    var ReceivedMessage = function () {
        function ReceivedMessage(data) {
            this.method = data['method'];
            this.args = data['args'];
            this.id = data['id'];
            this.type = data['type'];
        }
        return ReceivedMessage;
    }();
    exports.ReceivedMessage = ReceivedMessage;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/web_workers/shared/client_message_broker.js', ['@angular/core', '../../facade/collection', '../../facade/lang', './message_bus', './serializer', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var core_1 = $__require('@angular/core');
    var collection_1 = $__require('../../facade/collection');
    var lang_1 = $__require('../../facade/lang');
    var message_bus_1 = $__require('./message_bus');
    var serializer_1 = $__require('./serializer');
    /**
     * @experimental WebWorker support in Angular is experimental.
     */
    var ClientMessageBrokerFactory = function () {
        function ClientMessageBrokerFactory() {}
        return ClientMessageBrokerFactory;
    }();
    exports.ClientMessageBrokerFactory = ClientMessageBrokerFactory;
    var ClientMessageBrokerFactory_ = function (_super) {
        __extends(ClientMessageBrokerFactory_, _super);
        function ClientMessageBrokerFactory_(_messageBus, _serializer) {
            _super.call(this);
            this._messageBus = _messageBus;
            this._serializer = _serializer;
        }
        /**
         * Initializes the given channel and attaches a new {@link ClientMessageBroker} to it.
         */
        ClientMessageBrokerFactory_.prototype.createMessageBroker = function (channel, runInZone) {
            if (runInZone === void 0) {
                runInZone = true;
            }
            this._messageBus.initChannel(channel, runInZone);
            return new ClientMessageBroker_(this._messageBus, this._serializer, channel);
        };
        /** @nocollapse */
        ClientMessageBrokerFactory_.decorators = [{ type: core_1.Injectable }];
        /** @nocollapse */
        ClientMessageBrokerFactory_.ctorParameters = [{ type: message_bus_1.MessageBus }, { type: serializer_1.Serializer }];
        return ClientMessageBrokerFactory_;
    }(ClientMessageBrokerFactory);
    exports.ClientMessageBrokerFactory_ = ClientMessageBrokerFactory_;
    /**
     * @experimental WebWorker support in Angular is experimental.
     */
    var ClientMessageBroker = function () {
        function ClientMessageBroker() {}
        return ClientMessageBroker;
    }();
    exports.ClientMessageBroker = ClientMessageBroker;
    var ClientMessageBroker_ = function (_super) {
        __extends(ClientMessageBroker_, _super);
        function ClientMessageBroker_(messageBus, _serializer, channel /** TODO #9100 */) {
            var _this = this;
            _super.call(this);
            this.channel = channel;
            this._pending = new Map();
            this._sink = messageBus.to(channel);
            this._serializer = _serializer;
            var source = messageBus.from(channel);
            source.subscribe({ next: function (message) {
                    return _this._handleMessage(message);
                } });
        }
        ClientMessageBroker_.prototype._generateMessageId = function (name) {
            var time = lang_1.stringify(lang_1.DateWrapper.toMillis(lang_1.DateWrapper.now()));
            var iteration = 0;
            var id = name + time + lang_1.stringify(iteration);
            while (lang_1.isPresent(this._pending[id])) {
                id = "" + name + time + iteration;
                iteration++;
            }
            return id;
        };
        ClientMessageBroker_.prototype.runOnService = function (args, returnType) {
            var _this = this;
            var fnArgs = [];
            if (lang_1.isPresent(args.args)) {
                args.args.forEach(function (argument) {
                    if (argument.type != null) {
                        fnArgs.push(_this._serializer.serialize(argument.value, argument.type));
                    } else {
                        fnArgs.push(argument.value);
                    }
                });
            }
            var promise;
            var id = null;
            if (returnType != null) {
                var completer_1;
                promise = new Promise(function (resolve, reject) {
                    completer_1 = { resolve: resolve, reject: reject };
                });
                id = this._generateMessageId(args.method);
                this._pending.set(id, completer_1);
                promise.catch(function (err) {
                    lang_1.print(err);
                    completer_1.reject(err);
                });
                promise = promise.then(function (value) {
                    if (_this._serializer == null) {
                        return value;
                    } else {
                        return _this._serializer.deserialize(value, returnType);
                    }
                });
            } else {
                promise = null;
            }
            // TODO(jteplitz602): Create a class for these messages so we don't keep using StringMap #3685
            var message = { 'method': args.method, 'args': fnArgs };
            if (id != null) {
                message['id'] = id;
            }
            this._sink.emit(message);
            return promise;
        };
        ClientMessageBroker_.prototype._handleMessage = function (message) {
            var data = new MessageData(message);
            // TODO(jteplitz602): replace these strings with messaging constants #3685
            if (lang_1.StringWrapper.equals(data.type, 'result') || lang_1.StringWrapper.equals(data.type, 'error')) {
                var id = data.id;
                if (this._pending.has(id)) {
                    if (lang_1.StringWrapper.equals(data.type, 'result')) {
                        this._pending.get(id).resolve(data.value);
                    } else {
                        this._pending.get(id).reject(data.value);
                    }
                    this._pending.delete(id);
                }
            }
        };
        return ClientMessageBroker_;
    }(ClientMessageBroker);
    exports.ClientMessageBroker_ = ClientMessageBroker_;
    var MessageData = function () {
        function MessageData(data) {
            this.type = collection_1.StringMapWrapper.get(data, 'type');
            this.id = this._getValueIfPresent(data, 'id');
            this.value = this._getValueIfPresent(data, 'value');
        }
        /**
         * Returns the value from the StringMap if present. Otherwise returns null
         * @internal
         */
        MessageData.prototype._getValueIfPresent = function (data, key) {
            if (collection_1.StringMapWrapper.contains(data, key)) {
                return collection_1.StringMapWrapper.get(data, key);
            } else {
                return null;
            }
        };
        return MessageData;
    }();
    /**
     * @experimental WebWorker support in Angular is experimental.
     */
    var FnArg = function () {
        function FnArg(value /** TODO #9100 */, type) {
            this.value = value;
            this.type = type;
        }
        return FnArg;
    }();
    exports.FnArg = FnArg;
    /**
     * @experimental WebWorker support in Angular is experimental.
     */
    var UiArguments = function () {
        function UiArguments(method, args) {
            this.method = method;
            this.args = args;
        }
        return UiArguments;
    }();
    exports.UiArguments = UiArguments;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/platform-browser@2.0.0-rc.5/src/web_workers/shared/message_bus.js", ["reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";
  /**
   * Message Bus is a low level API used to communicate between the UI and the background.
   * Communication is based on a channel abstraction. Messages published in a
   * given channel to one MessageBusSink are received on the same channel
   * by the corresponding MessageBusSource.
   *
   * @experimental WebWorker support in Angular is currenlty experimental.
   */

  var define,
      global = this || self,
      GLOBAL = global;
  var MessageBus = function () {
    function MessageBus() {}
    return MessageBus;
  }();
  exports.MessageBus = MessageBus;
  

  return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/web_workers/shared/messaging_api.js', ['reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";
  /**
   * All channels used by angular's WebWorker components are listed here.
   * You should not use these channels in your application code.
   */

  var define,
      global = this || self,
      GLOBAL = global;
  exports.RENDERER_CHANNEL = 'ng-Renderer';
  exports.EVENT_CHANNEL = 'ng-Events';
  exports.ROUTER_CHANNEL = 'ng-Router';
  

  return module.exports;
});
System.registerDynamic("npm:@angular/platform-browser@2.0.0-rc.5/src/web_workers/shared/render_store.js", ["@angular/core", "reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require("@angular/core");
    var RenderStore = function () {
        function RenderStore() {
            this._nextIndex = 0;
            this._lookupById = new Map();
            this._lookupByObject = new Map();
        }
        RenderStore.prototype.allocateId = function () {
            return this._nextIndex++;
        };
        RenderStore.prototype.store = function (obj, id) {
            this._lookupById.set(id, obj);
            this._lookupByObject.set(obj, id);
        };
        RenderStore.prototype.remove = function (obj) {
            var index = this._lookupByObject.get(obj);
            this._lookupByObject.delete(obj);
            this._lookupById.delete(index);
        };
        RenderStore.prototype.deserialize = function (id) {
            if (id == null) {
                return null;
            }
            if (!this._lookupById.has(id)) {
                return null;
            }
            return this._lookupById.get(id);
        };
        RenderStore.prototype.serialize = function (obj) {
            if (obj == null) {
                return null;
            }
            return this._lookupByObject.get(obj);
        };
        /** @nocollapse */
        RenderStore.decorators = [{ type: core_1.Injectable }];
        /** @nocollapse */
        RenderStore.ctorParameters = [];
        return RenderStore;
    }();
    exports.RenderStore = RenderStore;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/platform-browser@2.0.0-rc.5/src/web_workers/shared/serialized_types.js", ["reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";
    // This file contains interface versions of browser types that can be serialized to Plain Old
    // JavaScript Objects

    var define,
        global = this || self,
        GLOBAL = global;
    var LocationType = function () {
        function LocationType(href, protocol, host, hostname, port, pathname, search, hash, origin) {
            this.href = href;
            this.protocol = protocol;
            this.host = host;
            this.hostname = hostname;
            this.port = port;
            this.pathname = pathname;
            this.search = search;
            this.hash = hash;
            this.origin = origin;
        }
        return LocationType;
    }();
    exports.LocationType = LocationType;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/web_workers/shared/serializer.js', ['@angular/core', '../../../core_private', '../../facade/exceptions', '../../facade/lang', './render_store', './serialized_types', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var core_private_1 = $__require('../../../core_private');
    var exceptions_1 = $__require('../../facade/exceptions');
    var lang_1 = $__require('../../facade/lang');
    var render_store_1 = $__require('./render_store');
    var serialized_types_1 = $__require('./serialized_types');
    // PRIMITIVE is any type that does not need to be serialized (string, number, boolean)
    // We set it to String so that it is considered a Type.
    /**
     * @experimental WebWorker support in Angular is currently experimental.
     */
    exports.PRIMITIVE = String;
    var Serializer = function () {
        function Serializer(_renderStore) {
            this._renderStore = _renderStore;
        }
        Serializer.prototype.serialize = function (obj, type) {
            var _this = this;
            if (!lang_1.isPresent(obj)) {
                return null;
            }
            if (lang_1.isArray(obj)) {
                return obj.map(function (v) {
                    return _this.serialize(v, type);
                });
            }
            if (type == exports.PRIMITIVE) {
                return obj;
            }
            if (type == RenderStoreObject) {
                return this._renderStore.serialize(obj);
            } else if (type === core_1.RenderComponentType) {
                return this._serializeRenderComponentType(obj);
            } else if (type === core_1.ViewEncapsulation) {
                return lang_1.serializeEnum(obj);
            } else if (type === serialized_types_1.LocationType) {
                return this._serializeLocation(obj);
            } else {
                throw new exceptions_1.BaseException('No serializer for ' + type.toString());
            }
        };
        Serializer.prototype.deserialize = function (map, type, data) {
            var _this = this;
            if (!lang_1.isPresent(map)) {
                return null;
            }
            if (lang_1.isArray(map)) {
                var obj = [];
                map.forEach(function (val) {
                    return obj.push(_this.deserialize(val, type, data));
                });
                return obj;
            }
            if (type == exports.PRIMITIVE) {
                return map;
            }
            if (type == RenderStoreObject) {
                return this._renderStore.deserialize(map);
            } else if (type === core_1.RenderComponentType) {
                return this._deserializeRenderComponentType(map);
            } else if (type === core_1.ViewEncapsulation) {
                return core_private_1.VIEW_ENCAPSULATION_VALUES[map];
            } else if (type === serialized_types_1.LocationType) {
                return this._deserializeLocation(map);
            } else {
                throw new exceptions_1.BaseException('No deserializer for ' + type.toString());
            }
        };
        Serializer.prototype._serializeLocation = function (loc) {
            return {
                'href': loc.href,
                'protocol': loc.protocol,
                'host': loc.host,
                'hostname': loc.hostname,
                'port': loc.port,
                'pathname': loc.pathname,
                'search': loc.search,
                'hash': loc.hash,
                'origin': loc.origin
            };
        };
        Serializer.prototype._deserializeLocation = function (loc) {
            return new serialized_types_1.LocationType(loc['href'], loc['protocol'], loc['host'], loc['hostname'], loc['port'], loc['pathname'], loc['search'], loc['hash'], loc['origin']);
        };
        Serializer.prototype._serializeRenderComponentType = function (obj) {
            return {
                'id': obj.id,
                'templateUrl': obj.templateUrl,
                'slotCount': obj.slotCount,
                'encapsulation': this.serialize(obj.encapsulation, core_1.ViewEncapsulation),
                'styles': this.serialize(obj.styles, exports.PRIMITIVE)
            };
        };
        Serializer.prototype._deserializeRenderComponentType = function (map) {
            return new core_1.RenderComponentType(map['id'], map['templateUrl'], map['slotCount'], this.deserialize(map['encapsulation'], core_1.ViewEncapsulation), this.deserialize(map['styles'], exports.PRIMITIVE), {});
        };
        /** @nocollapse */
        Serializer.decorators = [{ type: core_1.Injectable }];
        /** @nocollapse */
        Serializer.ctorParameters = [{ type: render_store_1.RenderStore }];
        return Serializer;
    }();
    exports.Serializer = Serializer;
    var RenderStoreObject = function () {
        function RenderStoreObject() {}
        return RenderStoreObject;
    }();
    exports.RenderStoreObject = RenderStoreObject;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/platform-browser@2.0.0-rc.5/src/web_workers/worker/event_deserializer.js", ["reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";
  // no deserialization is necessary in TS.
  // This is only here to match dart interface

  var define,
      global = this || self,
      GLOBAL = global;
  function deserializeGenericEvent(serializedEvent) {
    return serializedEvent;
  }
  exports.deserializeGenericEvent = deserializeGenericEvent;
  

  return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/web_workers/worker/renderer.js', ['@angular/core', '../../facade/collection', '../../facade/lang', '../shared/client_message_broker', '../shared/message_bus', '../shared/messaging_api', '../shared/render_store', '../shared/serializer', './event_deserializer', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var collection_1 = $__require('../../facade/collection');
    var lang_1 = $__require('../../facade/lang');
    var client_message_broker_1 = $__require('../shared/client_message_broker');
    var message_bus_1 = $__require('../shared/message_bus');
    var messaging_api_1 = $__require('../shared/messaging_api');
    var render_store_1 = $__require('../shared/render_store');
    var serializer_1 = $__require('../shared/serializer');
    var event_deserializer_1 = $__require('./event_deserializer');
    var WebWorkerRootRenderer = function () {
        function WebWorkerRootRenderer(messageBrokerFactory, bus, _serializer, _renderStore) {
            var _this = this;
            this._serializer = _serializer;
            this._renderStore = _renderStore;
            this.globalEvents = new NamedEventEmitter();
            this._componentRenderers = new Map();
            this._messageBroker = messageBrokerFactory.createMessageBroker(messaging_api_1.RENDERER_CHANNEL);
            bus.initChannel(messaging_api_1.EVENT_CHANNEL);
            var source = bus.from(messaging_api_1.EVENT_CHANNEL);
            source.subscribe({ next: function (message) {
                    return _this._dispatchEvent(message);
                } });
        }
        WebWorkerRootRenderer.prototype._dispatchEvent = function (message) {
            var eventName = message['eventName'];
            var target = message['eventTarget'];
            var event = event_deserializer_1.deserializeGenericEvent(message['event']);
            if (lang_1.isPresent(target)) {
                this.globalEvents.dispatchEvent(eventNameWithTarget(target, eventName), event);
            } else {
                var element = this._serializer.deserialize(message['element'], serializer_1.RenderStoreObject);
                element.events.dispatchEvent(eventName, event);
            }
        };
        WebWorkerRootRenderer.prototype.renderComponent = function (componentType) {
            var result = this._componentRenderers.get(componentType.id);
            if (lang_1.isBlank(result)) {
                result = new WebWorkerRenderer(this, componentType);
                this._componentRenderers.set(componentType.id, result);
                var id = this._renderStore.allocateId();
                this._renderStore.store(result, id);
                this.runOnService('renderComponent', [new client_message_broker_1.FnArg(componentType, core_1.RenderComponentType), new client_message_broker_1.FnArg(result, serializer_1.RenderStoreObject)]);
            }
            return result;
        };
        WebWorkerRootRenderer.prototype.runOnService = function (fnName, fnArgs) {
            var args = new client_message_broker_1.UiArguments(fnName, fnArgs);
            this._messageBroker.runOnService(args, null);
        };
        WebWorkerRootRenderer.prototype.allocateNode = function () {
            var result = new WebWorkerRenderNode();
            var id = this._renderStore.allocateId();
            this._renderStore.store(result, id);
            return result;
        };
        WebWorkerRootRenderer.prototype.allocateId = function () {
            return this._renderStore.allocateId();
        };
        WebWorkerRootRenderer.prototype.destroyNodes = function (nodes) {
            for (var i = 0; i < nodes.length; i++) {
                this._renderStore.remove(nodes[i]);
            }
        };
        /** @nocollapse */
        WebWorkerRootRenderer.decorators = [{ type: core_1.Injectable }];
        /** @nocollapse */
        WebWorkerRootRenderer.ctorParameters = [{ type: client_message_broker_1.ClientMessageBrokerFactory }, { type: message_bus_1.MessageBus }, { type: serializer_1.Serializer }, { type: render_store_1.RenderStore }];
        return WebWorkerRootRenderer;
    }();
    exports.WebWorkerRootRenderer = WebWorkerRootRenderer;
    var WebWorkerRenderer = function () {
        function WebWorkerRenderer(_rootRenderer, _componentType) {
            this._rootRenderer = _rootRenderer;
            this._componentType = _componentType;
        }
        WebWorkerRenderer.prototype._runOnService = function (fnName, fnArgs) {
            var fnArgsWithRenderer = [new client_message_broker_1.FnArg(this, serializer_1.RenderStoreObject)].concat(fnArgs);
            this._rootRenderer.runOnService(fnName, fnArgsWithRenderer);
        };
        WebWorkerRenderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) {
            var node = this._rootRenderer.allocateNode();
            this._runOnService('selectRootElement', [new client_message_broker_1.FnArg(selectorOrNode, null), new client_message_broker_1.FnArg(node, serializer_1.RenderStoreObject)]);
            return node;
        };
        WebWorkerRenderer.prototype.createElement = function (parentElement, name, debugInfo) {
            var node = this._rootRenderer.allocateNode();
            this._runOnService('createElement', [new client_message_broker_1.FnArg(parentElement, serializer_1.RenderStoreObject), new client_message_broker_1.FnArg(name, null), new client_message_broker_1.FnArg(node, serializer_1.RenderStoreObject)]);
            return node;
        };
        WebWorkerRenderer.prototype.createViewRoot = function (hostElement) {
            var viewRoot = this._componentType.encapsulation === core_1.ViewEncapsulation.Native ? this._rootRenderer.allocateNode() : hostElement;
            this._runOnService('createViewRoot', [new client_message_broker_1.FnArg(hostElement, serializer_1.RenderStoreObject), new client_message_broker_1.FnArg(viewRoot, serializer_1.RenderStoreObject)]);
            return viewRoot;
        };
        WebWorkerRenderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) {
            var node = this._rootRenderer.allocateNode();
            this._runOnService('createTemplateAnchor', [new client_message_broker_1.FnArg(parentElement, serializer_1.RenderStoreObject), new client_message_broker_1.FnArg(node, serializer_1.RenderStoreObject)]);
            return node;
        };
        WebWorkerRenderer.prototype.createText = function (parentElement, value, debugInfo) {
            var node = this._rootRenderer.allocateNode();
            this._runOnService('createText', [new client_message_broker_1.FnArg(parentElement, serializer_1.RenderStoreObject), new client_message_broker_1.FnArg(value, null), new client_message_broker_1.FnArg(node, serializer_1.RenderStoreObject)]);
            return node;
        };
        WebWorkerRenderer.prototype.projectNodes = function (parentElement, nodes) {
            this._runOnService('projectNodes', [new client_message_broker_1.FnArg(parentElement, serializer_1.RenderStoreObject), new client_message_broker_1.FnArg(nodes, serializer_1.RenderStoreObject)]);
        };
        WebWorkerRenderer.prototype.attachViewAfter = function (node, viewRootNodes) {
            this._runOnService('attachViewAfter', [new client_message_broker_1.FnArg(node, serializer_1.RenderStoreObject), new client_message_broker_1.FnArg(viewRootNodes, serializer_1.RenderStoreObject)]);
        };
        WebWorkerRenderer.prototype.detachView = function (viewRootNodes) {
            this._runOnService('detachView', [new client_message_broker_1.FnArg(viewRootNodes, serializer_1.RenderStoreObject)]);
        };
        WebWorkerRenderer.prototype.destroyView = function (hostElement, viewAllNodes) {
            this._runOnService('destroyView', [new client_message_broker_1.FnArg(hostElement, serializer_1.RenderStoreObject), new client_message_broker_1.FnArg(viewAllNodes, serializer_1.RenderStoreObject)]);
            this._rootRenderer.destroyNodes(viewAllNodes);
        };
        WebWorkerRenderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {
            this._runOnService('setElementProperty', [new client_message_broker_1.FnArg(renderElement, serializer_1.RenderStoreObject), new client_message_broker_1.FnArg(propertyName, null), new client_message_broker_1.FnArg(propertyValue, null)]);
        };
        WebWorkerRenderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) {
            this._runOnService('setElementAttribute', [new client_message_broker_1.FnArg(renderElement, serializer_1.RenderStoreObject), new client_message_broker_1.FnArg(attributeName, null), new client_message_broker_1.FnArg(attributeValue, null)]);
        };
        WebWorkerRenderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) {
            this._runOnService('setBindingDebugInfo', [new client_message_broker_1.FnArg(renderElement, serializer_1.RenderStoreObject), new client_message_broker_1.FnArg(propertyName, null), new client_message_broker_1.FnArg(propertyValue, null)]);
        };
        WebWorkerRenderer.prototype.setElementClass = function (renderElement, className, isAdd) {
            this._runOnService('setElementClass', [new client_message_broker_1.FnArg(renderElement, serializer_1.RenderStoreObject), new client_message_broker_1.FnArg(className, null), new client_message_broker_1.FnArg(isAdd, null)]);
        };
        WebWorkerRenderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) {
            this._runOnService('setElementStyle', [new client_message_broker_1.FnArg(renderElement, serializer_1.RenderStoreObject), new client_message_broker_1.FnArg(styleName, null), new client_message_broker_1.FnArg(styleValue, null)]);
        };
        WebWorkerRenderer.prototype.invokeElementMethod = function (renderElement, methodName, args) {
            this._runOnService('invokeElementMethod', [new client_message_broker_1.FnArg(renderElement, serializer_1.RenderStoreObject), new client_message_broker_1.FnArg(methodName, null), new client_message_broker_1.FnArg(args, null)]);
        };
        WebWorkerRenderer.prototype.setText = function (renderNode, text) {
            this._runOnService('setText', [new client_message_broker_1.FnArg(renderNode, serializer_1.RenderStoreObject), new client_message_broker_1.FnArg(text, null)]);
        };
        WebWorkerRenderer.prototype.listen = function (renderElement, name, callback) {
            var _this = this;
            renderElement.events.listen(name, callback);
            var unlistenCallbackId = this._rootRenderer.allocateId();
            this._runOnService('listen', [new client_message_broker_1.FnArg(renderElement, serializer_1.RenderStoreObject), new client_message_broker_1.FnArg(name, null), new client_message_broker_1.FnArg(unlistenCallbackId, null)]);
            return function () {
                renderElement.events.unlisten(name, callback);
                _this._runOnService('listenDone', [new client_message_broker_1.FnArg(unlistenCallbackId, null)]);
            };
        };
        WebWorkerRenderer.prototype.listenGlobal = function (target, name, callback) {
            var _this = this;
            this._rootRenderer.globalEvents.listen(eventNameWithTarget(target, name), callback);
            var unlistenCallbackId = this._rootRenderer.allocateId();
            this._runOnService('listenGlobal', [new client_message_broker_1.FnArg(target, null), new client_message_broker_1.FnArg(name, null), new client_message_broker_1.FnArg(unlistenCallbackId, null)]);
            return function () {
                _this._rootRenderer.globalEvents.unlisten(eventNameWithTarget(target, name), callback);
                _this._runOnService('listenDone', [new client_message_broker_1.FnArg(unlistenCallbackId, null)]);
            };
        };
        WebWorkerRenderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing) {
            // TODO
            return null;
        };
        return WebWorkerRenderer;
    }();
    exports.WebWorkerRenderer = WebWorkerRenderer;
    var NamedEventEmitter = function () {
        function NamedEventEmitter() {}
        NamedEventEmitter.prototype._getListeners = function (eventName) {
            if (lang_1.isBlank(this._listeners)) {
                this._listeners = new Map();
            }
            var listeners = this._listeners.get(eventName);
            if (lang_1.isBlank(listeners)) {
                listeners = [];
                this._listeners.set(eventName, listeners);
            }
            return listeners;
        };
        NamedEventEmitter.prototype.listen = function (eventName, callback) {
            this._getListeners(eventName).push(callback);
        };
        NamedEventEmitter.prototype.unlisten = function (eventName, callback) {
            collection_1.ListWrapper.remove(this._getListeners(eventName), callback);
        };
        NamedEventEmitter.prototype.dispatchEvent = function (eventName, event) {
            var listeners = this._getListeners(eventName);
            for (var i = 0; i < listeners.length; i++) {
                listeners[i](event);
            }
        };
        return NamedEventEmitter;
    }();
    exports.NamedEventEmitter = NamedEventEmitter;
    function eventNameWithTarget(target, eventName) {
        return target + ":" + eventName;
    }
    var WebWorkerRenderNode = function () {
        function WebWorkerRenderNode() {
            this.events = new NamedEventEmitter();
        }
        return WebWorkerRenderNode;
    }();
    exports.WebWorkerRenderNode = WebWorkerRenderNode;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/web_workers/worker/worker_adapter.js', ['../../dom/dom_adapter', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var dom_adapter_1 = $__require('../../dom/dom_adapter');
    /**
     * This adapter is required to log error messages.
     *
     * Note: other methods all throw as the DOM is not accessible directly in web worker context.
     */
    var WorkerDomAdapter = function (_super) {
        __extends(WorkerDomAdapter, _super);
        function WorkerDomAdapter() {
            _super.apply(this, arguments);
        }
        WorkerDomAdapter.makeCurrent = function () {
            dom_adapter_1.setRootDomAdapter(new WorkerDomAdapter());
        };
        WorkerDomAdapter.prototype.logError = function (error /** TODO #9100 */) {
            if (console.error) {
                console.error(error);
            } else {
                console.log(error);
            }
        };
        WorkerDomAdapter.prototype.log = function (error /** TODO #9100 */) {
            console.log(error);
        };
        WorkerDomAdapter.prototype.logGroup = function (error /** TODO #9100 */) {
            if (console.group) {
                console.group(error);
                this.logError(error);
            } else {
                console.log(error);
            }
        };
        WorkerDomAdapter.prototype.logGroupEnd = function () {
            if (console.groupEnd) {
                console.groupEnd();
            }
        };
        WorkerDomAdapter.prototype.hasProperty = function (element /** TODO #9100 */, name) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.setProperty = function (el, name, value) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.getProperty = function (el, name) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.invoke = function (el, methodName, args) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.getXHR = function () {
            throw 'not implemented';
        };
        Object.defineProperty(WorkerDomAdapter.prototype, "attrToPropMap", {
            get: function () {
                throw 'not implemented';
            },
            set: function (value) {
                throw 'not implemented';
            },
            enumerable: true,
            configurable: true
        });
        WorkerDomAdapter.prototype.parse = function (templateHtml) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.query = function (selector) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.querySelector = function (el /** TODO #9100 */, selector) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.querySelectorAll = function (el /** TODO #9100 */, selector) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.on = function (el /** TODO #9100 */, evt /** TODO #9100 */, listener /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.onAndCancel = function (el /** TODO #9100 */, evt /** TODO #9100 */, listener /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.dispatchEvent = function (el /** TODO #9100 */, evt /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.createMouseEvent = function (eventType /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.createEvent = function (eventType) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.preventDefault = function (evt /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.isPrevented = function (evt /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.getInnerHTML = function (el /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.getTemplateContent = function (el /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.getOuterHTML = function (el /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.nodeName = function (node /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.nodeValue = function (node /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.type = function (node /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.content = function (node /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.firstChild = function (el /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.nextSibling = function (el /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.parentElement = function (el /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.childNodes = function (el /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.childNodesAsList = function (el /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.clearNodes = function (el /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.appendChild = function (el /** TODO #9100 */, node /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.removeChild = function (el /** TODO #9100 */, node /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.replaceChild = function (el /** TODO #9100 */, newNode /** TODO #9100 */, oldNode /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.remove = function (el /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.insertBefore = function (el /** TODO #9100 */, node /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.insertAllBefore = function (el /** TODO #9100 */, nodes /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.insertAfter = function (el /** TODO #9100 */, node /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.setInnerHTML = function (el /** TODO #9100 */, value /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.getText = function (el /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.setText = function (el /** TODO #9100 */, value) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.getValue = function (el /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.setValue = function (el /** TODO #9100 */, value) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.getChecked = function (el /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.setChecked = function (el /** TODO #9100 */, value) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.createComment = function (text) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.createTemplate = function (html /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.createElement = function (tagName /** TODO #9100 */, doc /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.createElementNS = function (ns, tagName, doc /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.createTextNode = function (text, doc /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.createStyleElement = function (css, doc /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.createShadowRoot = function (el /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.getShadowRoot = function (el /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.getHost = function (el /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.getDistributedNodes = function (el /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.clone = function (node) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.getElementsByClassName = function (element /** TODO #9100 */, name) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.getElementsByTagName = function (element /** TODO #9100 */, name) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.classList = function (element /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.addClass = function (element /** TODO #9100 */, className) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.removeClass = function (element /** TODO #9100 */, className) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.hasClass = function (element /** TODO #9100 */, className) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.setStyle = function (element /** TODO #9100 */, styleName, styleValue) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.removeStyle = function (element /** TODO #9100 */, styleName) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.getStyle = function (element /** TODO #9100 */, styleName) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.hasStyle = function (element /** TODO #9100 */, styleName, styleValue) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.tagName = function (element /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.attributeMap = function (element /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.hasAttribute = function (element /** TODO #9100 */, attribute) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.hasAttributeNS = function (element /** TODO #9100 */, ns, attribute) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.getAttribute = function (element /** TODO #9100 */, attribute) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.getAttributeNS = function (element /** TODO #9100 */, ns, attribute) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.setAttribute = function (element /** TODO #9100 */, name, value) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.setAttributeNS = function (element /** TODO #9100 */, ns, name, value) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.removeAttribute = function (element /** TODO #9100 */, attribute) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.removeAttributeNS = function (element /** TODO #9100 */, ns, attribute) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.templateAwareRoot = function (el /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.createHtmlDocument = function () {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.defaultDoc = function () {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.getBoundingClientRect = function (el /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.getTitle = function () {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.setTitle = function (newTitle) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.elementMatches = function (n /** TODO #9100 */, selector) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.isTemplateElement = function (el) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.isTextNode = function (node /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.isCommentNode = function (node /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.isElementNode = function (node /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.hasShadowRoot = function (node /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.isShadowRoot = function (node /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.importIntoDoc = function (node) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.adoptNode = function (node) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.getHref = function (element /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.getEventKey = function (event /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.resolveAndSetHref = function (element /** TODO #9100 */, baseUrl, href) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.supportsDOMEvents = function () {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.supportsNativeShadowDOM = function () {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.getGlobalEventTarget = function (target) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.getHistory = function () {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.getLocation = function () {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.getBaseHref = function () {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.resetBaseElement = function () {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.getUserAgent = function () {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.setData = function (element /** TODO #9100 */, name, value) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.getComputedStyle = function (element /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.getData = function (element /** TODO #9100 */, name) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.setGlobalVar = function (name, value) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.requestAnimationFrame = function (callback /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.cancelAnimationFrame = function (id /** TODO #9100 */) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.performanceNow = function () {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.getAnimationPrefix = function () {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.getTransitionEnd = function () {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.supportsAnimation = function () {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.supportsWebAnimation = function () {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.supportsCookies = function () {
            return false;
        };
        WorkerDomAdapter.prototype.getCookie = function (name) {
            throw 'not implemented';
        };
        WorkerDomAdapter.prototype.setCookie = function (name, value) {
            throw 'not implemented';
        };
        return WorkerDomAdapter;
    }(dom_adapter_1.DomAdapter);
    exports.WorkerDomAdapter = WorkerDomAdapter;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/worker_app.js', ['@angular/common', '@angular/core', './browser', './facade/lang', './web_workers/shared/api', './web_workers/shared/client_message_broker', './web_workers/shared/message_bus', './web_workers/shared/post_message_bus', './web_workers/shared/render_store', './web_workers/shared/serializer', './web_workers/shared/service_message_broker', './web_workers/worker/renderer', './web_workers/worker/worker_adapter', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var common_1 = $__require('@angular/common');
    var core_1 = $__require('@angular/core');
    var browser_1 = $__require('./browser');
    var lang_1 = $__require('./facade/lang');
    var api_1 = $__require('./web_workers/shared/api');
    var client_message_broker_1 = $__require('./web_workers/shared/client_message_broker');
    var message_bus_1 = $__require('./web_workers/shared/message_bus');
    var post_message_bus_1 = $__require('./web_workers/shared/post_message_bus');
    var render_store_1 = $__require('./web_workers/shared/render_store');
    var serializer_1 = $__require('./web_workers/shared/serializer');
    var service_message_broker_1 = $__require('./web_workers/shared/service_message_broker');
    var renderer_1 = $__require('./web_workers/worker/renderer');
    var worker_adapter_1 = $__require('./web_workers/worker/worker_adapter');
    var PrintLogger = function () {
        function PrintLogger() {
            this.log = lang_1.print;
            this.logError = lang_1.print;
            this.logGroup = lang_1.print;
        }
        PrintLogger.prototype.logGroupEnd = function () {};
        return PrintLogger;
    }();
    /**
     * @deprecated Use `platformWorkerApp()` or create a custom platform factory via
     * `createPlatformFactory(platformWorkerApp, ...)`
     */
    exports.WORKER_APP_PLATFORM_PROVIDERS = core_1.PLATFORM_COMMON_PROVIDERS;
    /**
     * @deprecated Create a module that includes `WorkerAppModule` instead. This is empty for backwards
     * compatibility,
     * as all of our bootstrap methods add a module implicitly, i.e. keeping this filled would add the
     * providers 2x.
     */
    exports.WORKER_APP_APPLICATION_PROVIDERS = [];
    /**
     * @experimental
     */
    exports.platformWorkerApp = core_1.createPlatformFactory(core_1.platformCore, 'workerApp');
    /**
     * @deprecated Use {@link platformWorkerApp} instead
     */
    exports.workerAppPlatform = exports.platformWorkerApp;
    function _exceptionHandler() {
        return new core_1.ExceptionHandler(new PrintLogger());
    }
    // TODO(jteplitz602) remove this and compile with lib.webworker.d.ts (#3492)
    var _postMessage = {
        postMessage: function (message, transferrables) {
            postMessage(message, transferrables);
        }
    };
    function createMessageBus(zone) {
        var sink = new post_message_bus_1.PostMessageBusSink(_postMessage);
        var source = new post_message_bus_1.PostMessageBusSource();
        var bus = new post_message_bus_1.PostMessageBus(sink, source);
        bus.attachToZone(zone);
        return bus;
    }
    function setupWebWorker() {
        worker_adapter_1.WorkerDomAdapter.makeCurrent();
    }
    var WorkerAppModule = function () {
        function WorkerAppModule() {}
        /** @nocollapse */
        WorkerAppModule.decorators = [{ type: core_1.NgModule, args: [{
                providers: [common_1.FORM_PROVIDERS, browser_1.BROWSER_SANITIZATION_PROVIDERS, serializer_1.Serializer, { provide: client_message_broker_1.ClientMessageBrokerFactory, useClass: client_message_broker_1.ClientMessageBrokerFactory_ }, { provide: service_message_broker_1.ServiceMessageBrokerFactory, useClass: service_message_broker_1.ServiceMessageBrokerFactory_ }, renderer_1.WebWorkerRootRenderer, { provide: core_1.RootRenderer, useExisting: renderer_1.WebWorkerRootRenderer }, { provide: api_1.ON_WEB_WORKER, useValue: true }, render_store_1.RenderStore, { provide: core_1.ExceptionHandler, useFactory: _exceptionHandler, deps: [] }, { provide: message_bus_1.MessageBus, useFactory: createMessageBus, deps: [core_1.NgZone] }, { provide: core_1.APP_INITIALIZER, useValue: setupWebWorker, multi: true }],
                exports: [common_1.CommonModule, core_1.ApplicationModule]
            }] }];
        return WorkerAppModule;
    }();
    exports.WorkerAppModule = WorkerAppModule;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/dom/web_animations_player.js', ['@angular/core', '../facade/collection', '../facade/lang', './dom_adapter', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var collection_1 = $__require('../facade/collection');
    var lang_1 = $__require('../facade/lang');
    var dom_adapter_1 = $__require('./dom_adapter');
    var WebAnimationsPlayer = function () {
        function WebAnimationsPlayer(element, keyframes, options) {
            this.element = element;
            this.keyframes = keyframes;
            this.options = options;
            this._subscriptions = [];
            this._finished = false;
            this._initialized = false;
            this._started = false;
            this.parentPlayer = null;
            this._duration = options['duration'];
        }
        WebAnimationsPlayer.prototype._onFinish = function () {
            if (!this._finished) {
                this._finished = true;
                if (!lang_1.isPresent(this.parentPlayer)) {
                    this.destroy();
                }
                this._subscriptions.forEach(function (fn) {
                    return fn();
                });
                this._subscriptions = [];
            }
        };
        WebAnimationsPlayer.prototype.init = function () {
            var _this = this;
            if (this._initialized) return;
            this._initialized = true;
            var keyframes = this.keyframes.map(function (styles) {
                var formattedKeyframe = {};
                collection_1.StringMapWrapper.forEach(styles, function (value, prop) {
                    formattedKeyframe[prop] = value == core_1.AUTO_STYLE ? _computeStyle(_this.element, prop) : value;
                });
                return formattedKeyframe;
            });
            this._player = this._triggerWebAnimation(this.element, keyframes, this.options);
            // this is required so that the player doesn't start to animate right away
            this.reset();
            this._player.onfinish = function () {
                return _this._onFinish();
            };
        };
        /** @internal */
        WebAnimationsPlayer.prototype._triggerWebAnimation = function (element, keyframes, options) {
            return element.animate(keyframes, options);
        };
        WebAnimationsPlayer.prototype.onDone = function (fn) {
            this._subscriptions.push(fn);
        };
        WebAnimationsPlayer.prototype.play = function () {
            this.init();
            this._player.play();
        };
        WebAnimationsPlayer.prototype.pause = function () {
            this.init();
            this._player.pause();
        };
        WebAnimationsPlayer.prototype.finish = function () {
            this.init();
            this._onFinish();
            this._player.finish();
        };
        WebAnimationsPlayer.prototype.reset = function () {
            this._player.cancel();
        };
        WebAnimationsPlayer.prototype.restart = function () {
            this.reset();
            this.play();
        };
        WebAnimationsPlayer.prototype.hasStarted = function () {
            return this._started;
        };
        WebAnimationsPlayer.prototype.destroy = function () {
            this.reset();
            this._onFinish();
        };
        Object.defineProperty(WebAnimationsPlayer.prototype, "totalTime", {
            get: function () {
                return this._duration;
            },
            enumerable: true,
            configurable: true
        });
        WebAnimationsPlayer.prototype.setPosition = function (p) {
            this._player.currentTime = p * this.totalTime;
        };
        WebAnimationsPlayer.prototype.getPosition = function () {
            return this._player.currentTime / this.totalTime;
        };
        return WebAnimationsPlayer;
    }();
    exports.WebAnimationsPlayer = WebAnimationsPlayer;
    function _computeStyle(element, prop) {
        return dom_adapter_1.getDOM().getComputedStyle(element)[prop];
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/dom/web_animations_driver.js', ['@angular/core', '../facade/collection', '../facade/lang', './util', './web_animations_player', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var collection_1 = $__require('../facade/collection');
    var lang_1 = $__require('../facade/lang');
    var util_1 = $__require('./util');
    var web_animations_player_1 = $__require('./web_animations_player');
    var WebAnimationsDriver = function () {
        function WebAnimationsDriver() {}
        WebAnimationsDriver.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing) {
            var formattedSteps = [];
            var startingStyleLookup = {};
            if (lang_1.isPresent(startingStyles) && startingStyles.styles.length > 0) {
                startingStyleLookup = _populateStyles(element, startingStyles, {});
                startingStyleLookup['offset'] = 0;
                formattedSteps.push(startingStyleLookup);
            }
            keyframes.forEach(function (keyframe) {
                var data = _populateStyles(element, keyframe.styles, startingStyleLookup);
                data['offset'] = keyframe.offset;
                formattedSteps.push(data);
            });
            // this is a special case when only styles are applied as an
            // animation. When this occurs we want to animate from start to
            // end with the same values. Removing the offset and having only
            // start/end values is suitable enough for the web-animations API
            if (formattedSteps.length == 1) {
                var start = formattedSteps[0];
                start['offset'] = null;
                formattedSteps = [start, start];
            }
            var playerOptions = {
                'duration': duration,
                'delay': delay,
                'fill': 'both' // we use `both` because it allows for styling at 0% to work with `delay`
            };
            // we check for this to avoid having a null|undefined value be present
            // for the easing (which results in an error for certain browsers #9752)
            if (easing) {
                playerOptions['easing'] = easing;
            }
            return new web_animations_player_1.WebAnimationsPlayer(element, formattedSteps, playerOptions);
        };
        return WebAnimationsDriver;
    }();
    exports.WebAnimationsDriver = WebAnimationsDriver;
    function _populateStyles(element, styles, defaultStyles) {
        var data = {};
        styles.styles.forEach(function (entry) {
            collection_1.StringMapWrapper.forEach(entry, function (val, prop) {
                var formattedProp = util_1.dashCaseToCamelCase(prop);
                data[formattedProp] = val == core_1.AUTO_STYLE ? val : val.toString() + _resolveStyleUnit(val, prop, formattedProp);
            });
        });
        collection_1.StringMapWrapper.forEach(defaultStyles, function (value, prop) {
            if (!lang_1.isPresent(data[prop])) {
                data[prop] = value;
            }
        });
        return data;
    }
    function _resolveStyleUnit(val, userProvidedProp, formattedProp) {
        var unit = '';
        if (_isPixelDimensionStyle(formattedProp) && val != 0 && val != '0') {
            if (lang_1.isNumber(val)) {
                unit = 'px';
            } else if (_findDimensionalSuffix(val.toString()).length == 0) {
                throw new core_1.BaseException('Please provide a CSS unit value for ' + userProvidedProp + ':' + val);
            }
        }
        return unit;
    }
    var _$0 = 48;
    var _$9 = 57;
    var _$PERIOD = 46;
    function _findDimensionalSuffix(value) {
        for (var i = 0; i < value.length; i++) {
            var c = lang_1.StringWrapper.charCodeAt(value, i);
            if (c >= _$0 && c <= _$9 || c == _$PERIOD) continue;
            return value.substring(i, value.length);
        }
        return '';
    }
    function _isPixelDimensionStyle(prop) {
        switch (prop) {
            case 'width':
            case 'height':
            case 'minWidth':
            case 'minHeight':
            case 'maxWidth':
            case 'maxHeight':
            case 'left':
            case 'top':
            case 'bottom':
            case 'right':
            case 'fontSize':
            case 'outlineWidth':
            case 'outlineOffset':
            case 'paddingTop':
            case 'paddingLeft':
            case 'paddingBottom':
            case 'paddingRight':
            case 'marginTop':
            case 'marginLeft':
            case 'marginBottom':
            case 'marginRight':
            case 'borderRadius':
            case 'borderWidth':
            case 'borderTopWidth':
            case 'borderLeftWidth':
            case 'borderRightWidth':
            case 'borderBottomWidth':
            case 'textIndent':
                return true;
            default:
                return false;
        }
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/browser/generic_browser_adapter.js', ['../dom/dom_adapter', '../facade/collection', '../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var dom_adapter_1 = $__require('../dom/dom_adapter');
    var collection_1 = $__require('../facade/collection');
    var lang_1 = $__require('../facade/lang');
    /**
     * Provides DOM operations in any browser environment.
     */
    var GenericBrowserDomAdapter = function (_super) {
        __extends(GenericBrowserDomAdapter, _super);
        function GenericBrowserDomAdapter() {
            var _this = this;
            _super.call(this);
            this._animationPrefix = null;
            this._transitionEnd = null;
            try {
                var element = this.createElement('div', this.defaultDoc());
                if (lang_1.isPresent(this.getStyle(element, 'animationName'))) {
                    this._animationPrefix = '';
                } else {
                    var domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];
                    for (var i = 0; i < domPrefixes.length; i++) {
                        if (lang_1.isPresent(this.getStyle(element, domPrefixes[i] + 'AnimationName'))) {
                            this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';
                            break;
                        }
                    }
                }
                var transEndEventNames = {
                    WebkitTransition: 'webkitTransitionEnd',
                    MozTransition: 'transitionend',
                    OTransition: 'oTransitionEnd otransitionend',
                    transition: 'transitionend'
                };
                collection_1.StringMapWrapper.forEach(transEndEventNames, function (value, key) {
                    if (lang_1.isPresent(_this.getStyle(element, key))) {
                        _this._transitionEnd = value;
                    }
                });
            } catch (e) {
                this._animationPrefix = null;
                this._transitionEnd = null;
            }
        }
        GenericBrowserDomAdapter.prototype.getDistributedNodes = function (el) {
            return el.getDistributedNodes();
        };
        GenericBrowserDomAdapter.prototype.resolveAndSetHref = function (el, baseUrl, href) {
            el.href = href == null ? baseUrl : baseUrl + '/../' + href;
        };
        GenericBrowserDomAdapter.prototype.supportsDOMEvents = function () {
            return true;
        };
        GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function () {
            return lang_1.isFunction(this.defaultDoc().body.createShadowRoot);
        };
        GenericBrowserDomAdapter.prototype.getAnimationPrefix = function () {
            return lang_1.isPresent(this._animationPrefix) ? this._animationPrefix : '';
        };
        GenericBrowserDomAdapter.prototype.getTransitionEnd = function () {
            return lang_1.isPresent(this._transitionEnd) ? this._transitionEnd : '';
        };
        GenericBrowserDomAdapter.prototype.supportsAnimation = function () {
            return lang_1.isPresent(this._animationPrefix) && lang_1.isPresent(this._transitionEnd);
        };
        return GenericBrowserDomAdapter;
    }(dom_adapter_1.DomAdapter);
    exports.GenericBrowserDomAdapter = GenericBrowserDomAdapter;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/browser/browser_adapter.js', ['../dom/dom_adapter', '../facade/collection', '../facade/lang', './generic_browser_adapter', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var dom_adapter_1 = $__require('../dom/dom_adapter');
    var collection_1 = $__require('../facade/collection');
    var lang_1 = $__require('../facade/lang');
    var generic_browser_adapter_1 = $__require('./generic_browser_adapter');
    var _attrToPropMap = {
        'class': 'className',
        'innerHtml': 'innerHTML',
        'readonly': 'readOnly',
        'tabindex': 'tabIndex'
    };
    var DOM_KEY_LOCATION_NUMPAD = 3;
    // Map to convert some key or keyIdentifier values to what will be returned by getEventKey
    var _keyMap = {
        // The following values are here for cross-browser compatibility and to match the W3C standard
        // cf http://www.w3.org/TR/DOM-Level-3-Events-key/
        '\b': 'Backspace',
        '\t': 'Tab',
        '\x7F': 'Delete',
        '\x1B': 'Escape',
        'Del': 'Delete',
        'Esc': 'Escape',
        'Left': 'ArrowLeft',
        'Right': 'ArrowRight',
        'Up': 'ArrowUp',
        'Down': 'ArrowDown',
        'Menu': 'ContextMenu',
        'Scroll': 'ScrollLock',
        'Win': 'OS'
    };
    // There is a bug in Chrome for numeric keypad keys:
    // https://code.google.com/p/chromium/issues/detail?id=155654
    // 1, 2, 3 ... are reported as A, B, C ...
    var _chromeNumKeyPadMap = {
        'A': '1',
        'B': '2',
        'C': '3',
        'D': '4',
        'E': '5',
        'F': '6',
        'G': '7',
        'H': '8',
        'I': '9',
        'J': '*',
        'K': '+',
        'M': '-',
        'N': '.',
        'O': '/',
        '\x60': '0',
        '\x90': 'NumLock'
    };
    /**
     * A `DomAdapter` powered by full browser DOM APIs.
     */
    /* tslint:disable:requireParameterType */
    var BrowserDomAdapter = function (_super) {
        __extends(BrowserDomAdapter, _super);
        function BrowserDomAdapter() {
            _super.apply(this, arguments);
        }
        BrowserDomAdapter.prototype.parse = function (templateHtml) {
            throw new Error('parse not implemented');
        };
        BrowserDomAdapter.makeCurrent = function () {
            dom_adapter_1.setRootDomAdapter(new BrowserDomAdapter());
        };
        BrowserDomAdapter.prototype.hasProperty = function (element /** TODO #9100 */, name) {
            return name in element;
        };
        BrowserDomAdapter.prototype.setProperty = function (el, name, value) {
            el[name] = value;
        };
        BrowserDomAdapter.prototype.getProperty = function (el, name) {
            return el[name];
        };
        BrowserDomAdapter.prototype.invoke = function (el, methodName, args) {
            el[methodName].apply(el, args);
        };
        // TODO(tbosch): move this into a separate environment class once we have it
        BrowserDomAdapter.prototype.logError = function (error /** TODO #9100 */) {
            if (window.console.error) {
                window.console.error(error);
            } else {
                window.console.log(error);
            }
        };
        BrowserDomAdapter.prototype.log = function (error /** TODO #9100 */) {
            window.console.log(error);
        };
        BrowserDomAdapter.prototype.logGroup = function (error /** TODO #9100 */) {
            if (window.console.group) {
                window.console.group(error);
                this.logError(error);
            } else {
                window.console.log(error);
            }
        };
        BrowserDomAdapter.prototype.logGroupEnd = function () {
            if (window.console.groupEnd) {
                window.console.groupEnd();
            }
        };
        Object.defineProperty(BrowserDomAdapter.prototype, "attrToPropMap", {
            get: function () {
                return _attrToPropMap;
            },
            enumerable: true,
            configurable: true
        });
        BrowserDomAdapter.prototype.query = function (selector) {
            return document.querySelector(selector);
        };
        BrowserDomAdapter.prototype.querySelector = function (el /** TODO #9100 */, selector) {
            return el.querySelector(selector);
        };
        BrowserDomAdapter.prototype.querySelectorAll = function (el /** TODO #9100 */, selector) {
            return el.querySelectorAll(selector);
        };
        BrowserDomAdapter.prototype.on = function (el /** TODO #9100 */, evt /** TODO #9100 */, listener /** TODO #9100 */) {
            el.addEventListener(evt, listener, false);
        };
        BrowserDomAdapter.prototype.onAndCancel = function (el /** TODO #9100 */, evt /** TODO #9100 */, listener /** TODO #9100 */) {
            el.addEventListener(evt, listener, false);
            // Needed to follow Dart's subscription semantic, until fix of
            // https://code.google.com/p/dart/issues/detail?id=17406
            return function () {
                el.removeEventListener(evt, listener, false);
            };
        };
        BrowserDomAdapter.prototype.dispatchEvent = function (el /** TODO #9100 */, evt /** TODO #9100 */) {
            el.dispatchEvent(evt);
        };
        BrowserDomAdapter.prototype.createMouseEvent = function (eventType) {
            var evt = document.createEvent('MouseEvent');
            evt.initEvent(eventType, true, true);
            return evt;
        };
        BrowserDomAdapter.prototype.createEvent = function (eventType /** TODO #9100 */) {
            var evt = document.createEvent('Event');
            evt.initEvent(eventType, true, true);
            return evt;
        };
        BrowserDomAdapter.prototype.preventDefault = function (evt) {
            evt.preventDefault();
            evt.returnValue = false;
        };
        BrowserDomAdapter.prototype.isPrevented = function (evt) {
            return evt.defaultPrevented || lang_1.isPresent(evt.returnValue) && !evt.returnValue;
        };
        BrowserDomAdapter.prototype.getInnerHTML = function (el /** TODO #9100 */) {
            return el.innerHTML;
        };
        BrowserDomAdapter.prototype.getTemplateContent = function (el /** TODO #9100 */) {
            return 'content' in el && el instanceof HTMLTemplateElement ? el.content : null;
        };
        BrowserDomAdapter.prototype.getOuterHTML = function (el /** TODO #9100 */) {
            return el.outerHTML;
        };
        BrowserDomAdapter.prototype.nodeName = function (node) {
            return node.nodeName;
        };
        BrowserDomAdapter.prototype.nodeValue = function (node) {
            return node.nodeValue;
        };
        BrowserDomAdapter.prototype.type = function (node) {
            return node.type;
        };
        BrowserDomAdapter.prototype.content = function (node) {
            if (this.hasProperty(node, 'content')) {
                return node.content;
            } else {
                return node;
            }
        };
        BrowserDomAdapter.prototype.firstChild = function (el /** TODO #9100 */) {
            return el.firstChild;
        };
        BrowserDomAdapter.prototype.nextSibling = function (el /** TODO #9100 */) {
            return el.nextSibling;
        };
        BrowserDomAdapter.prototype.parentElement = function (el /** TODO #9100 */) {
            return el.parentNode;
        };
        BrowserDomAdapter.prototype.childNodes = function (el /** TODO #9100 */) {
            return el.childNodes;
        };
        BrowserDomAdapter.prototype.childNodesAsList = function (el /** TODO #9100 */) {
            var childNodes = el.childNodes;
            var res = collection_1.ListWrapper.createFixedSize(childNodes.length);
            for (var i = 0; i < childNodes.length; i++) {
                res[i] = childNodes[i];
            }
            return res;
        };
        BrowserDomAdapter.prototype.clearNodes = function (el /** TODO #9100 */) {
            while (el.firstChild) {
                el.removeChild(el.firstChild);
            }
        };
        BrowserDomAdapter.prototype.appendChild = function (el /** TODO #9100 */, node /** TODO #9100 */) {
            el.appendChild(node);
        };
        BrowserDomAdapter.prototype.removeChild = function (el /** TODO #9100 */, node /** TODO #9100 */) {
            el.removeChild(node);
        };
        BrowserDomAdapter.prototype.replaceChild = function (el, newChild /** TODO #9100 */, oldChild /** TODO #9100 */) {
            el.replaceChild(newChild, oldChild);
        };
        BrowserDomAdapter.prototype.remove = function (node /** TODO #9100 */) {
            if (node.parentNode) {
                node.parentNode.removeChild(node);
            }
            return node;
        };
        BrowserDomAdapter.prototype.insertBefore = function (el /** TODO #9100 */, node /** TODO #9100 */) {
            el.parentNode.insertBefore(node, el);
        };
        BrowserDomAdapter.prototype.insertAllBefore = function (el /** TODO #9100 */, nodes /** TODO #9100 */) {
            nodes.forEach(function (n /** TODO #9100 */) {
                return el.parentNode.insertBefore(n, el);
            });
        };
        BrowserDomAdapter.prototype.insertAfter = function (el /** TODO #9100 */, node /** TODO #9100 */) {
            el.parentNode.insertBefore(node, el.nextSibling);
        };
        BrowserDomAdapter.prototype.setInnerHTML = function (el /** TODO #9100 */, value /** TODO #9100 */) {
            el.innerHTML = value;
        };
        BrowserDomAdapter.prototype.getText = function (el /** TODO #9100 */) {
            return el.textContent;
        };
        // TODO(vicb): removed Element type because it does not support StyleElement
        BrowserDomAdapter.prototype.setText = function (el /** TODO #9100 */, value) {
            el.textContent = value;
        };
        BrowserDomAdapter.prototype.getValue = function (el /** TODO #9100 */) {
            return el.value;
        };
        BrowserDomAdapter.prototype.setValue = function (el /** TODO #9100 */, value) {
            el.value = value;
        };
        BrowserDomAdapter.prototype.getChecked = function (el /** TODO #9100 */) {
            return el.checked;
        };
        BrowserDomAdapter.prototype.setChecked = function (el /** TODO #9100 */, value) {
            el.checked = value;
        };
        BrowserDomAdapter.prototype.createComment = function (text) {
            return document.createComment(text);
        };
        BrowserDomAdapter.prototype.createTemplate = function (html /** TODO #9100 */) {
            var t = document.createElement('template');
            t.innerHTML = html;
            return t;
        };
        BrowserDomAdapter.prototype.createElement = function (tagName /* TODO #9100 */, doc) {
            if (doc === void 0) {
                doc = document;
            }
            return doc.createElement(tagName);
        };
        BrowserDomAdapter.prototype.createElementNS = function (ns /* TODO #9100 */, tagName /* TODO #9100 */, doc) {
            if (doc === void 0) {
                doc = document;
            }
            return doc.createElementNS(ns, tagName);
        };
        BrowserDomAdapter.prototype.createTextNode = function (text, doc) {
            if (doc === void 0) {
                doc = document;
            }
            return doc.createTextNode(text);
        };
        BrowserDomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) {
            if (doc === void 0) {
                doc = document;
            }
            var el = doc.createElement('SCRIPT');
            el.setAttribute(attrName, attrValue);
            return el;
        };
        BrowserDomAdapter.prototype.createStyleElement = function (css, doc) {
            if (doc === void 0) {
                doc = document;
            }
            var style = doc.createElement('style');
            this.appendChild(style, this.createTextNode(css));
            return style;
        };
        BrowserDomAdapter.prototype.createShadowRoot = function (el) {
            return el.createShadowRoot();
        };
        BrowserDomAdapter.prototype.getShadowRoot = function (el) {
            return el.shadowRoot;
        };
        BrowserDomAdapter.prototype.getHost = function (el) {
            return el.host;
        };
        BrowserDomAdapter.prototype.clone = function (node) {
            return node.cloneNode(true);
        };
        BrowserDomAdapter.prototype.getElementsByClassName = function (element /** TODO #9100 */, name) {
            return element.getElementsByClassName(name);
        };
        BrowserDomAdapter.prototype.getElementsByTagName = function (element /** TODO #9100 */, name) {
            return element.getElementsByTagName(name);
        };
        BrowserDomAdapter.prototype.classList = function (element /** TODO #9100 */) {
            return Array.prototype.slice.call(element.classList, 0);
        };
        BrowserDomAdapter.prototype.addClass = function (element /** TODO #9100 */, className) {
            element.classList.add(className);
        };
        BrowserDomAdapter.prototype.removeClass = function (element /** TODO #9100 */, className) {
            element.classList.remove(className);
        };
        BrowserDomAdapter.prototype.hasClass = function (element /** TODO #9100 */, className) {
            return element.classList.contains(className);
        };
        BrowserDomAdapter.prototype.setStyle = function (element /** TODO #9100 */, styleName, styleValue) {
            element.style[styleName] = styleValue;
        };
        BrowserDomAdapter.prototype.removeStyle = function (element /** TODO #9100 */, stylename) {
            element.style[stylename] = null;
        };
        BrowserDomAdapter.prototype.getStyle = function (element /** TODO #9100 */, stylename) {
            return element.style[stylename];
        };
        BrowserDomAdapter.prototype.hasStyle = function (element /** TODO #9100 */, styleName, styleValue) {
            if (styleValue === void 0) {
                styleValue = null;
            }
            var value = this.getStyle(element, styleName) || '';
            return styleValue ? value == styleValue : value.length > 0;
        };
        BrowserDomAdapter.prototype.tagName = function (element /** TODO #9100 */) {
            return element.tagName;
        };
        BrowserDomAdapter.prototype.attributeMap = function (element /** TODO #9100 */) {
            var res = new Map();
            var elAttrs = element.attributes;
            for (var i = 0; i < elAttrs.length; i++) {
                var attrib = elAttrs[i];
                res.set(attrib.name, attrib.value);
            }
            return res;
        };
        BrowserDomAdapter.prototype.hasAttribute = function (element /** TODO #9100 */, attribute) {
            return element.hasAttribute(attribute);
        };
        BrowserDomAdapter.prototype.hasAttributeNS = function (element /** TODO #9100 */, ns, attribute) {
            return element.hasAttributeNS(ns, attribute);
        };
        BrowserDomAdapter.prototype.getAttribute = function (element /** TODO #9100 */, attribute) {
            return element.getAttribute(attribute);
        };
        BrowserDomAdapter.prototype.getAttributeNS = function (element /** TODO #9100 */, ns, name) {
            return element.getAttributeNS(ns, name);
        };
        BrowserDomAdapter.prototype.setAttribute = function (element /** TODO #9100 */, name, value) {
            element.setAttribute(name, value);
        };
        BrowserDomAdapter.prototype.setAttributeNS = function (element /** TODO #9100 */, ns, name, value) {
            element.setAttributeNS(ns, name, value);
        };
        BrowserDomAdapter.prototype.removeAttribute = function (element /** TODO #9100 */, attribute) {
            element.removeAttribute(attribute);
        };
        BrowserDomAdapter.prototype.removeAttributeNS = function (element /** TODO #9100 */, ns, name) {
            element.removeAttributeNS(ns, name);
        };
        BrowserDomAdapter.prototype.templateAwareRoot = function (el /** TODO #9100 */) {
            return this.isTemplateElement(el) ? this.content(el) : el;
        };
        BrowserDomAdapter.prototype.createHtmlDocument = function () {
            return document.implementation.createHTMLDocument('fakeTitle');
        };
        BrowserDomAdapter.prototype.defaultDoc = function () {
            return document;
        };
        BrowserDomAdapter.prototype.getBoundingClientRect = function (el /** TODO #9100 */) {
            try {
                return el.getBoundingClientRect();
            } catch (e) {
                return { top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0 };
            }
        };
        BrowserDomAdapter.prototype.getTitle = function () {
            return document.title;
        };
        BrowserDomAdapter.prototype.setTitle = function (newTitle) {
            document.title = newTitle || '';
        };
        BrowserDomAdapter.prototype.elementMatches = function (n /** TODO #9100 */, selector) {
            var matches = false;
            if (n instanceof HTMLElement) {
                if (n.matches) {
                    matches = n.matches(selector);
                } else if (n.msMatchesSelector) {
                    matches = n.msMatchesSelector(selector);
                } else if (n.webkitMatchesSelector) {
                    matches = n.webkitMatchesSelector(selector);
                }
            }
            return matches;
        };
        BrowserDomAdapter.prototype.isTemplateElement = function (el) {
            return el instanceof HTMLElement && el.nodeName == 'TEMPLATE';
        };
        BrowserDomAdapter.prototype.isTextNode = function (node) {
            return node.nodeType === Node.TEXT_NODE;
        };
        BrowserDomAdapter.prototype.isCommentNode = function (node) {
            return node.nodeType === Node.COMMENT_NODE;
        };
        BrowserDomAdapter.prototype.isElementNode = function (node) {
            return node.nodeType === Node.ELEMENT_NODE;
        };
        BrowserDomAdapter.prototype.hasShadowRoot = function (node /** TODO #9100 */) {
            return node instanceof HTMLElement && lang_1.isPresent(node.shadowRoot);
        };
        BrowserDomAdapter.prototype.isShadowRoot = function (node /** TODO #9100 */) {
            return node instanceof DocumentFragment;
        };
        BrowserDomAdapter.prototype.importIntoDoc = function (node) {
            var toImport = node;
            if (this.isTemplateElement(node)) {
                toImport = this.content(node);
            }
            return document.importNode(toImport, true);
        };
        BrowserDomAdapter.prototype.adoptNode = function (node) {
            return document.adoptNode(node);
        };
        BrowserDomAdapter.prototype.getHref = function (el) {
            return el.href;
        };
        BrowserDomAdapter.prototype.getEventKey = function (event /** TODO #9100 */) {
            var key = event.key;
            if (lang_1.isBlank(key)) {
                key = event.keyIdentifier;
                // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and
                // Safari
                // cf
                // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces
                if (lang_1.isBlank(key)) {
                    return 'Unidentified';
                }
                if (key.startsWith('U+')) {
                    key = String.fromCharCode(parseInt(key.substring(2), 16));
                    if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
                        // There is a bug in Chrome for numeric keypad keys:
                        // https://code.google.com/p/chromium/issues/detail?id=155654
                        // 1, 2, 3 ... are reported as A, B, C ...
                        key = _chromeNumKeyPadMap[key];
                    }
                }
            }
            if (_keyMap.hasOwnProperty(key)) {
                key = _keyMap[key];
            }
            return key;
        };
        BrowserDomAdapter.prototype.getGlobalEventTarget = function (target) {
            if (target == 'window') {
                return window;
            } else if (target == 'document') {
                return document;
            } else if (target == 'body') {
                return document.body;
            }
        };
        BrowserDomAdapter.prototype.getHistory = function () {
            return window.history;
        };
        BrowserDomAdapter.prototype.getLocation = function () {
            return window.location;
        };
        BrowserDomAdapter.prototype.getBaseHref = function () {
            var href = getBaseElementHref();
            if (lang_1.isBlank(href)) {
                return null;
            }
            return relativePath(href);
        };
        BrowserDomAdapter.prototype.resetBaseElement = function () {
            baseElement = null;
        };
        BrowserDomAdapter.prototype.getUserAgent = function () {
            return window.navigator.userAgent;
        };
        BrowserDomAdapter.prototype.setData = function (element /** TODO #9100 */, name, value) {
            this.setAttribute(element, 'data-' + name, value);
        };
        BrowserDomAdapter.prototype.getData = function (element /** TODO #9100 */, name) {
            return this.getAttribute(element, 'data-' + name);
        };
        BrowserDomAdapter.prototype.getComputedStyle = function (element /** TODO #9100 */) {
            return getComputedStyle(element);
        };
        // TODO(tbosch): move this into a separate environment class once we have it
        BrowserDomAdapter.prototype.setGlobalVar = function (path, value) {
            lang_1.setValueOnPath(lang_1.global, path, value);
        };
        BrowserDomAdapter.prototype.requestAnimationFrame = function (callback /** TODO #9100 */) {
            return window.requestAnimationFrame(callback);
        };
        BrowserDomAdapter.prototype.cancelAnimationFrame = function (id) {
            window.cancelAnimationFrame(id);
        };
        BrowserDomAdapter.prototype.supportsWebAnimation = function () {
            return lang_1.isFunction(Element.prototype['animate']);
        };
        BrowserDomAdapter.prototype.performanceNow = function () {
            // performance.now() is not available in all browsers, see
            // http://caniuse.com/#search=performance.now
            if (lang_1.isPresent(window.performance) && lang_1.isPresent(window.performance.now)) {
                return window.performance.now();
            } else {
                return lang_1.DateWrapper.toMillis(lang_1.DateWrapper.now());
            }
        };
        BrowserDomAdapter.prototype.supportsCookies = function () {
            return true;
        };
        BrowserDomAdapter.prototype.getCookie = function (name) {
            return parseCookieValue(document.cookie, name);
        };
        BrowserDomAdapter.prototype.setCookie = function (name, value) {
            // document.cookie is magical, assigning into it assigns/overrides one cookie value, but does
            // not clear other cookies.
            document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);
        };
        return BrowserDomAdapter;
    }(generic_browser_adapter_1.GenericBrowserDomAdapter);
    exports.BrowserDomAdapter = BrowserDomAdapter;
    var baseElement = null;
    function getBaseElementHref() {
        if (lang_1.isBlank(baseElement)) {
            baseElement = document.querySelector('base');
            if (lang_1.isBlank(baseElement)) {
                return null;
            }
        }
        return baseElement.getAttribute('href');
    }
    // based on urlUtils.js in AngularJS 1
    var urlParsingNode = null;
    function relativePath(url /** TODO #9100 */) {
        if (lang_1.isBlank(urlParsingNode)) {
            urlParsingNode = document.createElement('a');
        }
        urlParsingNode.setAttribute('href', url);
        return urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname;
    }
    function parseCookieValue(cookieStr, name) {
        name = encodeURIComponent(name);
        for (var _i = 0, _a = cookieStr.split(';'); _i < _a.length; _i++) {
            var cookie = _a[_i];
            var eqIndex = cookie.indexOf('=');
            var _b = eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)],
                cookieName = _b[0],
                cookieValue = _b[1];
            if (cookieName.trim() === name) {
                return decodeURIComponent(cookieValue);
            }
        }
        return null;
    }
    exports.parseCookieValue = parseCookieValue;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/platform-browser@2.0.0-rc.5/src/browser/location/history.js", ["reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  function supportsState() {
    return !!window.history.pushState;
  }
  exports.supportsState = supportsState;
  

  return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/browser/location/browser_platform_location.js', ['@angular/common', '@angular/core', '../../dom/dom_adapter', './history', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var common_1 = $__require('@angular/common');
    var core_1 = $__require('@angular/core');
    var dom_adapter_1 = $__require('../../dom/dom_adapter');
    var history_1 = $__require('./history');
    var BrowserPlatformLocation = function (_super) {
        __extends(BrowserPlatformLocation, _super);
        function BrowserPlatformLocation() {
            _super.call(this);
            this._init();
        }
        // This is moved to its own method so that `MockPlatformLocationStrategy` can overwrite it
        /** @internal */
        BrowserPlatformLocation.prototype._init = function () {
            this._location = dom_adapter_1.getDOM().getLocation();
            this._history = dom_adapter_1.getDOM().getHistory();
        };
        Object.defineProperty(BrowserPlatformLocation.prototype, "location", {
            /** @internal */
            get: function () {
                return this._location;
            },
            enumerable: true,
            configurable: true
        });
        BrowserPlatformLocation.prototype.getBaseHrefFromDOM = function () {
            return dom_adapter_1.getDOM().getBaseHref();
        };
        BrowserPlatformLocation.prototype.onPopState = function (fn) {
            dom_adapter_1.getDOM().getGlobalEventTarget('window').addEventListener('popstate', fn, false);
        };
        BrowserPlatformLocation.prototype.onHashChange = function (fn) {
            dom_adapter_1.getDOM().getGlobalEventTarget('window').addEventListener('hashchange', fn, false);
        };
        Object.defineProperty(BrowserPlatformLocation.prototype, "pathname", {
            get: function () {
                return this._location.pathname;
            },
            set: function (newPath) {
                this._location.pathname = newPath;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BrowserPlatformLocation.prototype, "search", {
            get: function () {
                return this._location.search;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BrowserPlatformLocation.prototype, "hash", {
            get: function () {
                return this._location.hash;
            },
            enumerable: true,
            configurable: true
        });
        BrowserPlatformLocation.prototype.pushState = function (state, title, url) {
            if (history_1.supportsState()) {
                this._history.pushState(state, title, url);
            } else {
                this._location.hash = url;
            }
        };
        BrowserPlatformLocation.prototype.replaceState = function (state, title, url) {
            if (history_1.supportsState()) {
                this._history.replaceState(state, title, url);
            } else {
                this._location.hash = url;
            }
        };
        BrowserPlatformLocation.prototype.forward = function () {
            this._history.forward();
        };
        BrowserPlatformLocation.prototype.back = function () {
            this._history.back();
        };
        /** @nocollapse */
        BrowserPlatformLocation.decorators = [{ type: core_1.Injectable }];
        /** @nocollapse */
        BrowserPlatformLocation.ctorParameters = [];
        return BrowserPlatformLocation;
    }(common_1.PlatformLocation);
    exports.BrowserPlatformLocation = BrowserPlatformLocation;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/browser/testability.js', ['@angular/core', '../dom/dom_adapter', '../facade/collection', '../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var dom_adapter_1 = $__require('../dom/dom_adapter');
    var collection_1 = $__require('../facade/collection');
    var lang_1 = $__require('../facade/lang');
    var PublicTestability = function () {
        function PublicTestability(testability) {
            this._testability = testability;
        }
        PublicTestability.prototype.isStable = function () {
            return this._testability.isStable();
        };
        PublicTestability.prototype.whenStable = function (callback) {
            this._testability.whenStable(callback);
        };
        PublicTestability.prototype.findBindings = function (using, provider, exactMatch) {
            return this.findProviders(using, provider, exactMatch);
        };
        PublicTestability.prototype.findProviders = function (using, provider, exactMatch) {
            return this._testability.findBindings(using, provider, exactMatch);
        };
        return PublicTestability;
    }();
    var BrowserGetTestability = function () {
        function BrowserGetTestability() {}
        BrowserGetTestability.init = function () {
            core_1.setTestabilityGetter(new BrowserGetTestability());
        };
        BrowserGetTestability.prototype.addToWindow = function (registry) {
            lang_1.global.getAngularTestability = function (elem, findInAncestors) {
                if (findInAncestors === void 0) {
                    findInAncestors = true;
                }
                var testability = registry.findTestabilityInTree(elem, findInAncestors);
                if (testability == null) {
                    throw new Error('Could not find testability for element.');
                }
                return new PublicTestability(testability);
            };
            lang_1.global.getAllAngularTestabilities = function () {
                var testabilities = registry.getAllTestabilities();
                return testabilities.map(function (testability) {
                    return new PublicTestability(testability);
                });
            };
            lang_1.global.getAllAngularRootElements = function () {
                return registry.getAllRootElements();
            };
            var whenAllStable = function (callback /** TODO #9100 */) {
                var testabilities = lang_1.global.getAllAngularTestabilities();
                var count = testabilities.length;
                var didWork = false;
                var decrement = function (didWork_ /** TODO #9100 */) {
                    didWork = didWork || didWork_;
                    count--;
                    if (count == 0) {
                        callback(didWork);
                    }
                };
                testabilities.forEach(function (testability /** TODO #9100 */) {
                    testability.whenStable(decrement);
                });
            };
            if (!lang_1.global.frameworkStabilizers) {
                lang_1.global.frameworkStabilizers = collection_1.ListWrapper.createGrowableSize(0);
            }
            lang_1.global.frameworkStabilizers.push(whenAllStable);
        };
        BrowserGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
            if (elem == null) {
                return null;
            }
            var t = registry.getTestability(elem);
            if (lang_1.isPresent(t)) {
                return t;
            } else if (!findInAncestors) {
                return null;
            }
            if (dom_adapter_1.getDOM().isShadowRoot(elem)) {
                return this.findTestabilityInTree(registry, dom_adapter_1.getDOM().getHost(elem), true);
            }
            return this.findTestabilityInTree(registry, dom_adapter_1.getDOM().parentElement(elem), true);
        };
        return BrowserGetTestability;
    }();
    exports.BrowserGetTestability = BrowserGetTestability;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/dom/events/hammer_common.js', ['../../facade/collection', './event_manager', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var collection_1 = $__require('../../facade/collection');
    var event_manager_1 = $__require('./event_manager');
    var _eventNames = {
        // pan
        'pan': true,
        'panstart': true,
        'panmove': true,
        'panend': true,
        'pancancel': true,
        'panleft': true,
        'panright': true,
        'panup': true,
        'pandown': true,
        // pinch
        'pinch': true,
        'pinchstart': true,
        'pinchmove': true,
        'pinchend': true,
        'pinchcancel': true,
        'pinchin': true,
        'pinchout': true,
        // press
        'press': true,
        'pressup': true,
        // rotate
        'rotate': true,
        'rotatestart': true,
        'rotatemove': true,
        'rotateend': true,
        'rotatecancel': true,
        // swipe
        'swipe': true,
        'swipeleft': true,
        'swiperight': true,
        'swipeup': true,
        'swipedown': true,
        // tap
        'tap': true
    };
    var HammerGesturesPluginCommon = function (_super) {
        __extends(HammerGesturesPluginCommon, _super);
        function HammerGesturesPluginCommon() {
            _super.call(this);
        }
        HammerGesturesPluginCommon.prototype.supports = function (eventName) {
            eventName = eventName.toLowerCase();
            return collection_1.StringMapWrapper.contains(_eventNames, eventName);
        };
        return HammerGesturesPluginCommon;
    }(event_manager_1.EventManagerPlugin);
    exports.HammerGesturesPluginCommon = HammerGesturesPluginCommon;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/dom/events/hammer_gestures.js', ['@angular/core', '../../facade/exceptions', '../../facade/lang', './hammer_common', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var core_1 = $__require('@angular/core');
    var exceptions_1 = $__require('../../facade/exceptions');
    var lang_1 = $__require('../../facade/lang');
    var hammer_common_1 = $__require('./hammer_common');
    /**
     * A DI token that you can use to provide{@link HammerGestureConfig} to Angular. Use it to configure
     * Hammer gestures.
     *
     * @experimental
     */
    exports.HAMMER_GESTURE_CONFIG = new core_1.OpaqueToken('HammerGestureConfig');
    var HammerGestureConfig = function () {
        function HammerGestureConfig() {
            this.events = [];
            this.overrides = {};
        }
        HammerGestureConfig.prototype.buildHammer = function (element) {
            var mc = new Hammer(element);
            mc.get('pinch').set({ enable: true });
            mc.get('rotate').set({ enable: true });
            for (var eventName in this.overrides) {
                mc.get(eventName).set(this.overrides[eventName]);
            }
            return mc;
        };
        /** @nocollapse */
        HammerGestureConfig.decorators = [{ type: core_1.Injectable }];
        return HammerGestureConfig;
    }();
    exports.HammerGestureConfig = HammerGestureConfig;
    var HammerGesturesPlugin = function (_super) {
        __extends(HammerGesturesPlugin, _super);
        function HammerGesturesPlugin(_config) {
            _super.call(this);
            this._config = _config;
        }
        HammerGesturesPlugin.prototype.supports = function (eventName) {
            if (!_super.prototype.supports.call(this, eventName) && !this.isCustomEvent(eventName)) return false;
            if (!lang_1.isPresent(window['Hammer'])) {
                throw new exceptions_1.BaseException("Hammer.js is not loaded, can not bind " + eventName + " event");
            }
            return true;
        };
        HammerGesturesPlugin.prototype.addEventListener = function (element, eventName, handler) {
            var _this = this;
            var zone = this.manager.getZone();
            eventName = eventName.toLowerCase();
            return zone.runOutsideAngular(function () {
                // Creating the manager bind events, must be done outside of angular
                var mc = _this._config.buildHammer(element);
                var callback = function (eventObj /** TODO #???? */) {
                    zone.runGuarded(function () {
                        handler(eventObj);
                    });
                };
                mc.on(eventName, callback);
                return function () {
                    mc.off(eventName, callback);
                };
            });
        };
        HammerGesturesPlugin.prototype.isCustomEvent = function (eventName) {
            return this._config.events.indexOf(eventName) > -1;
        };
        /** @nocollapse */
        HammerGesturesPlugin.decorators = [{ type: core_1.Injectable }];
        /** @nocollapse */
        HammerGesturesPlugin.ctorParameters = [{ type: HammerGestureConfig, decorators: [{ type: core_1.Inject, args: [exports.HAMMER_GESTURE_CONFIG] }] }];
        return HammerGesturesPlugin;
    }(hammer_common_1.HammerGesturesPluginCommon);
    exports.HammerGesturesPlugin = HammerGesturesPlugin;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/dom/events/key_events.js', ['@angular/core', '../../facade/collection', '../../facade/lang', '../dom_adapter', './event_manager', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var core_1 = $__require('@angular/core');
    var collection_1 = $__require('../../facade/collection');
    var lang_1 = $__require('../../facade/lang');
    var dom_adapter_1 = $__require('../dom_adapter');
    var event_manager_1 = $__require('./event_manager');
    var modifierKeys = ['alt', 'control', 'meta', 'shift'];
    var modifierKeyGetters = {
        'alt': function (event) {
            return event.altKey;
        },
        'control': function (event) {
            return event.ctrlKey;
        },
        'meta': function (event) {
            return event.metaKey;
        },
        'shift': function (event) {
            return event.shiftKey;
        }
    };
    var KeyEventsPlugin = function (_super) {
        __extends(KeyEventsPlugin, _super);
        function KeyEventsPlugin() {
            _super.call(this);
        }
        KeyEventsPlugin.prototype.supports = function (eventName) {
            return lang_1.isPresent(KeyEventsPlugin.parseEventName(eventName));
        };
        KeyEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
            var parsedEvent = KeyEventsPlugin.parseEventName(eventName);
            var outsideHandler = KeyEventsPlugin.eventCallback(element, collection_1.StringMapWrapper.get(parsedEvent, 'fullKey'), handler, this.manager.getZone());
            return this.manager.getZone().runOutsideAngular(function () {
                return dom_adapter_1.getDOM().onAndCancel(element, collection_1.StringMapWrapper.get(parsedEvent, 'domEventName'), outsideHandler);
            });
        };
        KeyEventsPlugin.parseEventName = function (eventName) {
            var parts = eventName.toLowerCase().split('.');
            var domEventName = parts.shift();
            if (parts.length === 0 || !(lang_1.StringWrapper.equals(domEventName, 'keydown') || lang_1.StringWrapper.equals(domEventName, 'keyup'))) {
                return null;
            }
            var key = KeyEventsPlugin._normalizeKey(parts.pop());
            var fullKey = '';
            modifierKeys.forEach(function (modifierName) {
                if (collection_1.ListWrapper.contains(parts, modifierName)) {
                    collection_1.ListWrapper.remove(parts, modifierName);
                    fullKey += modifierName + '.';
                }
            });
            fullKey += key;
            if (parts.length != 0 || key.length === 0) {
                // returning null instead of throwing to let another plugin process the event
                return null;
            }
            var result = collection_1.StringMapWrapper.create();
            collection_1.StringMapWrapper.set(result, 'domEventName', domEventName);
            collection_1.StringMapWrapper.set(result, 'fullKey', fullKey);
            return result;
        };
        KeyEventsPlugin.getEventFullKey = function (event) {
            var fullKey = '';
            var key = dom_adapter_1.getDOM().getEventKey(event);
            key = key.toLowerCase();
            if (lang_1.StringWrapper.equals(key, ' ')) {
                key = 'space'; // for readability
            } else if (lang_1.StringWrapper.equals(key, '.')) {
                key = 'dot'; // because '.' is used as a separator in event names
            }
            modifierKeys.forEach(function (modifierName) {
                if (modifierName != key) {
                    var modifierGetter = collection_1.StringMapWrapper.get(modifierKeyGetters, modifierName);
                    if (modifierGetter(event)) {
                        fullKey += modifierName + '.';
                    }
                }
            });
            fullKey += key;
            return fullKey;
        };
        KeyEventsPlugin.eventCallback = function (element, fullKey, handler, zone) {
            return function (event /** TODO #9100 */) {
                if (lang_1.StringWrapper.equals(KeyEventsPlugin.getEventFullKey(event), fullKey)) {
                    zone.runGuarded(function () {
                        return handler(event);
                    });
                }
            };
        };
        /** @internal */
        KeyEventsPlugin._normalizeKey = function (keyName) {
            // TODO: switch to a StringMap if the mapping grows too much
            switch (keyName) {
                case 'esc':
                    return 'escape';
                default:
                    return keyName;
            }
        };
        /** @nocollapse */
        KeyEventsPlugin.decorators = [{ type: core_1.Injectable }];
        /** @nocollapse */
        KeyEventsPlugin.ctorParameters = [];
        return KeyEventsPlugin;
    }(event_manager_1.EventManagerPlugin);
    exports.KeyEventsPlugin = KeyEventsPlugin;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/security/html_sanitizer.js', ['@angular/core', '../dom/dom_adapter', './url_sanitizer', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var dom_adapter_1 = $__require('../dom/dom_adapter');
    var url_sanitizer_1 = $__require('./url_sanitizer');
    /** A <body> element that can be safely used to parse untrusted HTML. Lazily initialized below. */
    var inertElement = null;
    /** Lazily initialized to make sure the DOM adapter gets set before use. */
    var DOM = null;
    /** Returns an HTML element that is guaranteed to not execute code when creating elements in it. */
    function getInertElement() {
        if (inertElement) return inertElement;
        DOM = dom_adapter_1.getDOM();
        // Prefer using <template> element if supported.
        var templateEl = DOM.createElement('template');
        if ('content' in templateEl) return templateEl;
        var doc = DOM.createHtmlDocument();
        inertElement = DOM.querySelector(doc, 'body');
        if (inertElement == null) {
            // usually there should be only one body element in the document, but IE doesn't have any, so we
            // need to create one.
            var html = DOM.createElement('html', doc);
            inertElement = DOM.createElement('body', doc);
            DOM.appendChild(html, inertElement);
            DOM.appendChild(doc, html);
        }
        return inertElement;
    }
    function tagSet(tags) {
        var res = {};
        for (var _i = 0, _a = tags.split(','); _i < _a.length; _i++) {
            var t = _a[_i];
            res[t] = true;
        }
        return res;
    }
    function merge() {
        var sets = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            sets[_i - 0] = arguments[_i];
        }
        var res = {};
        for (var _a = 0, sets_1 = sets; _a < sets_1.length; _a++) {
            var s = sets_1[_a];
            for (var v in s) {
                if (s.hasOwnProperty(v)) res[v] = true;
            }
        }
        return res;
    }
    // Good source of info about elements and attributes
    // http://dev.w3.org/html5/spec/Overview.html#semantics
    // http://simon.html5.org/html-elements
    // Safe Void Elements - HTML5
    // http://dev.w3.org/html5/spec/Overview.html#void-elements
    var VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');
    // Elements that you can, intentionally, leave open (and which close themselves)
    // http://dev.w3.org/html5/spec/Overview.html#optional-tags
    var OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');
    var OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');
    var OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);
    // Safe Block Elements - HTML5
    var BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' + 'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' + 'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));
    // Inline Elements - HTML5
    var INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' + 'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' + 'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));
    var VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);
    // Attributes that have href and hence need to be sanitized
    var URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');
    // Attributes that have special href set hence need to be sanitized
    var SRCSET_ATTRS = tagSet('srcset');
    var HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' + 'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' + 'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' + 'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' + 'valign,value,vspace,width');
    // NB: This currently conciously doesn't support SVG. SVG sanitization has had several security
    // issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via
    // innerHTML is required, SVG attributes should be added here.
    // NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those
    // can be sanitized, but they increase security surface area without a legitimate use case, so they
    // are left out here.
    var VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);
    /**
     * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe
     * attributes.
     */
    var SanitizingHtmlSerializer = function () {
        function SanitizingHtmlSerializer() {
            // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just
            // because characters were re-encoded.
            this.sanitizedSomething = false;
            this.buf = [];
        }
        SanitizingHtmlSerializer.prototype.sanitizeChildren = function (el) {
            // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.
            // However this code never accesses properties off of `document` before deleting its contents
            // again, so it shouldn't be vulnerable to DOM clobbering.
            var current = el.firstChild;
            while (current) {
                if (DOM.isElementNode(current)) {
                    this.startElement(current);
                } else if (DOM.isTextNode(current)) {
                    this.chars(DOM.nodeValue(current));
                } else {
                    // Strip non-element, non-text nodes.
                    this.sanitizedSomething = true;
                }
                if (DOM.firstChild(current)) {
                    current = DOM.firstChild(current);
                    continue;
                }
                while (current) {
                    // Leaving the element. Walk up and to the right, closing tags as we go.
                    if (DOM.isElementNode(current)) {
                        this.endElement(current);
                    }
                    if (DOM.nextSibling(current)) {
                        current = DOM.nextSibling(current);
                        break;
                    }
                    current = DOM.parentElement(current);
                }
            }
            return this.buf.join('');
        };
        SanitizingHtmlSerializer.prototype.startElement = function (element) {
            var _this = this;
            var tagName = DOM.nodeName(element).toLowerCase();
            if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {
                this.sanitizedSomething = true;
                return;
            }
            this.buf.push('<');
            this.buf.push(tagName);
            DOM.attributeMap(element).forEach(function (value, attrName) {
                var lower = attrName.toLowerCase();
                if (!VALID_ATTRS.hasOwnProperty(lower)) {
                    _this.sanitizedSomething = true;
                    return;
                }
                // TODO(martinprobst): Special case image URIs for data:image/...
                if (URI_ATTRS[lower]) value = url_sanitizer_1.sanitizeUrl(value);
                if (SRCSET_ATTRS[lower]) value = url_sanitizer_1.sanitizeSrcset(value);
                _this.buf.push(' ');
                _this.buf.push(attrName);
                _this.buf.push('="');
                _this.buf.push(encodeEntities(value));
                _this.buf.push('"');
            });
            this.buf.push('>');
        };
        SanitizingHtmlSerializer.prototype.endElement = function (current) {
            var tagName = DOM.nodeName(current).toLowerCase();
            if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {
                this.buf.push('</');
                this.buf.push(tagName);
                this.buf.push('>');
            }
        };
        SanitizingHtmlSerializer.prototype.chars = function (chars /** TODO #9100 */) {
            this.buf.push(encodeEntities(chars));
        };
        return SanitizingHtmlSerializer;
    }();
    // Regular Expressions for parsing tags and attributes
    var SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
    // ! to ~ is the ASCII range.
    var NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;
    /**
     * Escapes all potentially dangerous characters, so that the
     * resulting string can be safely inserted into attribute or
     * element text.
     * @param value
     * @returns {string} escaped text
     */
    function encodeEntities(value) {
        return value.replace(/&/g, '&amp;').replace(SURROGATE_PAIR_REGEXP, function (match) {
            var hi = match.charCodeAt(0);
            var low = match.charCodeAt(1);
            return '&#' + ((hi - 0xD800) * 0x400 + (low - 0xDC00) + 0x10000) + ';';
        }).replace(NON_ALPHANUMERIC_REGEXP, function (match) {
            return '&#' + match.charCodeAt(0) + ';';
        }).replace(/</g, '&lt;').replace(/>/g, '&gt;');
    }
    /**
     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'
     * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo').
     *
     * This is undesirable since we don't want to allow any of these custom attributes. This method
     * strips them all.
     */
    function stripCustomNsAttrs(el) {
        DOM.attributeMap(el).forEach(function (_, attrName) {
            if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {
                DOM.removeAttribute(el, attrName);
            }
        });
        for (var _i = 0, _a = DOM.childNodesAsList(el); _i < _a.length; _i++) {
            var n = _a[_i];
            if (DOM.isElementNode(n)) stripCustomNsAttrs(n);
        }
    }
    /**
     * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to
     * the DOM in a browser environment.
     */
    function sanitizeHtml(unsafeHtmlInput) {
        try {
            var containerEl = getInertElement();
            // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).
            var unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';
            // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser
            // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.
            var mXSSAttempts = 5;
            var parsedHtml = unsafeHtml;
            do {
                if (mXSSAttempts === 0) {
                    throw new Error('Failed to sanitize html because the input is unstable');
                }
                mXSSAttempts--;
                unsafeHtml = parsedHtml;
                DOM.setInnerHTML(containerEl, unsafeHtml);
                if (DOM.defaultDoc().documentMode) {
                    // strip custom-namespaced attributes on IE<=11
                    stripCustomNsAttrs(containerEl);
                }
                parsedHtml = DOM.getInnerHTML(containerEl);
            } while (unsafeHtml !== parsedHtml);
            var sanitizer = new SanitizingHtmlSerializer();
            var safeHtml = sanitizer.sanitizeChildren(DOM.getTemplateContent(containerEl) || containerEl);
            // Clear out the body element.
            var parent_1 = DOM.getTemplateContent(containerEl) || containerEl;
            for (var _i = 0, _a = DOM.childNodesAsList(parent_1); _i < _a.length; _i++) {
                var child = _a[_i];
                DOM.removeChild(parent_1, child);
            }
            if (core_1.isDevMode() && sanitizer.sanitizedSomething) {
                DOM.log('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');
            }
            return safeHtml;
        } catch (e) {
            // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.
            inertElement = null;
            throw e;
        }
    }
    exports.sanitizeHtml = sanitizeHtml;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/security/style_sanitizer.js', ['@angular/core', '../dom/dom_adapter', './url_sanitizer', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var dom_adapter_1 = $__require('../dom/dom_adapter');
    var url_sanitizer_1 = $__require('./url_sanitizer');
    /**
     * Regular expression for safe style values.
     *
     * Quotes (" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.
     *
     * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or
     * font-family) and hence could allow multiple values to get injected, but that should pose no risk
     * of XSS.
     *
     * The function expression checks only for XSS safety, not for CSS validity.
     *
     * This regular expression was taken from the Closure sanitization library, and augmented for
     * transformation values.
     */
    var VALUES = '[-,."\'%_!# a-zA-Z0-9]+';
    var TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';
    var COLOR_FNS = '(?:rgb|hsl)a?';
    var FN_ARGS = '\\([-0-9.%, a-zA-Z]+\\)';
    var SAFE_STYLE_VALUE = new RegExp("^(" + VALUES + "|(?:" + TRANSFORMATION_FNS + "|" + COLOR_FNS + ")" + FN_ARGS + ")$", 'g');
    /**
     * Matches a `url(...)` value with an arbitrary argument as long as it does
     * not contain parentheses.
     *
     * The URL value still needs to be sanitized separately.
     *
     * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted
     * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.
     * by observing whether scroll bars are displayed, or character ranges used by a font face
     * definition.
     *
     * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that
     * binding a URL value without further cooperation from the page will cause an information leak, and
     * if so, it is just a leak, not a full blown XSS vulnerability.
     *
     * Given the common use case, low likelihood of attack vector, and low impact of an attack, this
     * code is permissive and allows URLs that sanitize otherwise.
     */
    var URL_RE = /^url\(([^)]+)\)$/;
    /**
     * Checks that quotes (" and ') are properly balanced inside a string. Assumes
     * that neither escape (\) nor any other character that could result in
     * breaking out of a string parsing context are allowed;
     * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.
     *
     * This code was taken from the Closure sanitization library.
     */
    function hasBalancedQuotes(value) {
        var outsideSingle = true;
        var outsideDouble = true;
        for (var i = 0; i < value.length; i++) {
            var c = value.charAt(i);
            if (c === '\'' && outsideDouble) {
                outsideSingle = !outsideSingle;
            } else if (c === '"' && outsideSingle) {
                outsideDouble = !outsideDouble;
            }
        }
        return outsideSingle && outsideDouble;
    }
    /**
     * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single
     * value) and returns a value that is safe to use in a browser environment.
     */
    function sanitizeStyle(value) {
        value = String(value).trim(); // Make sure it's actually a string.
        if (!value) return '';
        // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for
        // reasoning behind this.
        var urlMatch = value.match(URL_RE);
        if (urlMatch && url_sanitizer_1.sanitizeUrl(urlMatch[1]) === urlMatch[1] || value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {
            return value; // Safe style values.
        }
        if (core_1.isDevMode()) {
            dom_adapter_1.getDOM().log("WARNING: sanitizing unsafe style value " + value + " (see http://g.co/ng/security#xss).");
        }
        return 'unsafe';
    }
    exports.sanitizeStyle = sanitizeStyle;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/security/url_sanitizer.js', ['@angular/core', '../dom/dom_adapter', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var dom_adapter_1 = $__require('../dom/dom_adapter');
    /**
     * A pattern that recognizes a commonly useful subset of URLs that are safe.
     *
     * This regular expression matches a subset of URLs that will not cause script
     * execution if used in URL context within a HTML document. Specifically, this
     * regular expression matches if (comment from here on and regex copied from
     * Soy's EscapingConventions):
     * (1) Either a protocol in a whitelist (http, https, mailto or ftp).
     * (2) or no protocol.  A protocol must be followed by a colon. The below
     *     allows that by allowing colons only after one of the characters [/?#].
     *     A colon after a hash (#) must be in the fragment.
     *     Otherwise, a colon after a (?) must be in a query.
     *     Otherwise, a colon after a single solidus (/) must be in a path.
     *     Otherwise, a colon after a double solidus (//) must be in the authority
     *     (before port).
     *
     * The pattern disallows &, used in HTML entity declarations before
     * one of the characters in [/?#]. This disallows HTML entities used in the
     * protocol name, which should never happen, e.g. "h&#116;tp" for "http".
     * It also disallows HTML entities in the first path part of a relative path,
     * e.g. "foo&lt;bar/baz".  Our existing escaping functions should not produce
     * that. More importantly, it disallows masking of a colon,
     * e.g. "javascript&#58;...".
     *
     * This regular expression was taken from the Closure sanitization library.
     */
    var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;
    /* A pattern that matches safe srcset values */
    var SAFE_SRCSET_PATTERN = /^(?:(?:https?|file):|[^&:/?#]*(?:[/?#]|$))/gi;
    /** A pattern that matches safe data URLs. Only matches image, video and audio types. */
    var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;
    function sanitizeUrl(url) {
        url = String(url);
        if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN)) return url;
        if (core_1.isDevMode()) {
            dom_adapter_1.getDOM().log("WARNING: sanitizing unsafe URL value " + url + " (see http://g.co/ng/security#xss)");
        }
        return 'unsafe:' + url;
    }
    exports.sanitizeUrl = sanitizeUrl;
    function sanitizeSrcset(srcset) {
        srcset = String(srcset);
        return srcset.split(',').map(function (srcset) {
            return sanitizeUrl(srcset.trim());
        }).join(', ');
    }
    exports.sanitizeSrcset = sanitizeSrcset;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/security/dom_sanitization_service.js', ['@angular/core', './html_sanitizer', './style_sanitizer', './url_sanitizer', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var core_1 = $__require('@angular/core');
    exports.SecurityContext = core_1.SecurityContext;
    var html_sanitizer_1 = $__require('./html_sanitizer');
    var style_sanitizer_1 = $__require('./style_sanitizer');
    var url_sanitizer_1 = $__require('./url_sanitizer');
    /**
     * DomSanitizationService helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing
     * values to be safe to use in the different DOM contexts.
     *
     * For example, when binding a URL in an `<a [href]="someValue">` hyperlink, `someValue` will be
     * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on
     * the website.
     *
     * In specific situations, it might be necessary to disable sanitization, for example if the
     * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.
     * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`
     * methods, and then binding to that value from the template.
     *
     * These situations should be very rare, and extraordinary care must be taken to avoid creating a
     * Cross Site Scripting (XSS) security bug!
     *
     * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as
     * close as possible to the source of the value, to make it easy to verify no security bug is
     * created by its use.
     *
     * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that
     * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous
     * code. The sanitizer leaves safe values intact.
     *
     * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in
     * sanitization for the value passed in. Carefully check and audit all values and code paths going
     * into this call. Make sure any user data is appropriately escaped for this security context.
     * For more detail, see the [Security Guide](http://g.co/ng/security).
     *
     * @stable
     */
    var DomSanitizationService = function () {
        function DomSanitizationService() {}
        return DomSanitizationService;
    }();
    exports.DomSanitizationService = DomSanitizationService;
    var DomSanitizationServiceImpl = function (_super) {
        __extends(DomSanitizationServiceImpl, _super);
        function DomSanitizationServiceImpl() {
            _super.apply(this, arguments);
        }
        DomSanitizationServiceImpl.prototype.sanitize = function (ctx, value) {
            if (value == null) return null;
            switch (ctx) {
                case core_1.SecurityContext.NONE:
                    return value;
                case core_1.SecurityContext.HTML:
                    if (value instanceof SafeHtmlImpl) return value.changingThisBreaksApplicationSecurity;
                    this.checkNotSafeValue(value, 'HTML');
                    return html_sanitizer_1.sanitizeHtml(String(value));
                case core_1.SecurityContext.STYLE:
                    if (value instanceof SafeStyleImpl) return value.changingThisBreaksApplicationSecurity;
                    this.checkNotSafeValue(value, 'Style');
                    return style_sanitizer_1.sanitizeStyle(value);
                case core_1.SecurityContext.SCRIPT:
                    if (value instanceof SafeScriptImpl) return value.changingThisBreaksApplicationSecurity;
                    this.checkNotSafeValue(value, 'Script');
                    throw new Error('unsafe value used in a script context');
                case core_1.SecurityContext.URL:
                    if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {
                        // Allow resource URLs in URL contexts, they are strictly more trusted.
                        return value.changingThisBreaksApplicationSecurity;
                    }
                    this.checkNotSafeValue(value, 'URL');
                    return url_sanitizer_1.sanitizeUrl(String(value));
                case core_1.SecurityContext.RESOURCE_URL:
                    if (value instanceof SafeResourceUrlImpl) {
                        return value.changingThisBreaksApplicationSecurity;
                    }
                    this.checkNotSafeValue(value, 'ResourceURL');
                    throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');
                default:
                    throw new Error("Unexpected SecurityContext " + ctx + " (see http://g.co/ng/security#xss)");
            }
        };
        DomSanitizationServiceImpl.prototype.checkNotSafeValue = function (value, expectedType) {
            if (value instanceof SafeValueImpl) {
                throw new Error("Required a safe " + expectedType + ", got a " + value.getTypeName() + " " + "(see http://g.co/ng/security#xss)");
            }
        };
        DomSanitizationServiceImpl.prototype.bypassSecurityTrustHtml = function (value) {
            return new SafeHtmlImpl(value);
        };
        DomSanitizationServiceImpl.prototype.bypassSecurityTrustStyle = function (value) {
            return new SafeStyleImpl(value);
        };
        DomSanitizationServiceImpl.prototype.bypassSecurityTrustScript = function (value) {
            return new SafeScriptImpl(value);
        };
        DomSanitizationServiceImpl.prototype.bypassSecurityTrustUrl = function (value) {
            return new SafeUrlImpl(value);
        };
        DomSanitizationServiceImpl.prototype.bypassSecurityTrustResourceUrl = function (value) {
            return new SafeResourceUrlImpl(value);
        };
        /** @nocollapse */
        DomSanitizationServiceImpl.decorators = [{ type: core_1.Injectable }];
        return DomSanitizationServiceImpl;
    }(DomSanitizationService);
    exports.DomSanitizationServiceImpl = DomSanitizationServiceImpl;
    var SafeValueImpl = function () {
        function SafeValueImpl(changingThisBreaksApplicationSecurity) {
            this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
            // empty
        }
        SafeValueImpl.prototype.toString = function () {
            return "SafeValue must use [property]=binding: " + this.changingThisBreaksApplicationSecurity + " (see http://g.co/ng/security#xss)";
        };
        return SafeValueImpl;
    }();
    var SafeHtmlImpl = function (_super) {
        __extends(SafeHtmlImpl, _super);
        function SafeHtmlImpl() {
            _super.apply(this, arguments);
        }
        SafeHtmlImpl.prototype.getTypeName = function () {
            return 'HTML';
        };
        return SafeHtmlImpl;
    }(SafeValueImpl);
    var SafeStyleImpl = function (_super) {
        __extends(SafeStyleImpl, _super);
        function SafeStyleImpl() {
            _super.apply(this, arguments);
        }
        SafeStyleImpl.prototype.getTypeName = function () {
            return 'Style';
        };
        return SafeStyleImpl;
    }(SafeValueImpl);
    var SafeScriptImpl = function (_super) {
        __extends(SafeScriptImpl, _super);
        function SafeScriptImpl() {
            _super.apply(this, arguments);
        }
        SafeScriptImpl.prototype.getTypeName = function () {
            return 'Script';
        };
        return SafeScriptImpl;
    }(SafeValueImpl);
    var SafeUrlImpl = function (_super) {
        __extends(SafeUrlImpl, _super);
        function SafeUrlImpl() {
            _super.apply(this, arguments);
        }
        SafeUrlImpl.prototype.getTypeName = function () {
            return 'URL';
        };
        return SafeUrlImpl;
    }(SafeValueImpl);
    var SafeResourceUrlImpl = function (_super) {
        __extends(SafeResourceUrlImpl, _super);
        function SafeResourceUrlImpl() {
            _super.apply(this, arguments);
        }
        SafeResourceUrlImpl.prototype.getTypeName = function () {
            return 'ResourceURL';
        };
        return SafeResourceUrlImpl;
    }(SafeValueImpl);
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/browser.js', ['@angular/common', '@angular/core', '../core_private', '../src/dom/animation_driver', '../src/dom/web_animations_driver', './browser/browser_adapter', './browser/location/browser_platform_location', './browser/testability', './dom/debug/ng_probe', './dom/dom_adapter', './dom/dom_renderer', './dom/dom_tokens', './dom/events/dom_events', './dom/events/event_manager', './dom/events/hammer_gestures', './dom/events/key_events', './dom/shared_styles_host', './security/dom_sanitization_service', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var common_1 = $__require('@angular/common');
    var core_1 = $__require('@angular/core');
    var core_private_1 = $__require('../core_private');
    var animation_driver_1 = $__require('../src/dom/animation_driver');
    var web_animations_driver_1 = $__require('../src/dom/web_animations_driver');
    var browser_adapter_1 = $__require('./browser/browser_adapter');
    var browser_platform_location_1 = $__require('./browser/location/browser_platform_location');
    var testability_1 = $__require('./browser/testability');
    var ng_probe_1 = $__require('./dom/debug/ng_probe');
    var dom_adapter_1 = $__require('./dom/dom_adapter');
    var dom_renderer_1 = $__require('./dom/dom_renderer');
    var dom_tokens_1 = $__require('./dom/dom_tokens');
    var dom_events_1 = $__require('./dom/events/dom_events');
    var event_manager_1 = $__require('./dom/events/event_manager');
    var hammer_gestures_1 = $__require('./dom/events/hammer_gestures');
    var key_events_1 = $__require('./dom/events/key_events');
    var shared_styles_host_1 = $__require('./dom/shared_styles_host');
    var dom_sanitization_service_1 = $__require('./security/dom_sanitization_service');
    exports.INTERNAL_BROWSER_PLATFORM_PROVIDERS = [{ provide: core_1.PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true }, { provide: common_1.PlatformLocation, useClass: browser_platform_location_1.BrowserPlatformLocation }];
    /**
     * A set of providers to initialize the Angular platform in a web browser.
     *
     * Used automatically by `bootstrap`, or can be passed to `platform`.
     *
     * @deprecated Use `platformBrowser()` or create a custom platform factory via
     * `createPlatformFactory(platformBrowser, ...)`
     */
    exports.BROWSER_PLATFORM_PROVIDERS = [core_1.PLATFORM_COMMON_PROVIDERS, exports.INTERNAL_BROWSER_PLATFORM_PROVIDERS];
    /**
     * @security Replacing built-in sanitization providers exposes the application to XSS risks.
     * Attacker-controlled data introduced by an unsanitized provider could expose your
     * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).
     * @experimental
     */
    exports.BROWSER_SANITIZATION_PROVIDERS = [{ provide: core_1.SanitizationService, useExisting: dom_sanitization_service_1.DomSanitizationService }, { provide: dom_sanitization_service_1.DomSanitizationService, useClass: dom_sanitization_service_1.DomSanitizationServiceImpl }];
    /**
     * A set of providers to initialize an Angular application in a web browser.
     *
     * Used automatically by `bootstrap`, or can be passed to {@link PlatformRef
     * PlatformRef.application}.
     *
     * @deprecated Create a module that includes `BrowserModule` instead. This is empty for backwards
     * compatibility,
     * as all of our bootstrap methods add a module implicitly, i.e. keeping this filled would add the
     * providers 2x.
     */
    exports.BROWSER_APP_PROVIDERS = [];
    /**
     * @experimental API related to bootstrapping are still under review.
     */
    exports.platformBrowser = core_1.createPlatformFactory(core_1.platformCore, 'browser', exports.INTERNAL_BROWSER_PLATFORM_PROVIDERS);
    /**
     * @deprecated Use {@link platformBrowser} instead
     */
    exports.browserPlatform = exports.platformBrowser;
    function initDomAdapter() {
        browser_adapter_1.BrowserDomAdapter.makeCurrent();
        core_private_1.wtfInit();
        testability_1.BrowserGetTestability.init();
    }
    exports.initDomAdapter = initDomAdapter;
    function _exceptionHandler() {
        return new core_1.ExceptionHandler(dom_adapter_1.getDOM());
    }
    exports._exceptionHandler = _exceptionHandler;
    function _document() {
        return dom_adapter_1.getDOM().defaultDoc();
    }
    exports._document = _document;
    function _resolveDefaultAnimationDriver() {
        if (dom_adapter_1.getDOM().supportsWebAnimation()) {
            return new web_animations_driver_1.WebAnimationsDriver();
        }
        return animation_driver_1.AnimationDriver.NOOP;
    }
    exports._resolveDefaultAnimationDriver = _resolveDefaultAnimationDriver;
    var BrowserModule = function () {
        function BrowserModule() {}
        /** @nocollapse */
        BrowserModule.decorators = [{ type: core_1.NgModule, args: [{
                providers: [exports.BROWSER_SANITIZATION_PROVIDERS, { provide: core_1.ExceptionHandler, useFactory: _exceptionHandler, deps: [] }, { provide: dom_tokens_1.DOCUMENT, useFactory: _document, deps: [] }, { provide: event_manager_1.EVENT_MANAGER_PLUGINS, useClass: dom_events_1.DomEventsPlugin, multi: true }, { provide: event_manager_1.EVENT_MANAGER_PLUGINS, useClass: key_events_1.KeyEventsPlugin, multi: true }, { provide: event_manager_1.EVENT_MANAGER_PLUGINS, useClass: hammer_gestures_1.HammerGesturesPlugin, multi: true }, { provide: hammer_gestures_1.HAMMER_GESTURE_CONFIG, useClass: hammer_gestures_1.HammerGestureConfig }, { provide: dom_renderer_1.DomRootRenderer, useClass: dom_renderer_1.DomRootRenderer_ }, { provide: core_1.RootRenderer, useExisting: dom_renderer_1.DomRootRenderer }, { provide: shared_styles_host_1.SharedStylesHost, useExisting: shared_styles_host_1.DomSharedStylesHost }, { provide: animation_driver_1.AnimationDriver, useFactory: _resolveDefaultAnimationDriver }, shared_styles_host_1.DomSharedStylesHost, core_1.Testability, event_manager_1.EventManager, ng_probe_1.ELEMENT_PROBE_PROVIDERS],
                exports: [common_1.CommonModule, core_1.ApplicationModule]
            }] }];
        return BrowserModule;
    }();
    exports.BrowserModule = BrowserModule;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/dom/debug/ng_probe.js', ['@angular/core', '../../../core_private', '../dom_adapter', '../dom_renderer', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var core_private_1 = $__require('../../../core_private');
    var dom_adapter_1 = $__require('../dom_adapter');
    var dom_renderer_1 = $__require('../dom_renderer');
    var CORE_TOKENS = {
        'ApplicationRef': core_1.ApplicationRef,
        'NgZone': core_1.NgZone
    };
    var INSPECT_GLOBAL_NAME = 'ng.probe';
    var CORE_TOKENS_GLOBAL_NAME = 'ng.coreTokens';
    /**
     * Returns a {@link DebugElement} for the given native DOM element, or
     * null if the given native element does not have an Angular view associated
     * with it.
     */
    function inspectNativeElement(element /** TODO #9100 */) {
        return core_1.getDebugNode(element);
    }
    exports.inspectNativeElement = inspectNativeElement;
    function _createConditionalRootRenderer(rootRenderer /** TODO #9100 */) {
        if (core_1.isDevMode()) {
            return _createRootRenderer(rootRenderer);
        }
        return rootRenderer;
    }
    exports._createConditionalRootRenderer = _createConditionalRootRenderer;
    function _createRootRenderer(rootRenderer /** TODO #9100 */) {
        dom_adapter_1.getDOM().setGlobalVar(INSPECT_GLOBAL_NAME, inspectNativeElement);
        dom_adapter_1.getDOM().setGlobalVar(CORE_TOKENS_GLOBAL_NAME, CORE_TOKENS);
        return new core_private_1.DebugDomRootRenderer(rootRenderer);
    }
    /**
     * Providers which support debugging Angular applications (e.g. via `ng.probe`).
     */
    exports.ELEMENT_PROBE_PROVIDERS = [{ provide: core_1.RootRenderer, useFactory: _createConditionalRootRenderer, deps: [dom_renderer_1.DomRootRenderer] }];
    exports.ELEMENT_PROBE_PROVIDERS_PROD_MODE = [{ provide: core_1.RootRenderer, useFactory: _createRootRenderer, deps: [dom_renderer_1.DomRootRenderer] }];
    

    return module.exports;
});
System.registerDynamic("npm:@angular/platform-browser@2.0.0-rc.5/core_private.js", ["@angular/core"], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var core_1 = $__require("@angular/core");
  exports.RenderDebugInfo = core_1.__core_private__.RenderDebugInfo;
  exports.wtfInit = core_1.__core_private__.wtfInit;
  exports.ReflectionCapabilities = core_1.__core_private__.ReflectionCapabilities;
  exports.VIEW_ENCAPSULATION_VALUES = core_1.__core_private__.VIEW_ENCAPSULATION_VALUES;
  exports.DebugDomRootRenderer = core_1.__core_private__.DebugDomRootRenderer;
  exports.reflector = core_1.__core_private__.reflector;
  exports.NoOpAnimationPlayer = core_1.__core_private__.NoOpAnimationPlayer;
  exports.AnimationPlayer = core_1.__core_private__.AnimationPlayer;
  exports.AnimationSequencePlayer = core_1.__core_private__.AnimationSequencePlayer;
  exports.AnimationGroupPlayer = core_1.__core_private__.AnimationGroupPlayer;
  exports.AnimationKeyframe = core_1.__core_private__.AnimationKeyframe;
  exports.AnimationStyles = core_1.__core_private__.AnimationStyles;
  exports.prepareFinalAnimationStyles = core_1.__core_private__.prepareFinalAnimationStyles;
  exports.balanceAnimationKeyframes = core_1.__core_private__.balanceAnimationKeyframes;
  exports.flattenStyles = core_1.__core_private__.flattenStyles;
  exports.clearStyles = core_1.__core_private__.clearStyles;
  exports.collectAndResolveStyles = core_1.__core_private__.collectAndResolveStyles;
  

  return module.exports;
});
System.registerDynamic("npm:@angular/platform-browser@2.0.0-rc.5/src/dom/animation_driver.js", ["../../core_private", "reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_private_1 = $__require("../../core_private");
    var _NoOpAnimationDriver = function () {
        function _NoOpAnimationDriver() {}
        _NoOpAnimationDriver.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing) {
            return new core_private_1.NoOpAnimationPlayer();
        };
        return _NoOpAnimationDriver;
    }();
    /**
     * @experimental
     */
    var AnimationDriver = function () {
        function AnimationDriver() {}
        AnimationDriver.NOOP = new _NoOpAnimationDriver();
        return AnimationDriver;
    }();
    exports.AnimationDriver = AnimationDriver;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/dom/util.js', ['../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var lang_1 = $__require('../facade/lang');
    var CAMEL_CASE_REGEXP = /([A-Z])/g;
    var DASH_CASE_REGEXP = /-([a-z])/g;
    function camelCaseToDashCase(input) {
        return lang_1.StringWrapper.replaceAllMapped(input, CAMEL_CASE_REGEXP, function (m /** TODO #9100 */) {
            return '-' + m[1].toLowerCase();
        });
    }
    exports.camelCaseToDashCase = camelCaseToDashCase;
    function dashCaseToCamelCase(input) {
        return lang_1.StringWrapper.replaceAllMapped(input, DASH_CASE_REGEXP, function (m /** TODO #9100 */) {
            return m[1].toUpperCase();
        });
    }
    exports.dashCaseToCamelCase = dashCaseToCamelCase;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/dom/dom_renderer.js', ['@angular/core', '../facade/exceptions', '../facade/lang', './animation_driver', './dom_adapter', './dom_tokens', './events/event_manager', './shared_styles_host', './util', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var core_1 = $__require('@angular/core');
    var exceptions_1 = $__require('../facade/exceptions');
    var lang_1 = $__require('../facade/lang');
    var animation_driver_1 = $__require('./animation_driver');
    var dom_adapter_1 = $__require('./dom_adapter');
    var dom_tokens_1 = $__require('./dom_tokens');
    var event_manager_1 = $__require('./events/event_manager');
    var shared_styles_host_1 = $__require('./shared_styles_host');
    var util_1 = $__require('./util');
    var NAMESPACE_URIS = {
        'xlink': 'http://www.w3.org/1999/xlink',
        'svg': 'http://www.w3.org/2000/svg',
        'xhtml': 'http://www.w3.org/1999/xhtml'
    };
    var TEMPLATE_COMMENT_TEXT = 'template bindings={}';
    var TEMPLATE_BINDINGS_EXP = /^template bindings=(.*)$/;
    var DomRootRenderer = function () {
        function DomRootRenderer(document, eventManager, sharedStylesHost, animationDriver) {
            this.document = document;
            this.eventManager = eventManager;
            this.sharedStylesHost = sharedStylesHost;
            this.animationDriver = animationDriver;
            this.registeredComponents = new Map();
        }
        DomRootRenderer.prototype.renderComponent = function (componentProto) {
            var renderer = this.registeredComponents.get(componentProto.id);
            if (lang_1.isBlank(renderer)) {
                renderer = new DomRenderer(this, componentProto, this.animationDriver);
                this.registeredComponents.set(componentProto.id, renderer);
            }
            return renderer;
        };
        return DomRootRenderer;
    }();
    exports.DomRootRenderer = DomRootRenderer;
    var DomRootRenderer_ = function (_super) {
        __extends(DomRootRenderer_, _super);
        function DomRootRenderer_(_document, _eventManager, sharedStylesHost, animationDriver) {
            _super.call(this, _document, _eventManager, sharedStylesHost, animationDriver);
        }
        /** @nocollapse */
        DomRootRenderer_.decorators = [{ type: core_1.Injectable }];
        /** @nocollapse */
        DomRootRenderer_.ctorParameters = [{ type: undefined, decorators: [{ type: core_1.Inject, args: [dom_tokens_1.DOCUMENT] }] }, { type: event_manager_1.EventManager }, { type: shared_styles_host_1.DomSharedStylesHost }, { type: animation_driver_1.AnimationDriver }];
        return DomRootRenderer_;
    }(DomRootRenderer);
    exports.DomRootRenderer_ = DomRootRenderer_;
    var DomRenderer = function () {
        function DomRenderer(_rootRenderer, componentProto, _animationDriver) {
            this._rootRenderer = _rootRenderer;
            this.componentProto = componentProto;
            this._animationDriver = _animationDriver;
            this._styles = _flattenStyles(componentProto.id, componentProto.styles, []);
            if (componentProto.encapsulation !== core_1.ViewEncapsulation.Native) {
                this._rootRenderer.sharedStylesHost.addStyles(this._styles);
            }
            if (this.componentProto.encapsulation === core_1.ViewEncapsulation.Emulated) {
                this._contentAttr = _shimContentAttribute(componentProto.id);
                this._hostAttr = _shimHostAttribute(componentProto.id);
            } else {
                this._contentAttr = null;
                this._hostAttr = null;
            }
        }
        DomRenderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) {
            var el;
            if (lang_1.isString(selectorOrNode)) {
                el = dom_adapter_1.getDOM().querySelector(this._rootRenderer.document, selectorOrNode);
                if (lang_1.isBlank(el)) {
                    throw new exceptions_1.BaseException("The selector \"" + selectorOrNode + "\" did not match any elements");
                }
            } else {
                el = selectorOrNode;
            }
            dom_adapter_1.getDOM().clearNodes(el);
            return el;
        };
        DomRenderer.prototype.createElement = function (parent, name, debugInfo) {
            var nsAndName = splitNamespace(name);
            var el = lang_1.isPresent(nsAndName[0]) ? dom_adapter_1.getDOM().createElementNS(NAMESPACE_URIS[nsAndName[0]], nsAndName[1]) : dom_adapter_1.getDOM().createElement(nsAndName[1]);
            if (lang_1.isPresent(this._contentAttr)) {
                dom_adapter_1.getDOM().setAttribute(el, this._contentAttr, '');
            }
            if (lang_1.isPresent(parent)) {
                dom_adapter_1.getDOM().appendChild(parent, el);
            }
            return el;
        };
        DomRenderer.prototype.createViewRoot = function (hostElement) {
            var nodesParent;
            if (this.componentProto.encapsulation === core_1.ViewEncapsulation.Native) {
                nodesParent = dom_adapter_1.getDOM().createShadowRoot(hostElement);
                this._rootRenderer.sharedStylesHost.addHost(nodesParent);
                for (var i = 0; i < this._styles.length; i++) {
                    dom_adapter_1.getDOM().appendChild(nodesParent, dom_adapter_1.getDOM().createStyleElement(this._styles[i]));
                }
            } else {
                if (lang_1.isPresent(this._hostAttr)) {
                    dom_adapter_1.getDOM().setAttribute(hostElement, this._hostAttr, '');
                }
                nodesParent = hostElement;
            }
            return nodesParent;
        };
        DomRenderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) {
            var comment = dom_adapter_1.getDOM().createComment(TEMPLATE_COMMENT_TEXT);
            if (lang_1.isPresent(parentElement)) {
                dom_adapter_1.getDOM().appendChild(parentElement, comment);
            }
            return comment;
        };
        DomRenderer.prototype.createText = function (parentElement, value, debugInfo) {
            var node = dom_adapter_1.getDOM().createTextNode(value);
            if (lang_1.isPresent(parentElement)) {
                dom_adapter_1.getDOM().appendChild(parentElement, node);
            }
            return node;
        };
        DomRenderer.prototype.projectNodes = function (parentElement, nodes) {
            if (lang_1.isBlank(parentElement)) return;
            appendNodes(parentElement, nodes);
        };
        DomRenderer.prototype.attachViewAfter = function (node, viewRootNodes) {
            moveNodesAfterSibling(node, viewRootNodes);
        };
        DomRenderer.prototype.detachView = function (viewRootNodes) {
            for (var i = 0; i < viewRootNodes.length; i++) {
                dom_adapter_1.getDOM().remove(viewRootNodes[i]);
            }
        };
        DomRenderer.prototype.destroyView = function (hostElement, viewAllNodes) {
            if (this.componentProto.encapsulation === core_1.ViewEncapsulation.Native && lang_1.isPresent(hostElement)) {
                this._rootRenderer.sharedStylesHost.removeHost(dom_adapter_1.getDOM().getShadowRoot(hostElement));
            }
        };
        DomRenderer.prototype.listen = function (renderElement, name, callback) {
            return this._rootRenderer.eventManager.addEventListener(renderElement, name, decoratePreventDefault(callback));
        };
        DomRenderer.prototype.listenGlobal = function (target, name, callback) {
            return this._rootRenderer.eventManager.addGlobalEventListener(target, name, decoratePreventDefault(callback));
        };
        DomRenderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {
            dom_adapter_1.getDOM().setProperty(renderElement, propertyName, propertyValue);
        };
        DomRenderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) {
            var attrNs;
            var nsAndName = splitNamespace(attributeName);
            if (lang_1.isPresent(nsAndName[0])) {
                attributeName = nsAndName[0] + ':' + nsAndName[1];
                attrNs = NAMESPACE_URIS[nsAndName[0]];
            }
            if (lang_1.isPresent(attributeValue)) {
                if (lang_1.isPresent(attrNs)) {
                    dom_adapter_1.getDOM().setAttributeNS(renderElement, attrNs, attributeName, attributeValue);
                } else {
                    dom_adapter_1.getDOM().setAttribute(renderElement, attributeName, attributeValue);
                }
            } else {
                if (lang_1.isPresent(attrNs)) {
                    dom_adapter_1.getDOM().removeAttributeNS(renderElement, attrNs, nsAndName[1]);
                } else {
                    dom_adapter_1.getDOM().removeAttribute(renderElement, attributeName);
                }
            }
        };
        DomRenderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) {
            var dashCasedPropertyName = util_1.camelCaseToDashCase(propertyName);
            if (dom_adapter_1.getDOM().isCommentNode(renderElement)) {
                var existingBindings = lang_1.StringWrapper.replaceAll(dom_adapter_1.getDOM().getText(renderElement), /\n/g, '').match(TEMPLATE_BINDINGS_EXP);
                var parsedBindings = lang_1.Json.parse(existingBindings[1]);
                parsedBindings[dashCasedPropertyName] = propertyValue;
                dom_adapter_1.getDOM().setText(renderElement, lang_1.StringWrapper.replace(TEMPLATE_COMMENT_TEXT, '{}', lang_1.Json.stringify(parsedBindings)));
            } else {
                this.setElementAttribute(renderElement, propertyName, propertyValue);
            }
        };
        DomRenderer.prototype.setElementClass = function (renderElement, className, isAdd) {
            if (isAdd) {
                dom_adapter_1.getDOM().addClass(renderElement, className);
            } else {
                dom_adapter_1.getDOM().removeClass(renderElement, className);
            }
        };
        DomRenderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) {
            if (lang_1.isPresent(styleValue)) {
                dom_adapter_1.getDOM().setStyle(renderElement, styleName, lang_1.stringify(styleValue));
            } else {
                dom_adapter_1.getDOM().removeStyle(renderElement, styleName);
            }
        };
        DomRenderer.prototype.invokeElementMethod = function (renderElement, methodName, args) {
            dom_adapter_1.getDOM().invoke(renderElement, methodName, args);
        };
        DomRenderer.prototype.setText = function (renderNode, text) {
            dom_adapter_1.getDOM().setText(renderNode, text);
        };
        DomRenderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing) {
            return this._animationDriver.animate(element, startingStyles, keyframes, duration, delay, easing);
        };
        return DomRenderer;
    }();
    exports.DomRenderer = DomRenderer;
    function moveNodesAfterSibling(sibling /** TODO #9100 */, nodes /** TODO #9100 */) {
        var parent = dom_adapter_1.getDOM().parentElement(sibling);
        if (nodes.length > 0 && lang_1.isPresent(parent)) {
            var nextSibling = dom_adapter_1.getDOM().nextSibling(sibling);
            if (lang_1.isPresent(nextSibling)) {
                for (var i = 0; i < nodes.length; i++) {
                    dom_adapter_1.getDOM().insertBefore(nextSibling, nodes[i]);
                }
            } else {
                for (var i = 0; i < nodes.length; i++) {
                    dom_adapter_1.getDOM().appendChild(parent, nodes[i]);
                }
            }
        }
    }
    function appendNodes(parent /** TODO #9100 */, nodes /** TODO #9100 */) {
        for (var i = 0; i < nodes.length; i++) {
            dom_adapter_1.getDOM().appendChild(parent, nodes[i]);
        }
    }
    function decoratePreventDefault(eventHandler) {
        return function (event /** TODO #9100 */) {
            var allowDefaultBehavior = eventHandler(event);
            if (allowDefaultBehavior === false) {
                // TODO(tbosch): move preventDefault into event plugins...
                dom_adapter_1.getDOM().preventDefault(event);
            }
        };
    }
    var COMPONENT_REGEX = /%COMP%/g;
    exports.COMPONENT_VARIABLE = '%COMP%';
    exports.HOST_ATTR = "_nghost-" + exports.COMPONENT_VARIABLE;
    exports.CONTENT_ATTR = "_ngcontent-" + exports.COMPONENT_VARIABLE;
    function _shimContentAttribute(componentShortId) {
        return lang_1.StringWrapper.replaceAll(exports.CONTENT_ATTR, COMPONENT_REGEX, componentShortId);
    }
    function _shimHostAttribute(componentShortId) {
        return lang_1.StringWrapper.replaceAll(exports.HOST_ATTR, COMPONENT_REGEX, componentShortId);
    }
    function _flattenStyles(compId, styles, target) {
        for (var i = 0; i < styles.length; i++) {
            var style = styles[i];
            if (lang_1.isArray(style)) {
                _flattenStyles(compId, style, target);
            } else {
                style = lang_1.StringWrapper.replaceAll(style, COMPONENT_REGEX, compId);
                target.push(style);
            }
        }
        return target;
    }
    var NS_PREFIX_RE = /^:([^:]+):(.+)$/;
    function splitNamespace(name) {
        if (name[0] != ':') {
            return [null, name];
        }
        var match = name.match(NS_PREFIX_RE);
        return [match[1], match[2]];
    }
    

    return module.exports;
});
System.registerDynamic("npm:@angular/platform-browser@2.0.0-rc.5/src/facade/base_wrapped_exception.js", ["reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * A base class for the WrappedException that can be used to identify
     * a WrappedException from ExceptionHandler without adding circular
     * dependency.
     */
    var BaseWrappedException = function (_super) {
        __extends(BaseWrappedException, _super);
        function BaseWrappedException(message) {
            _super.call(this, message);
        }
        Object.defineProperty(BaseWrappedException.prototype, "wrapperMessage", {
            get: function () {
                return '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseWrappedException.prototype, "wrapperStack", {
            get: function () {
                return null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseWrappedException.prototype, "originalException", {
            get: function () {
                return null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseWrappedException.prototype, "originalStack", {
            get: function () {
                return null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseWrappedException.prototype, "context", {
            get: function () {
                return null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseWrappedException.prototype, "message", {
            get: function () {
                return '';
            },
            enumerable: true,
            configurable: true
        });
        return BaseWrappedException;
    }(Error);
    exports.BaseWrappedException = BaseWrappedException;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/facade/exception_handler.js', ['./base_wrapped_exception', './collection', './lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var base_wrapped_exception_1 = $__require('./base_wrapped_exception');
    var collection_1 = $__require('./collection');
    var lang_1 = $__require('./lang');
    var _ArrayLogger = function () {
        function _ArrayLogger() {
            this.res = [];
        }
        _ArrayLogger.prototype.log = function (s) {
            this.res.push(s);
        };
        _ArrayLogger.prototype.logError = function (s) {
            this.res.push(s);
        };
        _ArrayLogger.prototype.logGroup = function (s) {
            this.res.push(s);
        };
        _ArrayLogger.prototype.logGroupEnd = function () {};
        ;
        return _ArrayLogger;
    }();
    /**
     * Provides a hook for centralized exception handling.
     *
     * The default implementation of `ExceptionHandler` prints error messages to the `Console`. To
     * intercept error handling,
     * write a custom exception handler that replaces this default as appropriate for your app.
     *
     * ### Example
     *
     * ```javascript
     *
     * class MyExceptionHandler implements ExceptionHandler {
     *   call(error, stackTrace = null, reason = null) {
     *     // do something with the exception
     *   }
     * }
     *
     * bootstrap(MyApp, [{provide: ExceptionHandler, useClass: MyExceptionHandler}])
     *
     * ```
     * @stable
     */
    var ExceptionHandler = function () {
        function ExceptionHandler(_logger, _rethrowException) {
            if (_rethrowException === void 0) {
                _rethrowException = true;
            }
            this._logger = _logger;
            this._rethrowException = _rethrowException;
        }
        ExceptionHandler.exceptionToString = function (exception, stackTrace, reason) {
            if (stackTrace === void 0) {
                stackTrace = null;
            }
            if (reason === void 0) {
                reason = null;
            }
            var l = new _ArrayLogger();
            var e = new ExceptionHandler(l, false);
            e.call(exception, stackTrace, reason);
            return l.res.join('\n');
        };
        ExceptionHandler.prototype.call = function (exception, stackTrace, reason) {
            if (stackTrace === void 0) {
                stackTrace = null;
            }
            if (reason === void 0) {
                reason = null;
            }
            var originalException = this._findOriginalException(exception);
            var originalStack = this._findOriginalStack(exception);
            var context = this._findContext(exception);
            this._logger.logGroup("EXCEPTION: " + this._extractMessage(exception));
            if (lang_1.isPresent(stackTrace) && lang_1.isBlank(originalStack)) {
                this._logger.logError('STACKTRACE:');
                this._logger.logError(this._longStackTrace(stackTrace));
            }
            if (lang_1.isPresent(reason)) {
                this._logger.logError("REASON: " + reason);
            }
            if (lang_1.isPresent(originalException)) {
                this._logger.logError("ORIGINAL EXCEPTION: " + this._extractMessage(originalException));
            }
            if (lang_1.isPresent(originalStack)) {
                this._logger.logError('ORIGINAL STACKTRACE:');
                this._logger.logError(this._longStackTrace(originalStack));
            }
            if (lang_1.isPresent(context)) {
                this._logger.logError('ERROR CONTEXT:');
                this._logger.logError(context);
            }
            this._logger.logGroupEnd();
            // We rethrow exceptions, so operations like 'bootstrap' will result in an error
            // when an exception happens. If we do not rethrow, bootstrap will always succeed.
            if (this._rethrowException) throw exception;
        };
        /** @internal */
        ExceptionHandler.prototype._extractMessage = function (exception) {
            return exception instanceof base_wrapped_exception_1.BaseWrappedException ? exception.wrapperMessage : exception.toString();
        };
        /** @internal */
        ExceptionHandler.prototype._longStackTrace = function (stackTrace) {
            return collection_1.isListLikeIterable(stackTrace) ? stackTrace.join('\n\n-----async gap-----\n') : stackTrace.toString();
        };
        /** @internal */
        ExceptionHandler.prototype._findContext = function (exception) {
            try {
                if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
                return lang_1.isPresent(exception.context) ? exception.context : this._findContext(exception.originalException);
            } catch (e) {
                // exception.context can throw an exception. if it happens, we ignore the context.
                return null;
            }
        };
        /** @internal */
        ExceptionHandler.prototype._findOriginalException = function (exception) {
            if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
            var e = exception.originalException;
            while (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
                e = e.originalException;
            }
            return e;
        };
        /** @internal */
        ExceptionHandler.prototype._findOriginalStack = function (exception) {
            if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
            var e = exception;
            var stack = exception.originalStack;
            while (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
                e = e.originalException;
                if (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
                    stack = e.originalStack;
                }
            }
            return stack;
        };
        return ExceptionHandler;
    }();
    exports.ExceptionHandler = ExceptionHandler;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/facade/exceptions.js', ['./base_wrapped_exception', './exception_handler', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var base_wrapped_exception_1 = $__require('./base_wrapped_exception');
    var exception_handler_1 = $__require('./exception_handler');
    var exception_handler_2 = $__require('./exception_handler');
    exports.ExceptionHandler = exception_handler_2.ExceptionHandler;
    /**
     * @stable
     */
    var BaseException = function (_super) {
        __extends(BaseException, _super);
        function BaseException(message) {
            if (message === void 0) {
                message = '--';
            }
            _super.call(this, message);
            this.message = message;
            this.stack = new Error(message).stack;
        }
        BaseException.prototype.toString = function () {
            return this.message;
        };
        return BaseException;
    }(Error);
    exports.BaseException = BaseException;
    /**
     * Wraps an exception and provides additional context or information.
     * @stable
     */
    var WrappedException = function (_super) {
        __extends(WrappedException, _super);
        function WrappedException(_wrapperMessage, _originalException /** TODO #9100 */, _originalStack /** TODO #9100 */, _context /** TODO #9100 */) {
            _super.call(this, _wrapperMessage);
            this._wrapperMessage = _wrapperMessage;
            this._originalException = _originalException;
            this._originalStack = _originalStack;
            this._context = _context;
            this._wrapperStack = new Error(_wrapperMessage).stack;
        }
        Object.defineProperty(WrappedException.prototype, "wrapperMessage", {
            get: function () {
                return this._wrapperMessage;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WrappedException.prototype, "wrapperStack", {
            get: function () {
                return this._wrapperStack;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WrappedException.prototype, "originalException", {
            get: function () {
                return this._originalException;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WrappedException.prototype, "originalStack", {
            get: function () {
                return this._originalStack;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WrappedException.prototype, "context", {
            get: function () {
                return this._context;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WrappedException.prototype, "message", {
            get: function () {
                return exception_handler_1.ExceptionHandler.exceptionToString(this);
            },
            enumerable: true,
            configurable: true
        });
        WrappedException.prototype.toString = function () {
            return this.message;
        };
        return WrappedException;
    }(base_wrapped_exception_1.BaseWrappedException);
    exports.WrappedException = WrappedException;
    function makeTypeError(message) {
        return new TypeError(message);
    }
    exports.makeTypeError = makeTypeError;
    function unimplemented() {
        throw new BaseException('unimplemented');
    }
    exports.unimplemented = unimplemented;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/dom/events/event_manager.js', ['@angular/core', '../../facade/collection', '../../facade/exceptions', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var collection_1 = $__require('../../facade/collection');
    var exceptions_1 = $__require('../../facade/exceptions');
    /**
     * @stable
     */
    exports.EVENT_MANAGER_PLUGINS = new core_1.OpaqueToken('EventManagerPlugins');
    var EventManager = function () {
        function EventManager(plugins, _zone) {
            var _this = this;
            this._zone = _zone;
            plugins.forEach(function (p) {
                return p.manager = _this;
            });
            this._plugins = collection_1.ListWrapper.reversed(plugins);
        }
        EventManager.prototype.addEventListener = function (element, eventName, handler) {
            var plugin = this._findPluginFor(eventName);
            return plugin.addEventListener(element, eventName, handler);
        };
        EventManager.prototype.addGlobalEventListener = function (target, eventName, handler) {
            var plugin = this._findPluginFor(eventName);
            return plugin.addGlobalEventListener(target, eventName, handler);
        };
        EventManager.prototype.getZone = function () {
            return this._zone;
        };
        /** @internal */
        EventManager.prototype._findPluginFor = function (eventName) {
            var plugins = this._plugins;
            for (var i = 0; i < plugins.length; i++) {
                var plugin = plugins[i];
                if (plugin.supports(eventName)) {
                    return plugin;
                }
            }
            throw new exceptions_1.BaseException("No event manager plugin found for event " + eventName);
        };
        /** @nocollapse */
        EventManager.decorators = [{ type: core_1.Injectable }];
        /** @nocollapse */
        EventManager.ctorParameters = [{ type: Array, decorators: [{ type: core_1.Inject, args: [exports.EVENT_MANAGER_PLUGINS] }] }, { type: core_1.NgZone }];
        return EventManager;
    }();
    exports.EventManager = EventManager;
    var EventManagerPlugin = function () {
        function EventManagerPlugin() {}
        // That is equivalent to having supporting $event.target
        EventManagerPlugin.prototype.supports = function (eventName) {
            return false;
        };
        EventManagerPlugin.prototype.addEventListener = function (element, eventName, handler) {
            throw 'not implemented';
        };
        EventManagerPlugin.prototype.addGlobalEventListener = function (element, eventName, handler) {
            throw 'not implemented';
        };
        return EventManagerPlugin;
    }();
    exports.EventManagerPlugin = EventManagerPlugin;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/dom/events/dom_events.js', ['@angular/core', '../dom_adapter', './event_manager', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var core_1 = $__require('@angular/core');
    var dom_adapter_1 = $__require('../dom_adapter');
    var event_manager_1 = $__require('./event_manager');
    var DomEventsPlugin = function (_super) {
        __extends(DomEventsPlugin, _super);
        function DomEventsPlugin() {
            _super.apply(this, arguments);
        }
        // This plugin should come last in the list of plugins, because it accepts all
        // events.
        DomEventsPlugin.prototype.supports = function (eventName) {
            return true;
        };
        DomEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
            var zone = this.manager.getZone();
            var outsideHandler = function (event /** TODO #9100 */) {
                return zone.runGuarded(function () {
                    return handler(event);
                });
            };
            return this.manager.getZone().runOutsideAngular(function () {
                return dom_adapter_1.getDOM().onAndCancel(element, eventName, outsideHandler);
            });
        };
        DomEventsPlugin.prototype.addGlobalEventListener = function (target, eventName, handler) {
            var element = dom_adapter_1.getDOM().getGlobalEventTarget(target);
            var zone = this.manager.getZone();
            var outsideHandler = function (event /** TODO #9100 */) {
                return zone.runGuarded(function () {
                    return handler(event);
                });
            };
            return this.manager.getZone().runOutsideAngular(function () {
                return dom_adapter_1.getDOM().onAndCancel(element, eventName, outsideHandler);
            });
        };
        /** @nocollapse */
        DomEventsPlugin.decorators = [{ type: core_1.Injectable }];
        return DomEventsPlugin;
    }(event_manager_1.EventManagerPlugin);
    exports.DomEventsPlugin = DomEventsPlugin;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/platform-browser@2.0.0-rc.5/src/facade/collection.js", ["./lang", "reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var lang_1 = $__require("./lang");
    exports.Map = lang_1.global.Map;
    exports.Set = lang_1.global.Set;
    // Safari and Internet Explorer do not support the iterable parameter to the
    // Map constructor.  We work around that by manually adding the items.
    var createMapFromPairs = function () {
        try {
            if (new exports.Map([[1, 2]]).size === 1) {
                return function createMapFromPairs(pairs) {
                    return new exports.Map(pairs);
                };
            }
        } catch (e) {}
        return function createMapAndPopulateFromPairs(pairs) {
            var map = new exports.Map();
            for (var i = 0; i < pairs.length; i++) {
                var pair = pairs[i];
                map.set(pair[0], pair[1]);
            }
            return map;
        };
    }();
    var createMapFromMap = function () {
        try {
            if (new exports.Map(new exports.Map())) {
                return function createMapFromMap(m) {
                    return new exports.Map(m);
                };
            }
        } catch (e) {}
        return function createMapAndPopulateFromMap(m) {
            var map = new exports.Map();
            m.forEach(function (v, k) {
                map.set(k, v);
            });
            return map;
        };
    }();
    var _clearValues = function () {
        if (new exports.Map().keys().next) {
            return function _clearValues(m) {
                var keyIterator = m.keys();
                var k;
                while (!(k = keyIterator.next()).done) {
                    m.set(k.value, null);
                }
            };
        } else {
            return function _clearValuesWithForeEach(m) {
                m.forEach(function (v, k) {
                    m.set(k, null);
                });
            };
        }
    }();
    // Safari doesn't implement MapIterator.next(), which is used is Traceur's polyfill of Array.from
    // TODO(mlaval): remove the work around once we have a working polyfill of Array.from
    var _arrayFromMap = function () {
        try {
            if (new exports.Map().values().next) {
                return function createArrayFromMap(m, getValues) {
                    return getValues ? Array.from(m.values()) : Array.from(m.keys());
                };
            }
        } catch (e) {}
        return function createArrayFromMapWithForeach(m, getValues) {
            var res = ListWrapper.createFixedSize(m.size),
                i = 0;
            m.forEach(function (v, k) {
                res[i] = getValues ? v : k;
                i++;
            });
            return res;
        };
    }();
    var MapWrapper = function () {
        function MapWrapper() {}
        MapWrapper.clone = function (m) {
            return createMapFromMap(m);
        };
        MapWrapper.createFromStringMap = function (stringMap) {
            var result = new exports.Map();
            for (var prop in stringMap) {
                result.set(prop, stringMap[prop]);
            }
            return result;
        };
        MapWrapper.toStringMap = function (m) {
            var r = {};
            m.forEach(function (v, k) {
                return r[k] = v;
            });
            return r;
        };
        MapWrapper.createFromPairs = function (pairs) {
            return createMapFromPairs(pairs);
        };
        MapWrapper.clearValues = function (m) {
            _clearValues(m);
        };
        MapWrapper.iterable = function (m) {
            return m;
        };
        MapWrapper.keys = function (m) {
            return _arrayFromMap(m, false);
        };
        MapWrapper.values = function (m) {
            return _arrayFromMap(m, true);
        };
        return MapWrapper;
    }();
    exports.MapWrapper = MapWrapper;
    /**
     * Wraps Javascript Objects
     */
    var StringMapWrapper = function () {
        function StringMapWrapper() {}
        StringMapWrapper.create = function () {
            // Note: We are not using Object.create(null) here due to
            // performance!
            // http://jsperf.com/ng2-object-create-null
            return {};
        };
        StringMapWrapper.contains = function (map, key) {
            return map.hasOwnProperty(key);
        };
        StringMapWrapper.get = function (map, key) {
            return map.hasOwnProperty(key) ? map[key] : undefined;
        };
        StringMapWrapper.set = function (map, key, value) {
            map[key] = value;
        };
        StringMapWrapper.keys = function (map) {
            return Object.keys(map);
        };
        StringMapWrapper.values = function (map) {
            return Object.keys(map).map(function (k) {
                return map[k];
            });
        };
        StringMapWrapper.isEmpty = function (map) {
            for (var prop in map) {
                return false;
            }
            return true;
        };
        StringMapWrapper.delete = function (map, key) {
            delete map[key];
        };
        StringMapWrapper.forEach = function (map, callback) {
            for (var _i = 0, _a = Object.keys(map); _i < _a.length; _i++) {
                var k = _a[_i];
                callback(map[k], k);
            }
        };
        StringMapWrapper.merge = function (m1, m2) {
            var m = {};
            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
                var k = _a[_i];
                m[k] = m1[k];
            }
            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
                var k = _c[_b];
                m[k] = m2[k];
            }
            return m;
        };
        StringMapWrapper.equals = function (m1, m2) {
            var k1 = Object.keys(m1);
            var k2 = Object.keys(m2);
            if (k1.length != k2.length) {
                return false;
            }
            var key;
            for (var i = 0; i < k1.length; i++) {
                key = k1[i];
                if (m1[key] !== m2[key]) {
                    return false;
                }
            }
            return true;
        };
        return StringMapWrapper;
    }();
    exports.StringMapWrapper = StringMapWrapper;
    var ListWrapper = function () {
        function ListWrapper() {}
        // JS has no way to express a statically fixed size list, but dart does so we
        // keep both methods.
        ListWrapper.createFixedSize = function (size) {
            return new Array(size);
        };
        ListWrapper.createGrowableSize = function (size) {
            return new Array(size);
        };
        ListWrapper.clone = function (array) {
            return array.slice(0);
        };
        ListWrapper.forEachWithIndex = function (array, fn) {
            for (var i = 0; i < array.length; i++) {
                fn(array[i], i);
            }
        };
        ListWrapper.first = function (array) {
            if (!array) return null;
            return array[0];
        };
        ListWrapper.last = function (array) {
            if (!array || array.length == 0) return null;
            return array[array.length - 1];
        };
        ListWrapper.indexOf = function (array, value, startIndex) {
            if (startIndex === void 0) {
                startIndex = 0;
            }
            return array.indexOf(value, startIndex);
        };
        ListWrapper.contains = function (list, el) {
            return list.indexOf(el) !== -1;
        };
        ListWrapper.reversed = function (array) {
            var a = ListWrapper.clone(array);
            return a.reverse();
        };
        ListWrapper.concat = function (a, b) {
            return a.concat(b);
        };
        ListWrapper.insert = function (list, index, value) {
            list.splice(index, 0, value);
        };
        ListWrapper.removeAt = function (list, index) {
            var res = list[index];
            list.splice(index, 1);
            return res;
        };
        ListWrapper.removeAll = function (list, items) {
            for (var i = 0; i < items.length; ++i) {
                var index = list.indexOf(items[i]);
                list.splice(index, 1);
            }
        };
        ListWrapper.remove = function (list, el) {
            var index = list.indexOf(el);
            if (index > -1) {
                list.splice(index, 1);
                return true;
            }
            return false;
        };
        ListWrapper.clear = function (list) {
            list.length = 0;
        };
        ListWrapper.isEmpty = function (list) {
            return list.length == 0;
        };
        ListWrapper.fill = function (list, value, start, end) {
            if (start === void 0) {
                start = 0;
            }
            if (end === void 0) {
                end = null;
            }
            list.fill(value, start, end === null ? list.length : end);
        };
        ListWrapper.equals = function (a, b) {
            if (a.length != b.length) return false;
            for (var i = 0; i < a.length; ++i) {
                if (a[i] !== b[i]) return false;
            }
            return true;
        };
        ListWrapper.slice = function (l, from, to) {
            if (from === void 0) {
                from = 0;
            }
            if (to === void 0) {
                to = null;
            }
            return l.slice(from, to === null ? undefined : to);
        };
        ListWrapper.splice = function (l, from, length) {
            return l.splice(from, length);
        };
        ListWrapper.sort = function (l, compareFn) {
            if (lang_1.isPresent(compareFn)) {
                l.sort(compareFn);
            } else {
                l.sort();
            }
        };
        ListWrapper.toString = function (l) {
            return l.toString();
        };
        ListWrapper.toJSON = function (l) {
            return JSON.stringify(l);
        };
        ListWrapper.maximum = function (list, predicate) {
            if (list.length == 0) {
                return null;
            }
            var solution = null;
            var maxValue = -Infinity;
            for (var index = 0; index < list.length; index++) {
                var candidate = list[index];
                if (lang_1.isBlank(candidate)) {
                    continue;
                }
                var candidateValue = predicate(candidate);
                if (candidateValue > maxValue) {
                    solution = candidate;
                    maxValue = candidateValue;
                }
            }
            return solution;
        };
        ListWrapper.flatten = function (list) {
            var target = [];
            _flattenArray(list, target);
            return target;
        };
        ListWrapper.addAll = function (list, source) {
            for (var i = 0; i < source.length; i++) {
                list.push(source[i]);
            }
        };
        return ListWrapper;
    }();
    exports.ListWrapper = ListWrapper;
    function _flattenArray(source, target) {
        if (lang_1.isPresent(source)) {
            for (var i = 0; i < source.length; i++) {
                var item = source[i];
                if (lang_1.isArray(item)) {
                    _flattenArray(item, target);
                } else {
                    target.push(item);
                }
            }
        }
        return target;
    }
    function isListLikeIterable(obj) {
        if (!lang_1.isJsObject(obj)) return false;
        return lang_1.isArray(obj) || !(obj instanceof exports.Map) && lang_1.getSymbolIterator() in obj; // JS Iterable have a Symbol.iterator prop
    }
    exports.isListLikeIterable = isListLikeIterable;
    function areIterablesEqual(a, b, comparator) {
        var iterator1 = a[lang_1.getSymbolIterator()]();
        var iterator2 = b[lang_1.getSymbolIterator()]();
        while (true) {
            var item1 = iterator1.next();
            var item2 = iterator2.next();
            if (item1.done && item2.done) return true;
            if (item1.done || item2.done) return false;
            if (!comparator(item1.value, item2.value)) return false;
        }
    }
    exports.areIterablesEqual = areIterablesEqual;
    function iterateListLike(obj, fn) {
        if (lang_1.isArray(obj)) {
            for (var i = 0; i < obj.length; i++) {
                fn(obj[i]);
            }
        } else {
            var iterator = obj[lang_1.getSymbolIterator()]();
            var item;
            while (!(item = iterator.next()).done) {
                fn(item.value);
            }
        }
    }
    exports.iterateListLike = iterateListLike;
    // Safari and Internet Explorer do not support the iterable parameter to the
    // Set constructor.  We work around that by manually adding the items.
    var createSetFromList = function () {
        var test = new exports.Set([1, 2, 3]);
        if (test.size === 3) {
            return function createSetFromList(lst) {
                return new exports.Set(lst);
            };
        } else {
            return function createSetAndPopulateFromList(lst) {
                var res = new exports.Set(lst);
                if (res.size !== lst.length) {
                    for (var i = 0; i < lst.length; i++) {
                        res.add(lst[i]);
                    }
                }
                return res;
            };
        }
    }();
    var SetWrapper = function () {
        function SetWrapper() {}
        SetWrapper.createFromList = function (lst) {
            return createSetFromList(lst);
        };
        SetWrapper.has = function (s, key) {
            return s.has(key);
        };
        SetWrapper.delete = function (m, k) {
            m.delete(k);
        };
        return SetWrapper;
    }();
    exports.SetWrapper = SetWrapper;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/facade/lang.js', ['reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var globalScope;
    if (typeof window === 'undefined') {
        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
            globalScope = self;
        } else {
            globalScope = global;
        }
    } else {
        globalScope = window;
    }
    function scheduleMicroTask(fn) {
        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
    }
    exports.scheduleMicroTask = scheduleMicroTask;
    // Need to declare a new variable for global here since TypeScript
    // exports the original value of the symbol.
    var _global = globalScope;
    exports.global = _global;
    /**
     * Runtime representation a type that a Component or other object is instances of.
     *
     * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by
     * the `MyCustomComponent` constructor function.
     *
     * @stable
     */
    exports.Type = Function;
    function getTypeNameForDebugging(type) {
        if (type['name']) {
            return type['name'];
        }
        return typeof type;
    }
    exports.getTypeNameForDebugging = getTypeNameForDebugging;
    exports.Math = _global.Math;
    exports.Date = _global.Date;
    // TODO: remove calls to assert in production environment
    // Note: Can't just export this and import in in other files
    // as `assert` is a reserved keyword in Dart
    _global.assert = function assert(condition) {
        // TODO: to be fixed properly via #2830, noop for now
    };
    function isPresent(obj) {
        return obj !== undefined && obj !== null;
    }
    exports.isPresent = isPresent;
    function isBlank(obj) {
        return obj === undefined || obj === null;
    }
    exports.isBlank = isBlank;
    function isBoolean(obj) {
        return typeof obj === 'boolean';
    }
    exports.isBoolean = isBoolean;
    function isNumber(obj) {
        return typeof obj === 'number';
    }
    exports.isNumber = isNumber;
    function isString(obj) {
        return typeof obj === 'string';
    }
    exports.isString = isString;
    function isFunction(obj) {
        return typeof obj === 'function';
    }
    exports.isFunction = isFunction;
    function isType(obj) {
        return isFunction(obj);
    }
    exports.isType = isType;
    function isStringMap(obj) {
        return typeof obj === 'object' && obj !== null;
    }
    exports.isStringMap = isStringMap;
    var STRING_MAP_PROTO = Object.getPrototypeOf({});
    function isStrictStringMap(obj) {
        return isStringMap(obj) && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
    }
    exports.isStrictStringMap = isStrictStringMap;
    function isPromise(obj) {
        // allow any Promise/A+ compliant thenable.
        // It's up to the caller to ensure that obj.then conforms to the spec
        return isPresent(obj) && isFunction(obj.then);
    }
    exports.isPromise = isPromise;
    function isArray(obj) {
        return Array.isArray(obj);
    }
    exports.isArray = isArray;
    function isDate(obj) {
        return obj instanceof exports.Date && !isNaN(obj.valueOf());
    }
    exports.isDate = isDate;
    function noop() {}
    exports.noop = noop;
    function stringify(token) {
        if (typeof token === 'string') {
            return token;
        }
        if (token === undefined || token === null) {
            return '' + token;
        }
        if (token.overriddenName) {
            return token.overriddenName;
        }
        if (token.name) {
            return token.name;
        }
        var res = token.toString();
        var newLineIndex = res.indexOf('\n');
        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
    }
    exports.stringify = stringify;
    // serialize / deserialize enum exist only for consistency with dart API
    // enums in typescript don't need to be serialized
    function serializeEnum(val) {
        return val;
    }
    exports.serializeEnum = serializeEnum;
    function deserializeEnum(val, values) {
        return val;
    }
    exports.deserializeEnum = deserializeEnum;
    function resolveEnumToken(enumValue, val) {
        return enumValue[val];
    }
    exports.resolveEnumToken = resolveEnumToken;
    var StringWrapper = function () {
        function StringWrapper() {}
        StringWrapper.fromCharCode = function (code) {
            return String.fromCharCode(code);
        };
        StringWrapper.charCodeAt = function (s, index) {
            return s.charCodeAt(index);
        };
        StringWrapper.split = function (s, regExp) {
            return s.split(regExp);
        };
        StringWrapper.equals = function (s, s2) {
            return s === s2;
        };
        StringWrapper.stripLeft = function (s, charVal) {
            if (s && s.length) {
                var pos = 0;
                for (var i = 0; i < s.length; i++) {
                    if (s[i] != charVal) break;
                    pos++;
                }
                s = s.substring(pos);
            }
            return s;
        };
        StringWrapper.stripRight = function (s, charVal) {
            if (s && s.length) {
                var pos = s.length;
                for (var i = s.length - 1; i >= 0; i--) {
                    if (s[i] != charVal) break;
                    pos--;
                }
                s = s.substring(0, pos);
            }
            return s;
        };
        StringWrapper.replace = function (s, from, replace) {
            return s.replace(from, replace);
        };
        StringWrapper.replaceAll = function (s, from, replace) {
            return s.replace(from, replace);
        };
        StringWrapper.slice = function (s, from, to) {
            if (from === void 0) {
                from = 0;
            }
            if (to === void 0) {
                to = null;
            }
            return s.slice(from, to === null ? undefined : to);
        };
        StringWrapper.replaceAllMapped = function (s, from, cb) {
            return s.replace(from, function () {
                var matches = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    matches[_i - 0] = arguments[_i];
                }
                // Remove offset & string from the result array
                matches.splice(-2, 2);
                // The callback receives match, p1, ..., pn
                return cb(matches);
            });
        };
        StringWrapper.contains = function (s, substr) {
            return s.indexOf(substr) != -1;
        };
        StringWrapper.compare = function (a, b) {
            if (a < b) {
                return -1;
            } else if (a > b) {
                return 1;
            } else {
                return 0;
            }
        };
        return StringWrapper;
    }();
    exports.StringWrapper = StringWrapper;
    var StringJoiner = function () {
        function StringJoiner(parts) {
            if (parts === void 0) {
                parts = [];
            }
            this.parts = parts;
        }
        StringJoiner.prototype.add = function (part) {
            this.parts.push(part);
        };
        StringJoiner.prototype.toString = function () {
            return this.parts.join('');
        };
        return StringJoiner;
    }();
    exports.StringJoiner = StringJoiner;
    var NumberParseError = function (_super) {
        __extends(NumberParseError, _super);
        function NumberParseError(message) {
            _super.call(this);
            this.message = message;
        }
        NumberParseError.prototype.toString = function () {
            return this.message;
        };
        return NumberParseError;
    }(Error);
    exports.NumberParseError = NumberParseError;
    var NumberWrapper = function () {
        function NumberWrapper() {}
        NumberWrapper.toFixed = function (n, fractionDigits) {
            return n.toFixed(fractionDigits);
        };
        NumberWrapper.equal = function (a, b) {
            return a === b;
        };
        NumberWrapper.parseIntAutoRadix = function (text) {
            var result = parseInt(text);
            if (isNaN(result)) {
                throw new NumberParseError('Invalid integer literal when parsing ' + text);
            }
            return result;
        };
        NumberWrapper.parseInt = function (text, radix) {
            if (radix == 10) {
                if (/^(\-|\+)?[0-9]+$/.test(text)) {
                    return parseInt(text, radix);
                }
            } else if (radix == 16) {
                if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
                    return parseInt(text, radix);
                }
            } else {
                var result = parseInt(text, radix);
                if (!isNaN(result)) {
                    return result;
                }
            }
            throw new NumberParseError('Invalid integer literal when parsing ' + text + ' in base ' + radix);
        };
        // TODO: NaN is a valid literal but is returned by parseFloat to indicate an error.
        NumberWrapper.parseFloat = function (text) {
            return parseFloat(text);
        };
        Object.defineProperty(NumberWrapper, "NaN", {
            get: function () {
                return NaN;
            },
            enumerable: true,
            configurable: true
        });
        NumberWrapper.isNumeric = function (value) {
            return !isNaN(value - parseFloat(value));
        };
        NumberWrapper.isNaN = function (value) {
            return isNaN(value);
        };
        NumberWrapper.isInteger = function (value) {
            return Number.isInteger(value);
        };
        return NumberWrapper;
    }();
    exports.NumberWrapper = NumberWrapper;
    exports.RegExp = _global.RegExp;
    var FunctionWrapper = function () {
        function FunctionWrapper() {}
        FunctionWrapper.apply = function (fn, posArgs) {
            return fn.apply(null, posArgs);
        };
        FunctionWrapper.bind = function (fn, scope) {
            return fn.bind(scope);
        };
        return FunctionWrapper;
    }();
    exports.FunctionWrapper = FunctionWrapper;
    // JS has NaN !== NaN
    function looseIdentical(a, b) {
        return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
    }
    exports.looseIdentical = looseIdentical;
    // JS considers NaN is the same as NaN for map Key (while NaN !== NaN otherwise)
    // see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map
    function getMapKey(value) {
        return value;
    }
    exports.getMapKey = getMapKey;
    function normalizeBlank(obj) {
        return isBlank(obj) ? null : obj;
    }
    exports.normalizeBlank = normalizeBlank;
    function normalizeBool(obj) {
        return isBlank(obj) ? false : obj;
    }
    exports.normalizeBool = normalizeBool;
    function isJsObject(o) {
        return o !== null && (typeof o === 'function' || typeof o === 'object');
    }
    exports.isJsObject = isJsObject;
    function print(obj) {
        console.log(obj);
    }
    exports.print = print;
    function warn(obj) {
        console.warn(obj);
    }
    exports.warn = warn;
    // Can't be all uppercase as our transpiler would think it is a special directive...
    var Json = function () {
        function Json() {}
        Json.parse = function (s) {
            return _global.JSON.parse(s);
        };
        Json.stringify = function (data) {
            // Dart doesn't take 3 arguments
            return _global.JSON.stringify(data, null, 2);
        };
        return Json;
    }();
    exports.Json = Json;
    var DateWrapper = function () {
        function DateWrapper() {}
        DateWrapper.create = function (year, month, day, hour, minutes, seconds, milliseconds) {
            if (month === void 0) {
                month = 1;
            }
            if (day === void 0) {
                day = 1;
            }
            if (hour === void 0) {
                hour = 0;
            }
            if (minutes === void 0) {
                minutes = 0;
            }
            if (seconds === void 0) {
                seconds = 0;
            }
            if (milliseconds === void 0) {
                milliseconds = 0;
            }
            return new exports.Date(year, month - 1, day, hour, minutes, seconds, milliseconds);
        };
        DateWrapper.fromISOString = function (str) {
            return new exports.Date(str);
        };
        DateWrapper.fromMillis = function (ms) {
            return new exports.Date(ms);
        };
        DateWrapper.toMillis = function (date) {
            return date.getTime();
        };
        DateWrapper.now = function () {
            return new exports.Date();
        };
        DateWrapper.toJson = function (date) {
            return date.toJSON();
        };
        return DateWrapper;
    }();
    exports.DateWrapper = DateWrapper;
    function setValueOnPath(global, path, value) {
        var parts = path.split('.');
        var obj = global;
        while (parts.length > 1) {
            var name = parts.shift();
            if (obj.hasOwnProperty(name) && isPresent(obj[name])) {
                obj = obj[name];
            } else {
                obj = obj[name] = {};
            }
        }
        if (obj === undefined || obj === null) {
            obj = {};
        }
        obj[parts.shift()] = value;
    }
    exports.setValueOnPath = setValueOnPath;
    var _symbolIterator = null;
    function getSymbolIterator() {
        if (isBlank(_symbolIterator)) {
            if (isPresent(globalScope.Symbol) && isPresent(Symbol.iterator)) {
                _symbolIterator = Symbol.iterator;
            } else {
                // es6-shim specific logic
                var keys = Object.getOwnPropertyNames(Map.prototype);
                for (var i = 0; i < keys.length; ++i) {
                    var key = keys[i];
                    if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {
                        _symbolIterator = key;
                    }
                }
            }
        }
        return _symbolIterator;
    }
    exports.getSymbolIterator = getSymbolIterator;
    function evalExpression(sourceUrl, expr, declarations, vars) {
        var fnBody = declarations + "\nreturn " + expr + "\n//# sourceURL=" + sourceUrl;
        var fnArgNames = [];
        var fnArgValues = [];
        for (var argName in vars) {
            fnArgNames.push(argName);
            fnArgValues.push(vars[argName]);
        }
        return new (Function.bind.apply(Function, [void 0].concat(fnArgNames.concat(fnBody))))().apply(void 0, fnArgValues);
    }
    exports.evalExpression = evalExpression;
    function isPrimitive(obj) {
        return !isJsObject(obj);
    }
    exports.isPrimitive = isPrimitive;
    function hasConstructor(value, type) {
        return value.constructor === type;
    }
    exports.hasConstructor = hasConstructor;
    function escape(s) {
        return _global.encodeURI(s);
    }
    exports.escape = escape;
    function escapeRegExp(s) {
        return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
    }
    exports.escapeRegExp = escapeRegExp;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/platform-browser@2.0.0-rc.5/src/dom/dom_adapter.js", ["../facade/lang", "reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var lang_1 = $__require("../facade/lang");
    var _DOM = null;
    function getDOM() {
        return _DOM;
    }
    exports.getDOM = getDOM;
    function setDOM(adapter) {
        _DOM = adapter;
    }
    exports.setDOM = setDOM;
    function setRootDomAdapter(adapter) {
        if (lang_1.isBlank(_DOM)) {
            _DOM = adapter;
        }
    }
    exports.setRootDomAdapter = setRootDomAdapter;
    /* tslint:disable:requireParameterType */
    /**
     * Provides DOM operations in an environment-agnostic way.
     */
    var DomAdapter = function () {
        function DomAdapter() {
            this.xhrType = null;
        }
        /** @deprecated */
        DomAdapter.prototype.getXHR = function () {
            return this.xhrType;
        };
        Object.defineProperty(DomAdapter.prototype, "attrToPropMap", {
            /**
             * Maps attribute names to their corresponding property names for cases
             * where attribute name doesn't match property name.
             */
            get: function () {
                return this._attrToPropMap;
            },
            set: function (value) {
                this._attrToPropMap = value;
            },
            enumerable: true,
            configurable: true
        });
        ;
        ;
        return DomAdapter;
    }();
    exports.DomAdapter = DomAdapter;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/dom/dom_tokens.js', ['@angular/core', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var core_1 = $__require('@angular/core');
  /**
   * A DI Token representing the main rendering context. In a browser this is the DOM Document.
   *
   * Note: Document might not be available in the Application Context when Application and Rendering
   * Contexts are not the same (e.g. when running the application into a Web Worker).
   *
   * @stable
   */
  exports.DOCUMENT = new core_1.OpaqueToken('DocumentToken');
  

  return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/src/dom/shared_styles_host.js', ['@angular/core', '../facade/collection', './dom_adapter', './dom_tokens', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var core_1 = $__require('@angular/core');
    var collection_1 = $__require('../facade/collection');
    var dom_adapter_1 = $__require('./dom_adapter');
    var dom_tokens_1 = $__require('./dom_tokens');
    var SharedStylesHost = function () {
        function SharedStylesHost() {
            /** @internal */
            this._styles = [];
            /** @internal */
            this._stylesSet = new Set();
        }
        SharedStylesHost.prototype.addStyles = function (styles) {
            var _this = this;
            var additions = [];
            styles.forEach(function (style) {
                if (!collection_1.SetWrapper.has(_this._stylesSet, style)) {
                    _this._stylesSet.add(style);
                    _this._styles.push(style);
                    additions.push(style);
                }
            });
            this.onStylesAdded(additions);
        };
        SharedStylesHost.prototype.onStylesAdded = function (additions) {};
        SharedStylesHost.prototype.getAllStyles = function () {
            return this._styles;
        };
        /** @nocollapse */
        SharedStylesHost.decorators = [{ type: core_1.Injectable }];
        /** @nocollapse */
        SharedStylesHost.ctorParameters = [];
        return SharedStylesHost;
    }();
    exports.SharedStylesHost = SharedStylesHost;
    var DomSharedStylesHost = function (_super) {
        __extends(DomSharedStylesHost, _super);
        function DomSharedStylesHost(doc) {
            _super.call(this);
            this._hostNodes = new Set();
            this._hostNodes.add(doc.head);
        }
        /** @internal */
        DomSharedStylesHost.prototype._addStylesToHost = function (styles, host) {
            for (var i = 0; i < styles.length; i++) {
                var style = styles[i];
                dom_adapter_1.getDOM().appendChild(host, dom_adapter_1.getDOM().createStyleElement(style));
            }
        };
        DomSharedStylesHost.prototype.addHost = function (hostNode) {
            this._addStylesToHost(this._styles, hostNode);
            this._hostNodes.add(hostNode);
        };
        DomSharedStylesHost.prototype.removeHost = function (hostNode) {
            collection_1.SetWrapper.delete(this._hostNodes, hostNode);
        };
        DomSharedStylesHost.prototype.onStylesAdded = function (additions) {
            var _this = this;
            this._hostNodes.forEach(function (hostNode) {
                _this._addStylesToHost(additions, hostNode);
            });
        };
        /** @nocollapse */
        DomSharedStylesHost.decorators = [{ type: core_1.Injectable }];
        /** @nocollapse */
        DomSharedStylesHost.ctorParameters = [{ type: undefined, decorators: [{ type: core_1.Inject, args: [dom_tokens_1.DOCUMENT] }] }];
        return DomSharedStylesHost;
    }(SharedStylesHost);
    exports.DomSharedStylesHost = DomSharedStylesHost;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/private_export.js', ['./src/browser', './src/dom/debug/ng_probe', './src/dom/dom_adapter', './src/dom/dom_renderer', './src/dom/events/dom_events', './src/dom/shared_styles_host'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var browser = $__require('./src/browser');
    var ng_proble = $__require('./src/dom/debug/ng_probe');
    var dom_adapter = $__require('./src/dom/dom_adapter');
    var dom_renderer = $__require('./src/dom/dom_renderer');
    var dom_events = $__require('./src/dom/events/dom_events');
    var shared_styles_host = $__require('./src/dom/shared_styles_host');
    exports.__platform_browser_private__ = {
        DomAdapter: dom_adapter.DomAdapter,
        getDOM: dom_adapter.getDOM,
        setRootDomAdapter: dom_adapter.setRootDomAdapter,
        DomRootRenderer: dom_renderer.DomRootRenderer,
        DomRootRenderer_: dom_renderer.DomRootRenderer_,
        DomSharedStylesHost: shared_styles_host.DomSharedStylesHost,
        SharedStylesHost: shared_styles_host.SharedStylesHost,
        ELEMENT_PROBE_PROVIDERS: ng_proble.ELEMENT_PROBE_PROVIDERS,
        DomEventsPlugin: dom_events.DomEventsPlugin,
        initDomAdapter: browser.initDomAdapter,
        INTERNAL_BROWSER_PLATFORM_PROVIDERS: browser.INTERNAL_BROWSER_PLATFORM_PROVIDERS
    };
    

    return module.exports;
});
System.registerDynamic("npm:@angular/platform-browser@2.0.0-rc.5.json", [], false, function() {
  return {
    "main": "index.js",
    "meta": {
      "src/*.js": {
        "deps": [
          "reflect-metadata",
          "zone.js"
        ]
      }
    },
    "format": "cjs"
  };
});

System.registerDynamic('npm:@angular/platform-browser@2.0.0-rc.5/index.js', ['./src/browser', './src/browser/location/browser_platform_location', './src/browser/title', './src/browser/tools/tools', './src/dom/animation_driver', './src/dom/debug/by', './src/dom/dom_tokens', './src/dom/events/event_manager', './src/dom/events/hammer_gestures', './src/security/dom_sanitization_service', './src/web_workers/shared/client_message_broker', './src/web_workers/shared/serializer', './src/web_workers/shared/service_message_broker', './src/web_workers/shared/message_bus', './src/web_workers/worker/location_providers', './src/web_workers/ui/location_providers', './src/worker_render', './src/worker_app', './private_export'], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
  }
  var browser_1 = $__require('./src/browser');
  exports.BROWSER_APP_PROVIDERS = browser_1.BROWSER_APP_PROVIDERS;
  exports.BROWSER_PLATFORM_PROVIDERS = browser_1.BROWSER_PLATFORM_PROVIDERS;
  exports.BROWSER_SANITIZATION_PROVIDERS = browser_1.BROWSER_SANITIZATION_PROVIDERS;
  exports.BrowserModule = browser_1.BrowserModule;
  exports.browserPlatform = browser_1.browserPlatform;
  exports.platformBrowser = browser_1.platformBrowser;
  var browser_platform_location_1 = $__require('./src/browser/location/browser_platform_location');
  exports.BrowserPlatformLocation = browser_platform_location_1.BrowserPlatformLocation;
  var title_1 = $__require('./src/browser/title');
  exports.Title = title_1.Title;
  var tools_1 = $__require('./src/browser/tools/tools');
  exports.disableDebugTools = tools_1.disableDebugTools;
  exports.enableDebugTools = tools_1.enableDebugTools;
  var animation_driver_1 = $__require('./src/dom/animation_driver');
  exports.AnimationDriver = animation_driver_1.AnimationDriver;
  var by_1 = $__require('./src/dom/debug/by');
  exports.By = by_1.By;
  var dom_tokens_1 = $__require('./src/dom/dom_tokens');
  exports.DOCUMENT = dom_tokens_1.DOCUMENT;
  var event_manager_1 = $__require('./src/dom/events/event_manager');
  exports.EVENT_MANAGER_PLUGINS = event_manager_1.EVENT_MANAGER_PLUGINS;
  exports.EventManager = event_manager_1.EventManager;
  var hammer_gestures_1 = $__require('./src/dom/events/hammer_gestures');
  exports.HAMMER_GESTURE_CONFIG = hammer_gestures_1.HAMMER_GESTURE_CONFIG;
  exports.HammerGestureConfig = hammer_gestures_1.HammerGestureConfig;
  var dom_sanitization_service_1 = $__require('./src/security/dom_sanitization_service');
  exports.DomSanitizationService = dom_sanitization_service_1.DomSanitizationService;
  // Web Workers
  var client_message_broker_1 = $__require('./src/web_workers/shared/client_message_broker');
  exports.ClientMessageBroker = client_message_broker_1.ClientMessageBroker;
  exports.ClientMessageBrokerFactory = client_message_broker_1.ClientMessageBrokerFactory;
  exports.FnArg = client_message_broker_1.FnArg;
  exports.UiArguments = client_message_broker_1.UiArguments;
  var serializer_1 = $__require('./src/web_workers/shared/serializer');
  exports.PRIMITIVE = serializer_1.PRIMITIVE;
  var service_message_broker_1 = $__require('./src/web_workers/shared/service_message_broker');
  exports.ReceivedMessage = service_message_broker_1.ReceivedMessage;
  exports.ServiceMessageBroker = service_message_broker_1.ServiceMessageBroker;
  exports.ServiceMessageBrokerFactory = service_message_broker_1.ServiceMessageBrokerFactory;
  __export($__require('./src/web_workers/shared/message_bus'));
  var location_providers_1 = $__require('./src/web_workers/worker/location_providers');
  exports.WORKER_APP_LOCATION_PROVIDERS = location_providers_1.WORKER_APP_LOCATION_PROVIDERS;
  var location_providers_2 = $__require('./src/web_workers/ui/location_providers');
  exports.WORKER_UI_LOCATION_PROVIDERS = location_providers_2.WORKER_UI_LOCATION_PROVIDERS;
  __export($__require('./src/worker_render'));
  __export($__require('./src/worker_app'));
  __export($__require('./private_export'));
  

  return module.exports;
});
System.registerDynamic("npm:@angular/common@2.0.0-rc.5/src/common_directives.js", ["./directives", "reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var directives_1 = $__require("./directives");
  /**
   * A collection of Angular core directives that are likely to be used in each and every Angular
   * application. This includes core directives (e.g., NgIf and NgFor), and forms directives (e.g.,
   * NgModel).
   *
   * This collection can be used to quickly enumerate all the built-in directives in the `directives`
   * property of the `@Component` decorator.
   *
   * ### Example
   *
   * Instead of writing:
   *
   * ```typescript
   * import {NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, NgModel, NgForm} from
   * '@angular/common';
   * import {OtherDirective} from './myDirectives';
   *
   * @Component({
   *   selector: 'my-component',
   *   templateUrl: 'myComponent.html',
   *   directives: [NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, NgModel, NgForm,
   * OtherDirective]
   * })
   * export class MyComponent {
   *   ...
   * }
   * ```
   * one could import all the common directives at once:
   *
   * ```typescript
   * import {COMMON_DIRECTIVES} from '@angular/common';
   * import {OtherDirective} from './myDirectives';
   *
   * @Component({
   *   selector: 'my-component',
   *   templateUrl: 'myComponent.html',
   *   directives: [COMMON_DIRECTIVES, OtherDirective]
   * })
   * export class MyComponent {
   *   ...
   * }
   * ```
   *
   * @experimental Contains forms which are experimental.
   */
  exports.COMMON_DIRECTIVES = [directives_1.CORE_DIRECTIVES];
  

  return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/pipes/async_pipe.js', ['@angular/core', '../facade/lang', './invalid_pipe_argument_exception', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var lang_1 = $__require('../facade/lang');
    var invalid_pipe_argument_exception_1 = $__require('./invalid_pipe_argument_exception');
    var ObservableStrategy = function () {
        function ObservableStrategy() {}
        ObservableStrategy.prototype.createSubscription = function (async, updateLatestValue) {
            return async.subscribe({ next: updateLatestValue, error: function (e) {
                    throw e;
                } });
        };
        ObservableStrategy.prototype.dispose = function (subscription) {
            subscription.unsubscribe();
        };
        ObservableStrategy.prototype.onDestroy = function (subscription) {
            subscription.unsubscribe();
        };
        return ObservableStrategy;
    }();
    var PromiseStrategy = function () {
        function PromiseStrategy() {}
        PromiseStrategy.prototype.createSubscription = function (async, updateLatestValue) {
            return async.then(updateLatestValue, function (e) {
                throw e;
            });
        };
        PromiseStrategy.prototype.dispose = function (subscription) {};
        PromiseStrategy.prototype.onDestroy = function (subscription) {};
        return PromiseStrategy;
    }();
    var _promiseStrategy = new PromiseStrategy();
    var _observableStrategy = new ObservableStrategy();
    var __unused;
    var AsyncPipe = function () {
        function AsyncPipe(_ref) {
            /** @internal */
            this._latestValue = null;
            /** @internal */
            this._latestReturnedValue = null;
            /** @internal */
            this._subscription = null;
            /** @internal */
            this._obj = null;
            this._strategy = null;
            this._ref = _ref;
        }
        AsyncPipe.prototype.ngOnDestroy = function () {
            if (lang_1.isPresent(this._subscription)) {
                this._dispose();
            }
        };
        AsyncPipe.prototype.transform = function (obj) {
            if (lang_1.isBlank(this._obj)) {
                if (lang_1.isPresent(obj)) {
                    this._subscribe(obj);
                }
                this._latestReturnedValue = this._latestValue;
                return this._latestValue;
            }
            if (obj !== this._obj) {
                this._dispose();
                return this.transform(obj);
            }
            if (this._latestValue === this._latestReturnedValue) {
                return this._latestReturnedValue;
            } else {
                this._latestReturnedValue = this._latestValue;
                return core_1.WrappedValue.wrap(this._latestValue);
            }
        };
        /** @internal */
        AsyncPipe.prototype._subscribe = function (obj) {
            var _this = this;
            this._obj = obj;
            this._strategy = this._selectStrategy(obj);
            this._subscription = this._strategy.createSubscription(obj, function (value) {
                return _this._updateLatestValue(obj, value);
            });
        };
        /** @internal */
        AsyncPipe.prototype._selectStrategy = function (obj) {
            if (lang_1.isPromise(obj)) {
                return _promiseStrategy;
            } else if (obj.subscribe) {
                return _observableStrategy;
            } else {
                throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(AsyncPipe, obj);
            }
        };
        /** @internal */
        AsyncPipe.prototype._dispose = function () {
            this._strategy.dispose(this._subscription);
            this._latestValue = null;
            this._latestReturnedValue = null;
            this._subscription = null;
            this._obj = null;
        };
        /** @internal */
        AsyncPipe.prototype._updateLatestValue = function (async, value) {
            if (async === this._obj) {
                this._latestValue = value;
                this._ref.markForCheck();
            }
        };
        /** @nocollapse */
        AsyncPipe.decorators = [{ type: core_1.Pipe, args: [{ name: 'async', pure: false }] }];
        /** @nocollapse */
        AsyncPipe.ctorParameters = [{ type: core_1.ChangeDetectorRef }];
        return AsyncPipe;
    }();
    exports.AsyncPipe = AsyncPipe;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/pipes/common_pipes.js', ['./async_pipe', './date_pipe', './i18n_plural_pipe', './i18n_select_pipe', './json_pipe', './lowercase_pipe', './number_pipe', './replace_pipe', './slice_pipe', './uppercase_pipe', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";
  /**
   * @module
   * @description
   * This module provides a set of common Pipes.
   */

  var define,
      global = this || self,
      GLOBAL = global;
  var async_pipe_1 = $__require('./async_pipe');
  var date_pipe_1 = $__require('./date_pipe');
  var i18n_plural_pipe_1 = $__require('./i18n_plural_pipe');
  var i18n_select_pipe_1 = $__require('./i18n_select_pipe');
  var json_pipe_1 = $__require('./json_pipe');
  var lowercase_pipe_1 = $__require('./lowercase_pipe');
  var number_pipe_1 = $__require('./number_pipe');
  var replace_pipe_1 = $__require('./replace_pipe');
  var slice_pipe_1 = $__require('./slice_pipe');
  var uppercase_pipe_1 = $__require('./uppercase_pipe');
  /**
   * A collection of Angular core pipes that are likely to be used in each and every
   * application.
   *
   * This collection can be used to quickly enumerate all the built-in pipes in the `pipes`
   * property of the `@Component` decorator.
   *
   * @experimental Contains i18n pipes which are experimental
   */
  exports.COMMON_PIPES = [async_pipe_1.AsyncPipe, uppercase_pipe_1.UpperCasePipe, lowercase_pipe_1.LowerCasePipe, json_pipe_1.JsonPipe, slice_pipe_1.SlicePipe, number_pipe_1.DecimalPipe, number_pipe_1.PercentPipe, number_pipe_1.CurrencyPipe, date_pipe_1.DatePipe, replace_pipe_1.ReplacePipe, i18n_plural_pipe_1.I18nPluralPipe, i18n_select_pipe_1.I18nSelectPipe];
  

  return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/pipes/date_pipe.js', ['@angular/core', '../facade/collection', '../facade/intl', '../facade/lang', './invalid_pipe_argument_exception', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var collection_1 = $__require('../facade/collection');
    var intl_1 = $__require('../facade/intl');
    var lang_1 = $__require('../facade/lang');
    var invalid_pipe_argument_exception_1 = $__require('./invalid_pipe_argument_exception');
    // TODO: move to a global configurable location along with other i18n components.
    var defaultLocale = 'en-US';
    var DatePipe = function () {
        function DatePipe() {}
        DatePipe.prototype.transform = function (value, pattern) {
            if (pattern === void 0) {
                pattern = 'mediumDate';
            }
            if (lang_1.isBlank(value)) return null;
            if (!this.supports(value)) {
                throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(DatePipe, value);
            }
            if (lang_1.NumberWrapper.isNumeric(value)) {
                value = lang_1.DateWrapper.fromMillis(lang_1.NumberWrapper.parseInt(value, 10));
            } else if (lang_1.isString(value)) {
                value = lang_1.DateWrapper.fromISOString(value);
            }
            if (collection_1.StringMapWrapper.contains(DatePipe._ALIASES, pattern)) {
                pattern = collection_1.StringMapWrapper.get(DatePipe._ALIASES, pattern);
            }
            return intl_1.DateFormatter.format(value, defaultLocale, pattern);
        };
        DatePipe.prototype.supports = function (obj) {
            if (lang_1.isDate(obj) || lang_1.NumberWrapper.isNumeric(obj)) {
                return true;
            }
            if (lang_1.isString(obj) && lang_1.isDate(lang_1.DateWrapper.fromISOString(obj))) {
                return true;
            }
            return false;
        };
        /** @internal */
        DatePipe._ALIASES = {
            'medium': 'yMMMdjms',
            'short': 'yMdjm',
            'fullDate': 'yMMMMEEEEd',
            'longDate': 'yMMMMd',
            'mediumDate': 'yMMMd',
            'shortDate': 'yMd',
            'mediumTime': 'jms',
            'shortTime': 'jm'
        };
        /** @nocollapse */
        DatePipe.decorators = [{ type: core_1.Pipe, args: [{ name: 'date', pure: true }] }];
        return DatePipe;
    }();
    exports.DatePipe = DatePipe;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/pipes/i18n_plural_pipe.js', ['@angular/core', '../facade/lang', '../localization', './invalid_pipe_argument_exception', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var lang_1 = $__require('../facade/lang');
    var localization_1 = $__require('../localization');
    var invalid_pipe_argument_exception_1 = $__require('./invalid_pipe_argument_exception');
    var _INTERPOLATION_REGEXP = /#/g;
    var I18nPluralPipe = function () {
        function I18nPluralPipe(_localization) {
            this._localization = _localization;
        }
        I18nPluralPipe.prototype.transform = function (value, pluralMap) {
            if (lang_1.isBlank(value)) return '';
            if (!lang_1.isStringMap(pluralMap)) {
                throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(I18nPluralPipe, pluralMap);
            }
            var key = localization_1.getPluralCategory(value, Object.keys(pluralMap), this._localization);
            return lang_1.StringWrapper.replaceAll(pluralMap[key], _INTERPOLATION_REGEXP, value.toString());
        };
        /** @nocollapse */
        I18nPluralPipe.decorators = [{ type: core_1.Pipe, args: [{ name: 'i18nPlural', pure: true }] }];
        /** @nocollapse */
        I18nPluralPipe.ctorParameters = [{ type: localization_1.NgLocalization }];
        return I18nPluralPipe;
    }();
    exports.I18nPluralPipe = I18nPluralPipe;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/pipes/i18n_select_pipe.js', ['@angular/core', '../facade/lang', './invalid_pipe_argument_exception', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var lang_1 = $__require('../facade/lang');
    var invalid_pipe_argument_exception_1 = $__require('./invalid_pipe_argument_exception');
    var I18nSelectPipe = function () {
        function I18nSelectPipe() {}
        I18nSelectPipe.prototype.transform = function (value, mapping) {
            if (lang_1.isBlank(value)) return '';
            if (!lang_1.isStringMap(mapping)) {
                throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(I18nSelectPipe, mapping);
            }
            return mapping.hasOwnProperty(value) ? mapping[value] : '';
        };
        /** @nocollapse */
        I18nSelectPipe.decorators = [{ type: core_1.Pipe, args: [{ name: 'i18nSelect', pure: true }] }];
        return I18nSelectPipe;
    }();
    exports.I18nSelectPipe = I18nSelectPipe;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/pipes/json_pipe.js', ['@angular/core', '../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var lang_1 = $__require('../facade/lang');
    var JsonPipe = function () {
        function JsonPipe() {}
        JsonPipe.prototype.transform = function (value) {
            return lang_1.Json.stringify(value);
        };
        /** @nocollapse */
        JsonPipe.decorators = [{ type: core_1.Pipe, args: [{ name: 'json', pure: false }] }];
        return JsonPipe;
    }();
    exports.JsonPipe = JsonPipe;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/pipes/lowercase_pipe.js', ['@angular/core', '../facade/lang', './invalid_pipe_argument_exception', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var lang_1 = $__require('../facade/lang');
    var invalid_pipe_argument_exception_1 = $__require('./invalid_pipe_argument_exception');
    var LowerCasePipe = function () {
        function LowerCasePipe() {}
        LowerCasePipe.prototype.transform = function (value) {
            if (lang_1.isBlank(value)) return value;
            if (!lang_1.isString(value)) {
                throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(LowerCasePipe, value);
            }
            return value.toLowerCase();
        };
        /** @nocollapse */
        LowerCasePipe.decorators = [{ type: core_1.Pipe, args: [{ name: 'lowercase' }] }];
        return LowerCasePipe;
    }();
    exports.LowerCasePipe = LowerCasePipe;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/common@2.0.0-rc.5/src/facade/intl.js", ["reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    (function (NumberFormatStyle) {
        NumberFormatStyle[NumberFormatStyle["Decimal"] = 0] = "Decimal";
        NumberFormatStyle[NumberFormatStyle["Percent"] = 1] = "Percent";
        NumberFormatStyle[NumberFormatStyle["Currency"] = 2] = "Currency";
    })(exports.NumberFormatStyle || (exports.NumberFormatStyle = {}));
    var NumberFormatStyle = exports.NumberFormatStyle;
    var NumberFormatter = function () {
        function NumberFormatter() {}
        NumberFormatter.format = function (num, locale, style, _a) {
            var _b = _a === void 0 ? {} : _a,
                minimumIntegerDigits = _b.minimumIntegerDigits,
                minimumFractionDigits = _b.minimumFractionDigits,
                maximumFractionDigits = _b.maximumFractionDigits,
                currency = _b.currency,
                _c = _b.currencyAsSymbol,
                currencyAsSymbol = _c === void 0 ? false : _c;
            var options = {
                minimumIntegerDigits: minimumIntegerDigits,
                minimumFractionDigits: minimumFractionDigits,
                maximumFractionDigits: maximumFractionDigits,
                style: NumberFormatStyle[style].toLowerCase()
            };
            if (style == NumberFormatStyle.Currency) {
                options.currency = currency;
                options.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';
            }
            return new Intl.NumberFormat(locale, options).format(num);
        };
        return NumberFormatter;
    }();
    exports.NumberFormatter = NumberFormatter;
    var DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/;
    var PATTERN_ALIASES = {
        yMMMdjms: datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1), digitCondition('hour', 1), digitCondition('minute', 1), digitCondition('second', 1)])),
        yMdjm: datePartGetterFactory(combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1), digitCondition('hour', 1), digitCondition('minute', 1)])),
        yMMMMEEEEd: datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 4), nameCondition('weekday', 4), digitCondition('day', 1)])),
        yMMMMd: datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 4), digitCondition('day', 1)])),
        yMMMd: datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1)])),
        yMd: datePartGetterFactory(combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1)])),
        jms: datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('second', 1), digitCondition('minute', 1)])),
        jm: datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('minute', 1)]))
    };
    var DATE_FORMATS = {
        yyyy: datePartGetterFactory(digitCondition('year', 4)),
        yy: datePartGetterFactory(digitCondition('year', 2)),
        y: datePartGetterFactory(digitCondition('year', 1)),
        MMMM: datePartGetterFactory(nameCondition('month', 4)),
        MMM: datePartGetterFactory(nameCondition('month', 3)),
        MM: datePartGetterFactory(digitCondition('month', 2)),
        M: datePartGetterFactory(digitCondition('month', 1)),
        LLLL: datePartGetterFactory(nameCondition('month', 4)),
        dd: datePartGetterFactory(digitCondition('day', 2)),
        d: datePartGetterFactory(digitCondition('day', 1)),
        HH: digitModifier(hourExtracter(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), false)))),
        H: hourExtracter(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), false))),
        hh: digitModifier(hourExtracter(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), true)))),
        h: hourExtracter(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
        jj: datePartGetterFactory(digitCondition('hour', 2)),
        j: datePartGetterFactory(digitCondition('hour', 1)),
        mm: digitModifier(datePartGetterFactory(digitCondition('minute', 2))),
        m: datePartGetterFactory(digitCondition('minute', 1)),
        ss: digitModifier(datePartGetterFactory(digitCondition('second', 2))),
        s: datePartGetterFactory(digitCondition('second', 1)),
        // while ISO 8601 requires fractions to be prefixed with `.` or `,`
        // we can be just safely rely on using `sss` since we currently don't support single or two digit
        // fractions
        sss: datePartGetterFactory(digitCondition('second', 3)),
        EEEE: datePartGetterFactory(nameCondition('weekday', 4)),
        EEE: datePartGetterFactory(nameCondition('weekday', 3)),
        EE: datePartGetterFactory(nameCondition('weekday', 2)),
        E: datePartGetterFactory(nameCondition('weekday', 1)),
        a: hourClockExtracter(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
        Z: timeZoneGetter('short'),
        z: timeZoneGetter('long'),
        ww: datePartGetterFactory({}),
        // first Thursday of the year. not support ?
        w: datePartGetterFactory({}),
        // of the year not support ?
        G: datePartGetterFactory(nameCondition('era', 1)),
        GG: datePartGetterFactory(nameCondition('era', 2)),
        GGG: datePartGetterFactory(nameCondition('era', 3)),
        GGGG: datePartGetterFactory(nameCondition('era', 4))
    };
    function digitModifier(inner) {
        return function (date, locale) {
            var result = inner(date, locale);
            return result.length == 1 ? '0' + result : result;
        };
    }
    function hourClockExtracter(inner) {
        return function (date, locale) {
            var result = inner(date, locale);
            return result.split(' ')[1];
        };
    }
    function hourExtracter(inner) {
        return function (date, locale) {
            var result = inner(date, locale);
            return result.split(' ')[0];
        };
    }
    function timeZoneGetter(timezone) {
        // To workaround `Intl` API restriction for single timezone let format with 24 hours
        var format = { hour: '2-digit', hour12: false, timeZoneName: timezone };
        return function (date, locale) {
            var result = new Intl.DateTimeFormat(locale, format).format(date);
            // Then extract first 3 letters that related to hours
            return result ? result.substring(3) : '';
        };
    }
    function hour12Modify(options, value) {
        options.hour12 = value;
        return options;
    }
    function digitCondition(prop, len) {
        var result = {};
        result[prop] = len == 2 ? '2-digit' : 'numeric';
        return result;
    }
    function nameCondition(prop, len) {
        var result = {};
        result[prop] = len < 4 ? 'short' : 'long';
        return result;
    }
    function combine(options) {
        var result = {};
        options.forEach(function (option) {
            Object.assign(result, option);
        });
        return result;
    }
    function datePartGetterFactory(ret) {
        return function (date, locale) {
            return new Intl.DateTimeFormat(locale, ret).format(date);
        };
    }
    var datePartsFormatterCache = new Map();
    function dateFormatter(format, date, locale) {
        var text = '';
        var match;
        var fn;
        var parts = [];
        if (PATTERN_ALIASES[format]) {
            return PATTERN_ALIASES[format](date, locale);
        }
        if (datePartsFormatterCache.has(format)) {
            parts = datePartsFormatterCache.get(format);
        } else {
            var matches = DATE_FORMATS_SPLIT.exec(format);
            while (format) {
                match = DATE_FORMATS_SPLIT.exec(format);
                if (match) {
                    parts = concat(parts, match, 1);
                    format = parts.pop();
                } else {
                    parts.push(format);
                    format = null;
                }
            }
            datePartsFormatterCache.set(format, parts);
        }
        parts.forEach(function (part) {
            fn = DATE_FORMATS[part];
            text += fn ? fn(date, locale) : part === '\'\'' ? '\'' : part.replace(/(^'|'$)/g, '').replace(/''/g, '\'');
        });
        return text;
    }
    var slice = [].slice;
    function concat(array1 /** TODO #9100 */, array2 /** TODO #9100 */, index /** TODO #9100 */) {
        return array1.concat(slice.call(array2, index));
    }
    var DateFormatter = function () {
        function DateFormatter() {}
        DateFormatter.format = function (date, locale, pattern) {
            return dateFormatter(pattern, date, locale);
        };
        return DateFormatter;
    }();
    exports.DateFormatter = DateFormatter;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/pipes/number_pipe.js', ['@angular/core', '../facade/intl', '../facade/lang', './invalid_pipe_argument_exception', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var intl_1 = $__require('../facade/intl');
    var lang_1 = $__require('../facade/lang');
    var invalid_pipe_argument_exception_1 = $__require('./invalid_pipe_argument_exception');
    var defaultLocale = 'en-US';
    var _NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(\-(\d+))?)?$/;
    function formatNumber(pipe, value, style, digits, currency, currencyAsSymbol) {
        if (currency === void 0) {
            currency = null;
        }
        if (currencyAsSymbol === void 0) {
            currencyAsSymbol = false;
        }
        if (lang_1.isBlank(value)) return null;
        // Convert strings to numbers
        value = lang_1.isString(value) && lang_1.NumberWrapper.isNumeric(value) ? +value : value;
        if (!lang_1.isNumber(value)) {
            throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(pipe, value);
        }
        var minInt;
        var minFraction;
        var maxFraction;
        if (style !== intl_1.NumberFormatStyle.Currency) {
            // rely on Intl default for currency
            minInt = 1;
            minFraction = 0;
            maxFraction = 3;
        }
        if (lang_1.isPresent(digits)) {
            var parts = digits.match(_NUMBER_FORMAT_REGEXP);
            if (parts === null) {
                throw new Error(digits + " is not a valid digit info for number pipes");
            }
            if (lang_1.isPresent(parts[1])) {
                minInt = lang_1.NumberWrapper.parseIntAutoRadix(parts[1]);
            }
            if (lang_1.isPresent(parts[3])) {
                minFraction = lang_1.NumberWrapper.parseIntAutoRadix(parts[3]);
            }
            if (lang_1.isPresent(parts[5])) {
                maxFraction = lang_1.NumberWrapper.parseIntAutoRadix(parts[5]);
            }
        }
        return intl_1.NumberFormatter.format(value, defaultLocale, style, {
            minimumIntegerDigits: minInt,
            minimumFractionDigits: minFraction,
            maximumFractionDigits: maxFraction,
            currency: currency,
            currencyAsSymbol: currencyAsSymbol
        });
    }
    var DecimalPipe = function () {
        function DecimalPipe() {}
        DecimalPipe.prototype.transform = function (value, digits) {
            if (digits === void 0) {
                digits = null;
            }
            return formatNumber(DecimalPipe, value, intl_1.NumberFormatStyle.Decimal, digits);
        };
        /** @nocollapse */
        DecimalPipe.decorators = [{ type: core_1.Pipe, args: [{ name: 'number' }] }];
        return DecimalPipe;
    }();
    exports.DecimalPipe = DecimalPipe;
    var PercentPipe = function () {
        function PercentPipe() {}
        PercentPipe.prototype.transform = function (value, digits) {
            if (digits === void 0) {
                digits = null;
            }
            return formatNumber(PercentPipe, value, intl_1.NumberFormatStyle.Percent, digits);
        };
        /** @nocollapse */
        PercentPipe.decorators = [{ type: core_1.Pipe, args: [{ name: 'percent' }] }];
        return PercentPipe;
    }();
    exports.PercentPipe = PercentPipe;
    var CurrencyPipe = function () {
        function CurrencyPipe() {}
        CurrencyPipe.prototype.transform = function (value, currencyCode, symbolDisplay, digits) {
            if (currencyCode === void 0) {
                currencyCode = 'USD';
            }
            if (symbolDisplay === void 0) {
                symbolDisplay = false;
            }
            if (digits === void 0) {
                digits = null;
            }
            return formatNumber(CurrencyPipe, value, intl_1.NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);
        };
        /** @nocollapse */
        CurrencyPipe.decorators = [{ type: core_1.Pipe, args: [{ name: 'currency' }] }];
        return CurrencyPipe;
    }();
    exports.CurrencyPipe = CurrencyPipe;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/pipes/replace_pipe.js', ['@angular/core', '../facade/lang', './invalid_pipe_argument_exception', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var lang_1 = $__require('../facade/lang');
    var invalid_pipe_argument_exception_1 = $__require('./invalid_pipe_argument_exception');
    var ReplacePipe = function () {
        function ReplacePipe() {}
        ReplacePipe.prototype.transform = function (value, pattern, replacement) {
            if (lang_1.isBlank(value)) {
                return value;
            }
            if (!this._supportedInput(value)) {
                throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(ReplacePipe, value);
            }
            var input = value.toString();
            if (!this._supportedPattern(pattern)) {
                throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(ReplacePipe, pattern);
            }
            if (!this._supportedReplacement(replacement)) {
                throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(ReplacePipe, replacement);
            }
            if (lang_1.isFunction(replacement)) {
                var rgxPattern = lang_1.isString(pattern) ? new RegExp(pattern, 'g') : pattern;
                return lang_1.StringWrapper.replaceAllMapped(input, rgxPattern, replacement);
            }
            if (pattern instanceof RegExp) {
                // use the replaceAll variant
                return lang_1.StringWrapper.replaceAll(input, pattern, replacement);
            }
            return lang_1.StringWrapper.replace(input, pattern, replacement);
        };
        ReplacePipe.prototype._supportedInput = function (input) {
            return lang_1.isString(input) || lang_1.isNumber(input);
        };
        ReplacePipe.prototype._supportedPattern = function (pattern) {
            return lang_1.isString(pattern) || pattern instanceof RegExp;
        };
        ReplacePipe.prototype._supportedReplacement = function (replacement) {
            return lang_1.isString(replacement) || lang_1.isFunction(replacement);
        };
        /** @nocollapse */
        ReplacePipe.decorators = [{ type: core_1.Pipe, args: [{ name: 'replace' }] }];
        return ReplacePipe;
    }();
    exports.ReplacePipe = ReplacePipe;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/pipes/slice_pipe.js', ['@angular/core', '../facade/collection', '../facade/lang', './invalid_pipe_argument_exception', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var collection_1 = $__require('../facade/collection');
    var lang_1 = $__require('../facade/lang');
    var invalid_pipe_argument_exception_1 = $__require('./invalid_pipe_argument_exception');
    var SlicePipe = function () {
        function SlicePipe() {}
        SlicePipe.prototype.transform = function (value, start, end) {
            if (end === void 0) {
                end = null;
            }
            if (lang_1.isBlank(value)) return value;
            if (!this.supports(value)) {
                throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(SlicePipe, value);
            }
            if (lang_1.isString(value)) {
                return lang_1.StringWrapper.slice(value, start, end);
            }
            return collection_1.ListWrapper.slice(value, start, end);
        };
        SlicePipe.prototype.supports = function (obj) {
            return lang_1.isString(obj) || lang_1.isArray(obj);
        };
        /** @nocollapse */
        SlicePipe.decorators = [{ type: core_1.Pipe, args: [{ name: 'slice', pure: false }] }];
        return SlicePipe;
    }();
    exports.SlicePipe = SlicePipe;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/pipes/invalid_pipe_argument_exception.js', ['../facade/exceptions', '../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var exceptions_1 = $__require('../facade/exceptions');
    var lang_1 = $__require('../facade/lang');
    var InvalidPipeArgumentException = function (_super) {
        __extends(InvalidPipeArgumentException, _super);
        function InvalidPipeArgumentException(type, value) {
            _super.call(this, "Invalid argument '" + value + "' for pipe '" + lang_1.stringify(type) + "'");
        }
        return InvalidPipeArgumentException;
    }(exceptions_1.BaseException);
    exports.InvalidPipeArgumentException = InvalidPipeArgumentException;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/pipes/uppercase_pipe.js', ['@angular/core', '../facade/lang', './invalid_pipe_argument_exception', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var lang_1 = $__require('../facade/lang');
    var invalid_pipe_argument_exception_1 = $__require('./invalid_pipe_argument_exception');
    var UpperCasePipe = function () {
        function UpperCasePipe() {}
        UpperCasePipe.prototype.transform = function (value) {
            if (lang_1.isBlank(value)) return value;
            if (!lang_1.isString(value)) {
                throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(UpperCasePipe, value);
            }
            return value.toUpperCase();
        };
        /** @nocollapse */
        UpperCasePipe.decorators = [{ type: core_1.Pipe, args: [{ name: 'uppercase' }] }];
        return UpperCasePipe;
    }();
    exports.UpperCasePipe = UpperCasePipe;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/pipes.js', ['./pipes/async_pipe', './pipes/common_pipes', './pipes/date_pipe', './pipes/i18n_plural_pipe', './pipes/i18n_select_pipe', './pipes/json_pipe', './pipes/lowercase_pipe', './pipes/number_pipe', './pipes/replace_pipe', './pipes/slice_pipe', './pipes/uppercase_pipe', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";
  /**
   * @module
   * @description
   * This module provides a set of common Pipes.
   */

  var define,
      global = this || self,
      GLOBAL = global;
  var async_pipe_1 = $__require('./pipes/async_pipe');
  exports.AsyncPipe = async_pipe_1.AsyncPipe;
  var common_pipes_1 = $__require('./pipes/common_pipes');
  exports.COMMON_PIPES = common_pipes_1.COMMON_PIPES;
  var date_pipe_1 = $__require('./pipes/date_pipe');
  exports.DatePipe = date_pipe_1.DatePipe;
  var i18n_plural_pipe_1 = $__require('./pipes/i18n_plural_pipe');
  exports.I18nPluralPipe = i18n_plural_pipe_1.I18nPluralPipe;
  var i18n_select_pipe_1 = $__require('./pipes/i18n_select_pipe');
  exports.I18nSelectPipe = i18n_select_pipe_1.I18nSelectPipe;
  var json_pipe_1 = $__require('./pipes/json_pipe');
  exports.JsonPipe = json_pipe_1.JsonPipe;
  var lowercase_pipe_1 = $__require('./pipes/lowercase_pipe');
  exports.LowerCasePipe = lowercase_pipe_1.LowerCasePipe;
  var number_pipe_1 = $__require('./pipes/number_pipe');
  exports.CurrencyPipe = number_pipe_1.CurrencyPipe;
  exports.DecimalPipe = number_pipe_1.DecimalPipe;
  exports.PercentPipe = number_pipe_1.PercentPipe;
  var replace_pipe_1 = $__require('./pipes/replace_pipe');
  exports.ReplacePipe = replace_pipe_1.ReplacePipe;
  var slice_pipe_1 = $__require('./pipes/slice_pipe');
  exports.SlicePipe = slice_pipe_1.SlicePipe;
  var uppercase_pipe_1 = $__require('./pipes/uppercase_pipe');
  exports.UpperCasePipe = uppercase_pipe_1.UpperCasePipe;
  

  return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/directives/core_directives.js', ['./ng_class', './ng_for', './ng_if', './ng_plural', './ng_style', './ng_switch', './ng_template_outlet', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var ng_class_1 = $__require('./ng_class');
  var ng_for_1 = $__require('./ng_for');
  var ng_if_1 = $__require('./ng_if');
  var ng_plural_1 = $__require('./ng_plural');
  var ng_style_1 = $__require('./ng_style');
  var ng_switch_1 = $__require('./ng_switch');
  var ng_template_outlet_1 = $__require('./ng_template_outlet');
  /**
   * A collection of Angular core directives that are likely to be used in each and every Angular
   * application.
   *
   * This collection can be used to quickly enumerate all the built-in directives in the `directives`
   * property of the `@Component` annotation.
   *
   * ### Example ([live demo](http://plnkr.co/edit/yakGwpCdUkg0qfzX5m8g?p=preview))
   *
   * Instead of writing:
   *
   * ```typescript
   * import {NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault} from '@angular/common';
   * import {OtherDirective} from './myDirectives';
   *
   * @Component({
   *   selector: 'my-component',
   *   templateUrl: 'myComponent.html',
   *   directives: [NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, OtherDirective]
   * })
   * export class MyComponent {
   *   ...
   * }
   * ```
   * one could import all the core directives at once:
   *
   * ```typescript
   * import {CORE_DIRECTIVES} from '@angular/common';
   * import {OtherDirective} from './myDirectives';
   *
   * @Component({
   *   selector: 'my-component',
   *   templateUrl: 'myComponent.html',
   *   directives: [CORE_DIRECTIVES, OtherDirective]
   * })
   * export class MyComponent {
   *   ...
   * }
   * ```
   *
   * @stable
   */
  exports.CORE_DIRECTIVES = [ng_class_1.NgClass, ng_for_1.NgFor, ng_if_1.NgIf, ng_template_outlet_1.NgTemplateOutlet, ng_style_1.NgStyle, ng_switch_1.NgSwitch, ng_switch_1.NgSwitchCase, ng_switch_1.NgSwitchDefault, ng_plural_1.NgPlural, ng_plural_1.NgPluralCase];
  

  return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/directives/ng_class.js', ['@angular/core', '../facade/collection', '../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var collection_1 = $__require('../facade/collection');
    var lang_1 = $__require('../facade/lang');
    var NgClass = function () {
        function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
            this._iterableDiffers = _iterableDiffers;
            this._keyValueDiffers = _keyValueDiffers;
            this._ngEl = _ngEl;
            this._renderer = _renderer;
            this._initialClasses = [];
        }
        Object.defineProperty(NgClass.prototype, "initialClasses", {
            set: function (v) {
                this._applyInitialClasses(true);
                this._initialClasses = lang_1.isPresent(v) && lang_1.isString(v) ? v.split(' ') : [];
                this._applyInitialClasses(false);
                this._applyClasses(this._rawClass, false);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgClass.prototype, "ngClass", {
            set: function (v) {
                this._cleanupClasses(this._rawClass);
                if (lang_1.isString(v)) {
                    v = v.split(' ');
                }
                this._rawClass = v;
                this._iterableDiffer = null;
                this._keyValueDiffer = null;
                if (lang_1.isPresent(v)) {
                    if (collection_1.isListLikeIterable(v)) {
                        this._iterableDiffer = this._iterableDiffers.find(v).create(null);
                    } else {
                        this._keyValueDiffer = this._keyValueDiffers.find(v).create(null);
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        NgClass.prototype.ngDoCheck = function () {
            if (lang_1.isPresent(this._iterableDiffer)) {
                var changes = this._iterableDiffer.diff(this._rawClass);
                if (lang_1.isPresent(changes)) {
                    this._applyIterableChanges(changes);
                }
            }
            if (lang_1.isPresent(this._keyValueDiffer)) {
                var changes = this._keyValueDiffer.diff(this._rawClass);
                if (lang_1.isPresent(changes)) {
                    this._applyKeyValueChanges(changes);
                }
            }
        };
        NgClass.prototype._cleanupClasses = function (rawClassVal) {
            this._applyClasses(rawClassVal, true);
            this._applyInitialClasses(false);
        };
        NgClass.prototype._applyKeyValueChanges = function (changes) {
            var _this = this;
            changes.forEachAddedItem(function (record) {
                _this._toggleClass(record.key, record.currentValue);
            });
            changes.forEachChangedItem(function (record) {
                _this._toggleClass(record.key, record.currentValue);
            });
            changes.forEachRemovedItem(function (record) {
                if (record.previousValue) {
                    _this._toggleClass(record.key, false);
                }
            });
        };
        NgClass.prototype._applyIterableChanges = function (changes) {
            var _this = this;
            changes.forEachAddedItem(function (record) {
                _this._toggleClass(record.item, true);
            });
            changes.forEachRemovedItem(function (record) {
                _this._toggleClass(record.item, false);
            });
        };
        NgClass.prototype._applyInitialClasses = function (isCleanup) {
            var _this = this;
            this._initialClasses.forEach(function (className) {
                return _this._toggleClass(className, !isCleanup);
            });
        };
        NgClass.prototype._applyClasses = function (rawClassVal, isCleanup) {
            var _this = this;
            if (lang_1.isPresent(rawClassVal)) {
                if (lang_1.isArray(rawClassVal)) {
                    rawClassVal.forEach(function (className) {
                        return _this._toggleClass(className, !isCleanup);
                    });
                } else if (rawClassVal instanceof Set) {
                    rawClassVal.forEach(function (className) {
                        return _this._toggleClass(className, !isCleanup);
                    });
                } else {
                    collection_1.StringMapWrapper.forEach(rawClassVal, function (expVal, className) {
                        if (lang_1.isPresent(expVal)) _this._toggleClass(className, !isCleanup);
                    });
                }
            }
        };
        NgClass.prototype._toggleClass = function (className, enabled) {
            className = className.trim();
            if (className.length > 0) {
                if (className.indexOf(' ') > -1) {
                    var classes = className.split(/\s+/g);
                    for (var i = 0, len = classes.length; i < len; i++) {
                        this._renderer.setElementClass(this._ngEl.nativeElement, classes[i], enabled);
                    }
                } else {
                    this._renderer.setElementClass(this._ngEl.nativeElement, className, enabled);
                }
            }
        };
        /** @nocollapse */
        NgClass.decorators = [{ type: core_1.Directive, args: [{ selector: '[ngClass]' }] }];
        /** @nocollapse */
        NgClass.ctorParameters = [{ type: core_1.IterableDiffers }, { type: core_1.KeyValueDiffers }, { type: core_1.ElementRef }, { type: core_1.Renderer }];
        /** @nocollapse */
        NgClass.propDecorators = {
            'initialClasses': [{ type: core_1.Input, args: ['class'] }],
            'ngClass': [{ type: core_1.Input }]
        };
        return NgClass;
    }();
    exports.NgClass = NgClass;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/directives/ng_for.js', ['@angular/core', '../facade/exceptions', '../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var exceptions_1 = $__require('../facade/exceptions');
    var lang_1 = $__require('../facade/lang');
    var NgForRow = function () {
        function NgForRow($implicit, index, count) {
            this.$implicit = $implicit;
            this.index = index;
            this.count = count;
        }
        Object.defineProperty(NgForRow.prototype, "first", {
            get: function () {
                return this.index === 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgForRow.prototype, "last", {
            get: function () {
                return this.index === this.count - 1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgForRow.prototype, "even", {
            get: function () {
                return this.index % 2 === 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgForRow.prototype, "odd", {
            get: function () {
                return !this.even;
            },
            enumerable: true,
            configurable: true
        });
        return NgForRow;
    }();
    exports.NgForRow = NgForRow;
    var NgFor = function () {
        function NgFor(_viewContainer, _templateRef, _iterableDiffers, _cdr) {
            this._viewContainer = _viewContainer;
            this._templateRef = _templateRef;
            this._iterableDiffers = _iterableDiffers;
            this._cdr = _cdr;
        }
        Object.defineProperty(NgFor.prototype, "ngForTemplate", {
            set: function (value) {
                if (lang_1.isPresent(value)) {
                    this._templateRef = value;
                }
            },
            enumerable: true,
            configurable: true
        });
        NgFor.prototype.ngOnChanges = function (changes) {
            if ('ngForOf' in changes) {
                // React on ngForOf changes only once all inputs have been initialized
                var value = changes['ngForOf'].currentValue;
                if (lang_1.isBlank(this._differ) && lang_1.isPresent(value)) {
                    try {
                        this._differ = this._iterableDiffers.find(value).create(this._cdr, this.ngForTrackBy);
                    } catch (e) {
                        throw new exceptions_1.BaseException("Cannot find a differ supporting object '" + value + "' of type '" + lang_1.getTypeNameForDebugging(value) + "'. NgFor only supports binding to Iterables such as Arrays.");
                    }
                }
            }
        };
        NgFor.prototype.ngDoCheck = function () {
            if (lang_1.isPresent(this._differ)) {
                var changes = this._differ.diff(this.ngForOf);
                if (lang_1.isPresent(changes)) this._applyChanges(changes);
            }
        };
        NgFor.prototype._applyChanges = function (changes) {
            var _this = this;
            var insertTuples = [];
            changes.forEachOperation(function (item, adjustedPreviousIndex, currentIndex) {
                if (item.previousIndex == null) {
                    var view = _this._viewContainer.createEmbeddedView(_this._templateRef, new NgForRow(null, null, null), currentIndex);
                    var tuple = new RecordViewTuple(item, view);
                    insertTuples.push(tuple);
                } else if (currentIndex == null) {
                    _this._viewContainer.remove(adjustedPreviousIndex);
                } else {
                    var view = _this._viewContainer.get(adjustedPreviousIndex);
                    _this._viewContainer.move(view, currentIndex);
                    var tuple = new RecordViewTuple(item, view);
                    insertTuples.push(tuple);
                }
            });
            for (var i = 0; i < insertTuples.length; i++) {
                this._perViewChange(insertTuples[i].view, insertTuples[i].record);
            }
            for (var i = 0, ilen = this._viewContainer.length; i < ilen; i++) {
                var viewRef = this._viewContainer.get(i);
                viewRef.context.index = i;
                viewRef.context.count = ilen;
            }
            changes.forEachIdentityChange(function (record) {
                var viewRef = _this._viewContainer.get(record.currentIndex);
                viewRef.context.$implicit = record.item;
            });
        };
        NgFor.prototype._perViewChange = function (view, record) {
            view.context.$implicit = record.item;
        };
        /** @nocollapse */
        NgFor.decorators = [{ type: core_1.Directive, args: [{ selector: '[ngFor][ngForOf]' }] }];
        /** @nocollapse */
        NgFor.ctorParameters = [{ type: core_1.ViewContainerRef }, { type: core_1.TemplateRef }, { type: core_1.IterableDiffers }, { type: core_1.ChangeDetectorRef }];
        /** @nocollapse */
        NgFor.propDecorators = {
            'ngForOf': [{ type: core_1.Input }],
            'ngForTrackBy': [{ type: core_1.Input }],
            'ngForTemplate': [{ type: core_1.Input }]
        };
        return NgFor;
    }();
    exports.NgFor = NgFor;
    var RecordViewTuple = function () {
        function RecordViewTuple(record, view) {
            this.record = record;
            this.view = view;
        }
        return RecordViewTuple;
    }();
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/directives/ng_if.js', ['@angular/core', '../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var lang_1 = $__require('../facade/lang');
    var NgIf = function () {
        function NgIf(_viewContainer, _templateRef) {
            this._viewContainer = _viewContainer;
            this._templateRef = _templateRef;
            this._prevCondition = null;
        }
        Object.defineProperty(NgIf.prototype, "ngIf", {
            set: function (newCondition) {
                if (newCondition && (lang_1.isBlank(this._prevCondition) || !this._prevCondition)) {
                    this._prevCondition = true;
                    this._viewContainer.createEmbeddedView(this._templateRef);
                } else if (!newCondition && (lang_1.isBlank(this._prevCondition) || this._prevCondition)) {
                    this._prevCondition = false;
                    this._viewContainer.clear();
                }
            },
            enumerable: true,
            configurable: true
        });
        /** @nocollapse */
        NgIf.decorators = [{ type: core_1.Directive, args: [{ selector: '[ngIf]' }] }];
        /** @nocollapse */
        NgIf.ctorParameters = [{ type: core_1.ViewContainerRef }, { type: core_1.TemplateRef }];
        /** @nocollapse */
        NgIf.propDecorators = {
            'ngIf': [{ type: core_1.Input }]
        };
        return NgIf;
    }();
    exports.NgIf = NgIf;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/directives/ng_plural.js', ['@angular/core', '../facade/lang', '../localization', './ng_switch', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var lang_1 = $__require('../facade/lang');
    var localization_1 = $__require('../localization');
    var ng_switch_1 = $__require('./ng_switch');
    var NgPlural = function () {
        function NgPlural(_localization) {
            this._localization = _localization;
            this._caseViews = {};
        }
        Object.defineProperty(NgPlural.prototype, "ngPlural", {
            set: function (value) {
                this._switchValue = value;
                this._updateView();
            },
            enumerable: true,
            configurable: true
        });
        NgPlural.prototype.addCase = function (value, switchView) {
            this._caseViews[value] = switchView;
        };
        /** @internal */
        NgPlural.prototype._updateView = function () {
            this._clearViews();
            var key = localization_1.getPluralCategory(this._switchValue, Object.keys(this._caseViews), this._localization);
            this._activateView(this._caseViews[key]);
        };
        /** @internal */
        NgPlural.prototype._clearViews = function () {
            if (lang_1.isPresent(this._activeView)) this._activeView.destroy();
        };
        /** @internal */
        NgPlural.prototype._activateView = function (view) {
            if (!lang_1.isPresent(view)) return;
            this._activeView = view;
            this._activeView.create();
        };
        /** @nocollapse */
        NgPlural.decorators = [{ type: core_1.Directive, args: [{ selector: '[ngPlural]' }] }];
        /** @nocollapse */
        NgPlural.ctorParameters = [{ type: localization_1.NgLocalization }];
        /** @nocollapse */
        NgPlural.propDecorators = {
            'ngPlural': [{ type: core_1.Input }]
        };
        return NgPlural;
    }();
    exports.NgPlural = NgPlural;
    var NgPluralCase = function () {
        function NgPluralCase(value, template, viewContainer, ngPlural) {
            this.value = value;
            ngPlural.addCase(value, new ng_switch_1.SwitchView(viewContainer, template));
        }
        /** @nocollapse */
        NgPluralCase.decorators = [{ type: core_1.Directive, args: [{ selector: '[ngPluralCase]' }] }];
        /** @nocollapse */
        NgPluralCase.ctorParameters = [{ type: undefined, decorators: [{ type: core_1.Attribute, args: ['ngPluralCase'] }] }, { type: core_1.TemplateRef }, { type: core_1.ViewContainerRef }, { type: NgPlural, decorators: [{ type: core_1.Host }] }];
        return NgPluralCase;
    }();
    exports.NgPluralCase = NgPluralCase;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/directives/ng_style.js', ['@angular/core', '../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var lang_1 = $__require('../facade/lang');
    var NgStyle = function () {
        function NgStyle(_differs, _ngEl, _renderer) {
            this._differs = _differs;
            this._ngEl = _ngEl;
            this._renderer = _renderer;
        }
        Object.defineProperty(NgStyle.prototype, "ngStyle", {
            set: function (v) {
                this._ngStyle = v;
                if (lang_1.isBlank(this._differ) && lang_1.isPresent(v)) {
                    this._differ = this._differs.find(this._ngStyle).create(null);
                }
            },
            enumerable: true,
            configurable: true
        });
        NgStyle.prototype.ngDoCheck = function () {
            if (lang_1.isPresent(this._differ)) {
                var changes = this._differ.diff(this._ngStyle);
                if (lang_1.isPresent(changes)) {
                    this._applyChanges(changes);
                }
            }
        };
        NgStyle.prototype._applyChanges = function (changes) {
            var _this = this;
            changes.forEachRemovedItem(function (record) {
                _this._setStyle(record.key, null);
            });
            changes.forEachAddedItem(function (record) {
                _this._setStyle(record.key, record.currentValue);
            });
            changes.forEachChangedItem(function (record) {
                _this._setStyle(record.key, record.currentValue);
            });
        };
        NgStyle.prototype._setStyle = function (name, val) {
            var nameParts = name.split('.');
            var nameToSet = nameParts[0];
            var valToSet = lang_1.isPresent(val) && nameParts.length === 2 ? "" + val + nameParts[1] : val;
            this._renderer.setElementStyle(this._ngEl.nativeElement, nameToSet, valToSet);
        };
        /** @nocollapse */
        NgStyle.decorators = [{ type: core_1.Directive, args: [{ selector: '[ngStyle]' }] }];
        /** @nocollapse */
        NgStyle.ctorParameters = [{ type: core_1.KeyValueDiffers }, { type: core_1.ElementRef }, { type: core_1.Renderer }];
        /** @nocollapse */
        NgStyle.propDecorators = {
            'ngStyle': [{ type: core_1.Input }]
        };
        return NgStyle;
    }();
    exports.NgStyle = NgStyle;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/directives/ng_switch.js', ['@angular/core', '../facade/collection', '../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var collection_1 = $__require('../facade/collection');
    var lang_1 = $__require('../facade/lang');
    var _CASE_DEFAULT = new Object();
    // TODO: remove when fully deprecated
    var _warned = false;
    var SwitchView = function () {
        function SwitchView(_viewContainerRef, _templateRef) {
            this._viewContainerRef = _viewContainerRef;
            this._templateRef = _templateRef;
        }
        SwitchView.prototype.create = function () {
            this._viewContainerRef.createEmbeddedView(this._templateRef);
        };
        SwitchView.prototype.destroy = function () {
            this._viewContainerRef.clear();
        };
        return SwitchView;
    }();
    exports.SwitchView = SwitchView;
    var NgSwitch = function () {
        function NgSwitch() {
            this._useDefault = false;
            this._valueViews = new Map();
            this._activeViews = [];
        }
        Object.defineProperty(NgSwitch.prototype, "ngSwitch", {
            set: function (value) {
                // Empty the currently active ViewContainers
                this._emptyAllActiveViews();
                // Add the ViewContainers matching the value (with a fallback to default)
                this._useDefault = false;
                var views = this._valueViews.get(value);
                if (lang_1.isBlank(views)) {
                    this._useDefault = true;
                    views = lang_1.normalizeBlank(this._valueViews.get(_CASE_DEFAULT));
                }
                this._activateViews(views);
                this._switchValue = value;
            },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        NgSwitch.prototype._onCaseValueChanged = function (oldCase, newCase, view) {
            this._deregisterView(oldCase, view);
            this._registerView(newCase, view);
            if (oldCase === this._switchValue) {
                view.destroy();
                collection_1.ListWrapper.remove(this._activeViews, view);
            } else if (newCase === this._switchValue) {
                if (this._useDefault) {
                    this._useDefault = false;
                    this._emptyAllActiveViews();
                }
                view.create();
                this._activeViews.push(view);
            }
            // Switch to default when there is no more active ViewContainers
            if (this._activeViews.length === 0 && !this._useDefault) {
                this._useDefault = true;
                this._activateViews(this._valueViews.get(_CASE_DEFAULT));
            }
        };
        /** @internal */
        NgSwitch.prototype._emptyAllActiveViews = function () {
            var activeContainers = this._activeViews;
            for (var i = 0; i < activeContainers.length; i++) {
                activeContainers[i].destroy();
            }
            this._activeViews = [];
        };
        /** @internal */
        NgSwitch.prototype._activateViews = function (views) {
            // TODO(vicb): assert(this._activeViews.length === 0);
            if (lang_1.isPresent(views)) {
                for (var i = 0; i < views.length; i++) {
                    views[i].create();
                }
                this._activeViews = views;
            }
        };
        /** @internal */
        NgSwitch.prototype._registerView = function (value, view) {
            var views = this._valueViews.get(value);
            if (lang_1.isBlank(views)) {
                views = [];
                this._valueViews.set(value, views);
            }
            views.push(view);
        };
        /** @internal */
        NgSwitch.prototype._deregisterView = function (value, view) {
            // `_CASE_DEFAULT` is used a marker for non-registered cases
            if (value === _CASE_DEFAULT) return;
            var views = this._valueViews.get(value);
            if (views.length == 1) {
                this._valueViews.delete(value);
            } else {
                collection_1.ListWrapper.remove(views, view);
            }
        };
        /** @nocollapse */
        NgSwitch.decorators = [{ type: core_1.Directive, args: [{ selector: '[ngSwitch]' }] }];
        /** @nocollapse */
        NgSwitch.propDecorators = {
            'ngSwitch': [{ type: core_1.Input }]
        };
        return NgSwitch;
    }();
    exports.NgSwitch = NgSwitch;
    var NgSwitchCase = function () {
        function NgSwitchCase(viewContainer, templateRef, ngSwitch) {
            // `_CASE_DEFAULT` is used as a marker for a not yet initialized value
            /** @internal */
            this._value = _CASE_DEFAULT;
            this._switch = ngSwitch;
            this._view = new SwitchView(viewContainer, templateRef);
        }
        Object.defineProperty(NgSwitchCase.prototype, "ngSwitchCase", {
            set: function (value) {
                this._switch._onCaseValueChanged(this._value, value, this._view);
                this._value = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgSwitchCase.prototype, "ngSwitchWhen", {
            set: function (value) {
                if (!_warned) {
                    _warned = true;
                    console.warn('*ngSwitchWhen is deprecated and will be removed. Use *ngSwitchCase instead');
                }
                this._switch._onCaseValueChanged(this._value, value, this._view);
                this._value = value;
            },
            enumerable: true,
            configurable: true
        });
        /** @nocollapse */
        NgSwitchCase.decorators = [{ type: core_1.Directive, args: [{ selector: '[ngSwitchCase],[ngSwitchWhen]' }] }];
        /** @nocollapse */
        NgSwitchCase.ctorParameters = [{ type: core_1.ViewContainerRef }, { type: core_1.TemplateRef }, { type: NgSwitch, decorators: [{ type: core_1.Host }] }];
        /** @nocollapse */
        NgSwitchCase.propDecorators = {
            'ngSwitchCase': [{ type: core_1.Input }],
            'ngSwitchWhen': [{ type: core_1.Input }]
        };
        return NgSwitchCase;
    }();
    exports.NgSwitchCase = NgSwitchCase;
    var NgSwitchDefault = function () {
        function NgSwitchDefault(viewContainer, templateRef, sswitch) {
            sswitch._registerView(_CASE_DEFAULT, new SwitchView(viewContainer, templateRef));
        }
        /** @nocollapse */
        NgSwitchDefault.decorators = [{ type: core_1.Directive, args: [{ selector: '[ngSwitchDefault]' }] }];
        /** @nocollapse */
        NgSwitchDefault.ctorParameters = [{ type: core_1.ViewContainerRef }, { type: core_1.TemplateRef }, { type: NgSwitch, decorators: [{ type: core_1.Host }] }];
        return NgSwitchDefault;
    }();
    exports.NgSwitchDefault = NgSwitchDefault;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/common@2.0.0-rc.5/src/directives/ng_template_outlet.js", ["@angular/core", "reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require("@angular/core");
    var NgTemplateOutlet = function () {
        function NgTemplateOutlet(_viewContainerRef) {
            this._viewContainerRef = _viewContainerRef;
        }
        Object.defineProperty(NgTemplateOutlet.prototype, "ngOutletContext", {
            set: function (context) {
                this._context = context;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgTemplateOutlet.prototype, "ngTemplateOutlet", {
            set: function (templateRef) {
                this._templateRef = templateRef;
            },
            enumerable: true,
            configurable: true
        });
        NgTemplateOutlet.prototype.ngOnChanges = function () {
            if (this._viewRef) {
                this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));
            }
            if (this._templateRef) {
                this._viewRef = this._viewContainerRef.createEmbeddedView(this._templateRef, this._context);
            }
        };
        /** @nocollapse */
        NgTemplateOutlet.decorators = [{ type: core_1.Directive, args: [{ selector: '[ngTemplateOutlet]' }] }];
        /** @nocollapse */
        NgTemplateOutlet.ctorParameters = [{ type: core_1.ViewContainerRef }];
        /** @nocollapse */
        NgTemplateOutlet.propDecorators = {
            'ngOutletContext': [{ type: core_1.Input }],
            'ngTemplateOutlet': [{ type: core_1.Input }]
        };
        return NgTemplateOutlet;
    }();
    exports.NgTemplateOutlet = NgTemplateOutlet;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/directives.js', ['./directives/core_directives', './directives/ng_class', './directives/ng_for', './directives/ng_if', './directives/ng_plural', './directives/ng_style', './directives/ng_switch', './directives/ng_template_outlet', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";
  /**
   * @module
   * @description
   * Common directives shipped with Angular.
   */

  var define,
      global = this || self,
      GLOBAL = global;
  var core_directives_1 = $__require('./directives/core_directives');
  exports.CORE_DIRECTIVES = core_directives_1.CORE_DIRECTIVES;
  var ng_class_1 = $__require('./directives/ng_class');
  exports.NgClass = ng_class_1.NgClass;
  var ng_for_1 = $__require('./directives/ng_for');
  exports.NgFor = ng_for_1.NgFor;
  var ng_if_1 = $__require('./directives/ng_if');
  exports.NgIf = ng_if_1.NgIf;
  var ng_plural_1 = $__require('./directives/ng_plural');
  exports.NgPlural = ng_plural_1.NgPlural;
  exports.NgPluralCase = ng_plural_1.NgPluralCase;
  var ng_style_1 = $__require('./directives/ng_style');
  exports.NgStyle = ng_style_1.NgStyle;
  var ng_switch_1 = $__require('./directives/ng_switch');
  exports.NgSwitch = ng_switch_1.NgSwitch;
  exports.NgSwitchCase = ng_switch_1.NgSwitchCase;
  exports.NgSwitchDefault = ng_switch_1.NgSwitchDefault;
  var ng_template_outlet_1 = $__require('./directives/ng_template_outlet');
  exports.NgTemplateOutlet = ng_template_outlet_1.NgTemplateOutlet;
  

  return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/forms-deprecated/directives.js', ['./directives/checkbox_value_accessor', './directives/default_value_accessor', './directives/ng_control_group', './directives/ng_control_name', './directives/ng_control_status', './directives/ng_form', './directives/ng_form_control', './directives/ng_form_model', './directives/ng_model', './directives/number_value_accessor', './directives/radio_control_value_accessor', './directives/select_control_value_accessor', './directives/select_multiple_control_value_accessor', './directives/validators', './directives/ng_control', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var checkbox_value_accessor_1 = $__require('./directives/checkbox_value_accessor');
  var default_value_accessor_1 = $__require('./directives/default_value_accessor');
  var ng_control_group_1 = $__require('./directives/ng_control_group');
  var ng_control_name_1 = $__require('./directives/ng_control_name');
  var ng_control_status_1 = $__require('./directives/ng_control_status');
  var ng_form_1 = $__require('./directives/ng_form');
  var ng_form_control_1 = $__require('./directives/ng_form_control');
  var ng_form_model_1 = $__require('./directives/ng_form_model');
  var ng_model_1 = $__require('./directives/ng_model');
  var number_value_accessor_1 = $__require('./directives/number_value_accessor');
  var radio_control_value_accessor_1 = $__require('./directives/radio_control_value_accessor');
  var select_control_value_accessor_1 = $__require('./directives/select_control_value_accessor');
  var select_multiple_control_value_accessor_1 = $__require('./directives/select_multiple_control_value_accessor');
  var validators_1 = $__require('./directives/validators');
  var checkbox_value_accessor_2 = $__require('./directives/checkbox_value_accessor');
  exports.CheckboxControlValueAccessor = checkbox_value_accessor_2.CheckboxControlValueAccessor;
  var default_value_accessor_2 = $__require('./directives/default_value_accessor');
  exports.DefaultValueAccessor = default_value_accessor_2.DefaultValueAccessor;
  var ng_control_1 = $__require('./directives/ng_control');
  exports.NgControl = ng_control_1.NgControl;
  var ng_control_group_2 = $__require('./directives/ng_control_group');
  exports.NgControlGroup = ng_control_group_2.NgControlGroup;
  var ng_control_name_2 = $__require('./directives/ng_control_name');
  exports.NgControlName = ng_control_name_2.NgControlName;
  var ng_control_status_2 = $__require('./directives/ng_control_status');
  exports.NgControlStatus = ng_control_status_2.NgControlStatus;
  var ng_form_2 = $__require('./directives/ng_form');
  exports.NgForm = ng_form_2.NgForm;
  var ng_form_control_2 = $__require('./directives/ng_form_control');
  exports.NgFormControl = ng_form_control_2.NgFormControl;
  var ng_form_model_2 = $__require('./directives/ng_form_model');
  exports.NgFormModel = ng_form_model_2.NgFormModel;
  var ng_model_2 = $__require('./directives/ng_model');
  exports.NgModel = ng_model_2.NgModel;
  var number_value_accessor_2 = $__require('./directives/number_value_accessor');
  exports.NumberValueAccessor = number_value_accessor_2.NumberValueAccessor;
  var radio_control_value_accessor_2 = $__require('./directives/radio_control_value_accessor');
  exports.RadioButtonState = radio_control_value_accessor_2.RadioButtonState;
  exports.RadioControlValueAccessor = radio_control_value_accessor_2.RadioControlValueAccessor;
  var select_control_value_accessor_2 = $__require('./directives/select_control_value_accessor');
  exports.NgSelectOption = select_control_value_accessor_2.NgSelectOption;
  exports.SelectControlValueAccessor = select_control_value_accessor_2.SelectControlValueAccessor;
  var select_multiple_control_value_accessor_2 = $__require('./directives/select_multiple_control_value_accessor');
  exports.NgSelectMultipleOption = select_multiple_control_value_accessor_2.NgSelectMultipleOption;
  exports.SelectMultipleControlValueAccessor = select_multiple_control_value_accessor_2.SelectMultipleControlValueAccessor;
  var validators_2 = $__require('./directives/validators');
  exports.MaxLengthValidator = validators_2.MaxLengthValidator;
  exports.MinLengthValidator = validators_2.MinLengthValidator;
  exports.PatternValidator = validators_2.PatternValidator;
  exports.RequiredValidator = validators_2.RequiredValidator;
  /**
   *
   * A list of all the form directives used as part of a `@Component` annotation.
   *
   *  This is a shorthand for importing them each individually.
   *
   * ### Example
   *
   * ```typescript
   * @Component({
   *   selector: 'my-app',
   *   directives: [FORM_DIRECTIVES]
   * })
   * class MyApp {}
   * ```
   * @experimental
   */
  exports.FORM_DIRECTIVES = [ng_control_name_1.NgControlName, ng_control_group_1.NgControlGroup, ng_form_control_1.NgFormControl, ng_model_1.NgModel, ng_form_model_1.NgFormModel, ng_form_1.NgForm, select_control_value_accessor_1.NgSelectOption, select_multiple_control_value_accessor_1.NgSelectMultipleOption, default_value_accessor_1.DefaultValueAccessor, number_value_accessor_1.NumberValueAccessor, checkbox_value_accessor_1.CheckboxControlValueAccessor, select_control_value_accessor_1.SelectControlValueAccessor, select_multiple_control_value_accessor_1.SelectMultipleControlValueAccessor, radio_control_value_accessor_1.RadioControlValueAccessor, ng_control_status_1.NgControlStatus, validators_1.RequiredValidator, validators_1.MinLengthValidator, validators_1.MaxLengthValidator, validators_1.PatternValidator];
  

  return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/forms-deprecated/form_builder.js', ['@angular/core', '../facade/collection', '../facade/lang', './model', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var collection_1 = $__require('../facade/collection');
    var lang_1 = $__require('../facade/lang');
    var model_1 = $__require('./model');
    var FormBuilder = function () {
        function FormBuilder() {}
        /**
         * Construct a new {@link ControlGroup} with the given map of configuration.
         * Valid keys for the `extra` parameter map are `optionals` and `validator`.
         *
         * See the {@link ControlGroup} constructor for more details.
         */
        FormBuilder.prototype.group = function (controlsConfig, extra) {
            if (extra === void 0) {
                extra = null;
            }
            var controls = this._reduceControls(controlsConfig);
            var optionals = lang_1.isPresent(extra) ? collection_1.StringMapWrapper.get(extra, 'optionals') : null;
            var validator = lang_1.isPresent(extra) ? collection_1.StringMapWrapper.get(extra, 'validator') : null;
            var asyncValidator = lang_1.isPresent(extra) ? collection_1.StringMapWrapper.get(extra, 'asyncValidator') : null;
            return new model_1.ControlGroup(controls, optionals, validator, asyncValidator);
        };
        /**
         * Construct a new {@link Control} with the given `value`,`validator`, and `asyncValidator`.
         */
        FormBuilder.prototype.control = function (value, validator, asyncValidator) {
            if (validator === void 0) {
                validator = null;
            }
            if (asyncValidator === void 0) {
                asyncValidator = null;
            }
            return new model_1.Control(value, validator, asyncValidator);
        };
        /**
         * Construct an array of {@link Control}s from the given `controlsConfig` array of
         * configuration, with the given optional `validator` and `asyncValidator`.
         */
        FormBuilder.prototype.array = function (controlsConfig, validator, asyncValidator) {
            var _this = this;
            if (validator === void 0) {
                validator = null;
            }
            if (asyncValidator === void 0) {
                asyncValidator = null;
            }
            var controls = controlsConfig.map(function (c) {
                return _this._createControl(c);
            });
            return new model_1.ControlArray(controls, validator, asyncValidator);
        };
        /** @internal */
        FormBuilder.prototype._reduceControls = function (controlsConfig) {
            var _this = this;
            var controls = {};
            collection_1.StringMapWrapper.forEach(controlsConfig, function (controlConfig, controlName) {
                controls[controlName] = _this._createControl(controlConfig);
            });
            return controls;
        };
        /** @internal */
        FormBuilder.prototype._createControl = function (controlConfig) {
            if (controlConfig instanceof model_1.Control || controlConfig instanceof model_1.ControlGroup || controlConfig instanceof model_1.ControlArray) {
                return controlConfig;
            } else if (lang_1.isArray(controlConfig)) {
                var value = controlConfig[0];
                var validator = controlConfig.length > 1 ? controlConfig[1] : null;
                var asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;
                return this.control(value, validator, asyncValidator);
            } else {
                return this.control(controlConfig);
            }
        };
        /** @nocollapse */
        FormBuilder.decorators = [{ type: core_1.Injectable }];
        return FormBuilder;
    }();
    exports.FormBuilder = FormBuilder;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/forms-deprecated/directives/ng_control_group.js', ['@angular/core', '../validators', './control_container', './shared', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var core_1 = $__require('@angular/core');
    var validators_1 = $__require('../validators');
    var control_container_1 = $__require('./control_container');
    var shared_1 = $__require('./shared');
    exports.controlGroupProvider = {
        provide: control_container_1.ControlContainer,
        useExisting: core_1.forwardRef(function () {
            return NgControlGroup;
        })
    };
    var NgControlGroup = function (_super) {
        __extends(NgControlGroup, _super);
        function NgControlGroup(parent, _validators, _asyncValidators) {
            _super.call(this);
            this._validators = _validators;
            this._asyncValidators = _asyncValidators;
            this._parent = parent;
        }
        NgControlGroup.prototype.ngOnInit = function () {
            this.formDirective.addControlGroup(this);
        };
        NgControlGroup.prototype.ngOnDestroy = function () {
            this.formDirective.removeControlGroup(this);
        };
        Object.defineProperty(NgControlGroup.prototype, "control", {
            /**
             * Get the {@link ControlGroup} backing this binding.
             */
            get: function () {
                return this.formDirective.getControlGroup(this);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgControlGroup.prototype, "path", {
            /**
             * Get the path to this control group.
             */
            get: function () {
                return shared_1.controlPath(this.name, this._parent);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgControlGroup.prototype, "formDirective", {
            /**
             * Get the {@link Form} to which this group belongs.
             */
            get: function () {
                return this._parent.formDirective;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgControlGroup.prototype, "validator", {
            get: function () {
                return shared_1.composeValidators(this._validators);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgControlGroup.prototype, "asyncValidator", {
            get: function () {
                return shared_1.composeAsyncValidators(this._asyncValidators);
            },
            enumerable: true,
            configurable: true
        });
        /** @nocollapse */
        NgControlGroup.decorators = [{ type: core_1.Directive, args: [{
                selector: '[ngControlGroup]',
                providers: [exports.controlGroupProvider],
                inputs: ['name: ngControlGroup'],
                exportAs: 'ngForm'
            }] }];
        /** @nocollapse */
        NgControlGroup.ctorParameters = [{ type: control_container_1.ControlContainer, decorators: [{ type: core_1.Host }, { type: core_1.SkipSelf }] }, { type: Array, decorators: [{ type: core_1.Optional }, { type: core_1.Self }, { type: core_1.Inject, args: [validators_1.NG_VALIDATORS] }] }, { type: Array, decorators: [{ type: core_1.Optional }, { type: core_1.Self }, { type: core_1.Inject, args: [validators_1.NG_ASYNC_VALIDATORS] }] }];
        return NgControlGroup;
    }(control_container_1.ControlContainer);
    exports.NgControlGroup = NgControlGroup;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/forms-deprecated/directives/ng_control_name.js', ['@angular/core', '../../facade/async', '../validators', './control_container', './control_value_accessor', './ng_control', './shared', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var core_1 = $__require('@angular/core');
    var async_1 = $__require('../../facade/async');
    var validators_1 = $__require('../validators');
    var control_container_1 = $__require('./control_container');
    var control_value_accessor_1 = $__require('./control_value_accessor');
    var ng_control_1 = $__require('./ng_control');
    var shared_1 = $__require('./shared');
    exports.controlNameBinding = {
        provide: ng_control_1.NgControl,
        useExisting: core_1.forwardRef(function () {
            return NgControlName;
        })
    };
    var NgControlName = function (_super) {
        __extends(NgControlName, _super);
        function NgControlName(_parent, _validators, _asyncValidators, valueAccessors) {
            _super.call(this);
            this._parent = _parent;
            this._validators = _validators;
            this._asyncValidators = _asyncValidators;
            /** @internal */
            this.update = new async_1.EventEmitter();
            this._added = false;
            this.valueAccessor = shared_1.selectValueAccessor(this, valueAccessors);
        }
        NgControlName.prototype.ngOnChanges = function (changes) {
            if (!this._added) {
                this.formDirective.addControl(this);
                this._added = true;
            }
            if (shared_1.isPropertyUpdated(changes, this.viewModel)) {
                this.viewModel = this.model;
                this.formDirective.updateModel(this, this.model);
            }
        };
        NgControlName.prototype.ngOnDestroy = function () {
            this.formDirective.removeControl(this);
        };
        NgControlName.prototype.viewToModelUpdate = function (newValue) {
            this.viewModel = newValue;
            this.update.emit(newValue);
        };
        Object.defineProperty(NgControlName.prototype, "path", {
            get: function () {
                return shared_1.controlPath(this.name, this._parent);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgControlName.prototype, "formDirective", {
            get: function () {
                return this._parent.formDirective;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgControlName.prototype, "validator", {
            get: function () {
                return shared_1.composeValidators(this._validators);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgControlName.prototype, "asyncValidator", {
            get: function () {
                return shared_1.composeAsyncValidators(this._asyncValidators);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgControlName.prototype, "control", {
            get: function () {
                return this.formDirective.getControl(this);
            },
            enumerable: true,
            configurable: true
        });
        /** @nocollapse */
        NgControlName.decorators = [{ type: core_1.Directive, args: [{
                selector: '[ngControl]',
                providers: [exports.controlNameBinding],
                inputs: ['name: ngControl', 'model: ngModel'],
                outputs: ['update: ngModelChange'],
                exportAs: 'ngForm'
            }] }];
        /** @nocollapse */
        NgControlName.ctorParameters = [{ type: control_container_1.ControlContainer, decorators: [{ type: core_1.Host }, { type: core_1.SkipSelf }] }, { type: Array, decorators: [{ type: core_1.Optional }, { type: core_1.Self }, { type: core_1.Inject, args: [validators_1.NG_VALIDATORS] }] }, { type: Array, decorators: [{ type: core_1.Optional }, { type: core_1.Self }, { type: core_1.Inject, args: [validators_1.NG_ASYNC_VALIDATORS] }] }, { type: Array, decorators: [{ type: core_1.Optional }, { type: core_1.Self }, { type: core_1.Inject, args: [control_value_accessor_1.NG_VALUE_ACCESSOR] }] }];
        return NgControlName;
    }(ng_control_1.NgControl);
    exports.NgControlName = NgControlName;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/forms-deprecated/directives/ng_control_status.js', ['@angular/core', '../../facade/lang', './ng_control', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var lang_1 = $__require('../../facade/lang');
    var ng_control_1 = $__require('./ng_control');
    var NgControlStatus = function () {
        function NgControlStatus(cd) {
            this._cd = cd;
        }
        Object.defineProperty(NgControlStatus.prototype, "ngClassUntouched", {
            get: function () {
                return lang_1.isPresent(this._cd.control) ? this._cd.control.untouched : false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgControlStatus.prototype, "ngClassTouched", {
            get: function () {
                return lang_1.isPresent(this._cd.control) ? this._cd.control.touched : false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgControlStatus.prototype, "ngClassPristine", {
            get: function () {
                return lang_1.isPresent(this._cd.control) ? this._cd.control.pristine : false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgControlStatus.prototype, "ngClassDirty", {
            get: function () {
                return lang_1.isPresent(this._cd.control) ? this._cd.control.dirty : false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgControlStatus.prototype, "ngClassValid", {
            get: function () {
                return lang_1.isPresent(this._cd.control) ? this._cd.control.valid : false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgControlStatus.prototype, "ngClassInvalid", {
            get: function () {
                return lang_1.isPresent(this._cd.control) ? !this._cd.control.valid : false;
            },
            enumerable: true,
            configurable: true
        });
        /** @nocollapse */
        NgControlStatus.decorators = [{ type: core_1.Directive, args: [{
                selector: '[ngControl],[ngModel],[ngFormControl]',
                host: {
                    '[class.ng-untouched]': 'ngClassUntouched',
                    '[class.ng-touched]': 'ngClassTouched',
                    '[class.ng-pristine]': 'ngClassPristine',
                    '[class.ng-dirty]': 'ngClassDirty',
                    '[class.ng-valid]': 'ngClassValid',
                    '[class.ng-invalid]': 'ngClassInvalid'
                }
            }] }];
        /** @nocollapse */
        NgControlStatus.ctorParameters = [{ type: ng_control_1.NgControl, decorators: [{ type: core_1.Self }] }];
        return NgControlStatus;
    }();
    exports.NgControlStatus = NgControlStatus;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/forms-deprecated/directives/ng_form.js', ['@angular/core', '../../facade/async', '../../facade/collection', '../../facade/lang', '../model', '../validators', './control_container', './shared', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var core_1 = $__require('@angular/core');
    var async_1 = $__require('../../facade/async');
    var collection_1 = $__require('../../facade/collection');
    var lang_1 = $__require('../../facade/lang');
    var model_1 = $__require('../model');
    var validators_1 = $__require('../validators');
    var control_container_1 = $__require('./control_container');
    var shared_1 = $__require('./shared');
    exports.formDirectiveProvider = {
        provide: control_container_1.ControlContainer,
        useExisting: core_1.forwardRef(function () {
            return NgForm;
        })
    };
    var _formWarningDisplayed = false;
    var resolvedPromise = Promise.resolve(null);
    var NgForm = function (_super) {
        __extends(NgForm, _super);
        function NgForm(validators, asyncValidators) {
            _super.call(this);
            this._submitted = false;
            this.ngSubmit = new async_1.EventEmitter();
            this._displayWarning();
            this.form = new model_1.ControlGroup({}, null, shared_1.composeValidators(validators), shared_1.composeAsyncValidators(asyncValidators));
        }
        NgForm.prototype._displayWarning = function () {
            // TODO(kara): Update this when the new forms module becomes the default
            if (!_formWarningDisplayed) {
                _formWarningDisplayed = true;
                console.warn("\n      *It looks like you're using the old forms module. This will be opt-in in the next RC, and\n      will eventually be removed in favor of the new forms module. For more information, see:\n      https://docs.google.com/document/d/1RIezQqE4aEhBRmArIAS1mRIZtWFf6JxN_7B4meyWK0Y/preview\n    ");
            }
        };
        Object.defineProperty(NgForm.prototype, "submitted", {
            get: function () {
                return this._submitted;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgForm.prototype, "formDirective", {
            get: function () {
                return this;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgForm.prototype, "control", {
            get: function () {
                return this.form;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgForm.prototype, "path", {
            get: function () {
                return [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgForm.prototype, "controls", {
            get: function () {
                return this.form.controls;
            },
            enumerable: true,
            configurable: true
        });
        NgForm.prototype.addControl = function (dir) {
            var _this = this;
            resolvedPromise.then(function () {
                var container = _this._findContainer(dir.path);
                var ctrl = new model_1.Control();
                shared_1.setUpControl(ctrl, dir);
                container.registerControl(dir.name, ctrl);
                ctrl.updateValueAndValidity({ emitEvent: false });
            });
        };
        NgForm.prototype.getControl = function (dir) {
            return this.form.find(dir.path);
        };
        NgForm.prototype.removeControl = function (dir) {
            var _this = this;
            resolvedPromise.then(function () {
                var container = _this._findContainer(dir.path);
                if (lang_1.isPresent(container)) {
                    container.removeControl(dir.name);
                }
            });
        };
        NgForm.prototype.addControlGroup = function (dir) {
            var _this = this;
            resolvedPromise.then(function () {
                var container = _this._findContainer(dir.path);
                var group = new model_1.ControlGroup({});
                shared_1.setUpControlGroup(group, dir);
                container.registerControl(dir.name, group);
                group.updateValueAndValidity({ emitEvent: false });
            });
        };
        NgForm.prototype.removeControlGroup = function (dir) {
            var _this = this;
            resolvedPromise.then(function () {
                var container = _this._findContainer(dir.path);
                if (lang_1.isPresent(container)) {
                    container.removeControl(dir.name);
                }
            });
        };
        NgForm.prototype.getControlGroup = function (dir) {
            return this.form.find(dir.path);
        };
        NgForm.prototype.updateModel = function (dir, value) {
            var _this = this;
            resolvedPromise.then(function () {
                var ctrl = _this.form.find(dir.path);
                ctrl.updateValue(value);
            });
        };
        NgForm.prototype.onSubmit = function () {
            this._submitted = true;
            this.ngSubmit.emit(null);
            return false;
        };
        /** @internal */
        NgForm.prototype._findContainer = function (path) {
            path.pop();
            return collection_1.ListWrapper.isEmpty(path) ? this.form : this.form.find(path);
        };
        /** @nocollapse */
        NgForm.decorators = [{ type: core_1.Directive, args: [{
                selector: 'form:not([ngNoForm]):not([ngFormModel]),ngForm,[ngForm]',
                providers: [exports.formDirectiveProvider],
                host: {
                    '(submit)': 'onSubmit()'
                },
                outputs: ['ngSubmit'],
                exportAs: 'ngForm'
            }] }];
        /** @nocollapse */
        NgForm.ctorParameters = [{ type: Array, decorators: [{ type: core_1.Optional }, { type: core_1.Self }, { type: core_1.Inject, args: [validators_1.NG_VALIDATORS] }] }, { type: Array, decorators: [{ type: core_1.Optional }, { type: core_1.Self }, { type: core_1.Inject, args: [validators_1.NG_ASYNC_VALIDATORS] }] }];
        return NgForm;
    }(control_container_1.ControlContainer);
    exports.NgForm = NgForm;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/forms-deprecated/directives/ng_form_control.js', ['@angular/core', '../../facade/async', '../../facade/collection', '../validators', './control_value_accessor', './ng_control', './shared', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var core_1 = $__require('@angular/core');
    var async_1 = $__require('../../facade/async');
    var collection_1 = $__require('../../facade/collection');
    var validators_1 = $__require('../validators');
    var control_value_accessor_1 = $__require('./control_value_accessor');
    var ng_control_1 = $__require('./ng_control');
    var shared_1 = $__require('./shared');
    exports.formControlBinding = {
        provide: ng_control_1.NgControl,
        useExisting: core_1.forwardRef(function () {
            return NgFormControl;
        })
    };
    var NgFormControl = function (_super) {
        __extends(NgFormControl, _super);
        function NgFormControl(_validators, _asyncValidators, valueAccessors) {
            _super.call(this);
            this._validators = _validators;
            this._asyncValidators = _asyncValidators;
            this.update = new async_1.EventEmitter();
            this.valueAccessor = shared_1.selectValueAccessor(this, valueAccessors);
        }
        NgFormControl.prototype.ngOnChanges = function (changes) {
            if (this._isControlChanged(changes)) {
                shared_1.setUpControl(this.form, this);
                this.form.updateValueAndValidity({ emitEvent: false });
            }
            if (shared_1.isPropertyUpdated(changes, this.viewModel)) {
                this.form.updateValue(this.model);
                this.viewModel = this.model;
            }
        };
        Object.defineProperty(NgFormControl.prototype, "path", {
            get: function () {
                return [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgFormControl.prototype, "validator", {
            get: function () {
                return shared_1.composeValidators(this._validators);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgFormControl.prototype, "asyncValidator", {
            get: function () {
                return shared_1.composeAsyncValidators(this._asyncValidators);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgFormControl.prototype, "control", {
            get: function () {
                return this.form;
            },
            enumerable: true,
            configurable: true
        });
        NgFormControl.prototype.viewToModelUpdate = function (newValue) {
            this.viewModel = newValue;
            this.update.emit(newValue);
        };
        NgFormControl.prototype._isControlChanged = function (changes) {
            return collection_1.StringMapWrapper.contains(changes, 'form');
        };
        /** @nocollapse */
        NgFormControl.decorators = [{ type: core_1.Directive, args: [{
                selector: '[ngFormControl]',
                providers: [exports.formControlBinding],
                inputs: ['form: ngFormControl', 'model: ngModel'],
                outputs: ['update: ngModelChange'],
                exportAs: 'ngForm'
            }] }];
        /** @nocollapse */
        NgFormControl.ctorParameters = [{ type: Array, decorators: [{ type: core_1.Optional }, { type: core_1.Self }, { type: core_1.Inject, args: [validators_1.NG_VALIDATORS] }] }, { type: Array, decorators: [{ type: core_1.Optional }, { type: core_1.Self }, { type: core_1.Inject, args: [validators_1.NG_ASYNC_VALIDATORS] }] }, { type: Array, decorators: [{ type: core_1.Optional }, { type: core_1.Self }, { type: core_1.Inject, args: [control_value_accessor_1.NG_VALUE_ACCESSOR] }] }];
        return NgFormControl;
    }(ng_control_1.NgControl);
    exports.NgFormControl = NgFormControl;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/common@2.0.0-rc.5/src/forms-deprecated/directives/control_container.js", ["./abstract_control_directive", "reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var abstract_control_directive_1 = $__require("./abstract_control_directive");
    /**
     * A directive that contains multiple {@link NgControl}s.
     *
     * Only used by the forms module.
     *
     * @experimental
     */
    var ControlContainer = function (_super) {
        __extends(ControlContainer, _super);
        function ControlContainer() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(ControlContainer.prototype, "formDirective", {
            /**
             * Get the form to which this container belongs.
             */
            get: function () {
                return null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ControlContainer.prototype, "path", {
            /**
             * Get the path to this container.
             */
            get: function () {
                return null;
            },
            enumerable: true,
            configurable: true
        });
        return ControlContainer;
    }(abstract_control_directive_1.AbstractControlDirective);
    exports.ControlContainer = ControlContainer;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/forms-deprecated/directives/ng_form_model.js', ['@angular/core', '../../facade/async', '../../facade/collection', '../../facade/exceptions', '../../facade/lang', '../validators', './control_container', './shared', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var core_1 = $__require('@angular/core');
    var async_1 = $__require('../../facade/async');
    var collection_1 = $__require('../../facade/collection');
    var exceptions_1 = $__require('../../facade/exceptions');
    var lang_1 = $__require('../../facade/lang');
    var validators_1 = $__require('../validators');
    var control_container_1 = $__require('./control_container');
    var shared_1 = $__require('./shared');
    exports.formDirectiveProvider = {
        provide: control_container_1.ControlContainer,
        useExisting: core_1.forwardRef(function () {
            return NgFormModel;
        })
    };
    var _formModelWarningDisplayed = false;
    var NgFormModel = function (_super) {
        __extends(NgFormModel, _super);
        function NgFormModel(_validators, _asyncValidators) {
            _super.call(this);
            this._validators = _validators;
            this._asyncValidators = _asyncValidators;
            this._submitted = false;
            this.form = null;
            this.directives = [];
            this.ngSubmit = new async_1.EventEmitter();
            this._displayWarning();
        }
        NgFormModel.prototype._displayWarning = function () {
            // TODO(kara): Update this when the new forms module becomes the default
            if (!_formModelWarningDisplayed) {
                _formModelWarningDisplayed = true;
                console.warn("\n      *It looks like you're using the old forms module. This will be opt-in in the next RC, and\n      will eventually be removed in favor of the new forms module. For more information, see:\n      https://docs.google.com/document/d/1RIezQqE4aEhBRmArIAS1mRIZtWFf6JxN_7B4meyWK0Y/preview\n    ");
            }
        };
        NgFormModel.prototype.ngOnChanges = function (changes) {
            this._checkFormPresent();
            if (collection_1.StringMapWrapper.contains(changes, 'form')) {
                var sync = shared_1.composeValidators(this._validators);
                this.form.validator = validators_1.Validators.compose([this.form.validator, sync]);
                var async = shared_1.composeAsyncValidators(this._asyncValidators);
                this.form.asyncValidator = validators_1.Validators.composeAsync([this.form.asyncValidator, async]);
                this.form.updateValueAndValidity({ onlySelf: true, emitEvent: false });
            }
            this._updateDomValue();
        };
        Object.defineProperty(NgFormModel.prototype, "submitted", {
            get: function () {
                return this._submitted;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgFormModel.prototype, "formDirective", {
            get: function () {
                return this;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgFormModel.prototype, "control", {
            get: function () {
                return this.form;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgFormModel.prototype, "path", {
            get: function () {
                return [];
            },
            enumerable: true,
            configurable: true
        });
        NgFormModel.prototype.addControl = function (dir) {
            var ctrl = this.form.find(dir.path);
            shared_1.setUpControl(ctrl, dir);
            ctrl.updateValueAndValidity({ emitEvent: false });
            this.directives.push(dir);
        };
        NgFormModel.prototype.getControl = function (dir) {
            return this.form.find(dir.path);
        };
        NgFormModel.prototype.removeControl = function (dir) {
            collection_1.ListWrapper.remove(this.directives, dir);
        };
        NgFormModel.prototype.addControlGroup = function (dir) {
            var ctrl = this.form.find(dir.path);
            shared_1.setUpControlGroup(ctrl, dir);
            ctrl.updateValueAndValidity({ emitEvent: false });
        };
        NgFormModel.prototype.removeControlGroup = function (dir) {};
        NgFormModel.prototype.getControlGroup = function (dir) {
            return this.form.find(dir.path);
        };
        NgFormModel.prototype.updateModel = function (dir, value) {
            var ctrl = this.form.find(dir.path);
            ctrl.updateValue(value);
        };
        NgFormModel.prototype.onSubmit = function () {
            this._submitted = true;
            this.ngSubmit.emit(null);
            return false;
        };
        /** @internal */
        NgFormModel.prototype._updateDomValue = function () {
            var _this = this;
            this.directives.forEach(function (dir) {
                var ctrl = _this.form.find(dir.path);
                dir.valueAccessor.writeValue(ctrl.value);
            });
        };
        NgFormModel.prototype._checkFormPresent = function () {
            if (lang_1.isBlank(this.form)) {
                throw new exceptions_1.BaseException("ngFormModel expects a form. Please pass one in. Example: <form [ngFormModel]=\"myCoolForm\">");
            }
        };
        /** @nocollapse */
        NgFormModel.decorators = [{ type: core_1.Directive, args: [{
                selector: '[ngFormModel]',
                providers: [exports.formDirectiveProvider],
                inputs: ['form: ngFormModel'],
                host: { '(submit)': 'onSubmit()' },
                outputs: ['ngSubmit'],
                exportAs: 'ngForm'
            }] }];
        /** @nocollapse */
        NgFormModel.ctorParameters = [{ type: Array, decorators: [{ type: core_1.Optional }, { type: core_1.Self }, { type: core_1.Inject, args: [validators_1.NG_VALIDATORS] }] }, { type: Array, decorators: [{ type: core_1.Optional }, { type: core_1.Self }, { type: core_1.Inject, args: [validators_1.NG_ASYNC_VALIDATORS] }] }];
        return NgFormModel;
    }(control_container_1.ControlContainer);
    exports.NgFormModel = NgFormModel;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/forms-deprecated/directives/checkbox_value_accessor.js', ['@angular/core', './control_value_accessor', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var control_value_accessor_1 = $__require('./control_value_accessor');
    exports.CHECKBOX_VALUE_ACCESSOR = {
        provide: control_value_accessor_1.NG_VALUE_ACCESSOR,
        useExisting: core_1.forwardRef(function () {
            return CheckboxControlValueAccessor;
        }),
        multi: true
    };
    var CheckboxControlValueAccessor = function () {
        function CheckboxControlValueAccessor(_renderer, _elementRef) {
            this._renderer = _renderer;
            this._elementRef = _elementRef;
            this.onChange = function (_) {};
            this.onTouched = function () {};
        }
        CheckboxControlValueAccessor.prototype.writeValue = function (value) {
            this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', value);
        };
        CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        /** @nocollapse */
        CheckboxControlValueAccessor.decorators = [{ type: core_1.Directive, args: [{
                selector: 'input[type=checkbox][ngControl],input[type=checkbox][ngFormControl],input[type=checkbox][ngModel]',
                host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },
                providers: [exports.CHECKBOX_VALUE_ACCESSOR]
            }] }];
        /** @nocollapse */
        CheckboxControlValueAccessor.ctorParameters = [{ type: core_1.Renderer }, { type: core_1.ElementRef }];
        return CheckboxControlValueAccessor;
    }();
    exports.CheckboxControlValueAccessor = CheckboxControlValueAccessor;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/forms-deprecated/directives/default_value_accessor.js', ['@angular/core', '../../facade/lang', './control_value_accessor', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var lang_1 = $__require('../../facade/lang');
    var control_value_accessor_1 = $__require('./control_value_accessor');
    exports.DEFAULT_VALUE_ACCESSOR = {
        provide: control_value_accessor_1.NG_VALUE_ACCESSOR,
        useExisting: core_1.forwardRef(function () {
            return DefaultValueAccessor;
        }),
        multi: true
    };
    var DefaultValueAccessor = function () {
        function DefaultValueAccessor(_renderer, _elementRef) {
            this._renderer = _renderer;
            this._elementRef = _elementRef;
            this.onChange = function (_) {};
            this.onTouched = function () {};
        }
        DefaultValueAccessor.prototype.writeValue = function (value) {
            var normalizedValue = lang_1.isBlank(value) ? '' : value;
            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);
        };
        DefaultValueAccessor.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        DefaultValueAccessor.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        /** @nocollapse */
        DefaultValueAccessor.decorators = [{ type: core_1.Directive, args: [{
                selector: 'input:not([type=checkbox])[ngControl],textarea[ngControl],input:not([type=checkbox])[ngFormControl],textarea[ngFormControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',
                // TODO: vsavkin replace the above selector with the one below it once
                // https://github.com/angular/angular/issues/3011 is implemented
                // selector: '[ngControl],[ngModel],[ngFormControl]',
                host: { '(input)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },
                providers: [exports.DEFAULT_VALUE_ACCESSOR]
            }] }];
        /** @nocollapse */
        DefaultValueAccessor.ctorParameters = [{ type: core_1.Renderer }, { type: core_1.ElementRef }];
        return DefaultValueAccessor;
    }();
    exports.DefaultValueAccessor = DefaultValueAccessor;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/common@2.0.0-rc.5/src/forms-deprecated/directives/normalize_validator.js", ["reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function normalizeValidator(validator) {
        if (validator.validate !== undefined) {
            return function (c) {
                return validator.validate(c);
            };
        } else {
            return validator;
        }
    }
    exports.normalizeValidator = normalizeValidator;
    function normalizeAsyncValidator(validator) {
        if (validator.validate !== undefined) {
            return function (c) {
                return validator.validate(c);
            };
        } else {
            return validator;
        }
    }
    exports.normalizeAsyncValidator = normalizeAsyncValidator;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/forms-deprecated/directives/number_value_accessor.js', ['@angular/core', '../../facade/lang', './control_value_accessor', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var lang_1 = $__require('../../facade/lang');
    var control_value_accessor_1 = $__require('./control_value_accessor');
    exports.NUMBER_VALUE_ACCESSOR = {
        provide: control_value_accessor_1.NG_VALUE_ACCESSOR,
        useExisting: core_1.forwardRef(function () {
            return NumberValueAccessor;
        }),
        multi: true
    };
    var NumberValueAccessor = function () {
        function NumberValueAccessor(_renderer, _elementRef) {
            this._renderer = _renderer;
            this._elementRef = _elementRef;
            this.onChange = function (_) {};
            this.onTouched = function () {};
        }
        NumberValueAccessor.prototype.writeValue = function (value) {
            // The value needs to be normalized for IE9, otherwise it is set to 'null' when null
            var normalizedValue = lang_1.isBlank(value) ? '' : value;
            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);
        };
        NumberValueAccessor.prototype.registerOnChange = function (fn) {
            this.onChange = function (value) {
                fn(value == '' ? null : lang_1.NumberWrapper.parseFloat(value));
            };
        };
        NumberValueAccessor.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        /** @nocollapse */
        NumberValueAccessor.decorators = [{ type: core_1.Directive, args: [{
                selector: 'input[type=number][ngControl],input[type=number][ngFormControl],input[type=number][ngModel]',
                host: {
                    '(change)': 'onChange($event.target.value)',
                    '(input)': 'onChange($event.target.value)',
                    '(blur)': 'onTouched()'
                },
                providers: [exports.NUMBER_VALUE_ACCESSOR]
            }] }];
        /** @nocollapse */
        NumberValueAccessor.ctorParameters = [{ type: core_1.Renderer }, { type: core_1.ElementRef }];
        return NumberValueAccessor;
    }();
    exports.NumberValueAccessor = NumberValueAccessor;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/forms-deprecated/directives/abstract_control_directive.js', ['../../facade/exceptions', '../../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var exceptions_1 = $__require('../../facade/exceptions');
    var lang_1 = $__require('../../facade/lang');
    /**
     * Base class for control directives.
     *
     * Only used internally in the forms module.
     *
     * @experimental
     */
    var AbstractControlDirective = function () {
        function AbstractControlDirective() {}
        Object.defineProperty(AbstractControlDirective.prototype, "control", {
            get: function () {
                return exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "value", {
            get: function () {
                return lang_1.isPresent(this.control) ? this.control.value : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "valid", {
            get: function () {
                return lang_1.isPresent(this.control) ? this.control.valid : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "errors", {
            get: function () {
                return lang_1.isPresent(this.control) ? this.control.errors : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "pristine", {
            get: function () {
                return lang_1.isPresent(this.control) ? this.control.pristine : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "dirty", {
            get: function () {
                return lang_1.isPresent(this.control) ? this.control.dirty : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "touched", {
            get: function () {
                return lang_1.isPresent(this.control) ? this.control.touched : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "untouched", {
            get: function () {
                return lang_1.isPresent(this.control) ? this.control.untouched : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "path", {
            get: function () {
                return null;
            },
            enumerable: true,
            configurable: true
        });
        return AbstractControlDirective;
    }();
    exports.AbstractControlDirective = AbstractControlDirective;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/forms-deprecated/directives/ng_control.js', ['../../facade/exceptions', './abstract_control_directive', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var exceptions_1 = $__require('../../facade/exceptions');
    var abstract_control_directive_1 = $__require('./abstract_control_directive');
    /**
     * A base class that all control directive extend.
     * It binds a {@link Control} object to a DOM element.
     *
     * Used internally by Angular forms.
     *
     * @experimental
     */
    var NgControl = function (_super) {
        __extends(NgControl, _super);
        function NgControl() {
            _super.apply(this, arguments);
            this.name = null;
            this.valueAccessor = null;
        }
        Object.defineProperty(NgControl.prototype, "validator", {
            get: function () {
                return exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgControl.prototype, "asyncValidator", {
            get: function () {
                return exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        return NgControl;
    }(abstract_control_directive_1.AbstractControlDirective);
    exports.NgControl = NgControl;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/forms-deprecated/directives/radio_control_value_accessor.js', ['@angular/core', '../../facade/collection', '../../facade/lang', './control_value_accessor', './ng_control', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var collection_1 = $__require('../../facade/collection');
    var lang_1 = $__require('../../facade/lang');
    var control_value_accessor_1 = $__require('./control_value_accessor');
    var ng_control_1 = $__require('./ng_control');
    exports.RADIO_VALUE_ACCESSOR = {
        provide: control_value_accessor_1.NG_VALUE_ACCESSOR,
        useExisting: core_1.forwardRef(function () {
            return RadioControlValueAccessor;
        }),
        multi: true
    };
    var RadioControlRegistry = function () {
        function RadioControlRegistry() {
            this._accessors = [];
        }
        RadioControlRegistry.prototype.add = function (control, accessor) {
            this._accessors.push([control, accessor]);
        };
        RadioControlRegistry.prototype.remove = function (accessor) {
            var indexToRemove = -1;
            for (var i = 0; i < this._accessors.length; ++i) {
                if (this._accessors[i][1] === accessor) {
                    indexToRemove = i;
                }
            }
            collection_1.ListWrapper.removeAt(this._accessors, indexToRemove);
        };
        RadioControlRegistry.prototype.select = function (accessor) {
            var _this = this;
            this._accessors.forEach(function (c) {
                if (_this._isSameGroup(c, accessor) && c[1] !== accessor) {
                    c[1].fireUncheck();
                }
            });
        };
        RadioControlRegistry.prototype._isSameGroup = function (controlPair, accessor) {
            return controlPair[0].control.root === accessor._control.control.root && controlPair[1].name === accessor.name;
        };
        /** @nocollapse */
        RadioControlRegistry.decorators = [{ type: core_1.Injectable }];
        return RadioControlRegistry;
    }();
    exports.RadioControlRegistry = RadioControlRegistry;
    /**
     * The value provided by the forms API for radio buttons.
     *
     * @experimental
     */
    var RadioButtonState = function () {
        function RadioButtonState(checked, value) {
            this.checked = checked;
            this.value = value;
        }
        return RadioButtonState;
    }();
    exports.RadioButtonState = RadioButtonState;
    var RadioControlValueAccessor = function () {
        function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {
            this._renderer = _renderer;
            this._elementRef = _elementRef;
            this._registry = _registry;
            this._injector = _injector;
            this.onChange = function () {};
            this.onTouched = function () {};
        }
        RadioControlValueAccessor.prototype.ngOnInit = function () {
            this._control = this._injector.get(ng_control_1.NgControl);
            this._registry.add(this._control, this);
        };
        RadioControlValueAccessor.prototype.ngOnDestroy = function () {
            this._registry.remove(this);
        };
        RadioControlValueAccessor.prototype.writeValue = function (value) {
            this._state = value;
            if (lang_1.isPresent(value) && value.checked) {
                this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', true);
            }
        };
        RadioControlValueAccessor.prototype.registerOnChange = function (fn) {
            var _this = this;
            this._fn = fn;
            this.onChange = function () {
                fn(new RadioButtonState(true, _this._state.value));
                _this._registry.select(_this);
            };
        };
        RadioControlValueAccessor.prototype.fireUncheck = function () {
            this._fn(new RadioButtonState(false, this._state.value));
        };
        RadioControlValueAccessor.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        /** @nocollapse */
        RadioControlValueAccessor.decorators = [{ type: core_1.Directive, args: [{
                selector: 'input[type=radio][ngControl],input[type=radio][ngFormControl],input[type=radio][ngModel]',
                host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },
                providers: [exports.RADIO_VALUE_ACCESSOR]
            }] }];
        /** @nocollapse */
        RadioControlValueAccessor.ctorParameters = [{ type: core_1.Renderer }, { type: core_1.ElementRef }, { type: RadioControlRegistry }, { type: core_1.Injector }];
        /** @nocollapse */
        RadioControlValueAccessor.propDecorators = {
            'name': [{ type: core_1.Input }]
        };
        return RadioControlValueAccessor;
    }();
    exports.RadioControlValueAccessor = RadioControlValueAccessor;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/forms-deprecated/directives/select_multiple_control_value_accessor.js', ['@angular/core', '../../facade/collection', '../../facade/lang', './control_value_accessor', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var collection_1 = $__require('../../facade/collection');
    var lang_1 = $__require('../../facade/lang');
    var control_value_accessor_1 = $__require('./control_value_accessor');
    exports.SELECT_MULTIPLE_VALUE_ACCESSOR = {
        provide: control_value_accessor_1.NG_VALUE_ACCESSOR,
        useExisting: core_1.forwardRef(function () {
            return SelectMultipleControlValueAccessor;
        }),
        multi: true
    };
    function _buildValueString(id, value) {
        if (lang_1.isBlank(id)) return "" + value;
        if (lang_1.isString(value)) value = "'" + value + "'";
        if (!lang_1.isPrimitive(value)) value = 'Object';
        return lang_1.StringWrapper.slice(id + ": " + value, 0, 50);
    }
    function _extractId(valueString) {
        return valueString.split(':')[0];
    }
    /** Mock interface for HTMLCollection */
    var HTMLCollection = function () {
        function HTMLCollection() {}
        return HTMLCollection;
    }();
    var SelectMultipleControlValueAccessor = function () {
        function SelectMultipleControlValueAccessor() {
            /** @internal */
            this._optionMap = new Map();
            /** @internal */
            this._idCounter = 0;
            this.onChange = function (_) {};
            this.onTouched = function () {};
        }
        SelectMultipleControlValueAccessor.prototype.writeValue = function (value) {
            var _this = this;
            this.value = value;
            if (value == null) return;
            var values = value;
            // convert values to ids
            var ids = values.map(function (v) {
                return _this._getOptionId(v);
            });
            this._optionMap.forEach(function (opt, o) {
                opt._setSelected(ids.indexOf(o.toString()) > -1);
            });
        };
        SelectMultipleControlValueAccessor.prototype.registerOnChange = function (fn) {
            var _this = this;
            this.onChange = function (_) {
                var selected = [];
                if (_.hasOwnProperty('selectedOptions')) {
                    var options = _.selectedOptions;
                    for (var i = 0; i < options.length; i++) {
                        var opt = options.item(i);
                        var val = _this._getOptionValue(opt.value);
                        selected.push(val);
                    }
                } else {
                    var options = _.options;
                    for (var i = 0; i < options.length; i++) {
                        var opt = options.item(i);
                        if (opt.selected) {
                            var val = _this._getOptionValue(opt.value);
                            selected.push(val);
                        }
                    }
                }
                fn(selected);
            };
        };
        SelectMultipleControlValueAccessor.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        /** @internal */
        SelectMultipleControlValueAccessor.prototype._registerOption = function (value) {
            var id = (this._idCounter++).toString();
            this._optionMap.set(id, value);
            return id;
        };
        /** @internal */
        SelectMultipleControlValueAccessor.prototype._getOptionId = function (value) {
            for (var _i = 0, _a = collection_1.MapWrapper.keys(this._optionMap); _i < _a.length; _i++) {
                var id = _a[_i];
                if (lang_1.looseIdentical(this._optionMap.get(id)._value, value)) return id;
            }
            return null;
        };
        /** @internal */
        SelectMultipleControlValueAccessor.prototype._getOptionValue = function (valueString) {
            var opt = this._optionMap.get(_extractId(valueString));
            return lang_1.isPresent(opt) ? opt._value : valueString;
        };
        /** @nocollapse */
        SelectMultipleControlValueAccessor.decorators = [{ type: core_1.Directive, args: [{
                selector: 'select[multiple][ngControl],select[multiple][ngFormControl],select[multiple][ngModel]',
                host: { '(change)': 'onChange($event.target)', '(blur)': 'onTouched()' },
                providers: [exports.SELECT_MULTIPLE_VALUE_ACCESSOR]
            }] }];
        /** @nocollapse */
        SelectMultipleControlValueAccessor.ctorParameters = [];
        return SelectMultipleControlValueAccessor;
    }();
    exports.SelectMultipleControlValueAccessor = SelectMultipleControlValueAccessor;
    var NgSelectMultipleOption = function () {
        function NgSelectMultipleOption(_element, _renderer, _select) {
            this._element = _element;
            this._renderer = _renderer;
            this._select = _select;
            if (lang_1.isPresent(this._select)) {
                this.id = this._select._registerOption(this);
            }
        }
        Object.defineProperty(NgSelectMultipleOption.prototype, "ngValue", {
            set: function (value) {
                if (this._select == null) return;
                this._value = value;
                this._setElementValue(_buildValueString(this.id, value));
                this._select.writeValue(this._select.value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgSelectMultipleOption.prototype, "value", {
            set: function (value) {
                if (lang_1.isPresent(this._select)) {
                    this._value = value;
                    this._setElementValue(_buildValueString(this.id, value));
                    this._select.writeValue(this._select.value);
                } else {
                    this._setElementValue(value);
                }
            },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        NgSelectMultipleOption.prototype._setElementValue = function (value) {
            this._renderer.setElementProperty(this._element.nativeElement, 'value', value);
        };
        /** @internal */
        NgSelectMultipleOption.prototype._setSelected = function (selected) {
            this._renderer.setElementProperty(this._element.nativeElement, 'selected', selected);
        };
        NgSelectMultipleOption.prototype.ngOnDestroy = function () {
            if (lang_1.isPresent(this._select)) {
                this._select._optionMap.delete(this.id);
                this._select.writeValue(this._select.value);
            }
        };
        /** @nocollapse */
        NgSelectMultipleOption.decorators = [{ type: core_1.Directive, args: [{ selector: 'option' }] }];
        /** @nocollapse */
        NgSelectMultipleOption.ctorParameters = [{ type: core_1.ElementRef }, { type: core_1.Renderer }, { type: SelectMultipleControlValueAccessor, decorators: [{ type: core_1.Optional }, { type: core_1.Host }] }];
        /** @nocollapse */
        NgSelectMultipleOption.propDecorators = {
            'ngValue': [{ type: core_1.Input, args: ['ngValue'] }],
            'value': [{ type: core_1.Input, args: ['value'] }]
        };
        return NgSelectMultipleOption;
    }();
    exports.NgSelectMultipleOption = NgSelectMultipleOption;
    exports.SELECT_DIRECTIVES = [SelectMultipleControlValueAccessor, NgSelectMultipleOption];
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/forms-deprecated/directives/shared.js', ['../../facade/collection', '../../facade/exceptions', '../../facade/lang', '../validators', './checkbox_value_accessor', './default_value_accessor', './normalize_validator', './number_value_accessor', './radio_control_value_accessor', './select_control_value_accessor', './select_multiple_control_value_accessor', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var collection_1 = $__require('../../facade/collection');
    var exceptions_1 = $__require('../../facade/exceptions');
    var lang_1 = $__require('../../facade/lang');
    var validators_1 = $__require('../validators');
    var checkbox_value_accessor_1 = $__require('./checkbox_value_accessor');
    var default_value_accessor_1 = $__require('./default_value_accessor');
    var normalize_validator_1 = $__require('./normalize_validator');
    var number_value_accessor_1 = $__require('./number_value_accessor');
    var radio_control_value_accessor_1 = $__require('./radio_control_value_accessor');
    var select_control_value_accessor_1 = $__require('./select_control_value_accessor');
    var select_multiple_control_value_accessor_1 = $__require('./select_multiple_control_value_accessor');
    function controlPath(name, parent) {
        var p = collection_1.ListWrapper.clone(parent.path);
        p.push(name);
        return p;
    }
    exports.controlPath = controlPath;
    function setUpControl(control, dir) {
        if (lang_1.isBlank(control)) _throwError(dir, 'Cannot find control with');
        if (lang_1.isBlank(dir.valueAccessor)) _throwError(dir, 'No value accessor for form control with');
        control.validator = validators_1.Validators.compose([control.validator, dir.validator]);
        control.asyncValidator = validators_1.Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);
        dir.valueAccessor.writeValue(control.value);
        // view -> model
        dir.valueAccessor.registerOnChange(function (newValue) {
            dir.viewToModelUpdate(newValue);
            control.updateValue(newValue, { emitModelToViewChange: false });
            control.markAsDirty();
        });
        // model -> view
        control.registerOnChange(function (newValue) {
            return dir.valueAccessor.writeValue(newValue);
        });
        // touched
        dir.valueAccessor.registerOnTouched(function () {
            return control.markAsTouched();
        });
    }
    exports.setUpControl = setUpControl;
    function setUpControlGroup(control, dir) {
        if (lang_1.isBlank(control)) _throwError(dir, 'Cannot find control with');
        control.validator = validators_1.Validators.compose([control.validator, dir.validator]);
        control.asyncValidator = validators_1.Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);
    }
    exports.setUpControlGroup = setUpControlGroup;
    function _throwError(dir, message) {
        var messageEnd;
        if (dir.path.length > 1) {
            messageEnd = "path: '" + dir.path.join(' -> ') + "'";
        } else if (dir.path[0]) {
            messageEnd = "name: '" + dir.path + "'";
        } else {
            messageEnd = 'unspecified name';
        }
        throw new exceptions_1.BaseException(message + " " + messageEnd);
    }
    function composeValidators(validators) {
        return lang_1.isPresent(validators) ? validators_1.Validators.compose(validators.map(normalize_validator_1.normalizeValidator)) : null;
    }
    exports.composeValidators = composeValidators;
    function composeAsyncValidators(validators) {
        return lang_1.isPresent(validators) ? validators_1.Validators.composeAsync(validators.map(normalize_validator_1.normalizeAsyncValidator)) : null;
    }
    exports.composeAsyncValidators = composeAsyncValidators;
    function isPropertyUpdated(changes, viewModel) {
        if (!collection_1.StringMapWrapper.contains(changes, 'model')) return false;
        var change = changes['model'];
        if (change.isFirstChange()) return true;
        return !lang_1.looseIdentical(viewModel, change.currentValue);
    }
    exports.isPropertyUpdated = isPropertyUpdated;
    // TODO: vsavkin remove it once https://github.com/angular/angular/issues/3011 is implemented
    function selectValueAccessor(dir, valueAccessors) {
        if (lang_1.isBlank(valueAccessors)) return null;
        var defaultAccessor;
        var builtinAccessor;
        var customAccessor;
        valueAccessors.forEach(function (v) {
            if (lang_1.hasConstructor(v, default_value_accessor_1.DefaultValueAccessor)) {
                defaultAccessor = v;
            } else if (lang_1.hasConstructor(v, checkbox_value_accessor_1.CheckboxControlValueAccessor) || lang_1.hasConstructor(v, number_value_accessor_1.NumberValueAccessor) || lang_1.hasConstructor(v, select_control_value_accessor_1.SelectControlValueAccessor) || lang_1.hasConstructor(v, select_multiple_control_value_accessor_1.SelectMultipleControlValueAccessor) || lang_1.hasConstructor(v, radio_control_value_accessor_1.RadioControlValueAccessor)) {
                if (lang_1.isPresent(builtinAccessor)) _throwError(dir, 'More than one built-in value accessor matches form control with');
                builtinAccessor = v;
            } else {
                if (lang_1.isPresent(customAccessor)) _throwError(dir, 'More than one custom value accessor matches form control with');
                customAccessor = v;
            }
        });
        if (lang_1.isPresent(customAccessor)) return customAccessor;
        if (lang_1.isPresent(builtinAccessor)) return builtinAccessor;
        if (lang_1.isPresent(defaultAccessor)) return defaultAccessor;
        _throwError(dir, 'No valid value accessor for form control with');
        return null;
    }
    exports.selectValueAccessor = selectValueAccessor;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/forms-deprecated/directives/ng_model.js', ['@angular/core', '../../facade/async', '../model', '../validators', './control_value_accessor', './ng_control', './shared', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var core_1 = $__require('@angular/core');
    var async_1 = $__require('../../facade/async');
    var model_1 = $__require('../model');
    var validators_1 = $__require('../validators');
    var control_value_accessor_1 = $__require('./control_value_accessor');
    var ng_control_1 = $__require('./ng_control');
    var shared_1 = $__require('./shared');
    exports.formControlBinding = {
        provide: ng_control_1.NgControl,
        useExisting: core_1.forwardRef(function () {
            return NgModel;
        })
    };
    var NgModel = function (_super) {
        __extends(NgModel, _super);
        function NgModel(_validators, _asyncValidators, valueAccessors) {
            _super.call(this);
            this._validators = _validators;
            this._asyncValidators = _asyncValidators;
            /** @internal */
            this._control = new model_1.Control();
            /** @internal */
            this._added = false;
            this.update = new async_1.EventEmitter();
            this.valueAccessor = shared_1.selectValueAccessor(this, valueAccessors);
        }
        NgModel.prototype.ngOnChanges = function (changes) {
            if (!this._added) {
                shared_1.setUpControl(this._control, this);
                this._control.updateValueAndValidity({ emitEvent: false });
                this._added = true;
            }
            if (shared_1.isPropertyUpdated(changes, this.viewModel)) {
                this._control.updateValue(this.model);
                this.viewModel = this.model;
            }
        };
        Object.defineProperty(NgModel.prototype, "control", {
            get: function () {
                return this._control;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgModel.prototype, "path", {
            get: function () {
                return [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgModel.prototype, "validator", {
            get: function () {
                return shared_1.composeValidators(this._validators);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgModel.prototype, "asyncValidator", {
            get: function () {
                return shared_1.composeAsyncValidators(this._asyncValidators);
            },
            enumerable: true,
            configurable: true
        });
        NgModel.prototype.viewToModelUpdate = function (newValue) {
            this.viewModel = newValue;
            this.update.emit(newValue);
        };
        /** @nocollapse */
        NgModel.decorators = [{ type: core_1.Directive, args: [{
                selector: '[ngModel]:not([ngControl]):not([ngFormControl])',
                providers: [exports.formControlBinding],
                inputs: ['model: ngModel'],
                outputs: ['update: ngModelChange'],
                exportAs: 'ngForm'
            }] }];
        /** @nocollapse */
        NgModel.ctorParameters = [{ type: Array, decorators: [{ type: core_1.Optional }, { type: core_1.Self }, { type: core_1.Inject, args: [validators_1.NG_VALIDATORS] }] }, { type: Array, decorators: [{ type: core_1.Optional }, { type: core_1.Self }, { type: core_1.Inject, args: [validators_1.NG_ASYNC_VALIDATORS] }] }, { type: Array, decorators: [{ type: core_1.Optional }, { type: core_1.Self }, { type: core_1.Inject, args: [control_value_accessor_1.NG_VALUE_ACCESSOR] }] }];
        return NgModel;
    }(ng_control_1.NgControl);
    exports.NgModel = NgModel;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/forms-deprecated/directives/control_value_accessor.js', ['@angular/core', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var core_1 = $__require('@angular/core');
  /**
   * Used to provide a {@link ControlValueAccessor} for form controls.
   *
   * See {@link DefaultValueAccessor} for how to implement one.
   * @experimental
   */
  exports.NG_VALUE_ACCESSOR = new core_1.OpaqueToken('NgValueAccessor');
  

  return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/forms-deprecated/directives/select_control_value_accessor.js', ['@angular/core', '../../facade/collection', '../../facade/lang', './control_value_accessor', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var collection_1 = $__require('../../facade/collection');
    var lang_1 = $__require('../../facade/lang');
    var control_value_accessor_1 = $__require('./control_value_accessor');
    exports.SELECT_VALUE_ACCESSOR = {
        provide: control_value_accessor_1.NG_VALUE_ACCESSOR,
        useExisting: core_1.forwardRef(function () {
            return SelectControlValueAccessor;
        }),
        multi: true
    };
    function _buildValueString(id, value) {
        if (lang_1.isBlank(id)) return "" + value;
        if (!lang_1.isPrimitive(value)) value = 'Object';
        return lang_1.StringWrapper.slice(id + ": " + value, 0, 50);
    }
    function _extractId(valueString) {
        return valueString.split(':')[0];
    }
    var SelectControlValueAccessor = function () {
        function SelectControlValueAccessor(_renderer, _elementRef) {
            this._renderer = _renderer;
            this._elementRef = _elementRef;
            /** @internal */
            this._optionMap = new Map();
            /** @internal */
            this._idCounter = 0;
            this.onChange = function (_) {};
            this.onTouched = function () {};
        }
        SelectControlValueAccessor.prototype.writeValue = function (value) {
            this.value = value;
            var valueString = _buildValueString(this._getOptionId(value), value);
            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', valueString);
        };
        SelectControlValueAccessor.prototype.registerOnChange = function (fn) {
            var _this = this;
            this.onChange = function (valueString) {
                _this.value = valueString;
                fn(_this._getOptionValue(valueString));
            };
        };
        SelectControlValueAccessor.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        /** @internal */
        SelectControlValueAccessor.prototype._registerOption = function () {
            return (this._idCounter++).toString();
        };
        /** @internal */
        SelectControlValueAccessor.prototype._getOptionId = function (value) {
            for (var _i = 0, _a = collection_1.MapWrapper.keys(this._optionMap); _i < _a.length; _i++) {
                var id = _a[_i];
                if (lang_1.looseIdentical(this._optionMap.get(id), value)) return id;
            }
            return null;
        };
        /** @internal */
        SelectControlValueAccessor.prototype._getOptionValue = function (valueString) {
            var value = this._optionMap.get(_extractId(valueString));
            return lang_1.isPresent(value) ? value : valueString;
        };
        /** @nocollapse */
        SelectControlValueAccessor.decorators = [{ type: core_1.Directive, args: [{
                selector: 'select:not([multiple])[ngControl],select:not([multiple])[ngFormControl],select:not([multiple])[ngModel]',
                host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },
                providers: [exports.SELECT_VALUE_ACCESSOR]
            }] }];
        /** @nocollapse */
        SelectControlValueAccessor.ctorParameters = [{ type: core_1.Renderer }, { type: core_1.ElementRef }];
        return SelectControlValueAccessor;
    }();
    exports.SelectControlValueAccessor = SelectControlValueAccessor;
    var NgSelectOption = function () {
        function NgSelectOption(_element, _renderer, _select) {
            this._element = _element;
            this._renderer = _renderer;
            this._select = _select;
            if (lang_1.isPresent(this._select)) this.id = this._select._registerOption();
        }
        Object.defineProperty(NgSelectOption.prototype, "ngValue", {
            set: function (value) {
                if (this._select == null) return;
                this._select._optionMap.set(this.id, value);
                this._setElementValue(_buildValueString(this.id, value));
                this._select.writeValue(this._select.value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgSelectOption.prototype, "value", {
            set: function (value) {
                this._setElementValue(value);
                if (lang_1.isPresent(this._select)) this._select.writeValue(this._select.value);
            },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        NgSelectOption.prototype._setElementValue = function (value) {
            this._renderer.setElementProperty(this._element.nativeElement, 'value', value);
        };
        NgSelectOption.prototype.ngOnDestroy = function () {
            if (lang_1.isPresent(this._select)) {
                this._select._optionMap.delete(this.id);
                this._select.writeValue(this._select.value);
            }
        };
        /** @nocollapse */
        NgSelectOption.decorators = [{ type: core_1.Directive, args: [{ selector: 'option' }] }];
        /** @nocollapse */
        NgSelectOption.ctorParameters = [{ type: core_1.ElementRef }, { type: core_1.Renderer }, { type: SelectControlValueAccessor, decorators: [{ type: core_1.Optional }, { type: core_1.Host }] }];
        /** @nocollapse */
        NgSelectOption.propDecorators = {
            'ngValue': [{ type: core_1.Input, args: ['ngValue'] }],
            'value': [{ type: core_1.Input, args: ['value'] }]
        };
        return NgSelectOption;
    }();
    exports.NgSelectOption = NgSelectOption;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/forms-deprecated/directives/validators.js', ['@angular/core', '../../facade/lang', '../validators', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var lang_1 = $__require('../../facade/lang');
    var validators_1 = $__require('../validators');
    exports.REQUIRED = validators_1.Validators.required;
    exports.REQUIRED_VALIDATOR = {
        provide: validators_1.NG_VALIDATORS,
        useValue: exports.REQUIRED,
        multi: true
    };
    var RequiredValidator = function () {
        function RequiredValidator() {}
        /** @nocollapse */
        RequiredValidator.decorators = [{ type: core_1.Directive, args: [{
                selector: '[required][ngControl],[required][ngFormControl],[required][ngModel]',
                providers: [exports.REQUIRED_VALIDATOR]
            }] }];
        return RequiredValidator;
    }();
    exports.RequiredValidator = RequiredValidator;
    /**
     * Provivder which adds {@link MinLengthValidator} to {@link NG_VALIDATORS}.
     *
     * ## Example:
     *
     * {@example common/forms/ts/validators/validators.ts region='min'}
     */
    exports.MIN_LENGTH_VALIDATOR = {
        provide: validators_1.NG_VALIDATORS,
        useExisting: core_1.forwardRef(function () {
            return MinLengthValidator;
        }),
        multi: true
    };
    var MinLengthValidator = function () {
        function MinLengthValidator(minLength) {
            this._validator = validators_1.Validators.minLength(lang_1.NumberWrapper.parseInt(minLength, 10));
        }
        MinLengthValidator.prototype.validate = function (c) {
            return this._validator(c);
        };
        /** @nocollapse */
        MinLengthValidator.decorators = [{ type: core_1.Directive, args: [{
                selector: '[minlength][ngControl],[minlength][ngFormControl],[minlength][ngModel]',
                providers: [exports.MIN_LENGTH_VALIDATOR]
            }] }];
        /** @nocollapse */
        MinLengthValidator.ctorParameters = [{ type: undefined, decorators: [{ type: core_1.Attribute, args: ['minlength'] }] }];
        return MinLengthValidator;
    }();
    exports.MinLengthValidator = MinLengthValidator;
    /**
     * Provider which adds {@link MaxLengthValidator} to {@link NG_VALIDATORS}.
     *
     * ## Example:
     *
     * {@example common/forms/ts/validators/validators.ts region='max'}
     */
    exports.MAX_LENGTH_VALIDATOR = {
        provide: validators_1.NG_VALIDATORS,
        useExisting: core_1.forwardRef(function () {
            return MaxLengthValidator;
        }),
        multi: true
    };
    var MaxLengthValidator = function () {
        function MaxLengthValidator(maxLength) {
            this._validator = validators_1.Validators.maxLength(lang_1.NumberWrapper.parseInt(maxLength, 10));
        }
        MaxLengthValidator.prototype.validate = function (c) {
            return this._validator(c);
        };
        /** @nocollapse */
        MaxLengthValidator.decorators = [{ type: core_1.Directive, args: [{
                selector: '[maxlength][ngControl],[maxlength][ngFormControl],[maxlength][ngModel]',
                providers: [exports.MAX_LENGTH_VALIDATOR]
            }] }];
        /** @nocollapse */
        MaxLengthValidator.ctorParameters = [{ type: undefined, decorators: [{ type: core_1.Attribute, args: ['maxlength'] }] }];
        return MaxLengthValidator;
    }();
    exports.MaxLengthValidator = MaxLengthValidator;
    exports.PATTERN_VALIDATOR = {
        provide: validators_1.NG_VALIDATORS,
        useExisting: core_1.forwardRef(function () {
            return PatternValidator;
        }),
        multi: true
    };
    var PatternValidator = function () {
        function PatternValidator(pattern) {
            this._validator = validators_1.Validators.pattern(pattern);
        }
        PatternValidator.prototype.validate = function (c) {
            return this._validator(c);
        };
        /** @nocollapse */
        PatternValidator.decorators = [{ type: core_1.Directive, args: [{
                selector: '[pattern][ngControl],[pattern][ngFormControl],[pattern][ngModel]',
                providers: [exports.PATTERN_VALIDATOR]
            }] }];
        /** @nocollapse */
        PatternValidator.ctorParameters = [{ type: undefined, decorators: [{ type: core_1.Attribute, args: ['pattern'] }] }];
        return PatternValidator;
    }();
    exports.PatternValidator = PatternValidator;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/facade/async.js', ['rxjs/Subject', 'rxjs/Observable', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subject_1 = $__require('rxjs/Subject');
    var Observable_1 = $__require('rxjs/Observable');
    exports.Observable = Observable_1.Observable;
    var Subject_2 = $__require('rxjs/Subject');
    exports.Subject = Subject_2.Subject;
    /**
     * Use by directives and components to emit custom Events.
     *
     * ### Examples
     *
     * In the following example, `Zippy` alternatively emits `open` and `close` events when its
     * title gets clicked:
     *
     * ```
     * @Component({
     *   selector: 'zippy',
     *   template: `
     *   <div class="zippy">
     *     <div (click)="toggle()">Toggle</div>
     *     <div [hidden]="!visible">
     *       <ng-content></ng-content>
     *     </div>
     *  </div>`})
     * export class Zippy {
     *   visible: boolean = true;
     *   @Output() open: EventEmitter<any> = new EventEmitter();
     *   @Output() close: EventEmitter<any> = new EventEmitter();
     *
     *   toggle() {
     *     this.visible = !this.visible;
     *     if (this.visible) {
     *       this.open.emit(null);
     *     } else {
     *       this.close.emit(null);
     *     }
     *   }
     * }
     * ```
     *
     * The events payload can be accessed by the parameter `$event` on the components output event
     * handler:
     *
     * ```
     * <zippy (open)="onOpen($event)" (close)="onClose($event)"></zippy>
     * ```
     *
     * Uses Rx.Observable but provides an adapter to make it work as specified here:
     * https://github.com/jhusain/observable-spec
     *
     * Once a reference implementation of the spec is available, switch to it.
     * @stable
     */
    var EventEmitter = function (_super) {
        __extends(EventEmitter, _super);
        /**
         * Creates an instance of [EventEmitter], which depending on [isAsync],
         * delivers events synchronously or asynchronously.
         */
        function EventEmitter(isAsync) {
            if (isAsync === void 0) {
                isAsync = false;
            }
            _super.call(this);
            this.__isAsync = isAsync;
        }
        EventEmitter.prototype.emit = function (value) {
            _super.prototype.next.call(this, value);
        };
        /**
         * @deprecated - use .emit(value) instead
         */
        EventEmitter.prototype.next = function (value) {
            _super.prototype.next.call(this, value);
        };
        EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {
            var schedulerFn;
            var errorFn = function (err) {
                return null;
            };
            var completeFn = function () {
                return null;
            };
            if (generatorOrNext && typeof generatorOrNext === 'object') {
                schedulerFn = this.__isAsync ? function (value /** TODO #9100 */) {
                    setTimeout(function () {
                        return generatorOrNext.next(value);
                    });
                } : function (value /** TODO #9100 */) {
                    generatorOrNext.next(value);
                };
                if (generatorOrNext.error) {
                    errorFn = this.__isAsync ? function (err) {
                        setTimeout(function () {
                            return generatorOrNext.error(err);
                        });
                    } : function (err) {
                        generatorOrNext.error(err);
                    };
                }
                if (generatorOrNext.complete) {
                    completeFn = this.__isAsync ? function () {
                        setTimeout(function () {
                            return generatorOrNext.complete();
                        });
                    } : function () {
                        generatorOrNext.complete();
                    };
                }
            } else {
                schedulerFn = this.__isAsync ? function (value /** TODO #9100 */) {
                    setTimeout(function () {
                        return generatorOrNext(value);
                    });
                } : function (value /** TODO #9100 */) {
                    generatorOrNext(value);
                };
                if (error) {
                    errorFn = this.__isAsync ? function (err) {
                        setTimeout(function () {
                            return error(err);
                        });
                    } : function (err) {
                        error(err);
                    };
                }
                if (complete) {
                    completeFn = this.__isAsync ? function () {
                        setTimeout(function () {
                            return complete();
                        });
                    } : function () {
                        complete();
                    };
                }
            }
            return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
        };
        return EventEmitter;
    }(Subject_1.Subject);
    exports.EventEmitter = EventEmitter;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/forms-deprecated/model.js', ['rxjs/observable/PromiseObservable', '../facade/async', '../facade/collection', '../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var PromiseObservable_1 = $__require('rxjs/observable/PromiseObservable');
    var async_1 = $__require('../facade/async');
    var collection_1 = $__require('../facade/collection');
    var lang_1 = $__require('../facade/lang');
    /**
     * Indicates that a Control is valid, i.e. that no errors exist in the input value.
     */
    exports.VALID = 'VALID';
    /**
     * Indicates that a Control is invalid, i.e. that an error exists in the input value.
     */
    exports.INVALID = 'INVALID';
    /**
     * Indicates that a Control is pending, i.e. that async validation is occurring and
     * errors are not yet available for the input value.
     */
    exports.PENDING = 'PENDING';
    function isControl(control) {
        return control instanceof AbstractControl;
    }
    exports.isControl = isControl;
    function _find(control, path) {
        if (lang_1.isBlank(path)) return null;
        if (!(path instanceof Array)) {
            path = path.split('/');
        }
        if (path instanceof Array && collection_1.ListWrapper.isEmpty(path)) return null;
        return path.reduce(function (v, name) {
            if (v instanceof ControlGroup) {
                return lang_1.isPresent(v.controls[name]) ? v.controls[name] : null;
            } else if (v instanceof ControlArray) {
                var index = name;
                return lang_1.isPresent(v.at(index)) ? v.at(index) : null;
            } else {
                return null;
            }
        }, control);
    }
    function toObservable(r) {
        return lang_1.isPromise(r) ? PromiseObservable_1.PromiseObservable.create(r) : r;
    }
    /**
     * @experimental
     */
    var AbstractControl = function () {
        function AbstractControl(validator, asyncValidator) {
            this.validator = validator;
            this.asyncValidator = asyncValidator;
            this._pristine = true;
            this._touched = false;
        }
        Object.defineProperty(AbstractControl.prototype, "value", {
            get: function () {
                return this._value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "status", {
            get: function () {
                return this._status;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "valid", {
            get: function () {
                return this._status === exports.VALID;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "errors", {
            /**
             * Returns the errors of this control.
             */
            get: function () {
                return this._errors;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "pristine", {
            get: function () {
                return this._pristine;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "dirty", {
            get: function () {
                return !this.pristine;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "touched", {
            get: function () {
                return this._touched;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "untouched", {
            get: function () {
                return !this._touched;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "valueChanges", {
            get: function () {
                return this._valueChanges;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "statusChanges", {
            get: function () {
                return this._statusChanges;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "pending", {
            get: function () {
                return this._status == exports.PENDING;
            },
            enumerable: true,
            configurable: true
        });
        AbstractControl.prototype.markAsTouched = function () {
            this._touched = true;
        };
        AbstractControl.prototype.markAsDirty = function (_a) {
            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
            onlySelf = lang_1.normalizeBool(onlySelf);
            this._pristine = false;
            if (lang_1.isPresent(this._parent) && !onlySelf) {
                this._parent.markAsDirty({ onlySelf: onlySelf });
            }
        };
        AbstractControl.prototype.markAsPending = function (_a) {
            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
            onlySelf = lang_1.normalizeBool(onlySelf);
            this._status = exports.PENDING;
            if (lang_1.isPresent(this._parent) && !onlySelf) {
                this._parent.markAsPending({ onlySelf: onlySelf });
            }
        };
        AbstractControl.prototype.setParent = function (parent) {
            this._parent = parent;
        };
        AbstractControl.prototype.updateValueAndValidity = function (_a) {
            var _b = _a === void 0 ? {} : _a,
                onlySelf = _b.onlySelf,
                emitEvent = _b.emitEvent;
            onlySelf = lang_1.normalizeBool(onlySelf);
            emitEvent = lang_1.isPresent(emitEvent) ? emitEvent : true;
            this._updateValue();
            this._errors = this._runValidator();
            this._status = this._calculateStatus();
            if (this._status == exports.VALID || this._status == exports.PENDING) {
                this._runAsyncValidator(emitEvent);
            }
            if (emitEvent) {
                this._valueChanges.emit(this._value);
                this._statusChanges.emit(this._status);
            }
            if (lang_1.isPresent(this._parent) && !onlySelf) {
                this._parent.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
            }
        };
        AbstractControl.prototype._runValidator = function () {
            return lang_1.isPresent(this.validator) ? this.validator(this) : null;
        };
        AbstractControl.prototype._runAsyncValidator = function (emitEvent) {
            var _this = this;
            if (lang_1.isPresent(this.asyncValidator)) {
                this._status = exports.PENDING;
                this._cancelExistingSubscription();
                var obs = toObservable(this.asyncValidator(this));
                this._asyncValidationSubscription = obs.subscribe({ next: function (res) {
                        return _this.setErrors(res, { emitEvent: emitEvent });
                    } });
            }
        };
        AbstractControl.prototype._cancelExistingSubscription = function () {
            if (lang_1.isPresent(this._asyncValidationSubscription)) {
                this._asyncValidationSubscription.unsubscribe();
            }
        };
        /**
         * Sets errors on a control.
         *
         * This is used when validations are run not automatically, but manually by the user.
         *
         * Calling `setErrors` will also update the validity of the parent control.
         *
         * ## Usage
         *
         * ```
         * var login = new Control("someLogin");
         * login.setErrors({
         *   "notUnique": true
         * });
         *
         * expect(login.valid).toEqual(false);
         * expect(login.errors).toEqual({"notUnique": true});
         *
         * login.updateValue("someOtherLogin");
         *
         * expect(login.valid).toEqual(true);
         * ```
         */
        AbstractControl.prototype.setErrors = function (errors, _a) {
            var emitEvent = (_a === void 0 ? {} : _a).emitEvent;
            emitEvent = lang_1.isPresent(emitEvent) ? emitEvent : true;
            this._errors = errors;
            this._status = this._calculateStatus();
            if (emitEvent) {
                this._statusChanges.emit(this._status);
            }
            if (lang_1.isPresent(this._parent)) {
                this._parent._updateControlsErrors();
            }
        };
        AbstractControl.prototype.find = function (path) {
            return _find(this, path);
        };
        AbstractControl.prototype.getError = function (errorCode, path) {
            if (path === void 0) {
                path = null;
            }
            var control = lang_1.isPresent(path) && !collection_1.ListWrapper.isEmpty(path) ? this.find(path) : this;
            if (lang_1.isPresent(control) && lang_1.isPresent(control._errors)) {
                return collection_1.StringMapWrapper.get(control._errors, errorCode);
            } else {
                return null;
            }
        };
        AbstractControl.prototype.hasError = function (errorCode, path) {
            if (path === void 0) {
                path = null;
            }
            return lang_1.isPresent(this.getError(errorCode, path));
        };
        Object.defineProperty(AbstractControl.prototype, "root", {
            get: function () {
                var x = this;
                while (lang_1.isPresent(x._parent)) {
                    x = x._parent;
                }
                return x;
            },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        AbstractControl.prototype._updateControlsErrors = function () {
            this._status = this._calculateStatus();
            if (lang_1.isPresent(this._parent)) {
                this._parent._updateControlsErrors();
            }
        };
        /** @internal */
        AbstractControl.prototype._initObservables = function () {
            this._valueChanges = new async_1.EventEmitter();
            this._statusChanges = new async_1.EventEmitter();
        };
        AbstractControl.prototype._calculateStatus = function () {
            if (lang_1.isPresent(this._errors)) return exports.INVALID;
            if (this._anyControlsHaveStatus(exports.PENDING)) return exports.PENDING;
            if (this._anyControlsHaveStatus(exports.INVALID)) return exports.INVALID;
            return exports.VALID;
        };
        return AbstractControl;
    }();
    exports.AbstractControl = AbstractControl;
    /**
     * Defines a part of a form that cannot be divided into other controls. `Control`s have values and
     * validation state, which is determined by an optional validation function.
     *
     * `Control` is one of the three fundamental building blocks used to define forms in Angular, along
     * with {@link ControlGroup} and {@link ControlArray}.
     *
     * ## Usage
     *
     * By default, a `Control` is created for every `<input>` or other form component.
     * With {@link NgFormControl} or {@link NgFormModel} an existing {@link Control} can be
     * bound to a DOM element instead. This `Control` can be configured with a custom
     * validation function.
     *
     * ### Example ([live demo](http://plnkr.co/edit/23DESOpbNnBpBHZt1BR4?p=preview))
     *
     * @experimental
     */
    var Control = function (_super) {
        __extends(Control, _super);
        function Control(value, validator, asyncValidator) {
            if (value === void 0) {
                value = null;
            }
            if (validator === void 0) {
                validator = null;
            }
            if (asyncValidator === void 0) {
                asyncValidator = null;
            }
            _super.call(this, validator, asyncValidator);
            this._value = value;
            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });
            this._initObservables();
        }
        /**
         * Set the value of the control to `value`.
         *
         * If `onlySelf` is `true`, this change will only affect the validation of this `Control`
         * and not its parent component. If `emitEvent` is `true`, this change will cause a
         * `valueChanges` event on the `Control` to be emitted. Both of these options default to
         * `false`.
         *
         * If `emitModelToViewChange` is `true`, the view will be notified about the new value
         * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not
         * specified.
         */
        Control.prototype.updateValue = function (value, _a) {
            var _b = _a === void 0 ? {} : _a,
                onlySelf = _b.onlySelf,
                emitEvent = _b.emitEvent,
                emitModelToViewChange = _b.emitModelToViewChange;
            emitModelToViewChange = lang_1.isPresent(emitModelToViewChange) ? emitModelToViewChange : true;
            this._value = value;
            if (lang_1.isPresent(this._onChange) && emitModelToViewChange) this._onChange(this._value);
            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
        };
        /**
         * @internal
         */
        Control.prototype._updateValue = function () {};
        /**
         * @internal
         */
        Control.prototype._anyControlsHaveStatus = function (status) {
            return false;
        };
        /**
         * Register a listener for change events.
         */
        Control.prototype.registerOnChange = function (fn) {
            this._onChange = fn;
        };
        return Control;
    }(AbstractControl);
    exports.Control = Control;
    /**
     * Defines a part of a form, of fixed length, that can contain other controls.
     *
     * A `ControlGroup` aggregates the values of each {@link Control} in the group.
     * The status of a `ControlGroup` depends on the status of its children.
     * If one of the controls in a group is invalid, the entire group is invalid.
     * Similarly, if a control changes its value, the entire group changes as well.
     *
     * `ControlGroup` is one of the three fundamental building blocks used to define forms in Angular,
     * along with {@link Control} and {@link ControlArray}. {@link ControlArray} can also contain other
     * controls, but is of variable length.
     *
     * ### Example ([live demo](http://plnkr.co/edit/23DESOpbNnBpBHZt1BR4?p=preview))
     *
     * @experimental
     */
    var ControlGroup = function (_super) {
        __extends(ControlGroup, _super);
        function ControlGroup(controls, optionals, validator, asyncValidator) {
            if (optionals === void 0) {
                optionals = null;
            }
            if (validator === void 0) {
                validator = null;
            }
            if (asyncValidator === void 0) {
                asyncValidator = null;
            }
            _super.call(this, validator, asyncValidator);
            this.controls = controls;
            this._optionals = lang_1.isPresent(optionals) ? optionals : {};
            this._initObservables();
            this._setParentForControls();
            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });
        }
        /**
         * Register a control with the group's list of controls.
         */
        ControlGroup.prototype.registerControl = function (name, control) {
            this.controls[name] = control;
            control.setParent(this);
        };
        /**
         * Add a control to this group.
         */
        ControlGroup.prototype.addControl = function (name, control) {
            this.registerControl(name, control);
            this.updateValueAndValidity();
        };
        /**
         * Remove a control from this group.
         */
        ControlGroup.prototype.removeControl = function (name) {
            collection_1.StringMapWrapper.delete(this.controls, name);
            this.updateValueAndValidity();
        };
        /**
         * Mark the named control as non-optional.
         */
        ControlGroup.prototype.include = function (controlName) {
            collection_1.StringMapWrapper.set(this._optionals, controlName, true);
            this.updateValueAndValidity();
        };
        /**
         * Mark the named control as optional.
         */
        ControlGroup.prototype.exclude = function (controlName) {
            collection_1.StringMapWrapper.set(this._optionals, controlName, false);
            this.updateValueAndValidity();
        };
        /**
         * Check whether there is a control with the given name in the group.
         */
        ControlGroup.prototype.contains = function (controlName) {
            var c = collection_1.StringMapWrapper.contains(this.controls, controlName);
            return c && this._included(controlName);
        };
        /** @internal */
        ControlGroup.prototype._setParentForControls = function () {
            var _this = this;
            collection_1.StringMapWrapper.forEach(this.controls, function (control, name) {
                control.setParent(_this);
            });
        };
        /** @internal */
        ControlGroup.prototype._updateValue = function () {
            this._value = this._reduceValue();
        };
        /** @internal */
        ControlGroup.prototype._anyControlsHaveStatus = function (status) {
            var _this = this;
            var res = false;
            collection_1.StringMapWrapper.forEach(this.controls, function (control, name) {
                res = res || _this.contains(name) && control.status == status;
            });
            return res;
        };
        /** @internal */
        ControlGroup.prototype._reduceValue = function () {
            return this._reduceChildren({}, function (acc, control, name) {
                acc[name] = control.value;
                return acc;
            });
        };
        /** @internal */
        ControlGroup.prototype._reduceChildren = function (initValue, fn) {
            var _this = this;
            var res = initValue;
            collection_1.StringMapWrapper.forEach(this.controls, function (control, name) {
                if (_this._included(name)) {
                    res = fn(res, control, name);
                }
            });
            return res;
        };
        /** @internal */
        ControlGroup.prototype._included = function (controlName) {
            var isOptional = collection_1.StringMapWrapper.contains(this._optionals, controlName);
            return !isOptional || collection_1.StringMapWrapper.get(this._optionals, controlName);
        };
        return ControlGroup;
    }(AbstractControl);
    exports.ControlGroup = ControlGroup;
    /**
     * Defines a part of a form, of variable length, that can contain other controls.
     *
     * A `ControlArray` aggregates the values of each {@link Control} in the group.
     * The status of a `ControlArray` depends on the status of its children.
     * If one of the controls in a group is invalid, the entire array is invalid.
     * Similarly, if a control changes its value, the entire array changes as well.
     *
     * `ControlArray` is one of the three fundamental building blocks used to define forms in Angular,
     * along with {@link Control} and {@link ControlGroup}. {@link ControlGroup} can also contain
     * other controls, but is of fixed length.
     *
     * ## Adding or removing controls
     *
     * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods
     * in `ControlArray` itself. These methods ensure the controls are properly tracked in the
     * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate
     * the `ControlArray` directly, as that will result in strange and unexpected behavior such
     * as broken change detection.
     *
     * ### Example ([live demo](http://plnkr.co/edit/23DESOpbNnBpBHZt1BR4?p=preview))
     *
     * @experimental
     */
    var ControlArray = function (_super) {
        __extends(ControlArray, _super);
        function ControlArray(controls, validator, asyncValidator) {
            if (validator === void 0) {
                validator = null;
            }
            if (asyncValidator === void 0) {
                asyncValidator = null;
            }
            _super.call(this, validator, asyncValidator);
            this.controls = controls;
            this._initObservables();
            this._setParentForControls();
            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });
        }
        /**
         * Get the {@link AbstractControl} at the given `index` in the array.
         */
        ControlArray.prototype.at = function (index) {
            return this.controls[index];
        };
        /**
         * Insert a new {@link AbstractControl} at the end of the array.
         */
        ControlArray.prototype.push = function (control) {
            this.controls.push(control);
            control.setParent(this);
            this.updateValueAndValidity();
        };
        /**
         * Insert a new {@link AbstractControl} at the given `index` in the array.
         */
        ControlArray.prototype.insert = function (index, control) {
            collection_1.ListWrapper.insert(this.controls, index, control);
            control.setParent(this);
            this.updateValueAndValidity();
        };
        /**
         * Remove the control at the given `index` in the array.
         */
        ControlArray.prototype.removeAt = function (index) {
            collection_1.ListWrapper.removeAt(this.controls, index);
            this.updateValueAndValidity();
        };
        Object.defineProperty(ControlArray.prototype, "length", {
            /**
             * Length of the control array.
             */
            get: function () {
                return this.controls.length;
            },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        ControlArray.prototype._updateValue = function () {
            this._value = this.controls.map(function (control) {
                return control.value;
            });
        };
        /** @internal */
        ControlArray.prototype._anyControlsHaveStatus = function (status) {
            return this.controls.some(function (c) {
                return c.status == status;
            });
        };
        /** @internal */
        ControlArray.prototype._setParentForControls = function () {
            var _this = this;
            this.controls.forEach(function (control) {
                control.setParent(_this);
            });
        };
        return ControlArray;
    }(AbstractControl);
    exports.ControlArray = ControlArray;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/forms-deprecated/validators.js', ['@angular/core', 'rxjs/operator/toPromise', '../facade/collection', '../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var toPromise_1 = $__require('rxjs/operator/toPromise');
    var collection_1 = $__require('../facade/collection');
    var lang_1 = $__require('../facade/lang');
    /**
     * Providers for validators to be used for {@link Control}s in a form.
     *
     * Provide this using `multi: true` to add validators.
     *
     * ### Example
     *
     * {@example core/forms/ts/ng_validators/ng_validators.ts region='ng_validators'}
     * @experimental
     */
    exports.NG_VALIDATORS = new core_1.OpaqueToken('NgValidators');
    /**
     * Providers for asynchronous validators to be used for {@link Control}s
     * in a form.
     *
     * Provide this using `multi: true` to add validators.
     *
     * See {@link NG_VALIDATORS} for more details.
     *
     * @experimental
     */
    exports.NG_ASYNC_VALIDATORS = new core_1.OpaqueToken('NgAsyncValidators');
    /**
     * Provides a set of validators used by form controls.
     *
     * A validator is a function that processes a {@link Control} or collection of
     * controls and returns a map of errors. A null map means that validation has passed.
     *
     * ### Example
     *
     * ```typescript
     * var loginControl = new Control("", Validators.required)
     * ```
     *
     * @experimental
     */
    var Validators = function () {
        function Validators() {}
        /**
         * Validator that requires controls to have a non-empty value.
         */
        Validators.required = function (control) {
            return lang_1.isBlank(control.value) || lang_1.isString(control.value) && control.value == '' ? { 'required': true } : null;
        };
        /**
         * Validator that requires controls to have a value of a minimum length.
         */
        Validators.minLength = function (minLength) {
            return function (control) {
                if (lang_1.isPresent(Validators.required(control))) return null;
                var v = control.value;
                return v.length < minLength ? { 'minlength': { 'requiredLength': minLength, 'actualLength': v.length } } : null;
            };
        };
        /**
         * Validator that requires controls to have a value of a maximum length.
         */
        Validators.maxLength = function (maxLength) {
            return function (control) {
                if (lang_1.isPresent(Validators.required(control))) return null;
                var v = control.value;
                return v.length > maxLength ? { 'maxlength': { 'requiredLength': maxLength, 'actualLength': v.length } } : null;
            };
        };
        /**
         * Validator that requires a control to match a regex to its value.
         */
        Validators.pattern = function (pattern) {
            return function (control) {
                if (lang_1.isPresent(Validators.required(control))) return null;
                var regex = new RegExp("^" + pattern + "$");
                var v = control.value;
                return regex.test(v) ? null : { 'pattern': { 'requiredPattern': "^" + pattern + "$", 'actualValue': v } };
            };
        };
        /**
         * No-op validator.
         */
        Validators.nullValidator = function (c) {
            return null;
        };
        /**
         * Compose multiple validators into a single function that returns the union
         * of the individual error maps.
         */
        Validators.compose = function (validators) {
            if (lang_1.isBlank(validators)) return null;
            var presentValidators = validators.filter(lang_1.isPresent);
            if (presentValidators.length == 0) return null;
            return function (control) {
                return _mergeErrors(_executeValidators(control, presentValidators));
            };
        };
        Validators.composeAsync = function (validators) {
            if (lang_1.isBlank(validators)) return null;
            var presentValidators = validators.filter(lang_1.isPresent);
            if (presentValidators.length == 0) return null;
            return function (control) {
                var promises = _executeAsyncValidators(control, presentValidators).map(_convertToPromise);
                return Promise.all(promises).then(_mergeErrors);
            };
        };
        return Validators;
    }();
    exports.Validators = Validators;
    function _convertToPromise(obj) {
        return lang_1.isPromise(obj) ? obj : toPromise_1.toPromise.call(obj);
    }
    function _executeValidators(control, validators) {
        return validators.map(function (v) {
            return v(control);
        });
    }
    function _executeAsyncValidators(control, validators) {
        return validators.map(function (v) {
            return v(control);
        });
    }
    function _mergeErrors(arrayOfErrors) {
        var res = arrayOfErrors.reduce(function (res, errors) {
            return lang_1.isPresent(errors) ? collection_1.StringMapWrapper.merge(res, errors) : res;
        }, {});
        return collection_1.StringMapWrapper.isEmpty(res) ? null : res;
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/forms-deprecated.js', ['@angular/core', './forms-deprecated/directives', './forms-deprecated/directives/radio_control_value_accessor', './forms-deprecated/form_builder', './forms-deprecated/directives/abstract_control_directive', './forms-deprecated/directives/checkbox_value_accessor', './forms-deprecated/directives/control_container', './forms-deprecated/directives/control_value_accessor', './forms-deprecated/directives/default_value_accessor', './forms-deprecated/directives/ng_control', './forms-deprecated/directives/ng_control_group', './forms-deprecated/directives/ng_control_name', './forms-deprecated/directives/ng_control_status', './forms-deprecated/directives/ng_form', './forms-deprecated/directives/ng_form_control', './forms-deprecated/directives/ng_form_model', './forms-deprecated/directives/ng_model', './forms-deprecated/directives/select_control_value_accessor', './forms-deprecated/directives/validators', './forms-deprecated/model', './forms-deprecated/validators', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";
  /**
   * @module
   * @description
   * This module is used for handling user input, by defining and building a {@link ControlGroup} that
   * consists of
   * {@link Control} objects, and mapping them onto the DOM. {@link Control} objects can then be used
   * to read information
   * from the form DOM elements.
   *
   * Forms providers are not included in default providers; you must import these providers
   * explicitly.
   */

  var define,
      global = this || self,
      GLOBAL = global;
  var core_1 = $__require('@angular/core');
  var directives_1 = $__require('./forms-deprecated/directives');
  var radio_control_value_accessor_1 = $__require('./forms-deprecated/directives/radio_control_value_accessor');
  var form_builder_1 = $__require('./forms-deprecated/form_builder');
  var directives_2 = $__require('./forms-deprecated/directives');
  exports.FORM_DIRECTIVES = directives_2.FORM_DIRECTIVES;
  exports.RadioButtonState = directives_2.RadioButtonState;
  var abstract_control_directive_1 = $__require('./forms-deprecated/directives/abstract_control_directive');
  exports.AbstractControlDirective = abstract_control_directive_1.AbstractControlDirective;
  var checkbox_value_accessor_1 = $__require('./forms-deprecated/directives/checkbox_value_accessor');
  exports.CheckboxControlValueAccessor = checkbox_value_accessor_1.CheckboxControlValueAccessor;
  var control_container_1 = $__require('./forms-deprecated/directives/control_container');
  exports.ControlContainer = control_container_1.ControlContainer;
  var control_value_accessor_1 = $__require('./forms-deprecated/directives/control_value_accessor');
  exports.NG_VALUE_ACCESSOR = control_value_accessor_1.NG_VALUE_ACCESSOR;
  var default_value_accessor_1 = $__require('./forms-deprecated/directives/default_value_accessor');
  exports.DefaultValueAccessor = default_value_accessor_1.DefaultValueAccessor;
  var ng_control_1 = $__require('./forms-deprecated/directives/ng_control');
  exports.NgControl = ng_control_1.NgControl;
  var ng_control_group_1 = $__require('./forms-deprecated/directives/ng_control_group');
  exports.NgControlGroup = ng_control_group_1.NgControlGroup;
  var ng_control_name_1 = $__require('./forms-deprecated/directives/ng_control_name');
  exports.NgControlName = ng_control_name_1.NgControlName;
  var ng_control_status_1 = $__require('./forms-deprecated/directives/ng_control_status');
  exports.NgControlStatus = ng_control_status_1.NgControlStatus;
  var ng_form_1 = $__require('./forms-deprecated/directives/ng_form');
  exports.NgForm = ng_form_1.NgForm;
  var ng_form_control_1 = $__require('./forms-deprecated/directives/ng_form_control');
  exports.NgFormControl = ng_form_control_1.NgFormControl;
  var ng_form_model_1 = $__require('./forms-deprecated/directives/ng_form_model');
  exports.NgFormModel = ng_form_model_1.NgFormModel;
  var ng_model_1 = $__require('./forms-deprecated/directives/ng_model');
  exports.NgModel = ng_model_1.NgModel;
  var select_control_value_accessor_1 = $__require('./forms-deprecated/directives/select_control_value_accessor');
  exports.NgSelectOption = select_control_value_accessor_1.NgSelectOption;
  exports.SelectControlValueAccessor = select_control_value_accessor_1.SelectControlValueAccessor;
  var validators_1 = $__require('./forms-deprecated/directives/validators');
  exports.MaxLengthValidator = validators_1.MaxLengthValidator;
  exports.MinLengthValidator = validators_1.MinLengthValidator;
  exports.PatternValidator = validators_1.PatternValidator;
  exports.RequiredValidator = validators_1.RequiredValidator;
  var form_builder_2 = $__require('./forms-deprecated/form_builder');
  exports.FormBuilder = form_builder_2.FormBuilder;
  var model_1 = $__require('./forms-deprecated/model');
  exports.AbstractControl = model_1.AbstractControl;
  exports.Control = model_1.Control;
  exports.ControlArray = model_1.ControlArray;
  exports.ControlGroup = model_1.ControlGroup;
  var validators_2 = $__require('./forms-deprecated/validators');
  exports.NG_ASYNC_VALIDATORS = validators_2.NG_ASYNC_VALIDATORS;
  exports.NG_VALIDATORS = validators_2.NG_VALIDATORS;
  exports.Validators = validators_2.Validators;
  /**
   * Shorthand set of providers used for building Angular forms.
   *
   * ### Example
   *
   * ```typescript
   * bootstrap(MyApp, [FORM_PROVIDERS]);
   * ```
   *
   * @experimental
   */
  exports.FORM_PROVIDERS = [form_builder_1.FormBuilder, radio_control_value_accessor_1.RadioControlRegistry];
  var DeprecatedFormsModule = function () {
    function DeprecatedFormsModule() {}
    /** @nocollapse */
    DeprecatedFormsModule.decorators = [{ type: core_1.NgModule, args: [{
        providers: [exports.FORM_PROVIDERS],
        declarations: directives_1.FORM_DIRECTIVES,
        exports: directives_1.FORM_DIRECTIVES
      }] }];
    return DeprecatedFormsModule;
  }();
  exports.DeprecatedFormsModule = DeprecatedFormsModule;
  

  return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/location/hash_location_strategy.js', ['@angular/core', '../facade/lang', './location', './location_strategy', './platform_location', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var core_1 = $__require('@angular/core');
    var lang_1 = $__require('../facade/lang');
    var location_1 = $__require('./location');
    var location_strategy_1 = $__require('./location_strategy');
    var platform_location_1 = $__require('./platform_location');
    var HashLocationStrategy = function (_super) {
        __extends(HashLocationStrategy, _super);
        function HashLocationStrategy(_platformLocation, _baseHref) {
            _super.call(this);
            this._platformLocation = _platformLocation;
            this._baseHref = '';
            if (lang_1.isPresent(_baseHref)) {
                this._baseHref = _baseHref;
            }
        }
        HashLocationStrategy.prototype.onPopState = function (fn) {
            this._platformLocation.onPopState(fn);
            this._platformLocation.onHashChange(fn);
        };
        HashLocationStrategy.prototype.getBaseHref = function () {
            return this._baseHref;
        };
        HashLocationStrategy.prototype.path = function (includeHash) {
            if (includeHash === void 0) {
                includeHash = false;
            }
            // the hash value is always prefixed with a `#`
            // and if it is empty then it will stay empty
            var path = this._platformLocation.hash;
            if (!lang_1.isPresent(path)) path = '#';
            return path.length > 0 ? path.substring(1) : path;
        };
        HashLocationStrategy.prototype.prepareExternalUrl = function (internal) {
            var url = location_1.Location.joinWithSlash(this._baseHref, internal);
            return url.length > 0 ? '#' + url : url;
        };
        HashLocationStrategy.prototype.pushState = function (state, title, path, queryParams) {
            var url = this.prepareExternalUrl(path + location_1.Location.normalizeQueryParams(queryParams));
            if (url.length == 0) {
                url = this._platformLocation.pathname;
            }
            this._platformLocation.pushState(state, title, url);
        };
        HashLocationStrategy.prototype.replaceState = function (state, title, path, queryParams) {
            var url = this.prepareExternalUrl(path + location_1.Location.normalizeQueryParams(queryParams));
            if (url.length == 0) {
                url = this._platformLocation.pathname;
            }
            this._platformLocation.replaceState(state, title, url);
        };
        HashLocationStrategy.prototype.forward = function () {
            this._platformLocation.forward();
        };
        HashLocationStrategy.prototype.back = function () {
            this._platformLocation.back();
        };
        /** @nocollapse */
        HashLocationStrategy.decorators = [{ type: core_1.Injectable }];
        /** @nocollapse */
        HashLocationStrategy.ctorParameters = [{ type: platform_location_1.PlatformLocation }, { type: undefined, decorators: [{ type: core_1.Optional }, { type: core_1.Inject, args: [location_strategy_1.APP_BASE_HREF] }] }];
        return HashLocationStrategy;
    }(location_strategy_1.LocationStrategy);
    exports.HashLocationStrategy = HashLocationStrategy;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/common@2.0.0-rc.5/src/facade/base_wrapped_exception.js", ["reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * A base class for the WrappedException that can be used to identify
     * a WrappedException from ExceptionHandler without adding circular
     * dependency.
     */
    var BaseWrappedException = function (_super) {
        __extends(BaseWrappedException, _super);
        function BaseWrappedException(message) {
            _super.call(this, message);
        }
        Object.defineProperty(BaseWrappedException.prototype, "wrapperMessage", {
            get: function () {
                return '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseWrappedException.prototype, "wrapperStack", {
            get: function () {
                return null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseWrappedException.prototype, "originalException", {
            get: function () {
                return null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseWrappedException.prototype, "originalStack", {
            get: function () {
                return null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseWrappedException.prototype, "context", {
            get: function () {
                return null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseWrappedException.prototype, "message", {
            get: function () {
                return '';
            },
            enumerable: true,
            configurable: true
        });
        return BaseWrappedException;
    }(Error);
    exports.BaseWrappedException = BaseWrappedException;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/common@2.0.0-rc.5/src/facade/collection.js", ["./lang", "reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var lang_1 = $__require("./lang");
    exports.Map = lang_1.global.Map;
    exports.Set = lang_1.global.Set;
    // Safari and Internet Explorer do not support the iterable parameter to the
    // Map constructor.  We work around that by manually adding the items.
    var createMapFromPairs = function () {
        try {
            if (new exports.Map([[1, 2]]).size === 1) {
                return function createMapFromPairs(pairs) {
                    return new exports.Map(pairs);
                };
            }
        } catch (e) {}
        return function createMapAndPopulateFromPairs(pairs) {
            var map = new exports.Map();
            for (var i = 0; i < pairs.length; i++) {
                var pair = pairs[i];
                map.set(pair[0], pair[1]);
            }
            return map;
        };
    }();
    var createMapFromMap = function () {
        try {
            if (new exports.Map(new exports.Map())) {
                return function createMapFromMap(m) {
                    return new exports.Map(m);
                };
            }
        } catch (e) {}
        return function createMapAndPopulateFromMap(m) {
            var map = new exports.Map();
            m.forEach(function (v, k) {
                map.set(k, v);
            });
            return map;
        };
    }();
    var _clearValues = function () {
        if (new exports.Map().keys().next) {
            return function _clearValues(m) {
                var keyIterator = m.keys();
                var k;
                while (!(k = keyIterator.next()).done) {
                    m.set(k.value, null);
                }
            };
        } else {
            return function _clearValuesWithForeEach(m) {
                m.forEach(function (v, k) {
                    m.set(k, null);
                });
            };
        }
    }();
    // Safari doesn't implement MapIterator.next(), which is used is Traceur's polyfill of Array.from
    // TODO(mlaval): remove the work around once we have a working polyfill of Array.from
    var _arrayFromMap = function () {
        try {
            if (new exports.Map().values().next) {
                return function createArrayFromMap(m, getValues) {
                    return getValues ? Array.from(m.values()) : Array.from(m.keys());
                };
            }
        } catch (e) {}
        return function createArrayFromMapWithForeach(m, getValues) {
            var res = ListWrapper.createFixedSize(m.size),
                i = 0;
            m.forEach(function (v, k) {
                res[i] = getValues ? v : k;
                i++;
            });
            return res;
        };
    }();
    var MapWrapper = function () {
        function MapWrapper() {}
        MapWrapper.clone = function (m) {
            return createMapFromMap(m);
        };
        MapWrapper.createFromStringMap = function (stringMap) {
            var result = new exports.Map();
            for (var prop in stringMap) {
                result.set(prop, stringMap[prop]);
            }
            return result;
        };
        MapWrapper.toStringMap = function (m) {
            var r = {};
            m.forEach(function (v, k) {
                return r[k] = v;
            });
            return r;
        };
        MapWrapper.createFromPairs = function (pairs) {
            return createMapFromPairs(pairs);
        };
        MapWrapper.clearValues = function (m) {
            _clearValues(m);
        };
        MapWrapper.iterable = function (m) {
            return m;
        };
        MapWrapper.keys = function (m) {
            return _arrayFromMap(m, false);
        };
        MapWrapper.values = function (m) {
            return _arrayFromMap(m, true);
        };
        return MapWrapper;
    }();
    exports.MapWrapper = MapWrapper;
    /**
     * Wraps Javascript Objects
     */
    var StringMapWrapper = function () {
        function StringMapWrapper() {}
        StringMapWrapper.create = function () {
            // Note: We are not using Object.create(null) here due to
            // performance!
            // http://jsperf.com/ng2-object-create-null
            return {};
        };
        StringMapWrapper.contains = function (map, key) {
            return map.hasOwnProperty(key);
        };
        StringMapWrapper.get = function (map, key) {
            return map.hasOwnProperty(key) ? map[key] : undefined;
        };
        StringMapWrapper.set = function (map, key, value) {
            map[key] = value;
        };
        StringMapWrapper.keys = function (map) {
            return Object.keys(map);
        };
        StringMapWrapper.values = function (map) {
            return Object.keys(map).map(function (k) {
                return map[k];
            });
        };
        StringMapWrapper.isEmpty = function (map) {
            for (var prop in map) {
                return false;
            }
            return true;
        };
        StringMapWrapper.delete = function (map, key) {
            delete map[key];
        };
        StringMapWrapper.forEach = function (map, callback) {
            for (var _i = 0, _a = Object.keys(map); _i < _a.length; _i++) {
                var k = _a[_i];
                callback(map[k], k);
            }
        };
        StringMapWrapper.merge = function (m1, m2) {
            var m = {};
            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
                var k = _a[_i];
                m[k] = m1[k];
            }
            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
                var k = _c[_b];
                m[k] = m2[k];
            }
            return m;
        };
        StringMapWrapper.equals = function (m1, m2) {
            var k1 = Object.keys(m1);
            var k2 = Object.keys(m2);
            if (k1.length != k2.length) {
                return false;
            }
            var key;
            for (var i = 0; i < k1.length; i++) {
                key = k1[i];
                if (m1[key] !== m2[key]) {
                    return false;
                }
            }
            return true;
        };
        return StringMapWrapper;
    }();
    exports.StringMapWrapper = StringMapWrapper;
    var ListWrapper = function () {
        function ListWrapper() {}
        // JS has no way to express a statically fixed size list, but dart does so we
        // keep both methods.
        ListWrapper.createFixedSize = function (size) {
            return new Array(size);
        };
        ListWrapper.createGrowableSize = function (size) {
            return new Array(size);
        };
        ListWrapper.clone = function (array) {
            return array.slice(0);
        };
        ListWrapper.forEachWithIndex = function (array, fn) {
            for (var i = 0; i < array.length; i++) {
                fn(array[i], i);
            }
        };
        ListWrapper.first = function (array) {
            if (!array) return null;
            return array[0];
        };
        ListWrapper.last = function (array) {
            if (!array || array.length == 0) return null;
            return array[array.length - 1];
        };
        ListWrapper.indexOf = function (array, value, startIndex) {
            if (startIndex === void 0) {
                startIndex = 0;
            }
            return array.indexOf(value, startIndex);
        };
        ListWrapper.contains = function (list, el) {
            return list.indexOf(el) !== -1;
        };
        ListWrapper.reversed = function (array) {
            var a = ListWrapper.clone(array);
            return a.reverse();
        };
        ListWrapper.concat = function (a, b) {
            return a.concat(b);
        };
        ListWrapper.insert = function (list, index, value) {
            list.splice(index, 0, value);
        };
        ListWrapper.removeAt = function (list, index) {
            var res = list[index];
            list.splice(index, 1);
            return res;
        };
        ListWrapper.removeAll = function (list, items) {
            for (var i = 0; i < items.length; ++i) {
                var index = list.indexOf(items[i]);
                list.splice(index, 1);
            }
        };
        ListWrapper.remove = function (list, el) {
            var index = list.indexOf(el);
            if (index > -1) {
                list.splice(index, 1);
                return true;
            }
            return false;
        };
        ListWrapper.clear = function (list) {
            list.length = 0;
        };
        ListWrapper.isEmpty = function (list) {
            return list.length == 0;
        };
        ListWrapper.fill = function (list, value, start, end) {
            if (start === void 0) {
                start = 0;
            }
            if (end === void 0) {
                end = null;
            }
            list.fill(value, start, end === null ? list.length : end);
        };
        ListWrapper.equals = function (a, b) {
            if (a.length != b.length) return false;
            for (var i = 0; i < a.length; ++i) {
                if (a[i] !== b[i]) return false;
            }
            return true;
        };
        ListWrapper.slice = function (l, from, to) {
            if (from === void 0) {
                from = 0;
            }
            if (to === void 0) {
                to = null;
            }
            return l.slice(from, to === null ? undefined : to);
        };
        ListWrapper.splice = function (l, from, length) {
            return l.splice(from, length);
        };
        ListWrapper.sort = function (l, compareFn) {
            if (lang_1.isPresent(compareFn)) {
                l.sort(compareFn);
            } else {
                l.sort();
            }
        };
        ListWrapper.toString = function (l) {
            return l.toString();
        };
        ListWrapper.toJSON = function (l) {
            return JSON.stringify(l);
        };
        ListWrapper.maximum = function (list, predicate) {
            if (list.length == 0) {
                return null;
            }
            var solution = null;
            var maxValue = -Infinity;
            for (var index = 0; index < list.length; index++) {
                var candidate = list[index];
                if (lang_1.isBlank(candidate)) {
                    continue;
                }
                var candidateValue = predicate(candidate);
                if (candidateValue > maxValue) {
                    solution = candidate;
                    maxValue = candidateValue;
                }
            }
            return solution;
        };
        ListWrapper.flatten = function (list) {
            var target = [];
            _flattenArray(list, target);
            return target;
        };
        ListWrapper.addAll = function (list, source) {
            for (var i = 0; i < source.length; i++) {
                list.push(source[i]);
            }
        };
        return ListWrapper;
    }();
    exports.ListWrapper = ListWrapper;
    function _flattenArray(source, target) {
        if (lang_1.isPresent(source)) {
            for (var i = 0; i < source.length; i++) {
                var item = source[i];
                if (lang_1.isArray(item)) {
                    _flattenArray(item, target);
                } else {
                    target.push(item);
                }
            }
        }
        return target;
    }
    function isListLikeIterable(obj) {
        if (!lang_1.isJsObject(obj)) return false;
        return lang_1.isArray(obj) || !(obj instanceof exports.Map) && lang_1.getSymbolIterator() in obj; // JS Iterable have a Symbol.iterator prop
    }
    exports.isListLikeIterable = isListLikeIterable;
    function areIterablesEqual(a, b, comparator) {
        var iterator1 = a[lang_1.getSymbolIterator()]();
        var iterator2 = b[lang_1.getSymbolIterator()]();
        while (true) {
            var item1 = iterator1.next();
            var item2 = iterator2.next();
            if (item1.done && item2.done) return true;
            if (item1.done || item2.done) return false;
            if (!comparator(item1.value, item2.value)) return false;
        }
    }
    exports.areIterablesEqual = areIterablesEqual;
    function iterateListLike(obj, fn) {
        if (lang_1.isArray(obj)) {
            for (var i = 0; i < obj.length; i++) {
                fn(obj[i]);
            }
        } else {
            var iterator = obj[lang_1.getSymbolIterator()]();
            var item;
            while (!(item = iterator.next()).done) {
                fn(item.value);
            }
        }
    }
    exports.iterateListLike = iterateListLike;
    // Safari and Internet Explorer do not support the iterable parameter to the
    // Set constructor.  We work around that by manually adding the items.
    var createSetFromList = function () {
        var test = new exports.Set([1, 2, 3]);
        if (test.size === 3) {
            return function createSetFromList(lst) {
                return new exports.Set(lst);
            };
        } else {
            return function createSetAndPopulateFromList(lst) {
                var res = new exports.Set(lst);
                if (res.size !== lst.length) {
                    for (var i = 0; i < lst.length; i++) {
                        res.add(lst[i]);
                    }
                }
                return res;
            };
        }
    }();
    var SetWrapper = function () {
        function SetWrapper() {}
        SetWrapper.createFromList = function (lst) {
            return createSetFromList(lst);
        };
        SetWrapper.has = function (s, key) {
            return s.has(key);
        };
        SetWrapper.delete = function (m, k) {
            m.delete(k);
        };
        return SetWrapper;
    }();
    exports.SetWrapper = SetWrapper;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/facade/exception_handler.js', ['./base_wrapped_exception', './collection', './lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var base_wrapped_exception_1 = $__require('./base_wrapped_exception');
    var collection_1 = $__require('./collection');
    var lang_1 = $__require('./lang');
    var _ArrayLogger = function () {
        function _ArrayLogger() {
            this.res = [];
        }
        _ArrayLogger.prototype.log = function (s) {
            this.res.push(s);
        };
        _ArrayLogger.prototype.logError = function (s) {
            this.res.push(s);
        };
        _ArrayLogger.prototype.logGroup = function (s) {
            this.res.push(s);
        };
        _ArrayLogger.prototype.logGroupEnd = function () {};
        ;
        return _ArrayLogger;
    }();
    /**
     * Provides a hook for centralized exception handling.
     *
     * The default implementation of `ExceptionHandler` prints error messages to the `Console`. To
     * intercept error handling,
     * write a custom exception handler that replaces this default as appropriate for your app.
     *
     * ### Example
     *
     * ```javascript
     *
     * class MyExceptionHandler implements ExceptionHandler {
     *   call(error, stackTrace = null, reason = null) {
     *     // do something with the exception
     *   }
     * }
     *
     * bootstrap(MyApp, [{provide: ExceptionHandler, useClass: MyExceptionHandler}])
     *
     * ```
     * @stable
     */
    var ExceptionHandler = function () {
        function ExceptionHandler(_logger, _rethrowException) {
            if (_rethrowException === void 0) {
                _rethrowException = true;
            }
            this._logger = _logger;
            this._rethrowException = _rethrowException;
        }
        ExceptionHandler.exceptionToString = function (exception, stackTrace, reason) {
            if (stackTrace === void 0) {
                stackTrace = null;
            }
            if (reason === void 0) {
                reason = null;
            }
            var l = new _ArrayLogger();
            var e = new ExceptionHandler(l, false);
            e.call(exception, stackTrace, reason);
            return l.res.join('\n');
        };
        ExceptionHandler.prototype.call = function (exception, stackTrace, reason) {
            if (stackTrace === void 0) {
                stackTrace = null;
            }
            if (reason === void 0) {
                reason = null;
            }
            var originalException = this._findOriginalException(exception);
            var originalStack = this._findOriginalStack(exception);
            var context = this._findContext(exception);
            this._logger.logGroup("EXCEPTION: " + this._extractMessage(exception));
            if (lang_1.isPresent(stackTrace) && lang_1.isBlank(originalStack)) {
                this._logger.logError('STACKTRACE:');
                this._logger.logError(this._longStackTrace(stackTrace));
            }
            if (lang_1.isPresent(reason)) {
                this._logger.logError("REASON: " + reason);
            }
            if (lang_1.isPresent(originalException)) {
                this._logger.logError("ORIGINAL EXCEPTION: " + this._extractMessage(originalException));
            }
            if (lang_1.isPresent(originalStack)) {
                this._logger.logError('ORIGINAL STACKTRACE:');
                this._logger.logError(this._longStackTrace(originalStack));
            }
            if (lang_1.isPresent(context)) {
                this._logger.logError('ERROR CONTEXT:');
                this._logger.logError(context);
            }
            this._logger.logGroupEnd();
            // We rethrow exceptions, so operations like 'bootstrap' will result in an error
            // when an exception happens. If we do not rethrow, bootstrap will always succeed.
            if (this._rethrowException) throw exception;
        };
        /** @internal */
        ExceptionHandler.prototype._extractMessage = function (exception) {
            return exception instanceof base_wrapped_exception_1.BaseWrappedException ? exception.wrapperMessage : exception.toString();
        };
        /** @internal */
        ExceptionHandler.prototype._longStackTrace = function (stackTrace) {
            return collection_1.isListLikeIterable(stackTrace) ? stackTrace.join('\n\n-----async gap-----\n') : stackTrace.toString();
        };
        /** @internal */
        ExceptionHandler.prototype._findContext = function (exception) {
            try {
                if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
                return lang_1.isPresent(exception.context) ? exception.context : this._findContext(exception.originalException);
            } catch (e) {
                // exception.context can throw an exception. if it happens, we ignore the context.
                return null;
            }
        };
        /** @internal */
        ExceptionHandler.prototype._findOriginalException = function (exception) {
            if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
            var e = exception.originalException;
            while (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
                e = e.originalException;
            }
            return e;
        };
        /** @internal */
        ExceptionHandler.prototype._findOriginalStack = function (exception) {
            if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
            var e = exception;
            var stack = exception.originalStack;
            while (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
                e = e.originalException;
                if (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
                    stack = e.originalStack;
                }
            }
            return stack;
        };
        return ExceptionHandler;
    }();
    exports.ExceptionHandler = ExceptionHandler;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/facade/exceptions.js', ['./base_wrapped_exception', './exception_handler', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var base_wrapped_exception_1 = $__require('./base_wrapped_exception');
    var exception_handler_1 = $__require('./exception_handler');
    var exception_handler_2 = $__require('./exception_handler');
    exports.ExceptionHandler = exception_handler_2.ExceptionHandler;
    /**
     * @stable
     */
    var BaseException = function (_super) {
        __extends(BaseException, _super);
        function BaseException(message) {
            if (message === void 0) {
                message = '--';
            }
            _super.call(this, message);
            this.message = message;
            this.stack = new Error(message).stack;
        }
        BaseException.prototype.toString = function () {
            return this.message;
        };
        return BaseException;
    }(Error);
    exports.BaseException = BaseException;
    /**
     * Wraps an exception and provides additional context or information.
     * @stable
     */
    var WrappedException = function (_super) {
        __extends(WrappedException, _super);
        function WrappedException(_wrapperMessage, _originalException /** TODO #9100 */, _originalStack /** TODO #9100 */, _context /** TODO #9100 */) {
            _super.call(this, _wrapperMessage);
            this._wrapperMessage = _wrapperMessage;
            this._originalException = _originalException;
            this._originalStack = _originalStack;
            this._context = _context;
            this._wrapperStack = new Error(_wrapperMessage).stack;
        }
        Object.defineProperty(WrappedException.prototype, "wrapperMessage", {
            get: function () {
                return this._wrapperMessage;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WrappedException.prototype, "wrapperStack", {
            get: function () {
                return this._wrapperStack;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WrappedException.prototype, "originalException", {
            get: function () {
                return this._originalException;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WrappedException.prototype, "originalStack", {
            get: function () {
                return this._originalStack;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WrappedException.prototype, "context", {
            get: function () {
                return this._context;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WrappedException.prototype, "message", {
            get: function () {
                return exception_handler_1.ExceptionHandler.exceptionToString(this);
            },
            enumerable: true,
            configurable: true
        });
        WrappedException.prototype.toString = function () {
            return this.message;
        };
        return WrappedException;
    }(base_wrapped_exception_1.BaseWrappedException);
    exports.WrappedException = WrappedException;
    function makeTypeError(message) {
        return new TypeError(message);
    }
    exports.makeTypeError = makeTypeError;
    function unimplemented() {
        throw new BaseException('unimplemented');
    }
    exports.unimplemented = unimplemented;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/facade/lang.js', ['reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var globalScope;
    if (typeof window === 'undefined') {
        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
            globalScope = self;
        } else {
            globalScope = global;
        }
    } else {
        globalScope = window;
    }
    function scheduleMicroTask(fn) {
        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
    }
    exports.scheduleMicroTask = scheduleMicroTask;
    // Need to declare a new variable for global here since TypeScript
    // exports the original value of the symbol.
    var _global = globalScope;
    exports.global = _global;
    /**
     * Runtime representation a type that a Component or other object is instances of.
     *
     * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by
     * the `MyCustomComponent` constructor function.
     *
     * @stable
     */
    exports.Type = Function;
    function getTypeNameForDebugging(type) {
        if (type['name']) {
            return type['name'];
        }
        return typeof type;
    }
    exports.getTypeNameForDebugging = getTypeNameForDebugging;
    exports.Math = _global.Math;
    exports.Date = _global.Date;
    // TODO: remove calls to assert in production environment
    // Note: Can't just export this and import in in other files
    // as `assert` is a reserved keyword in Dart
    _global.assert = function assert(condition) {
        // TODO: to be fixed properly via #2830, noop for now
    };
    function isPresent(obj) {
        return obj !== undefined && obj !== null;
    }
    exports.isPresent = isPresent;
    function isBlank(obj) {
        return obj === undefined || obj === null;
    }
    exports.isBlank = isBlank;
    function isBoolean(obj) {
        return typeof obj === 'boolean';
    }
    exports.isBoolean = isBoolean;
    function isNumber(obj) {
        return typeof obj === 'number';
    }
    exports.isNumber = isNumber;
    function isString(obj) {
        return typeof obj === 'string';
    }
    exports.isString = isString;
    function isFunction(obj) {
        return typeof obj === 'function';
    }
    exports.isFunction = isFunction;
    function isType(obj) {
        return isFunction(obj);
    }
    exports.isType = isType;
    function isStringMap(obj) {
        return typeof obj === 'object' && obj !== null;
    }
    exports.isStringMap = isStringMap;
    var STRING_MAP_PROTO = Object.getPrototypeOf({});
    function isStrictStringMap(obj) {
        return isStringMap(obj) && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
    }
    exports.isStrictStringMap = isStrictStringMap;
    function isPromise(obj) {
        // allow any Promise/A+ compliant thenable.
        // It's up to the caller to ensure that obj.then conforms to the spec
        return isPresent(obj) && isFunction(obj.then);
    }
    exports.isPromise = isPromise;
    function isArray(obj) {
        return Array.isArray(obj);
    }
    exports.isArray = isArray;
    function isDate(obj) {
        return obj instanceof exports.Date && !isNaN(obj.valueOf());
    }
    exports.isDate = isDate;
    function noop() {}
    exports.noop = noop;
    function stringify(token) {
        if (typeof token === 'string') {
            return token;
        }
        if (token === undefined || token === null) {
            return '' + token;
        }
        if (token.overriddenName) {
            return token.overriddenName;
        }
        if (token.name) {
            return token.name;
        }
        var res = token.toString();
        var newLineIndex = res.indexOf('\n');
        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
    }
    exports.stringify = stringify;
    // serialize / deserialize enum exist only for consistency with dart API
    // enums in typescript don't need to be serialized
    function serializeEnum(val) {
        return val;
    }
    exports.serializeEnum = serializeEnum;
    function deserializeEnum(val, values) {
        return val;
    }
    exports.deserializeEnum = deserializeEnum;
    function resolveEnumToken(enumValue, val) {
        return enumValue[val];
    }
    exports.resolveEnumToken = resolveEnumToken;
    var StringWrapper = function () {
        function StringWrapper() {}
        StringWrapper.fromCharCode = function (code) {
            return String.fromCharCode(code);
        };
        StringWrapper.charCodeAt = function (s, index) {
            return s.charCodeAt(index);
        };
        StringWrapper.split = function (s, regExp) {
            return s.split(regExp);
        };
        StringWrapper.equals = function (s, s2) {
            return s === s2;
        };
        StringWrapper.stripLeft = function (s, charVal) {
            if (s && s.length) {
                var pos = 0;
                for (var i = 0; i < s.length; i++) {
                    if (s[i] != charVal) break;
                    pos++;
                }
                s = s.substring(pos);
            }
            return s;
        };
        StringWrapper.stripRight = function (s, charVal) {
            if (s && s.length) {
                var pos = s.length;
                for (var i = s.length - 1; i >= 0; i--) {
                    if (s[i] != charVal) break;
                    pos--;
                }
                s = s.substring(0, pos);
            }
            return s;
        };
        StringWrapper.replace = function (s, from, replace) {
            return s.replace(from, replace);
        };
        StringWrapper.replaceAll = function (s, from, replace) {
            return s.replace(from, replace);
        };
        StringWrapper.slice = function (s, from, to) {
            if (from === void 0) {
                from = 0;
            }
            if (to === void 0) {
                to = null;
            }
            return s.slice(from, to === null ? undefined : to);
        };
        StringWrapper.replaceAllMapped = function (s, from, cb) {
            return s.replace(from, function () {
                var matches = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    matches[_i - 0] = arguments[_i];
                }
                // Remove offset & string from the result array
                matches.splice(-2, 2);
                // The callback receives match, p1, ..., pn
                return cb(matches);
            });
        };
        StringWrapper.contains = function (s, substr) {
            return s.indexOf(substr) != -1;
        };
        StringWrapper.compare = function (a, b) {
            if (a < b) {
                return -1;
            } else if (a > b) {
                return 1;
            } else {
                return 0;
            }
        };
        return StringWrapper;
    }();
    exports.StringWrapper = StringWrapper;
    var StringJoiner = function () {
        function StringJoiner(parts) {
            if (parts === void 0) {
                parts = [];
            }
            this.parts = parts;
        }
        StringJoiner.prototype.add = function (part) {
            this.parts.push(part);
        };
        StringJoiner.prototype.toString = function () {
            return this.parts.join('');
        };
        return StringJoiner;
    }();
    exports.StringJoiner = StringJoiner;
    var NumberParseError = function (_super) {
        __extends(NumberParseError, _super);
        function NumberParseError(message) {
            _super.call(this);
            this.message = message;
        }
        NumberParseError.prototype.toString = function () {
            return this.message;
        };
        return NumberParseError;
    }(Error);
    exports.NumberParseError = NumberParseError;
    var NumberWrapper = function () {
        function NumberWrapper() {}
        NumberWrapper.toFixed = function (n, fractionDigits) {
            return n.toFixed(fractionDigits);
        };
        NumberWrapper.equal = function (a, b) {
            return a === b;
        };
        NumberWrapper.parseIntAutoRadix = function (text) {
            var result = parseInt(text);
            if (isNaN(result)) {
                throw new NumberParseError('Invalid integer literal when parsing ' + text);
            }
            return result;
        };
        NumberWrapper.parseInt = function (text, radix) {
            if (radix == 10) {
                if (/^(\-|\+)?[0-9]+$/.test(text)) {
                    return parseInt(text, radix);
                }
            } else if (radix == 16) {
                if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
                    return parseInt(text, radix);
                }
            } else {
                var result = parseInt(text, radix);
                if (!isNaN(result)) {
                    return result;
                }
            }
            throw new NumberParseError('Invalid integer literal when parsing ' + text + ' in base ' + radix);
        };
        // TODO: NaN is a valid literal but is returned by parseFloat to indicate an error.
        NumberWrapper.parseFloat = function (text) {
            return parseFloat(text);
        };
        Object.defineProperty(NumberWrapper, "NaN", {
            get: function () {
                return NaN;
            },
            enumerable: true,
            configurable: true
        });
        NumberWrapper.isNumeric = function (value) {
            return !isNaN(value - parseFloat(value));
        };
        NumberWrapper.isNaN = function (value) {
            return isNaN(value);
        };
        NumberWrapper.isInteger = function (value) {
            return Number.isInteger(value);
        };
        return NumberWrapper;
    }();
    exports.NumberWrapper = NumberWrapper;
    exports.RegExp = _global.RegExp;
    var FunctionWrapper = function () {
        function FunctionWrapper() {}
        FunctionWrapper.apply = function (fn, posArgs) {
            return fn.apply(null, posArgs);
        };
        FunctionWrapper.bind = function (fn, scope) {
            return fn.bind(scope);
        };
        return FunctionWrapper;
    }();
    exports.FunctionWrapper = FunctionWrapper;
    // JS has NaN !== NaN
    function looseIdentical(a, b) {
        return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
    }
    exports.looseIdentical = looseIdentical;
    // JS considers NaN is the same as NaN for map Key (while NaN !== NaN otherwise)
    // see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map
    function getMapKey(value) {
        return value;
    }
    exports.getMapKey = getMapKey;
    function normalizeBlank(obj) {
        return isBlank(obj) ? null : obj;
    }
    exports.normalizeBlank = normalizeBlank;
    function normalizeBool(obj) {
        return isBlank(obj) ? false : obj;
    }
    exports.normalizeBool = normalizeBool;
    function isJsObject(o) {
        return o !== null && (typeof o === 'function' || typeof o === 'object');
    }
    exports.isJsObject = isJsObject;
    function print(obj) {
        console.log(obj);
    }
    exports.print = print;
    function warn(obj) {
        console.warn(obj);
    }
    exports.warn = warn;
    // Can't be all uppercase as our transpiler would think it is a special directive...
    var Json = function () {
        function Json() {}
        Json.parse = function (s) {
            return _global.JSON.parse(s);
        };
        Json.stringify = function (data) {
            // Dart doesn't take 3 arguments
            return _global.JSON.stringify(data, null, 2);
        };
        return Json;
    }();
    exports.Json = Json;
    var DateWrapper = function () {
        function DateWrapper() {}
        DateWrapper.create = function (year, month, day, hour, minutes, seconds, milliseconds) {
            if (month === void 0) {
                month = 1;
            }
            if (day === void 0) {
                day = 1;
            }
            if (hour === void 0) {
                hour = 0;
            }
            if (minutes === void 0) {
                minutes = 0;
            }
            if (seconds === void 0) {
                seconds = 0;
            }
            if (milliseconds === void 0) {
                milliseconds = 0;
            }
            return new exports.Date(year, month - 1, day, hour, minutes, seconds, milliseconds);
        };
        DateWrapper.fromISOString = function (str) {
            return new exports.Date(str);
        };
        DateWrapper.fromMillis = function (ms) {
            return new exports.Date(ms);
        };
        DateWrapper.toMillis = function (date) {
            return date.getTime();
        };
        DateWrapper.now = function () {
            return new exports.Date();
        };
        DateWrapper.toJson = function (date) {
            return date.toJSON();
        };
        return DateWrapper;
    }();
    exports.DateWrapper = DateWrapper;
    function setValueOnPath(global, path, value) {
        var parts = path.split('.');
        var obj = global;
        while (parts.length > 1) {
            var name = parts.shift();
            if (obj.hasOwnProperty(name) && isPresent(obj[name])) {
                obj = obj[name];
            } else {
                obj = obj[name] = {};
            }
        }
        if (obj === undefined || obj === null) {
            obj = {};
        }
        obj[parts.shift()] = value;
    }
    exports.setValueOnPath = setValueOnPath;
    var _symbolIterator = null;
    function getSymbolIterator() {
        if (isBlank(_symbolIterator)) {
            if (isPresent(globalScope.Symbol) && isPresent(Symbol.iterator)) {
                _symbolIterator = Symbol.iterator;
            } else {
                // es6-shim specific logic
                var keys = Object.getOwnPropertyNames(Map.prototype);
                for (var i = 0; i < keys.length; ++i) {
                    var key = keys[i];
                    if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {
                        _symbolIterator = key;
                    }
                }
            }
        }
        return _symbolIterator;
    }
    exports.getSymbolIterator = getSymbolIterator;
    function evalExpression(sourceUrl, expr, declarations, vars) {
        var fnBody = declarations + "\nreturn " + expr + "\n//# sourceURL=" + sourceUrl;
        var fnArgNames = [];
        var fnArgValues = [];
        for (var argName in vars) {
            fnArgNames.push(argName);
            fnArgValues.push(vars[argName]);
        }
        return new (Function.bind.apply(Function, [void 0].concat(fnArgNames.concat(fnBody))))().apply(void 0, fnArgValues);
    }
    exports.evalExpression = evalExpression;
    function isPrimitive(obj) {
        return !isJsObject(obj);
    }
    exports.isPrimitive = isPrimitive;
    function hasConstructor(value, type) {
        return value.constructor === type;
    }
    exports.hasConstructor = hasConstructor;
    function escape(s) {
        return _global.encodeURI(s);
    }
    exports.escape = escape;
    function escapeRegExp(s) {
        return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
    }
    exports.escapeRegExp = escapeRegExp;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/common@2.0.0-rc.5/src/location/platform_location.js", ["reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";
    /**
     * This class should not be used directly by an application developer. Instead, use
     * {@link Location}.
     *
     * `PlatformLocation` encapsulates all calls to DOM apis, which allows the Router to be platform
     * agnostic.
     * This means that we can have different implementation of `PlatformLocation` for the different
     * platforms
     * that angular supports. For example, the default `PlatformLocation` is {@link
     * BrowserPlatformLocation},
     * however when you run your app in a WebWorker you use {@link WebWorkerPlatformLocation}.
     *
     * The `PlatformLocation` class is used directly by all implementations of {@link LocationStrategy}
     * when
     * they need to interact with the DOM apis like pushState, popState, etc...
     *
     * {@link LocationStrategy} in turn is used by the {@link Location} service which is used directly
     * by
     * the {@link Router} in order to navigate between routes. Since all interactions between {@link
     * Router} /
     * {@link Location} / {@link LocationStrategy} and DOM apis flow through the `PlatformLocation`
     * class
     * they are all platform independent.
     *
     * @stable
     */

    var define,
        global = this || self,
        GLOBAL = global;
    var PlatformLocation = function () {
        function PlatformLocation() {}
        Object.defineProperty(PlatformLocation.prototype, "pathname", {
            get: function () {
                return null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlatformLocation.prototype, "search", {
            get: function () {
                return null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlatformLocation.prototype, "hash", {
            get: function () {
                return null;
            },
            enumerable: true,
            configurable: true
        });
        return PlatformLocation;
    }();
    exports.PlatformLocation = PlatformLocation;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/location/path_location_strategy.js', ['@angular/core', '../facade/exceptions', '../facade/lang', './location', './location_strategy', './platform_location', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var core_1 = $__require('@angular/core');
    var exceptions_1 = $__require('../facade/exceptions');
    var lang_1 = $__require('../facade/lang');
    var location_1 = $__require('./location');
    var location_strategy_1 = $__require('./location_strategy');
    var platform_location_1 = $__require('./platform_location');
    var PathLocationStrategy = function (_super) {
        __extends(PathLocationStrategy, _super);
        function PathLocationStrategy(_platformLocation, href) {
            _super.call(this);
            this._platformLocation = _platformLocation;
            if (lang_1.isBlank(href)) {
                href = this._platformLocation.getBaseHrefFromDOM();
            }
            if (lang_1.isBlank(href)) {
                throw new exceptions_1.BaseException("No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.");
            }
            this._baseHref = href;
        }
        PathLocationStrategy.prototype.onPopState = function (fn) {
            this._platformLocation.onPopState(fn);
            this._platformLocation.onHashChange(fn);
        };
        PathLocationStrategy.prototype.getBaseHref = function () {
            return this._baseHref;
        };
        PathLocationStrategy.prototype.prepareExternalUrl = function (internal) {
            return location_1.Location.joinWithSlash(this._baseHref, internal);
        };
        PathLocationStrategy.prototype.path = function (includeHash) {
            if (includeHash === void 0) {
                includeHash = false;
            }
            var pathname = this._platformLocation.pathname + location_1.Location.normalizeQueryParams(this._platformLocation.search);
            var hash = this._platformLocation.hash;
            return hash && includeHash ? "" + pathname + hash : pathname;
        };
        PathLocationStrategy.prototype.pushState = function (state, title, url, queryParams) {
            var externalUrl = this.prepareExternalUrl(url + location_1.Location.normalizeQueryParams(queryParams));
            this._platformLocation.pushState(state, title, externalUrl);
        };
        PathLocationStrategy.prototype.replaceState = function (state, title, url, queryParams) {
            var externalUrl = this.prepareExternalUrl(url + location_1.Location.normalizeQueryParams(queryParams));
            this._platformLocation.replaceState(state, title, externalUrl);
        };
        PathLocationStrategy.prototype.forward = function () {
            this._platformLocation.forward();
        };
        PathLocationStrategy.prototype.back = function () {
            this._platformLocation.back();
        };
        /** @nocollapse */
        PathLocationStrategy.decorators = [{ type: core_1.Injectable }];
        /** @nocollapse */
        PathLocationStrategy.ctorParameters = [{ type: platform_location_1.PlatformLocation }, { type: undefined, decorators: [{ type: core_1.Optional }, { type: core_1.Inject, args: [location_strategy_1.APP_BASE_HREF] }] }];
        return PathLocationStrategy;
    }(location_strategy_1.LocationStrategy);
    exports.PathLocationStrategy = PathLocationStrategy;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/location/location_strategy.js', ['@angular/core', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var core_1 = $__require('@angular/core');
  /**
   * `LocationStrategy` is responsible for representing and reading route state
   * from the browser's URL. Angular provides two strategies:
   * {@link HashLocationStrategy} and {@link PathLocationStrategy} (default).
   *
   * This is used under the hood of the {@link Location} service.
   *
   * Applications should use the {@link Router} or {@link Location} services to
   * interact with application route state.
   *
   * For instance, {@link HashLocationStrategy} produces URLs like
   * `http://example.com#/foo`, and {@link PathLocationStrategy} produces
   * `http://example.com/foo` as an equivalent URL.
   *
   * See these two classes for more.
   *
   * @stable
   */
  var LocationStrategy = function () {
    function LocationStrategy() {}
    return LocationStrategy;
  }();
  exports.LocationStrategy = LocationStrategy;
  /**
   * The `APP_BASE_HREF` token represents the base href to be used with the
   * {@link PathLocationStrategy}.
   *
   * If you're using {@link PathLocationStrategy}, you must provide a provider to a string
   * representing the URL prefix that should be preserved when generating and recognizing
   * URLs.
   *
   * ### Example
   *
   * ```
   * import {Component} from '@angular/core';
   * import {ROUTER_DIRECTIVES, ROUTER_PROVIDERS, RouteConfig} from '@angular/router';
   * import {APP_BASE_HREF} from '@angular/common';
   *
   * @Component({directives: [ROUTER_DIRECTIVES]})
   * @RouteConfig([
   *  {...},
   * ])
   * class AppCmp {
   *   // ...
   * }
   *
   * bootstrap(AppCmp, [
   *   ROUTER_PROVIDERS,
   *   {provide: APP_BASE_HREF, useValue: '/my/app'}
   * ]);
   * ```
   * @stable
   */
  exports.APP_BASE_HREF = new core_1.OpaqueToken('appBaseHref');
  

  return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/location/location.js', ['@angular/core', './location_strategy', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var location_strategy_1 = $__require('./location_strategy');
    var Location = function () {
        function Location(platformStrategy) {
            var _this = this;
            /** @internal */
            this._subject = new core_1.EventEmitter();
            this._platformStrategy = platformStrategy;
            var browserBaseHref = this._platformStrategy.getBaseHref();
            this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref));
            this._platformStrategy.onPopState(function (ev) {
                _this._subject.emit({ 'url': _this.path(true), 'pop': true, 'type': ev.type });
            });
        }
        /**
         * Returns the normalized URL path.
         */
        // TODO: vsavkin. Remove the boolean flag and always include hash once the deprecated router is
        // removed.
        Location.prototype.path = function (includeHash) {
            if (includeHash === void 0) {
                includeHash = false;
            }
            return this.normalize(this._platformStrategy.path(includeHash));
        };
        /**
         * Normalizes the given path and compares to the current normalized path.
         */
        Location.prototype.isCurrentPathEqualTo = function (path, query) {
            if (query === void 0) {
                query = '';
            }
            return this.path() == this.normalize(path + Location.normalizeQueryParams(query));
        };
        /**
         * Given a string representing a URL, returns the normalized URL path without leading or
         * trailing slashes
         */
        Location.prototype.normalize = function (url) {
            return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));
        };
        /**
         * Given a string representing a URL, returns the platform-specific external URL path.
         * If the given URL doesn't begin with a leading slash (`'/'`), this method adds one
         * before normalizing. This method will also add a hash if `HashLocationStrategy` is
         * used, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.
         */
        Location.prototype.prepareExternalUrl = function (url) {
            if (url.length > 0 && !url.startsWith('/')) {
                url = '/' + url;
            }
            return this._platformStrategy.prepareExternalUrl(url);
        };
        // TODO: rename this method to pushState
        /**
         * Changes the browsers URL to the normalized version of the given URL, and pushes a
         * new item onto the platform's history.
         */
        Location.prototype.go = function (path, query) {
            if (query === void 0) {
                query = '';
            }
            this._platformStrategy.pushState(null, '', path, query);
        };
        /**
         * Changes the browsers URL to the normalized version of the given URL, and replaces
         * the top item on the platform's history stack.
         */
        Location.prototype.replaceState = function (path, query) {
            if (query === void 0) {
                query = '';
            }
            this._platformStrategy.replaceState(null, '', path, query);
        };
        /**
         * Navigates forward in the platform's history.
         */
        Location.prototype.forward = function () {
            this._platformStrategy.forward();
        };
        /**
         * Navigates back in the platform's history.
         */
        Location.prototype.back = function () {
            this._platformStrategy.back();
        };
        /**
         * Subscribe to the platform's `popState` events.
         */
        Location.prototype.subscribe = function (onNext, onThrow, onReturn) {
            if (onThrow === void 0) {
                onThrow = null;
            }
            if (onReturn === void 0) {
                onReturn = null;
            }
            return this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn });
        };
        /**
         * Given a string of url parameters, prepend with '?' if needed, otherwise return parameters as
         * is.
         */
        Location.normalizeQueryParams = function (params) {
            return params.length > 0 && params.substring(0, 1) != '?' ? '?' + params : params;
        };
        /**
         * Given 2 parts of a url, join them with a slash if needed.
         */
        Location.joinWithSlash = function (start, end) {
            if (start.length == 0) {
                return end;
            }
            if (end.length == 0) {
                return start;
            }
            var slashes = 0;
            if (start.endsWith('/')) {
                slashes++;
            }
            if (end.startsWith('/')) {
                slashes++;
            }
            if (slashes == 2) {
                return start + end.substring(1);
            }
            if (slashes == 1) {
                return start + end;
            }
            return start + '/' + end;
        };
        /**
         * If url has a trailing slash, remove it, otherwise return url as is.
         */
        Location.stripTrailingSlash = function (url) {
            if (/\/$/g.test(url)) {
                url = url.substring(0, url.length - 1);
            }
            return url;
        };
        /** @nocollapse */
        Location.decorators = [{ type: core_1.Injectable }];
        /** @nocollapse */
        Location.ctorParameters = [{ type: location_strategy_1.LocationStrategy }];
        return Location;
    }();
    exports.Location = Location;
    function _stripBaseHref(baseHref, url) {
        if (baseHref.length > 0 && url.startsWith(baseHref)) {
            return url.substring(baseHref.length);
        }
        return url;
    }
    function _stripIndexHtml(url) {
        if (/\/index.html$/g.test(url)) {
            // '/index.html'.length == 11
            return url.substring(0, url.length - 11);
        }
        return url;
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/common@2.0.0-rc.5/src/location.js', ['./location/platform_location', './location/location_strategy', './location/hash_location_strategy', './location/path_location_strategy', './location/location', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
  }
  __export($__require('./location/platform_location'));
  __export($__require('./location/location_strategy'));
  __export($__require('./location/hash_location_strategy'));
  __export($__require('./location/path_location_strategy'));
  __export($__require('./location/location'));
  

  return module.exports;
});
System.registerDynamic("npm:@angular/common@2.0.0-rc.5/src/localization.js", ["reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";
  /**
   * @experimental
   */

  var define,
      global = this || self,
      GLOBAL = global;
  var NgLocalization = function () {
    function NgLocalization() {}
    return NgLocalization;
  }();
  exports.NgLocalization = NgLocalization;
  /**
   * Returns the plural category for a given value.
   * - "=value" when the case exists,
   * - the plural category otherwise
   *
   * @internal
   */
  function getPluralCategory(value, cases, ngLocalization) {
    var nbCase = "=" + value;
    return cases.indexOf(nbCase) > -1 ? nbCase : ngLocalization.getPluralCategory(value);
  }
  exports.getPluralCategory = getPluralCategory;
  

  return module.exports;
});
System.registerDynamic("npm:@angular/common@2.0.0-rc.5.json", [], false, function() {
  return {
    "main": "index.js",
    "meta": {
      "src/*.js": {
        "deps": [
          "reflect-metadata",
          "zone.js"
        ]
      }
    },
    "format": "cjs"
  };
});

System.registerDynamic('npm:@angular/common@2.0.0-rc.5/index.js', ['@angular/core', './src/common_directives', './src/pipes', './src/directives', './src/forms-deprecated', './src/location', './src/localization'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    var core_1 = $__require('@angular/core');
    var common_directives_1 = $__require('./src/common_directives');
    var pipes_1 = $__require('./src/pipes');
    __export($__require('./src/pipes'));
    __export($__require('./src/directives'));
    __export($__require('./src/forms-deprecated'));
    __export($__require('./src/common_directives'));
    __export($__require('./src/location'));
    var localization_1 = $__require('./src/localization');
    exports.NgLocalization = localization_1.NgLocalization;
    var CommonModule = function () {
        function CommonModule() {}
        /** @nocollapse */
        CommonModule.decorators = [{ type: core_1.NgModule, args: [{ declarations: [common_directives_1.COMMON_DIRECTIVES, pipes_1.COMMON_PIPES], exports: [common_directives_1.COMMON_DIRECTIVES, pipes_1.COMMON_PIPES] }] }];
        return CommonModule;
    }();
    exports.CommonModule = CommonModule;
    

    return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/operator/mergeMap.js', ['../util/subscribeToResult', '../OuterSubscriber'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var subscribeToResult_1 = $__require('../util/subscribeToResult');
    var OuterSubscriber_1 = $__require('../OuterSubscriber');
    /**
     * Projects each source value to an Observable which is merged in the output
     * Observable.
     *
     * <span class="informal">Maps each value to an Observable, then flattens all of
     * these inner Observables using {@link mergeAll}.</span>
     *
     * <img src="./img/mergeMap.png" width="100%">
     *
     * Returns an Observable that emits items based on applying a function that you
     * supply to each item emitted by the source Observable, where that function
     * returns an Observable, and then merging those resulting Observables and
     * emitting the results of this merger.
     *
     * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>
     * var letters = Rx.Observable.of('a', 'b', 'c');
     * var result = letters.mergeMap(x =>
     *   Rx.Observable.interval(1000).map(i => x+i)
     * );
     * result.subscribe(x => console.log(x));
     *
     * @see {@link concatMap}
     * @see {@link exhaustMap}
     * @see {@link merge}
     * @see {@link mergeAll}
     * @see {@link mergeMapTo}
     * @see {@link mergeScan}
     * @see {@link switchMap}
     *
     * @param {function(value: T, ?index: number): Observable} project A function
     * that, when applied to an item emitted by the source Observable, returns an
     * Observable.
     * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
     * A function to produce the value on the output Observable based on the values
     * and the indices of the source (outer) emission and the inner Observable
     * emission. The arguments passed to this function are:
     * - `outerValue`: the value that came from the source
     * - `innerValue`: the value that came from the projected Observable
     * - `outerIndex`: the "index" of the value that came from the source
     * - `innerIndex`: the "index" of the value from the projected Observable
     * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
     * Observables being subscribed to concurrently.
     * @return {Observable} An Observable that emits the result of applying the
     * projection function (and the optional `resultSelector`) to each item emitted
     * by the source Observable and merging the results of the Observables obtained
     * from this transformation.
     * @method mergeMap
     * @owner Observable
     */
    function mergeMap(project, resultSelector, concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        if (typeof resultSelector === 'number') {
            concurrent = resultSelector;
            resultSelector = null;
        }
        return this.lift(new MergeMapOperator(project, resultSelector, concurrent));
    }
    exports.mergeMap = mergeMap;
    var MergeMapOperator = function () {
        function MergeMapOperator(project, resultSelector, concurrent) {
            if (concurrent === void 0) {
                concurrent = Number.POSITIVE_INFINITY;
            }
            this.project = project;
            this.resultSelector = resultSelector;
            this.concurrent = concurrent;
        }
        MergeMapOperator.prototype.call = function (observer, source) {
            return source._subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));
        };
        return MergeMapOperator;
    }();
    exports.MergeMapOperator = MergeMapOperator;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var MergeMapSubscriber = function (_super) {
        __extends(MergeMapSubscriber, _super);
        function MergeMapSubscriber(destination, project, resultSelector, concurrent) {
            if (concurrent === void 0) {
                concurrent = Number.POSITIVE_INFINITY;
            }
            _super.call(this, destination);
            this.project = project;
            this.resultSelector = resultSelector;
            this.concurrent = concurrent;
            this.hasCompleted = false;
            this.buffer = [];
            this.active = 0;
            this.index = 0;
        }
        MergeMapSubscriber.prototype._next = function (value) {
            if (this.active < this.concurrent) {
                this._tryNext(value);
            } else {
                this.buffer.push(value);
            }
        };
        MergeMapSubscriber.prototype._tryNext = function (value) {
            var result;
            var index = this.index++;
            try {
                result = this.project(value, index);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this.active++;
            this._innerSub(result, value, index);
        };
        MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {
            this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
        };
        MergeMapSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (this.active === 0 && this.buffer.length === 0) {
                this.destination.complete();
            }
        };
        MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            if (this.resultSelector) {
                this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);
            } else {
                this.destination.next(innerValue);
            }
        };
        MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {
            var result;
            try {
                result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {
            var buffer = this.buffer;
            this.remove(innerSub);
            this.active--;
            if (buffer.length > 0) {
                this._next(buffer.shift());
            } else if (this.active === 0 && this.hasCompleted) {
                this.destination.complete();
            }
        };
        return MergeMapSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    exports.MergeMapSubscriber = MergeMapSubscriber;
    

    return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/add/operator/mergeMap.js', ['../../Observable', '../../operator/mergeMap'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('../../Observable');
  var mergeMap_1 = $__require('../../operator/mergeMap');
  Observable_1.Observable.prototype.mergeMap = mergeMap_1.mergeMap;
  Observable_1.Observable.prototype.flatMap = mergeMap_1.mergeMap;
  

  return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/add/operator/mergeAll.js', ['../../Observable', '../../operator/mergeAll'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('../../Observable');
  var mergeAll_1 = $__require('../../operator/mergeAll');
  Observable_1.Observable.prototype.mergeAll = mergeAll_1.mergeAll;
  

  return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/operator/reduce.js', ['../Subscriber'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('../Subscriber');
    /**
     * Returns an Observable that applies a specified accumulator function to the first item emitted by a source Observable,
     * then feeds the result of that function along with the second item emitted by the source Observable into the same
     * function, and so on until all items have been emitted by the source Observable, and emits the final result from
     * the final call to your function as its sole item.
     * This technique, which is called "reduce" here, is sometimes called "aggregate," "fold," "accumulate," "compress," or
     * "inject" in other programming contexts.
     *
     * <img src="./img/reduce.png" width="100%">
     *
     * @param {initialValue} the initial (seed) accumulator value
     * @param {accumulator} an accumulator function to be invoked on each item emitted by the source Observable, the
     * result of which will be used in the next accumulator call.
     * @return {Observable} an Observable that emits a single item that is the result of accumulating the output from the
     * items emitted by the source Observable.
     * @method reduce
     * @owner Observable
     */
    function reduce(project, seed) {
        return this.lift(new ReduceOperator(project, seed));
    }
    exports.reduce = reduce;
    var ReduceOperator = function () {
        function ReduceOperator(project, seed) {
            this.project = project;
            this.seed = seed;
        }
        ReduceOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new ReduceSubscriber(subscriber, this.project, this.seed));
        };
        return ReduceOperator;
    }();
    exports.ReduceOperator = ReduceOperator;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var ReduceSubscriber = function (_super) {
        __extends(ReduceSubscriber, _super);
        function ReduceSubscriber(destination, project, seed) {
            _super.call(this, destination);
            this.hasValue = false;
            this.acc = seed;
            this.project = project;
            this.hasSeed = typeof seed !== 'undefined';
        }
        ReduceSubscriber.prototype._next = function (value) {
            if (this.hasValue || (this.hasValue = this.hasSeed)) {
                this._tryReduce(value);
            } else {
                this.acc = value;
                this.hasValue = true;
            }
        };
        ReduceSubscriber.prototype._tryReduce = function (value) {
            var result;
            try {
                result = this.project(this.acc, value);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this.acc = result;
        };
        ReduceSubscriber.prototype._complete = function () {
            if (this.hasValue || this.hasSeed) {
                this.destination.next(this.acc);
            }
            this.destination.complete();
        };
        return ReduceSubscriber;
    }(Subscriber_1.Subscriber);
    exports.ReduceSubscriber = ReduceSubscriber;
    

    return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/add/operator/reduce.js', ['../../Observable', '../../operator/reduce'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('../../Observable');
  var reduce_1 = $__require('../../operator/reduce');
  Observable_1.Observable.prototype.reduce = reduce_1.reduce;
  

  return module.exports;
});
System.registerDynamic("npm:rxjs@5.0.0-beta.6/operator/every.js", ["../Subscriber"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("../Subscriber");
    /**
     * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.
     * @param {function} predicate a function for determining if an item meets a specified condition.
     * @param {any} [thisArg] optional object to use for `this` in the callback
     * @return {Observable} an Observable of booleans that determines if all items of the source Observable meet the condition specified.
     * @method every
     * @owner Observable
     */
    function every(predicate, thisArg) {
        var source = this;
        return source.lift(new EveryOperator(predicate, thisArg, source));
    }
    exports.every = every;
    var EveryOperator = function () {
        function EveryOperator(predicate, thisArg, source) {
            this.predicate = predicate;
            this.thisArg = thisArg;
            this.source = source;
        }
        EveryOperator.prototype.call = function (observer, source) {
            return source._subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));
        };
        return EveryOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var EverySubscriber = function (_super) {
        __extends(EverySubscriber, _super);
        function EverySubscriber(destination, predicate, thisArg, source) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.thisArg = thisArg;
            this.source = source;
            this.index = 0;
            this.thisArg = thisArg || this;
        }
        EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {
            this.destination.next(everyValueMatch);
            this.destination.complete();
        };
        EverySubscriber.prototype._next = function (value) {
            var result = false;
            try {
                result = this.predicate.call(this.thisArg, value, this.index++, this.source);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            if (!result) {
                this.notifyComplete(false);
            }
        };
        EverySubscriber.prototype._complete = function () {
            this.notifyComplete(true);
        };
        return EverySubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/add/operator/every.js', ['../../Observable', '../../operator/every'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('../../Observable');
  var every_1 = $__require('../../operator/every');
  Observable_1.Observable.prototype.every = every_1.every;
  

  return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/operator/first.js', ['../Subscriber', '../util/EmptyError'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('../Subscriber');
    var EmptyError_1 = $__require('../util/EmptyError');
    /**
     * Emits only the first value (or the first value that meets some condition)
     * emitted by the source Observable.
     *
     * <span class="informal">Emits only the first value. Or emits only the first
     * value that passes some test.</span>
     *
     * <img src="./img/first.png" width="100%">
     *
     * If called with no arguments, `first` emits the first value of the source
     * Observable, then completes. If called with a `predicate` function, `first`
     * emits the first value of the source that matches the specified condition. It
     * may also take a `resultSelector` function to produce the output value from
     * the input value, and a `defaultValue` to emit in case the source completes
     * before it is able to emit a valid value. Throws an error if `defaultValue`
     * was not provided and a matching element is not found.
     *
     * @example <caption>Emit only the first click that happens on the DOM</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.first();
     * result.subscribe(x => console.log(x));
     *
     * @example <caption>Emits the first click that happens on a DIV</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.first(ev => ev.target.tagName === 'DIV');
     * result.subscribe(x => console.log(x));
     *
     * @see {@link filter}
     * @see {@link find}
     * @see {@link take}
     *
     * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
     * callback if the Observable completes before any `next` notification was sent.
     *
     * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]
     * An optional function called with each item to test for condition matching.
     * @param {function(value: T, index: number): R} [resultSelector] A function to
     * produce the value on the output Observable based on the values
     * and the indices of the source Observable. The arguments passed to this
     * function are:
     * - `value`: the value that was emitted on the source.
     * - `index`: the "index" of the value from the source.
     * @param {R} [defaultValue] The default value emitted in case no valid value
     * was found on the source.
     * @return {Observable<T|R>} an Observable of the first item that matches the
     * condition.
     * @method first
     * @owner Observable
     */
    function first(predicate, resultSelector, defaultValue) {
        return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));
    }
    exports.first = first;
    var FirstOperator = function () {
        function FirstOperator(predicate, resultSelector, defaultValue, source) {
            this.predicate = predicate;
            this.resultSelector = resultSelector;
            this.defaultValue = defaultValue;
            this.source = source;
        }
        FirstOperator.prototype.call = function (observer, source) {
            return source._subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
        };
        return FirstOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var FirstSubscriber = function (_super) {
        __extends(FirstSubscriber, _super);
        function FirstSubscriber(destination, predicate, resultSelector, defaultValue, source) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.resultSelector = resultSelector;
            this.defaultValue = defaultValue;
            this.source = source;
            this.index = 0;
            this.hasCompleted = false;
        }
        FirstSubscriber.prototype._next = function (value) {
            var index = this.index++;
            if (this.predicate) {
                this._tryPredicate(value, index);
            } else {
                this._emit(value, index);
            }
        };
        FirstSubscriber.prototype._tryPredicate = function (value, index) {
            var result;
            try {
                result = this.predicate(value, index, this.source);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            if (result) {
                this._emit(value, index);
            }
        };
        FirstSubscriber.prototype._emit = function (value, index) {
            if (this.resultSelector) {
                this._tryResultSelector(value, index);
                return;
            }
            this._emitFinal(value);
        };
        FirstSubscriber.prototype._tryResultSelector = function (value, index) {
            var result;
            try {
                result = this.resultSelector(value, index);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this._emitFinal(result);
        };
        FirstSubscriber.prototype._emitFinal = function (value) {
            var destination = this.destination;
            destination.next(value);
            destination.complete();
            this.hasCompleted = true;
        };
        FirstSubscriber.prototype._complete = function () {
            var destination = this.destination;
            if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {
                destination.next(this.defaultValue);
                destination.complete();
            } else if (!this.hasCompleted) {
                destination.error(new EmptyError_1.EmptyError());
            }
        };
        return FirstSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/add/operator/first.js', ['../../Observable', '../../operator/first'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('../../Observable');
  var first_1 = $__require('../../operator/first');
  Observable_1.Observable.prototype.first = first_1.first;
  

  return module.exports;
});
System.registerDynamic("npm:rxjs@5.0.0-beta.6/operator/catch.js", ["../Subscriber"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("../Subscriber");
    /**
     * Catches errors on the observable to be handled by returning a new observable or throwing an error.
     * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which
     *  is the source observable, in case you'd like to "retry" that observable by returning it again. Whatever observable
     *  is returned by the `selector` will be used to continue the observable chain.
     * @return {Observable} an observable that originates from either the source or the observable returned by the
     *  catch `selector` function.
     * @method catch
     * @owner Observable
     */
    function _catch(selector) {
        var operator = new CatchOperator(selector);
        var caught = this.lift(operator);
        return operator.caught = caught;
    }
    exports._catch = _catch;
    var CatchOperator = function () {
        function CatchOperator(selector) {
            this.selector = selector;
        }
        CatchOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
        };
        return CatchOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var CatchSubscriber = function (_super) {
        __extends(CatchSubscriber, _super);
        function CatchSubscriber(destination, selector, caught) {
            _super.call(this, destination);
            this.selector = selector;
            this.caught = caught;
        }
        // NOTE: overriding `error` instead of `_error` because we don't want
        // to have this flag this subscriber as `isStopped`.
        CatchSubscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                var result = void 0;
                try {
                    result = this.selector(err, this.caught);
                } catch (err) {
                    this.destination.error(err);
                    return;
                }
                this._innerSub(result);
            }
        };
        CatchSubscriber.prototype._innerSub = function (result) {
            this.unsubscribe();
            this.destination.remove(this);
            result.subscribe(this.destination);
        };
        return CatchSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/add/operator/catch.js', ['../../Observable', '../../operator/catch'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('../../Observable');
  var catch_1 = $__require('../../operator/catch');
  Observable_1.Observable.prototype.catch = catch_1._catch;
  

  return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/observable/IteratorObservable.js', ['../util/root', '../util/isObject', '../util/tryCatch', '../Observable', '../util/isFunction', '../symbol/iterator', '../util/errorObject'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var root_1 = $__require('../util/root');
    var isObject_1 = $__require('../util/isObject');
    var tryCatch_1 = $__require('../util/tryCatch');
    var Observable_1 = $__require('../Observable');
    var isFunction_1 = $__require('../util/isFunction');
    var iterator_1 = $__require('../symbol/iterator');
    var errorObject_1 = $__require('../util/errorObject');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var IteratorObservable = function (_super) {
        __extends(IteratorObservable, _super);
        function IteratorObservable(iterator, project, thisArg, scheduler) {
            _super.call(this);
            if (iterator == null) {
                throw new Error('iterator cannot be null.');
            }
            if (isObject_1.isObject(project)) {
                this.thisArg = project;
                this.scheduler = thisArg;
            } else if (isFunction_1.isFunction(project)) {
                this.project = project;
                this.thisArg = thisArg;
                this.scheduler = scheduler;
            } else if (project != null) {
                throw new Error('When provided, `project` must be a function.');
            }
            this.iterator = getIterator(iterator);
        }
        IteratorObservable.create = function (iterator, project, thisArg, scheduler) {
            return new IteratorObservable(iterator, project, thisArg, scheduler);
        };
        IteratorObservable.dispatch = function (state) {
            var index = state.index,
                hasError = state.hasError,
                thisArg = state.thisArg,
                project = state.project,
                iterator = state.iterator,
                subscriber = state.subscriber;
            if (hasError) {
                subscriber.error(state.error);
                return;
            }
            var result = iterator.next();
            if (result.done) {
                subscriber.complete();
                return;
            }
            if (project) {
                result = tryCatch_1.tryCatch(project).call(thisArg, result.value, index);
                if (result === errorObject_1.errorObject) {
                    state.error = errorObject_1.errorObject.e;
                    state.hasError = true;
                } else {
                    subscriber.next(result);
                    state.index = index + 1;
                }
            } else {
                subscriber.next(result.value);
                state.index = index + 1;
            }
            if (subscriber.isUnsubscribed) {
                return;
            }
            this.schedule(state);
        };
        IteratorObservable.prototype._subscribe = function (subscriber) {
            var index = 0;
            var _a = this,
                iterator = _a.iterator,
                project = _a.project,
                thisArg = _a.thisArg,
                scheduler = _a.scheduler;
            if (scheduler) {
                return scheduler.schedule(IteratorObservable.dispatch, 0, {
                    index: index, thisArg: thisArg, project: project, iterator: iterator, subscriber: subscriber
                });
            } else {
                do {
                    var result = iterator.next();
                    if (result.done) {
                        subscriber.complete();
                        break;
                    } else if (project) {
                        result = tryCatch_1.tryCatch(project).call(thisArg, result.value, index++);
                        if (result === errorObject_1.errorObject) {
                            subscriber.error(errorObject_1.errorObject.e);
                            break;
                        }
                        subscriber.next(result);
                    } else {
                        subscriber.next(result.value);
                    }
                    if (subscriber.isUnsubscribed) {
                        break;
                    }
                } while (true);
            }
        };
        return IteratorObservable;
    }(Observable_1.Observable);
    exports.IteratorObservable = IteratorObservable;
    var StringIterator = function () {
        function StringIterator(str, idx, len) {
            if (idx === void 0) {
                idx = 0;
            }
            if (len === void 0) {
                len = str.length;
            }
            this.str = str;
            this.idx = idx;
            this.len = len;
        }
        StringIterator.prototype[iterator_1.$$iterator] = function () {
            return this;
        };
        StringIterator.prototype.next = function () {
            return this.idx < this.len ? {
                done: false,
                value: this.str.charAt(this.idx++)
            } : {
                done: true,
                value: undefined
            };
        };
        return StringIterator;
    }();
    var ArrayIterator = function () {
        function ArrayIterator(arr, idx, len) {
            if (idx === void 0) {
                idx = 0;
            }
            if (len === void 0) {
                len = toLength(arr);
            }
            this.arr = arr;
            this.idx = idx;
            this.len = len;
        }
        ArrayIterator.prototype[iterator_1.$$iterator] = function () {
            return this;
        };
        ArrayIterator.prototype.next = function () {
            return this.idx < this.len ? {
                done: false,
                value: this.arr[this.idx++]
            } : {
                done: true,
                value: undefined
            };
        };
        return ArrayIterator;
    }();
    function getIterator(obj) {
        var i = obj[iterator_1.$$iterator];
        if (!i && typeof obj === 'string') {
            return new StringIterator(obj);
        }
        if (!i && obj.length !== undefined) {
            return new ArrayIterator(obj);
        }
        if (!i) {
            throw new TypeError('Object is not iterable');
        }
        return obj[iterator_1.$$iterator]();
    }
    var maxSafeInteger = Math.pow(2, 53) - 1;
    function toLength(o) {
        var len = +o.length;
        if (isNaN(len)) {
            return 0;
        }
        if (len === 0 || !numberIsFinite(len)) {
            return len;
        }
        len = sign(len) * Math.floor(Math.abs(len));
        if (len <= 0) {
            return 0;
        }
        if (len > maxSafeInteger) {
            return maxSafeInteger;
        }
        return len;
    }
    function numberIsFinite(value) {
        return typeof value === 'number' && root_1.root.isFinite(value);
    }
    function sign(value) {
        var valueAsNumber = +value;
        if (valueAsNumber === 0) {
            return valueAsNumber;
        }
        if (isNaN(valueAsNumber)) {
            return valueAsNumber;
        }
        return valueAsNumber < 0 ? -1 : 1;
    }
    

    return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/observable/ArrayLikeObservable.js', ['../Observable', './ScalarObservable', './EmptyObservable'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require('../Observable');
    var ScalarObservable_1 = $__require('./ScalarObservable');
    var EmptyObservable_1 = $__require('./EmptyObservable');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var ArrayLikeObservable = function (_super) {
        __extends(ArrayLikeObservable, _super);
        function ArrayLikeObservable(arrayLike, mapFn, thisArg, scheduler) {
            _super.call(this);
            this.arrayLike = arrayLike;
            this.scheduler = scheduler;
            if (!mapFn && !scheduler && arrayLike.length === 1) {
                this._isScalar = true;
                this.value = arrayLike[0];
            }
            if (mapFn) {
                this.mapFn = mapFn.bind(thisArg);
            }
        }
        ArrayLikeObservable.create = function (arrayLike, mapFn, thisArg, scheduler) {
            var length = arrayLike.length;
            if (length === 0) {
                return new EmptyObservable_1.EmptyObservable();
            } else if (length === 1 && !mapFn) {
                return new ScalarObservable_1.ScalarObservable(arrayLike[0], scheduler);
            } else {
                return new ArrayLikeObservable(arrayLike, mapFn, thisArg, scheduler);
            }
        };
        ArrayLikeObservable.dispatch = function (state) {
            var arrayLike = state.arrayLike,
                index = state.index,
                length = state.length,
                mapFn = state.mapFn,
                subscriber = state.subscriber;
            if (subscriber.isUnsubscribed) {
                return;
            }
            if (index >= length) {
                subscriber.complete();
                return;
            }
            var result = mapFn ? mapFn(arrayLike[index], index) : arrayLike[index];
            subscriber.next(result);
            state.index = index + 1;
            this.schedule(state);
        };
        ArrayLikeObservable.prototype._subscribe = function (subscriber) {
            var index = 0;
            var _a = this,
                arrayLike = _a.arrayLike,
                mapFn = _a.mapFn,
                scheduler = _a.scheduler;
            var length = arrayLike.length;
            if (scheduler) {
                return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {
                    arrayLike: arrayLike, index: index, length: length, mapFn: mapFn, subscriber: subscriber
                });
            } else {
                for (var i = 0; i < length && !subscriber.isUnsubscribed; i++) {
                    var result = mapFn ? mapFn(arrayLike[i], i) : arrayLike[i];
                    subscriber.next(result);
                }
                subscriber.complete();
            }
        };
        return ArrayLikeObservable;
    }(Observable_1.Observable);
    exports.ArrayLikeObservable = ArrayLikeObservable;
    

    return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/Notification.js', ['./Observable'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var Observable_1 = $__require('./Observable');
    /**
     * Represents a push-based event or value that an {@link Observable} can emit.
     * This class is particularly useful for operators that manage notifications,
     * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and
     * others. Besides wrapping the actual delivered value, it also annotates it
     * with metadata of, for instance, what type of push message it is (`next`,
     * `error`, or `complete`).
     *
     * @see {@link materialize}
     * @see {@link dematerialize}
     * @see {@link observeOn}
     *
     * @class Notification<T>
     */
    var Notification = function () {
        function Notification(kind, value, exception) {
            this.kind = kind;
            this.value = value;
            this.exception = exception;
            this.hasValue = kind === 'N';
        }
        /**
         * Delivers to the given `observer` the value wrapped by this Notification.
         * @param {Observer} observer
         * @return
         */
        Notification.prototype.observe = function (observer) {
            switch (this.kind) {
                case 'N':
                    return observer.next && observer.next(this.value);
                case 'E':
                    return observer.error && observer.error(this.exception);
                case 'C':
                    return observer.complete && observer.complete();
            }
        };
        /**
         * Given some {@link Observer} callbacks, deliver the value represented by the
         * current Notification to the correctly corresponding callback.
         * @param {function(value: T): void} next An Observer `next` callback.
         * @param {function(err: any): void} [error] An Observer `error` callback.
         * @param {function(): void} [complete] An Observer `complete` callback.
         * @return {any}
         */
        Notification.prototype.do = function (next, error, complete) {
            var kind = this.kind;
            switch (kind) {
                case 'N':
                    return next && next(this.value);
                case 'E':
                    return error && error(this.exception);
                case 'C':
                    return complete && complete();
            }
        };
        /**
         * Takes an Observer or its individual callback functions, and calls `observe`
         * or `do` methods accordingly.
         * @param {Observer|function(value: T): void} nextOrObserver An Observer or
         * the `next` callback.
         * @param {function(err: any): void} [error] An Observer `error` callback.
         * @param {function(): void} [complete] An Observer `complete` callback.
         * @return {any}
         */
        Notification.prototype.accept = function (nextOrObserver, error, complete) {
            if (nextOrObserver && typeof nextOrObserver.next === 'function') {
                return this.observe(nextOrObserver);
            } else {
                return this.do(nextOrObserver, error, complete);
            }
        };
        /**
         * Returns a simple Observable that just delivers the notification represented
         * by this Notification instance.
         * @return {any}
         */
        Notification.prototype.toObservable = function () {
            var kind = this.kind;
            switch (kind) {
                case 'N':
                    return Observable_1.Observable.of(this.value);
                case 'E':
                    return Observable_1.Observable.throw(this.exception);
                case 'C':
                    return Observable_1.Observable.empty();
            }
        };
        /**
         * A shortcut to create a Notification instance of the type `next` from a
         * given value.
         * @param {T} value The `next` value.
         * @return {Notification<T>} The "next" Notification representing the
         * argument.
         */
        Notification.createNext = function (value) {
            if (typeof value !== 'undefined') {
                return new Notification('N', value);
            }
            return this.undefinedValueNotification;
        };
        /**
         * A shortcut to create a Notification instance of the type `error` from a
         * given error.
         * @param {any} [err] The `error` exception.
         * @return {Notification<T>} The "error" Notification representing the
         * argument.
         */
        Notification.createError = function (err) {
            return new Notification('E', undefined, err);
        };
        /**
         * A shortcut to create a Notification instance of the type `complete`.
         * @return {Notification<any>} The valueless "complete" Notification.
         */
        Notification.createComplete = function () {
            return this.completeNotification;
        };
        Notification.completeNotification = new Notification('C');
        Notification.undefinedValueNotification = new Notification('N', undefined);
        return Notification;
    }();
    exports.Notification = Notification;
    

    return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/operator/observeOn.js', ['../Subscriber', '../Notification'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('../Subscriber');
    var Notification_1 = $__require('../Notification');
    /**
     * @see {@link Notification}
     *
     * @param scheduler
     * @param delay
     * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}
     * @method observeOn
     * @owner Observable
     */
    function observeOn(scheduler, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        return this.lift(new ObserveOnOperator(scheduler, delay));
    }
    exports.observeOn = observeOn;
    var ObserveOnOperator = function () {
        function ObserveOnOperator(scheduler, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            this.scheduler = scheduler;
            this.delay = delay;
        }
        ObserveOnOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
        };
        return ObserveOnOperator;
    }();
    exports.ObserveOnOperator = ObserveOnOperator;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var ObserveOnSubscriber = function (_super) {
        __extends(ObserveOnSubscriber, _super);
        function ObserveOnSubscriber(destination, scheduler, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            _super.call(this, destination);
            this.scheduler = scheduler;
            this.delay = delay;
        }
        ObserveOnSubscriber.dispatch = function (arg) {
            var notification = arg.notification,
                destination = arg.destination;
            notification.observe(destination);
        };
        ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
            this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
        };
        ObserveOnSubscriber.prototype._next = function (value) {
            this.scheduleMessage(Notification_1.Notification.createNext(value));
        };
        ObserveOnSubscriber.prototype._error = function (err) {
            this.scheduleMessage(Notification_1.Notification.createError(err));
        };
        ObserveOnSubscriber.prototype._complete = function () {
            this.scheduleMessage(Notification_1.Notification.createComplete());
        };
        return ObserveOnSubscriber;
    }(Subscriber_1.Subscriber);
    exports.ObserveOnSubscriber = ObserveOnSubscriber;
    var ObserveOnMessage = function () {
        function ObserveOnMessage(notification, destination) {
            this.notification = notification;
            this.destination = destination;
        }
        return ObserveOnMessage;
    }();
    exports.ObserveOnMessage = ObserveOnMessage;
    

    return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/observable/FromObservable.js', ['../util/isArray', '../util/isFunction', '../util/isPromise', '../util/isScheduler', './PromiseObservable', './IteratorObservable', './ArrayObservable', './ArrayLikeObservable', '../symbol/observable', '../symbol/iterator', '../Observable', '../operator/observeOn'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var isArray_1 = $__require('../util/isArray');
    var isFunction_1 = $__require('../util/isFunction');
    var isPromise_1 = $__require('../util/isPromise');
    var isScheduler_1 = $__require('../util/isScheduler');
    var PromiseObservable_1 = $__require('./PromiseObservable');
    var IteratorObservable_1 = $__require('./IteratorObservable');
    var ArrayObservable_1 = $__require('./ArrayObservable');
    var ArrayLikeObservable_1 = $__require('./ArrayLikeObservable');
    var observable_1 = $__require('../symbol/observable');
    var iterator_1 = $__require('../symbol/iterator');
    var Observable_1 = $__require('../Observable');
    var observeOn_1 = $__require('../operator/observeOn');
    var isArrayLike = function (x) {
        return x && typeof x.length === 'number';
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var FromObservable = function (_super) {
        __extends(FromObservable, _super);
        function FromObservable(ish, scheduler) {
            _super.call(this, null);
            this.ish = ish;
            this.scheduler = scheduler;
        }
        FromObservable.create = function (ish, mapFnOrScheduler, thisArg, lastScheduler) {
            var scheduler = null;
            var mapFn = null;
            if (isFunction_1.isFunction(mapFnOrScheduler)) {
                scheduler = lastScheduler || null;
                mapFn = mapFnOrScheduler;
            } else if (isScheduler_1.isScheduler(scheduler)) {
                scheduler = mapFnOrScheduler;
            }
            if (ish != null) {
                if (typeof ish[observable_1.$$observable] === 'function') {
                    if (ish instanceof Observable_1.Observable && !scheduler) {
                        return ish;
                    }
                    return new FromObservable(ish, scheduler);
                } else if (isArray_1.isArray(ish)) {
                    return new ArrayObservable_1.ArrayObservable(ish, scheduler);
                } else if (isPromise_1.isPromise(ish)) {
                    return new PromiseObservable_1.PromiseObservable(ish, scheduler);
                } else if (typeof ish[iterator_1.$$iterator] === 'function' || typeof ish === 'string') {
                    return new IteratorObservable_1.IteratorObservable(ish, null, null, scheduler);
                } else if (isArrayLike(ish)) {
                    return new ArrayLikeObservable_1.ArrayLikeObservable(ish, mapFn, thisArg, scheduler);
                }
            }
            throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');
        };
        FromObservable.prototype._subscribe = function (subscriber) {
            var ish = this.ish;
            var scheduler = this.scheduler;
            if (scheduler == null) {
                return ish[observable_1.$$observable]().subscribe(subscriber);
            } else {
                return ish[observable_1.$$observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));
            }
        };
        return FromObservable;
    }(Observable_1.Observable);
    exports.FromObservable = FromObservable;
    

    return module.exports;
});
System.registerDynamic("npm:rxjs@5.0.0-beta.6/observable/from.js", ["./FromObservable"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var FromObservable_1 = $__require("./FromObservable");
  exports.from = FromObservable_1.FromObservable.create;
  

  return module.exports;
});
System.registerDynamic('npm:@angular/router@3.0.0-rc.1/src/apply_redirects.js', ['rxjs/add/operator/first', 'rxjs/add/operator/catch', 'rxjs/add/operator/concatAll', 'rxjs/Observable', 'rxjs/observable/from', 'rxjs/observable/of', 'rxjs/util/EmptyError', './router_config_loader', './shared', './url_tree', './utils/collection'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    $__require('rxjs/add/operator/first');
    $__require('rxjs/add/operator/catch');
    $__require('rxjs/add/operator/concatAll');
    var Observable_1 = $__require('rxjs/Observable');
    var from_1 = $__require('rxjs/observable/from');
    var of_1 = $__require('rxjs/observable/of');
    var EmptyError_1 = $__require('rxjs/util/EmptyError');
    var router_config_loader_1 = $__require('./router_config_loader');
    var shared_1 = $__require('./shared');
    var url_tree_1 = $__require('./url_tree');
    var collection_1 = $__require('./utils/collection');
    var NoMatch = function () {
        function NoMatch(segmentGroup) {
            if (segmentGroup === void 0) {
                segmentGroup = null;
            }
            this.segmentGroup = segmentGroup;
        }
        return NoMatch;
    }();
    var AbsoluteRedirect = function () {
        function AbsoluteRedirect(segments) {
            this.segments = segments;
        }
        return AbsoluteRedirect;
    }();
    function noMatch(segmentGroup) {
        return new Observable_1.Observable(function (obs) {
            return obs.error(new NoMatch(segmentGroup));
        });
    }
    function absoluteRedirect(segments) {
        return new Observable_1.Observable(function (obs) {
            return obs.error(new AbsoluteRedirect(segments));
        });
    }
    function canLoadFails(route) {
        return new Observable_1.Observable(function (obs) {
            return obs.error(new Error("Cannot load children because the guard of the route \"path: '" + route.path + "'\" returned false"));
        });
    }
    function applyRedirects(injector, configLoader, urlTree, config) {
        return new ApplyRedirects(injector, configLoader, urlTree, config).apply();
    }
    exports.applyRedirects = applyRedirects;
    var ApplyRedirects = function () {
        function ApplyRedirects(injector, configLoader, urlTree, config) {
            this.injector = injector;
            this.configLoader = configLoader;
            this.urlTree = urlTree;
            this.config = config;
            this.allowRedirects = true;
        }
        ApplyRedirects.prototype.apply = function () {
            var _this = this;
            return this.expandSegmentGroup(this.injector, this.config, this.urlTree.root, shared_1.PRIMARY_OUTLET).map(function (rootSegmentGroup) {
                return _this.createUrlTree(rootSegmentGroup);
            }).catch(function (e) {
                if (e instanceof AbsoluteRedirect) {
                    // after an absolute redirect we do not apply any more redirects!
                    _this.allowRedirects = false;
                    var group = new url_tree_1.UrlSegmentGroup([], (_a = {}, _a[shared_1.PRIMARY_OUTLET] = new url_tree_1.UrlSegmentGroup(e.segments, {}), _a));
                    // we need to run matching, so we can fetch all lazy-loaded modules
                    return _this.match(group);
                } else if (e instanceof NoMatch) {
                    throw _this.noMatchError(e);
                } else {
                    throw e;
                }
                var _a;
            });
        };
        ApplyRedirects.prototype.match = function (segmentGroup) {
            var _this = this;
            return this.expandSegmentGroup(this.injector, this.config, segmentGroup, shared_1.PRIMARY_OUTLET).map(function (rootSegmentGroup) {
                return _this.createUrlTree(rootSegmentGroup);
            }).catch(function (e) {
                if (e instanceof NoMatch) {
                    throw _this.noMatchError(e);
                } else {
                    throw e;
                }
            });
        };
        ApplyRedirects.prototype.noMatchError = function (e) {
            return new Error("Cannot match any routes: '" + e.segmentGroup + "'");
        };
        ApplyRedirects.prototype.createUrlTree = function (rootCandidate) {
            var root = rootCandidate.segments.length > 0 ? new url_tree_1.UrlSegmentGroup([], (_a = {}, _a[shared_1.PRIMARY_OUTLET] = rootCandidate, _a)) : rootCandidate;
            return new url_tree_1.UrlTree(root, this.urlTree.queryParams, this.urlTree.fragment);
            var _a;
        };
        ApplyRedirects.prototype.expandSegmentGroup = function (injector, routes, segmentGroup, outlet) {
            if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
                return this.expandChildren(injector, routes, segmentGroup).map(function (children) {
                    return new url_tree_1.UrlSegmentGroup([], children);
                });
            } else {
                return this.expandSegment(injector, segmentGroup, routes, segmentGroup.segments, outlet, true);
            }
        };
        ApplyRedirects.prototype.expandChildren = function (injector, routes, segmentGroup) {
            var _this = this;
            return collection_1.waitForMap(segmentGroup.children, function (childOutlet, child) {
                return _this.expandSegmentGroup(injector, routes, child, childOutlet);
            });
        };
        ApplyRedirects.prototype.expandSegment = function (injector, segmentGroup, routes, segments, outlet, allowRedirects) {
            var _this = this;
            var processRoutes = of_1.of.apply(void 0, routes).map(function (r) {
                return _this.expandSegmentAgainstRoute(injector, segmentGroup, routes, r, segments, outlet, allowRedirects).catch(function (e) {
                    if (e instanceof NoMatch) return of_1.of(null);else throw e;
                });
            }).concatAll();
            return processRoutes.first(function (s) {
                return !!s;
            }).catch(function (e, _) {
                if (e instanceof EmptyError_1.EmptyError) {
                    throw new NoMatch(segmentGroup);
                } else {
                    throw e;
                }
            });
        };
        ApplyRedirects.prototype.expandSegmentAgainstRoute = function (injector, segmentGroup, routes, route, paths, outlet, allowRedirects) {
            if (getOutlet(route) !== outlet) return noMatch(segmentGroup);
            if (route.redirectTo !== undefined && !(allowRedirects && this.allowRedirects)) return noMatch(segmentGroup);
            if (route.redirectTo === undefined) {
                return this.matchSegmentAgainstRoute(injector, segmentGroup, route, paths);
            } else {
                return this.expandSegmentAgainstRouteUsingRedirect(injector, segmentGroup, routes, route, paths, outlet);
            }
        };
        ApplyRedirects.prototype.expandSegmentAgainstRouteUsingRedirect = function (injector, segmentGroup, routes, route, segments, outlet) {
            if (route.path === '**') {
                return this.expandWildCardWithParamsAgainstRouteUsingRedirect(route);
            } else {
                return this.expandRegularSegmentAgainstRouteUsingRedirect(injector, segmentGroup, routes, route, segments, outlet);
            }
        };
        ApplyRedirects.prototype.expandWildCardWithParamsAgainstRouteUsingRedirect = function (route) {
            var newSegments = applyRedirectCommands([], route.redirectTo, {});
            if (route.redirectTo.startsWith('/')) {
                return absoluteRedirect(newSegments);
            } else {
                return of_1.of(new url_tree_1.UrlSegmentGroup(newSegments, {}));
            }
        };
        ApplyRedirects.prototype.expandRegularSegmentAgainstRouteUsingRedirect = function (injector, segmentGroup, routes, route, segments, outlet) {
            var _a = match(segmentGroup, route, segments),
                matched = _a.matched,
                consumedSegments = _a.consumedSegments,
                lastChild = _a.lastChild,
                positionalParamSegments = _a.positionalParamSegments;
            if (!matched) return noMatch(segmentGroup);
            var newSegments = applyRedirectCommands(consumedSegments, route.redirectTo, positionalParamSegments);
            if (route.redirectTo.startsWith('/')) {
                return absoluteRedirect(newSegments);
            } else {
                return this.expandSegment(injector, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet, false);
            }
        };
        ApplyRedirects.prototype.matchSegmentAgainstRoute = function (injector, rawSegmentGroup, route, segments) {
            var _this = this;
            if (route.path === '**') {
                return of_1.of(new url_tree_1.UrlSegmentGroup(segments, {}));
            } else {
                var _a = match(rawSegmentGroup, route, segments),
                    matched = _a.matched,
                    consumedSegments_1 = _a.consumedSegments,
                    lastChild = _a.lastChild;
                if (!matched) return noMatch(rawSegmentGroup);
                var rawSlicedSegments_1 = segments.slice(lastChild);
                return this.getChildConfig(injector, route).mergeMap(function (routerConfig) {
                    var childInjector = routerConfig.injector;
                    var childConfig = routerConfig.routes;
                    var _a = split(rawSegmentGroup, consumedSegments_1, rawSlicedSegments_1, childConfig),
                        segmentGroup = _a.segmentGroup,
                        slicedSegments = _a.slicedSegments;
                    if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {
                        return _this.expandChildren(childInjector, childConfig, segmentGroup).map(function (children) {
                            return new url_tree_1.UrlSegmentGroup(consumedSegments_1, children);
                        });
                    } else if (childConfig.length === 0 && slicedSegments.length === 0) {
                        return of_1.of(new url_tree_1.UrlSegmentGroup(consumedSegments_1, {}));
                    } else {
                        return _this.expandSegment(childInjector, segmentGroup, childConfig, slicedSegments, shared_1.PRIMARY_OUTLET, true).map(function (cs) {
                            return new url_tree_1.UrlSegmentGroup(consumedSegments_1.concat(cs.segments), cs.children);
                        });
                    }
                });
            }
        };
        ApplyRedirects.prototype.getChildConfig = function (injector, route) {
            var _this = this;
            if (route.children) {
                return of_1.of(new router_config_loader_1.LoadedRouterConfig(route.children, injector, null));
            } else if (route.loadChildren) {
                return runGuards(injector, route).mergeMap(function (shouldLoad) {
                    if (shouldLoad) {
                        return _this.configLoader.load(injector, route.loadChildren).map(function (r) {
                            route._loadedConfig = r;
                            return r;
                        });
                    } else {
                        return canLoadFails(route);
                    }
                });
            } else {
                return of_1.of(new router_config_loader_1.LoadedRouterConfig([], injector, null));
            }
        };
        return ApplyRedirects;
    }();
    function runGuards(injector, route) {
        var canLoad = route.canLoad;
        if (!canLoad || canLoad.length === 0) return of_1.of(true);
        var obs = from_1.from(canLoad).map(function (c) {
            var guard = injector.get(c);
            if (guard.canLoad) {
                return collection_1.wrapIntoObservable(guard.canLoad(route));
            } else {
                return collection_1.wrapIntoObservable(guard(route));
            }
        });
        return collection_1.andObservables(obs);
    }
    function match(segmentGroup, route, segments) {
        var noMatch = { matched: false, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };
        if (route.path === '') {
            if ((route.terminal || route.pathMatch === 'full') && (segmentGroup.hasChildren() || segments.length > 0)) {
                return { matched: false, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };
            } else {
                return { matched: true, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };
            }
        }
        var path = route.path;
        var parts = path.split('/');
        var positionalParamSegments = {};
        var consumedSegments = [];
        var currentIndex = 0;
        for (var i = 0; i < parts.length; ++i) {
            if (currentIndex >= segments.length) return noMatch;
            var current = segments[currentIndex];
            var p = parts[i];
            var isPosParam = p.startsWith(':');
            if (!isPosParam && p !== current.path) return noMatch;
            if (isPosParam) {
                positionalParamSegments[p.substring(1)] = current;
            }
            consumedSegments.push(current);
            currentIndex++;
        }
        if (route.terminal && (segmentGroup.hasChildren() || currentIndex < segments.length)) {
            return { matched: false, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };
        }
        return { matched: true, consumedSegments: consumedSegments, lastChild: currentIndex, positionalParamSegments: positionalParamSegments };
    }
    function applyRedirectCommands(segments, redirectTo, posParams) {
        var r = redirectTo.startsWith('/') ? redirectTo.substring(1) : redirectTo;
        if (r === '') {
            return [];
        } else {
            return createSegments(redirectTo, r.split('/'), segments, posParams);
        }
    }
    function createSegments(redirectTo, parts, segments, posParams) {
        return parts.map(function (p) {
            return p.startsWith(':') ? findPosParam(p, posParams, redirectTo) : findOrCreateSegment(p, segments);
        });
    }
    function findPosParam(part, posParams, redirectTo) {
        var paramName = part.substring(1);
        var pos = posParams[paramName];
        if (!pos) throw new Error("Cannot redirect to '" + redirectTo + "'. Cannot find '" + part + "'.");
        return pos;
    }
    function findOrCreateSegment(part, segments) {
        var idx = 0;
        for (var _i = 0, segments_1 = segments; _i < segments_1.length; _i++) {
            var s = segments_1[_i];
            if (s.path === part) {
                segments.splice(idx);
                return s;
            }
            idx++;
        }
        return new url_tree_1.UrlSegment(part, {});
    }
    function split(segmentGroup, consumedSegments, slicedSegments, config) {
        if (slicedSegments.length > 0 && containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, config)) {
            var s = new url_tree_1.UrlSegmentGroup(consumedSegments, createChildrenForEmptySegments(config, new url_tree_1.UrlSegmentGroup(slicedSegments, segmentGroup.children)));
            return { segmentGroup: mergeTrivialChildren(s), slicedSegments: [] };
        } else if (slicedSegments.length === 0 && containsEmptyPathRedirects(segmentGroup, slicedSegments, config)) {
            var s = new url_tree_1.UrlSegmentGroup(segmentGroup.segments, addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));
            return { segmentGroup: mergeTrivialChildren(s), slicedSegments: slicedSegments };
        } else {
            return { segmentGroup: segmentGroup, slicedSegments: slicedSegments };
        }
    }
    function mergeTrivialChildren(s) {
        if (s.numberOfChildren === 1 && s.children[shared_1.PRIMARY_OUTLET]) {
            var c = s.children[shared_1.PRIMARY_OUTLET];
            return new url_tree_1.UrlSegmentGroup(s.segments.concat(c.segments), c.children);
        } else {
            return s;
        }
    }
    function addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {
        var res = {};
        for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {
            var r = routes_1[_i];
            if (emptyPathRedirect(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {
                res[getOutlet(r)] = new url_tree_1.UrlSegmentGroup([], {});
            }
        }
        return collection_1.merge(children, res);
    }
    function createChildrenForEmptySegments(routes, primarySegmentGroup) {
        var res = {};
        res[shared_1.PRIMARY_OUTLET] = primarySegmentGroup;
        for (var _i = 0, routes_2 = routes; _i < routes_2.length; _i++) {
            var r = routes_2[_i];
            if (r.path === '' && getOutlet(r) !== shared_1.PRIMARY_OUTLET) {
                res[getOutlet(r)] = new url_tree_1.UrlSegmentGroup([], {});
            }
        }
        return res;
    }
    function containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, routes) {
        return routes.filter(function (r) {
            return emptyPathRedirect(segmentGroup, slicedSegments, r) && getOutlet(r) !== shared_1.PRIMARY_OUTLET;
        }).length > 0;
    }
    function containsEmptyPathRedirects(segmentGroup, slicedSegments, routes) {
        return routes.filter(function (r) {
            return emptyPathRedirect(segmentGroup, slicedSegments, r);
        }).length > 0;
    }
    function emptyPathRedirect(segmentGroup, slicedSegments, r) {
        if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && (r.terminal || r.pathMatch === 'full')) return false;
        return r.path === '' && r.redirectTo !== undefined;
    }
    function getOutlet(route) {
        return route.outlet ? route.outlet : shared_1.PRIMARY_OUTLET;
    }
    

    return module.exports;
});
System.registerDynamic("npm:@angular/router@3.0.0-rc.1/src/config.js", [], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function validateConfig(config) {
        config.forEach(validateNode);
    }
    exports.validateConfig = validateConfig;
    function validateNode(route) {
        if (Array.isArray(route)) {
            throw new Error("Invalid route configuration: Array cannot be specified");
        }
        if (!!route.redirectTo && !!route.children) {
            throw new Error("Invalid configuration of route '" + route.path + "': redirectTo and children cannot be used together");
        }
        if (!!route.redirectTo && !!route.loadChildren) {
            throw new Error("Invalid configuration of route '" + route.path + "': redirectTo and loadChildren cannot be used together");
        }
        if (!!route.children && !!route.loadChildren) {
            throw new Error("Invalid configuration of route '" + route.path + "': children and loadChildren cannot be used together");
        }
        if (!!route.redirectTo && !!route.component) {
            throw new Error("Invalid configuration of route '" + route.path + "': redirectTo and component cannot be used together");
        }
        if (route.redirectTo === undefined && !route.component && !route.children && !route.loadChildren) {
            throw new Error("Invalid configuration of route '" + route.path + "': one of the following must be provided (component or redirectTo or children or loadChildren)");
        }
        if (route.path === undefined) {
            throw new Error("Invalid route configuration: routes must have path specified");
        }
        if (route.path.startsWith('/')) {
            throw new Error("Invalid route configuration of route '" + route.path + "': path cannot start with a slash");
        }
        if (route.path === '' && route.redirectTo !== undefined && route.terminal === undefined && route.pathMatch === undefined) {
            var exp = "The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.";
            throw new Error("Invalid route configuration of route '{path: \"" + route.path + "\", redirectTo: \"" + route.redirectTo + "\"}': please provide 'pathMatch'. " + exp);
        }
        if (route.pathMatch !== undefined && route.pathMatch !== 'full' && route.pathMatch !== 'prefix') {
            throw new Error("Invalid configuration of route '" + route.path + "': pathMatch can only be set to 'prefix' or 'full'");
        }
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/router@3.0.0-rc.1/src/create_router_state.js', ['rxjs/BehaviorSubject', './router_state', './utils/tree'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var BehaviorSubject_1 = $__require('rxjs/BehaviorSubject');
    var router_state_1 = $__require('./router_state');
    var tree_1 = $__require('./utils/tree');
    function createRouterState(curr, prevState) {
        var root = createNode(curr._root, prevState ? prevState._root : undefined);
        return new router_state_1.RouterState(root, curr);
    }
    exports.createRouterState = createRouterState;
    function createNode(curr, prevState) {
        if (prevState && equalRouteSnapshots(prevState.value.snapshot, curr.value)) {
            var value = prevState.value;
            value._futureSnapshot = curr.value;
            var children = createOrReuseChildren(curr, prevState);
            return new tree_1.TreeNode(value, children);
        } else {
            var value = createActivatedRoute(curr.value);
            var children = curr.children.map(function (c) {
                return createNode(c);
            });
            return new tree_1.TreeNode(value, children);
        }
    }
    function createOrReuseChildren(curr, prevState) {
        return curr.children.map(function (child) {
            for (var _i = 0, _a = prevState.children; _i < _a.length; _i++) {
                var p = _a[_i];
                if (equalRouteSnapshots(p.value.snapshot, child.value)) {
                    return createNode(child, p);
                }
            }
            return createNode(child);
        });
    }
    function createActivatedRoute(c) {
        return new router_state_1.ActivatedRoute(new BehaviorSubject_1.BehaviorSubject(c.url), new BehaviorSubject_1.BehaviorSubject(c.params), new BehaviorSubject_1.BehaviorSubject(c.queryParams), new BehaviorSubject_1.BehaviorSubject(c.fragment), new BehaviorSubject_1.BehaviorSubject(c.data), c.outlet, c.component, c);
    }
    function equalRouteSnapshots(a, b) {
        return a._routeConfig === b._routeConfig;
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/router@3.0.0-rc.1/src/create_url_tree.js', ['./shared', './url_tree', './utils/collection'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var shared_1 = $__require('./shared');
    var url_tree_1 = $__require('./url_tree');
    var collection_1 = $__require('./utils/collection');
    function createUrlTree(route, urlTree, commands, queryParams, fragment) {
        if (commands.length === 0) {
            return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);
        }
        var normalizedCommands = normalizeCommands(commands);
        validateCommands(normalizedCommands);
        if (navigateToRoot(normalizedCommands)) {
            return tree(urlTree.root, new url_tree_1.UrlSegmentGroup([], {}), urlTree, queryParams, fragment);
        }
        var startingPosition = findStartingPosition(normalizedCommands, urlTree, route);
        var segmentGroup = startingPosition.processChildren ? updateSegmentGroupChildren(startingPosition.segmentGroup, startingPosition.index, normalizedCommands.commands) : updateSegmentGroup(startingPosition.segmentGroup, startingPosition.index, normalizedCommands.commands);
        return tree(startingPosition.segmentGroup, segmentGroup, urlTree, queryParams, fragment);
    }
    exports.createUrlTree = createUrlTree;
    function validateCommands(n) {
        if (n.isAbsolute && n.commands.length > 0 && isMatrixParams(n.commands[0])) {
            throw new Error('Root segment cannot have matrix parameters');
        }
        var c = n.commands.filter(function (c) {
            return typeof c === 'object' && c.outlets !== undefined;
        });
        if (c.length > 0 && c[0] !== n.commands[n.commands.length - 1]) {
            throw new Error('{outlets:{}} has to be the last command');
        }
    }
    function isMatrixParams(command) {
        return typeof command === 'object' && command.outlets === undefined && command.segmentPath === undefined;
    }
    function tree(oldSegmentGroup, newSegmentGroup, urlTree, queryParams, fragment) {
        if (urlTree.root === oldSegmentGroup) {
            return new url_tree_1.UrlTree(newSegmentGroup, stringify(queryParams), fragment);
        } else {
            return new url_tree_1.UrlTree(replaceSegment(urlTree.root, oldSegmentGroup, newSegmentGroup), stringify(queryParams), fragment);
        }
    }
    function replaceSegment(current, oldSegment, newSegment) {
        var children = {};
        collection_1.forEach(current.children, function (c, outletName) {
            if (c === oldSegment) {
                children[outletName] = newSegment;
            } else {
                children[outletName] = replaceSegment(c, oldSegment, newSegment);
            }
        });
        return new url_tree_1.UrlSegmentGroup(current.segments, children);
    }
    function navigateToRoot(normalizedChange) {
        return normalizedChange.isAbsolute && normalizedChange.commands.length === 1 && normalizedChange.commands[0] == '/';
    }
    var NormalizedNavigationCommands = function () {
        function NormalizedNavigationCommands(isAbsolute, numberOfDoubleDots, commands) {
            this.isAbsolute = isAbsolute;
            this.numberOfDoubleDots = numberOfDoubleDots;
            this.commands = commands;
        }
        return NormalizedNavigationCommands;
    }();
    function normalizeCommands(commands) {
        if (typeof commands[0] === 'string' && commands.length === 1 && commands[0] == '/') {
            return new NormalizedNavigationCommands(true, 0, commands);
        }
        var numberOfDoubleDots = 0;
        var isAbsolute = false;
        var res = [];
        var _loop_1 = function (i) {
            var c = commands[i];
            if (typeof c === 'object' && c.outlets !== undefined) {
                var r_1 = {};
                collection_1.forEach(c.outlets, function (commands, name) {
                    if (typeof commands === 'string') {
                        r_1[name] = commands.split('/');
                    } else {
                        r_1[name] = commands;
                    }
                });
                res.push({ outlets: r_1 });
                return "continue";
            }
            if (typeof c === 'object' && c.segmentPath !== undefined) {
                res.push(c.segmentPath);
                return "continue";
            }
            if (!(typeof c === 'string')) {
                res.push(c);
                return "continue";
            }
            if (i === 0) {
                var parts = c.split('/');
                for (var j = 0; j < parts.length; ++j) {
                    var cc = parts[j];
                    if (j == 0 && cc == '.') {} else if (j == 0 && cc == '') {
                        isAbsolute = true;
                    } else if (cc == '..') {
                        numberOfDoubleDots++;
                    } else if (cc != '') {
                        res.push(cc);
                    }
                }
            } else {
                res.push(c);
            }
        };
        for (var i = 0; i < commands.length; ++i) {
            _loop_1(i);
        }
        return new NormalizedNavigationCommands(isAbsolute, numberOfDoubleDots, res);
    }
    var Position = function () {
        function Position(segmentGroup, processChildren, index) {
            this.segmentGroup = segmentGroup;
            this.processChildren = processChildren;
            this.index = index;
        }
        return Position;
    }();
    function findStartingPosition(normalizedChange, urlTree, route) {
        if (normalizedChange.isAbsolute) {
            return new Position(urlTree.root, true, 0);
        } else if (route.snapshot._lastPathIndex === -1) {
            return new Position(route.snapshot._urlSegment, true, 0);
        } else if (route.snapshot._lastPathIndex + 1 - normalizedChange.numberOfDoubleDots >= 0) {
            return new Position(route.snapshot._urlSegment, false, route.snapshot._lastPathIndex + 1 - normalizedChange.numberOfDoubleDots);
        } else {
            throw new Error('Invalid number of \'../\'');
        }
    }
    function getPath(command) {
        return "" + command;
    }
    function getOutlets(commands) {
        if (!(typeof commands[0] === 'object')) return _a = {}, _a[shared_1.PRIMARY_OUTLET] = commands, _a;
        if (commands[0].outlets === undefined) return _b = {}, _b[shared_1.PRIMARY_OUTLET] = commands, _b;
        return commands[0].outlets;
        var _a, _b;
    }
    function updateSegmentGroup(segmentGroup, startIndex, commands) {
        if (!segmentGroup) {
            segmentGroup = new url_tree_1.UrlSegmentGroup([], {});
        }
        if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
            return updateSegmentGroupChildren(segmentGroup, startIndex, commands);
        }
        var m = prefixedWith(segmentGroup, startIndex, commands);
        var slicedCommands = commands.slice(m.lastIndex);
        if (m.match && slicedCommands.length === 0) {
            return new url_tree_1.UrlSegmentGroup(segmentGroup.segments, {});
        } else if (m.match && !segmentGroup.hasChildren()) {
            return createNewSegmentGroup(segmentGroup, startIndex, commands);
        } else if (m.match) {
            return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);
        } else {
            return createNewSegmentGroup(segmentGroup, startIndex, commands);
        }
    }
    function updateSegmentGroupChildren(segmentGroup, startIndex, commands) {
        if (commands.length === 0) {
            return new url_tree_1.UrlSegmentGroup(segmentGroup.segments, {});
        } else {
            var outlets_1 = getOutlets(commands);
            var children_1 = {};
            collection_1.forEach(outlets_1, function (commands, outlet) {
                if (commands !== null) {
                    children_1[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);
                }
            });
            collection_1.forEach(segmentGroup.children, function (child, childOutlet) {
                if (outlets_1[childOutlet] === undefined) {
                    children_1[childOutlet] = child;
                }
            });
            return new url_tree_1.UrlSegmentGroup(segmentGroup.segments, children_1);
        }
    }
    function prefixedWith(segmentGroup, startIndex, commands) {
        var currentCommandIndex = 0;
        var currentPathIndex = startIndex;
        var noMatch = { match: false, lastIndex: 0 };
        while (currentPathIndex < segmentGroup.segments.length) {
            if (currentCommandIndex >= commands.length) return noMatch;
            var path = segmentGroup.segments[currentPathIndex];
            var curr = getPath(commands[currentCommandIndex]);
            var next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;
            if (curr && next && typeof next === 'object' && next.outlets === undefined) {
                if (!compare(curr, next, path)) return noMatch;
                currentCommandIndex += 2;
            } else {
                if (!compare(curr, {}, path)) return noMatch;
                currentCommandIndex++;
            }
            currentPathIndex++;
        }
        return { match: true, lastIndex: currentCommandIndex };
    }
    function createNewSegmentGroup(segmentGroup, startIndex, commands) {
        var paths = segmentGroup.segments.slice(0, startIndex);
        var i = 0;
        while (i < commands.length) {
            if (typeof commands[i] === 'object' && commands[i].outlets !== undefined) {
                var children = createNewSegmentChldren(commands[i].outlets);
                return new url_tree_1.UrlSegmentGroup(paths, children);
            }
            // if we start with an object literal, we need to reuse the path part from the segment
            if (i === 0 && typeof commands[0] === 'object') {
                var p = segmentGroup.segments[startIndex];
                paths.push(new url_tree_1.UrlSegment(p.path, commands[0]));
                i++;
                continue;
            }
            var curr = getPath(commands[i]);
            var next = i < commands.length - 1 ? commands[i + 1] : null;
            if (curr && next && typeof next === 'object') {
                paths.push(new url_tree_1.UrlSegment(curr, stringify(next)));
                i += 2;
            } else {
                paths.push(new url_tree_1.UrlSegment(curr, {}));
                i++;
            }
        }
        return new url_tree_1.UrlSegmentGroup(paths, {});
    }
    function createNewSegmentChldren(outlets) {
        var children = {};
        collection_1.forEach(outlets, function (commands, outlet) {
            if (commands !== null) {
                children[outlet] = createNewSegmentGroup(new url_tree_1.UrlSegmentGroup([], {}), 0, commands);
            }
        });
        return children;
    }
    function stringify(params) {
        var res = {};
        collection_1.forEach(params, function (v, k) {
            return res[k] = "" + v;
        });
        return res;
    }
    function compare(path, params, segment) {
        return path == segment.path && collection_1.shallowEqual(params, segment.parameters);
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/router@3.0.0-rc.1/src/recognize.js', ['rxjs/Observable', 'rxjs/observable/of', './router_state', './shared', './url_tree', './utils/collection', './utils/tree'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var Observable_1 = $__require('rxjs/Observable');
    var of_1 = $__require('rxjs/observable/of');
    var router_state_1 = $__require('./router_state');
    var shared_1 = $__require('./shared');
    var url_tree_1 = $__require('./url_tree');
    var collection_1 = $__require('./utils/collection');
    var tree_1 = $__require('./utils/tree');
    var NoMatch = function () {
        function NoMatch() {}
        return NoMatch;
    }();
    var InheritedFromParent = function () {
        function InheritedFromParent(parent, snapshot, params, data, resolve) {
            this.parent = parent;
            this.snapshot = snapshot;
            this.params = params;
            this.data = data;
            this.resolve = resolve;
        }
        Object.defineProperty(InheritedFromParent.prototype, "allParams", {
            get: function () {
                return this.parent ? collection_1.merge(this.parent.allParams, this.params) : this.params;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InheritedFromParent.prototype, "allData", {
            get: function () {
                return this.parent ? collection_1.merge(this.parent.allData, this.data) : this.data;
            },
            enumerable: true,
            configurable: true
        });
        InheritedFromParent.empty = function (snapshot) {
            return new InheritedFromParent(null, snapshot, {}, {}, new router_state_1.InheritedResolve(null, {}));
        };
        return InheritedFromParent;
    }();
    function recognize(rootComponentType, config, urlTree, url) {
        return new Recognizer(rootComponentType, config, urlTree, url).recognize();
    }
    exports.recognize = recognize;
    var Recognizer = function () {
        function Recognizer(rootComponentType, config, urlTree, url) {
            this.rootComponentType = rootComponentType;
            this.config = config;
            this.urlTree = urlTree;
            this.url = url;
        }
        Recognizer.prototype.recognize = function () {
            try {
                var rootSegmentGroup = split(this.urlTree.root, [], [], this.config).segmentGroup;
                var children = this.processSegmentGroup(this.config, rootSegmentGroup, InheritedFromParent.empty(null), shared_1.PRIMARY_OUTLET);
                var root = new router_state_1.ActivatedRouteSnapshot([], Object.freeze({}), Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, {}, shared_1.PRIMARY_OUTLET, this.rootComponentType, null, this.urlTree.root, -1, router_state_1.InheritedResolve.empty);
                var rootNode = new tree_1.TreeNode(root, children);
                return of_1.of(new router_state_1.RouterStateSnapshot(this.url, rootNode));
            } catch (e) {
                return new Observable_1.Observable(function (obs) {
                    return obs.error(e);
                });
            }
        };
        Recognizer.prototype.processSegmentGroup = function (config, segmentGroup, inherited, outlet) {
            if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
                return this.processChildren(config, segmentGroup, inherited);
            } else {
                return this.processSegment(config, segmentGroup, 0, segmentGroup.segments, inherited, outlet);
            }
        };
        Recognizer.prototype.processChildren = function (config, segmentGroup, inherited) {
            var _this = this;
            var children = url_tree_1.mapChildrenIntoArray(segmentGroup, function (child, childOutlet) {
                return _this.processSegmentGroup(config, child, inherited, childOutlet);
            });
            checkOutletNameUniqueness(children);
            sortActivatedRouteSnapshots(children);
            return children;
        };
        Recognizer.prototype.processSegment = function (config, segmentGroup, pathIndex, segments, inherited, outlet) {
            for (var _i = 0, config_1 = config; _i < config_1.length; _i++) {
                var r = config_1[_i];
                try {
                    return this.processSegmentAgainstRoute(r, segmentGroup, pathIndex, segments, inherited, outlet);
                } catch (e) {
                    if (!(e instanceof NoMatch)) throw e;
                }
            }
            throw new NoMatch();
        };
        Recognizer.prototype.processSegmentAgainstRoute = function (route, rawSegment, pathIndex, segments, inherited, outlet) {
            if (route.redirectTo) throw new NoMatch();
            if ((route.outlet ? route.outlet : shared_1.PRIMARY_OUTLET) !== outlet) throw new NoMatch();
            var newInheritedResolve = new router_state_1.InheritedResolve(inherited.resolve, getResolve(route));
            if (route.path === '**') {
                var params = segments.length > 0 ? collection_1.last(segments).parameters : {};
                var snapshot_1 = new router_state_1.ActivatedRouteSnapshot(segments, Object.freeze(collection_1.merge(inherited.allParams, params)), Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, collection_1.merge(inherited.allData, getData(route)), outlet, route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + segments.length, newInheritedResolve);
                return [new tree_1.TreeNode(snapshot_1, [])];
            }
            var _a = match(rawSegment, route, segments, inherited.snapshot),
                consumedSegments = _a.consumedSegments,
                parameters = _a.parameters,
                lastChild = _a.lastChild;
            var rawSlicedSegments = segments.slice(lastChild);
            var childConfig = getChildConfig(route);
            var _b = split(rawSegment, consumedSegments, rawSlicedSegments, childConfig),
                segmentGroup = _b.segmentGroup,
                slicedSegments = _b.slicedSegments;
            var snapshot = new router_state_1.ActivatedRouteSnapshot(consumedSegments, Object.freeze(collection_1.merge(inherited.allParams, parameters)), Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, collection_1.merge(inherited.allData, getData(route)), outlet, route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + consumedSegments.length, newInheritedResolve);
            var newInherited = route.component ? InheritedFromParent.empty(snapshot) : new InheritedFromParent(inherited, snapshot, parameters, getData(route), newInheritedResolve);
            if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {
                var children = this.processChildren(childConfig, segmentGroup, newInherited);
                return [new tree_1.TreeNode(snapshot, children)];
            } else if (childConfig.length === 0 && slicedSegments.length === 0) {
                return [new tree_1.TreeNode(snapshot, [])];
            } else {
                var children = this.processSegment(childConfig, segmentGroup, pathIndex + lastChild, slicedSegments, newInherited, shared_1.PRIMARY_OUTLET);
                return [new tree_1.TreeNode(snapshot, children)];
            }
        };
        return Recognizer;
    }();
    function sortActivatedRouteSnapshots(nodes) {
        nodes.sort(function (a, b) {
            if (a.value.outlet === shared_1.PRIMARY_OUTLET) return -1;
            if (b.value.outlet === shared_1.PRIMARY_OUTLET) return 1;
            return a.value.outlet.localeCompare(b.value.outlet);
        });
    }
    function getChildConfig(route) {
        if (route.children) {
            return route.children;
        } else if (route.loadChildren) {
            return route._loadedConfig.routes;
        } else {
            return [];
        }
    }
    function match(segmentGroup, route, segments, parent) {
        if (route.path === '') {
            if ((route.terminal || route.pathMatch === 'full') && (segmentGroup.hasChildren() || segments.length > 0)) {
                throw new NoMatch();
            } else {
                var params = parent ? parent.params : {};
                return { consumedSegments: [], lastChild: 0, parameters: params };
            }
        }
        var path = route.path;
        var parts = path.split('/');
        var posParameters = {};
        var consumedSegments = [];
        var currentIndex = 0;
        for (var i = 0; i < parts.length; ++i) {
            if (currentIndex >= segments.length) throw new NoMatch();
            var current = segments[currentIndex];
            var p = parts[i];
            var isPosParam = p.startsWith(':');
            if (!isPosParam && p !== current.path) throw new NoMatch();
            if (isPosParam) {
                posParameters[p.substring(1)] = current.path;
            }
            consumedSegments.push(current);
            currentIndex++;
        }
        if ((route.terminal || route.pathMatch === 'full') && (segmentGroup.hasChildren() || currentIndex < segments.length)) {
            throw new NoMatch();
        }
        var parameters = collection_1.merge(posParameters, consumedSegments[consumedSegments.length - 1].parameters);
        return { consumedSegments: consumedSegments, lastChild: currentIndex, parameters: parameters };
    }
    function checkOutletNameUniqueness(nodes) {
        var names = {};
        nodes.forEach(function (n) {
            var routeWithSameOutletName = names[n.value.outlet];
            if (routeWithSameOutletName) {
                var p = routeWithSameOutletName.url.map(function (s) {
                    return s.toString();
                }).join('/');
                var c = n.value.url.map(function (s) {
                    return s.toString();
                }).join('/');
                throw new Error("Two segments cannot have the same outlet name: '" + p + "' and '" + c + "'.");
            }
            names[n.value.outlet] = n.value;
        });
    }
    function getSourceSegmentGroup(segmentGroup) {
        var s = segmentGroup;
        while (s._sourceSegment) {
            s = s._sourceSegment;
        }
        return s;
    }
    function getPathIndexShift(segmentGroup) {
        var s = segmentGroup;
        var res = s._segmentIndexShift ? s._segmentIndexShift : 0;
        while (s._sourceSegment) {
            s = s._sourceSegment;
            res += s._segmentIndexShift ? s._segmentIndexShift : 0;
        }
        return res - 1;
    }
    function split(segmentGroup, consumedSegments, slicedSegments, config) {
        if (slicedSegments.length > 0 && containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {
            var s = new url_tree_1.UrlSegmentGroup(consumedSegments, createChildrenForEmptyPaths(segmentGroup, consumedSegments, config, new url_tree_1.UrlSegmentGroup(slicedSegments, segmentGroup.children)));
            s._sourceSegment = segmentGroup;
            s._segmentIndexShift = consumedSegments.length;
            return { segmentGroup: s, slicedSegments: [] };
        } else if (slicedSegments.length === 0 && containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {
            var s = new url_tree_1.UrlSegmentGroup(segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));
            s._sourceSegment = segmentGroup;
            s._segmentIndexShift = consumedSegments.length;
            return { segmentGroup: s, slicedSegments: slicedSegments };
        } else {
            var s = new url_tree_1.UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);
            s._sourceSegment = segmentGroup;
            s._segmentIndexShift = consumedSegments.length;
            return { segmentGroup: s, slicedSegments: slicedSegments };
        }
    }
    function addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {
        var res = {};
        for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {
            var r = routes_1[_i];
            if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {
                var s = new url_tree_1.UrlSegmentGroup([], {});
                s._sourceSegment = segmentGroup;
                s._segmentIndexShift = segmentGroup.segments.length;
                res[getOutlet(r)] = s;
            }
        }
        return collection_1.merge(children, res);
    }
    function createChildrenForEmptyPaths(segmentGroup, consumedSegments, routes, primarySegment) {
        var res = {};
        res[shared_1.PRIMARY_OUTLET] = primarySegment;
        primarySegment._sourceSegment = segmentGroup;
        primarySegment._segmentIndexShift = consumedSegments.length;
        for (var _i = 0, routes_2 = routes; _i < routes_2.length; _i++) {
            var r = routes_2[_i];
            if (r.path === '' && getOutlet(r) !== shared_1.PRIMARY_OUTLET) {
                var s = new url_tree_1.UrlSegmentGroup([], {});
                s._sourceSegment = segmentGroup;
                s._segmentIndexShift = consumedSegments.length;
                res[getOutlet(r)] = s;
            }
        }
        return res;
    }
    function containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, routes) {
        return routes.filter(function (r) {
            return emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet(r) !== shared_1.PRIMARY_OUTLET;
        }).length > 0;
    }
    function containsEmptyPathMatches(segmentGroup, slicedSegments, routes) {
        return routes.filter(function (r) {
            return emptyPathMatch(segmentGroup, slicedSegments, r);
        }).length > 0;
    }
    function emptyPathMatch(segmentGroup, slicedSegments, r) {
        if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && (r.terminal || r.pathMatch === 'full')) return false;
        return r.path === '' && r.redirectTo === undefined;
    }
    function getOutlet(route) {
        return route.outlet ? route.outlet : shared_1.PRIMARY_OUTLET;
    }
    function getData(route) {
        return route.data ? route.data : {};
    }
    function getResolve(route) {
        return route.resolve ? route.resolve : {};
    }
    

    return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/operator/map.js', ['../Subscriber'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('../Subscriber');
    /**
     * Applies a given `project` function to each value emitted by the source
     * Observable, and emits the resulting values as an Observable.
     *
     * <span class="informal">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),
     * it passes each source value through a transformation function to get
     * corresponding output values.</span>
     *
     * <img src="./img/map.png" width="100%">
     *
     * Similar to the well known `Array.prototype.map` function, this operator
     * applies a projection to each value and emits that projection in the output
     * Observable.
     *
     * @example <caption>Map every every click to the clientX position of that click</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var positions = clicks.map(ev => ev.clientX);
     * positions.subscribe(x => console.log(x));
     *
     * @see {@link mapTo}
     * @see {@link pluck}
     *
     * @param {function(value: T, index: number): R} project The function to apply
     * to each `value` emitted by the source Observable. The `index` parameter is
     * the number `i` for the i-th emission that has happened since the
     * subscription, starting from the number `0`.
     * @param {any} [thisArg] An optional argument to define what `this` is in the
     * `project` function.
     * @return {Observable<R>} An Observable that emits the values from the source
     * Observable transformed by the given `project` function.
     * @method map
     * @owner Observable
     */
    function map(project, thisArg) {
        if (typeof project !== 'function') {
            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
        }
        return this.lift(new MapOperator(project, thisArg));
    }
    exports.map = map;
    var MapOperator = function () {
        function MapOperator(project, thisArg) {
            this.project = project;
            this.thisArg = thisArg;
        }
        MapOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
        };
        return MapOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var MapSubscriber = function (_super) {
        __extends(MapSubscriber, _super);
        function MapSubscriber(destination, project, thisArg) {
            _super.call(this, destination);
            this.project = project;
            this.count = 0;
            this.thisArg = thisArg || this;
        }
        // NOTE: This looks unoptimized, but it's actually purposefully NOT
        // using try/catch optimizations.
        MapSubscriber.prototype._next = function (value) {
            var result;
            try {
                result = this.project.call(this.thisArg, value, this.count++);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        return MapSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/add/operator/map.js', ['../../Observable', '../../operator/map'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('../../Observable');
  var map_1 = $__require('../../operator/map');
  Observable_1.Observable.prototype.map = map_1.map;
  

  return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/operator/toPromise.js', ['../util/root'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var root_1 = $__require('../util/root');
    /**
     * @param PromiseCtor
     * @return {Promise<T>}
     * @method toPromise
     * @owner Observable
     */
    function toPromise(PromiseCtor) {
        var _this = this;
        if (!PromiseCtor) {
            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
                PromiseCtor = root_1.root.Rx.config.Promise;
            } else if (root_1.root.Promise) {
                PromiseCtor = root_1.root.Promise;
            }
        }
        if (!PromiseCtor) {
            throw new Error('no Promise impl found');
        }
        return new PromiseCtor(function (resolve, reject) {
            var value;
            _this.subscribe(function (x) {
                return value = x;
            }, function (err) {
                return reject(err);
            }, function () {
                return resolve(value);
            });
        });
    }
    exports.toPromise = toPromise;
    

    return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/add/operator/toPromise.js', ['../../Observable', '../../operator/toPromise'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('../../Observable');
  var toPromise_1 = $__require('../../operator/toPromise');
  Observable_1.Observable.prototype.toPromise = toPromise_1.toPromise;
  

  return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/observable/ForkJoinObservable.js', ['../Observable', './EmptyObservable', '../util/isArray', '../util/subscribeToResult', '../OuterSubscriber'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require('../Observable');
    var EmptyObservable_1 = $__require('./EmptyObservable');
    var isArray_1 = $__require('../util/isArray');
    var subscribeToResult_1 = $__require('../util/subscribeToResult');
    var OuterSubscriber_1 = $__require('../OuterSubscriber');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var ForkJoinObservable = function (_super) {
        __extends(ForkJoinObservable, _super);
        function ForkJoinObservable(sources, resultSelector) {
            _super.call(this);
            this.sources = sources;
            this.resultSelector = resultSelector;
        }
        /**
         * @param sources
         * @return {any}
         * @static true
         * @name forkJoin
         * @owner Observable
         */
        ForkJoinObservable.create = function () {
            var sources = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                sources[_i - 0] = arguments[_i];
            }
            if (sources === null || arguments.length === 0) {
                return new EmptyObservable_1.EmptyObservable();
            }
            var resultSelector = null;
            if (typeof sources[sources.length - 1] === 'function') {
                resultSelector = sources.pop();
            }
            // if the first and only other argument besides the resultSelector is an array
            // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`
            if (sources.length === 1 && isArray_1.isArray(sources[0])) {
                sources = sources[0];
            }
            if (sources.length === 0) {
                return new EmptyObservable_1.EmptyObservable();
            }
            return new ForkJoinObservable(sources, resultSelector);
        };
        ForkJoinObservable.prototype._subscribe = function (subscriber) {
            return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);
        };
        return ForkJoinObservable;
    }(Observable_1.Observable);
    exports.ForkJoinObservable = ForkJoinObservable;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var ForkJoinSubscriber = function (_super) {
        __extends(ForkJoinSubscriber, _super);
        function ForkJoinSubscriber(destination, sources, resultSelector) {
            _super.call(this, destination);
            this.sources = sources;
            this.resultSelector = resultSelector;
            this.completed = 0;
            this.haveValues = 0;
            var len = sources.length;
            this.total = len;
            this.values = new Array(len);
            for (var i = 0; i < len; i++) {
                var source = sources[i];
                var innerSubscription = subscribeToResult_1.subscribeToResult(this, source, null, i);
                if (innerSubscription) {
                    innerSubscription.outerIndex = i;
                    this.add(innerSubscription);
                }
            }
        }
        ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.values[outerIndex] = innerValue;
            if (!innerSub._hasValue) {
                innerSub._hasValue = true;
                this.haveValues++;
            }
        };
        ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {
            var destination = this.destination;
            var _a = this,
                haveValues = _a.haveValues,
                resultSelector = _a.resultSelector,
                values = _a.values;
            var len = values.length;
            if (!innerSub._hasValue) {
                destination.complete();
                return;
            }
            this.completed++;
            if (this.completed !== len) {
                return;
            }
            if (haveValues === len) {
                var value = resultSelector ? resultSelector.apply(this, values) : values;
                destination.next(value);
            }
            destination.complete();
        };
        return ForkJoinSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    

    return module.exports;
});
System.registerDynamic("npm:rxjs@5.0.0-beta.6/observable/forkJoin.js", ["./ForkJoinObservable"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var ForkJoinObservable_1 = $__require("./ForkJoinObservable");
  exports.forkJoin = ForkJoinObservable_1.ForkJoinObservable.create;
  

  return module.exports;
});
System.registerDynamic('npm:@angular/router@3.0.0-rc.1/src/resolve.js', ['rxjs/add/operator/map', 'rxjs/add/operator/toPromise', 'rxjs/observable/forkJoin', 'rxjs/observable/fromPromise'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    $__require('rxjs/add/operator/map');
    $__require('rxjs/add/operator/toPromise');
    var forkJoin_1 = $__require('rxjs/observable/forkJoin');
    var fromPromise_1 = $__require('rxjs/observable/fromPromise');
    function resolve(resolver, state) {
        return resolveNode(resolver, state._root).map(function (_) {
            return state;
        });
    }
    exports.resolve = resolve;
    function resolveNode(resolver, node) {
        if (node.children.length === 0) {
            return fromPromise_1.fromPromise(resolveComponent(resolver, node.value).then(function (factory) {
                node.value._resolvedComponentFactory = factory;
                return node.value;
            }));
        } else {
            var c = node.children.map(function (c) {
                return resolveNode(resolver, c).toPromise();
            });
            return forkJoin_1.forkJoin(c).map(function (_) {
                return resolveComponent(resolver, node.value).then(function (factory) {
                    node.value._resolvedComponentFactory = factory;
                    return node.value;
                });
            });
        }
    }
    function resolveComponent(resolver, snapshot) {
        if (snapshot.component && snapshot._routeConfig && typeof snapshot.component === 'string') {
            return resolver.resolveComponent(snapshot.component);
        } else {
            return Promise.resolve(null);
        }
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/router@3.0.0-rc.1/src/router.js', ['rxjs/add/operator/map', 'rxjs/add/operator/mergeMap', 'rxjs/add/operator/mergeAll', 'rxjs/add/operator/reduce', 'rxjs/add/operator/every', '@angular/core', 'rxjs/Subject', 'rxjs/observable/from', 'rxjs/observable/of', './apply_redirects', './config', './create_router_state', './create_url_tree', './recognize', './resolve', './router_config_loader', './router_outlet_map', './router_state', './shared', './url_tree', './utils/collection'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    $__require('rxjs/add/operator/map');
    $__require('rxjs/add/operator/mergeMap');
    $__require('rxjs/add/operator/mergeAll');
    $__require('rxjs/add/operator/reduce');
    $__require('rxjs/add/operator/every');
    var core_1 = $__require('@angular/core');
    var Subject_1 = $__require('rxjs/Subject');
    var from_1 = $__require('rxjs/observable/from');
    var of_1 = $__require('rxjs/observable/of');
    var apply_redirects_1 = $__require('./apply_redirects');
    var config_1 = $__require('./config');
    var create_router_state_1 = $__require('./create_router_state');
    var create_url_tree_1 = $__require('./create_url_tree');
    var recognize_1 = $__require('./recognize');
    var resolve_1 = $__require('./resolve');
    var router_config_loader_1 = $__require('./router_config_loader');
    var router_outlet_map_1 = $__require('./router_outlet_map');
    var router_state_1 = $__require('./router_state');
    var shared_1 = $__require('./shared');
    var url_tree_1 = $__require('./url_tree');
    var collection_1 = $__require('./utils/collection');
    /**
     * An event triggered when a navigation starts
     *
     * @stable
     */
    var NavigationStart = function () {
        function NavigationStart(id, url) {
            this.id = id;
            this.url = url;
        }
        NavigationStart.prototype.toString = function () {
            return "NavigationStart(id: " + this.id + ", url: '" + this.url + "')";
        };
        return NavigationStart;
    }();
    exports.NavigationStart = NavigationStart;
    /**
     * An event triggered when a navigation ends successfully
     *
     * @stable
     */
    var NavigationEnd = function () {
        function NavigationEnd(id, url, urlAfterRedirects) {
            this.id = id;
            this.url = url;
            this.urlAfterRedirects = urlAfterRedirects;
        }
        NavigationEnd.prototype.toString = function () {
            return "NavigationEnd(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "')";
        };
        return NavigationEnd;
    }();
    exports.NavigationEnd = NavigationEnd;
    /**
     * An event triggered when a navigation is canceled
     *
     * @stable
     */
    var NavigationCancel = function () {
        function NavigationCancel(id, url) {
            this.id = id;
            this.url = url;
        }
        NavigationCancel.prototype.toString = function () {
            return "NavigationCancel(id: " + this.id + ", url: '" + this.url + "')";
        };
        return NavigationCancel;
    }();
    exports.NavigationCancel = NavigationCancel;
    /**
     * An event triggered when a navigation fails due to unexpected error
     *
     * @stable
     */
    var NavigationError = function () {
        function NavigationError(id, url, error) {
            this.id = id;
            this.url = url;
            this.error = error;
        }
        NavigationError.prototype.toString = function () {
            return "NavigationError(id: " + this.id + ", url: '" + this.url + "', error: " + this.error + ")";
        };
        return NavigationError;
    }();
    exports.NavigationError = NavigationError;
    /**
     * An event triggered when routes are recognized
     *
     * @stable
     */
    var RoutesRecognized = function () {
        function RoutesRecognized(id, url, urlAfterRedirects, state) {
            this.id = id;
            this.url = url;
            this.urlAfterRedirects = urlAfterRedirects;
            this.state = state;
        }
        RoutesRecognized.prototype.toString = function () {
            return "RoutesRecognized(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "', state: " + this.state + ")";
        };
        return RoutesRecognized;
    }();
    exports.RoutesRecognized = RoutesRecognized;
    /**
     * The `Router` is responsible for mapping URLs to components.
     *
     * See {@link Routes} for more details and examples.
     *
     * @stable
     */
    var Router = function () {
        /**
         * Creates the router service.
         */
        function Router(rootComponentType, resolver, urlSerializer, outletMap, location, injector, loader, config) {
            this.rootComponentType = rootComponentType;
            this.resolver = resolver;
            this.urlSerializer = urlSerializer;
            this.outletMap = outletMap;
            this.location = location;
            this.injector = injector;
            this.navigationId = 0;
            /**
             * Indicates if at least one navigation happened.
             *
             * @experimental
             */
            this.navigated = false;
            this.resetConfig(config);
            this.routerEvents = new Subject_1.Subject();
            this.currentUrlTree = url_tree_1.createEmptyUrlTree();
            this.configLoader = new router_config_loader_1.RouterConfigLoader(loader);
            this.currentRouterState = router_state_1.createEmptyState(this.currentUrlTree, this.rootComponentType);
        }
        /**
         * Sets up the location change listener and performs the inital navigation
         */
        Router.prototype.initialNavigation = function () {
            this.setUpLocationChangeListener();
            this.navigateByUrl(this.location.path(true));
        };
        Object.defineProperty(Router.prototype, "routerState", {
            /**
             * Returns the current route state.
             */
            get: function () {
                return this.currentRouterState;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Router.prototype, "url", {
            /**
             * Returns the current url.
             */
            get: function () {
                return this.serializeUrl(this.currentUrlTree);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Router.prototype, "events", {
            /**
             * Returns an observable of route events
             */
            get: function () {
                return this.routerEvents;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Resets the configuration used for navigation and generating links.
         *
         * ### Usage
         *
         * ```
         * router.resetConfig([
         *  { path: 'team/:id', component: TeamCmp, children: [
         *    { path: 'simple', component: SimpleCmp },
         *    { path: 'user/:name', component: UserCmp }
         *  ] }
         * ]);
         * ```
         */
        Router.prototype.resetConfig = function (config) {
            config_1.validateConfig(config);
            this.config = config;
        };
        Router.prototype.ngOnDestroy = function () {
            this.dispose();
        };
        /**
         * Disposes of the router.
         */
        Router.prototype.dispose = function () {
            this.locationSubscription.unsubscribe();
        };
        /**
         * Applies an array of commands to the current url tree and creates
         * a new url tree.
         *
         * When given an activate route, applies the given commands starting from the route.
         * When not given a route, applies the given command starting from the root.
         *
         * ### Usage
         *
         * ```
         * // create /team/33/user/11
         * router.createUrlTree(['/team', 33, 'user', 11]);
         *
         * // create /team/33;expand=true/user/11
         * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);
         *
         * // you can collapse static segments like this (this works only with the first passed-in value):
         * router.createUrlTree(['/team/33/user', userId]);
         *
         * If the first segment can contain slashes, and you do not want the router to split it, you
         * can do the following:
         *
         * router.createUrlTree([{segmentPath: '/one/two'}]);
         *
         * // create /team/33/(user/11//aux:chat)
         * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);
         *
         * // remove the right secondary node
         * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);
         *
         * // assuming the current url is `/team/33/user/11` and the route points to `user/11`
         *
         * // navigate to /team/33/user/11/details
         * router.createUrlTree(['details'], {relativeTo: route});
         *
         * // navigate to /team/33/user/22
         * router.createUrlTree(['../22'], {relativeTo: route});
         *
         * // navigate to /team/44/user/22
         * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});
         * ```
         */
        Router.prototype.createUrlTree = function (commands, _a) {
            var _b = _a === void 0 ? {} : _a,
                relativeTo = _b.relativeTo,
                queryParams = _b.queryParams,
                fragment = _b.fragment,
                preserveQueryParams = _b.preserveQueryParams,
                preserveFragment = _b.preserveFragment;
            var a = relativeTo ? relativeTo : this.routerState.root;
            var q = preserveQueryParams ? this.currentUrlTree.queryParams : queryParams;
            var f = preserveFragment ? this.currentUrlTree.fragment : fragment;
            return create_url_tree_1.createUrlTree(a, this.currentUrlTree, commands, q, f);
        };
        /**
         * Navigate based on the provided url. This navigation is always absolute.
         *
         * Returns a promise that:
         * - is resolved with 'true' when navigation succeeds
         * - is resolved with 'false' when navigation fails
         * - is rejected when an error happens
         *
         * ### Usage
         *
         * ```
         * router.navigateByUrl("/team/33/user/11");
         *
         * // Navigate without updating the URL
         * router.navigateByUrl("/team/33/user/11", { skipLocationChange: true });
         * ```
         *
         * In opposite to `navigate`, `navigateByUrl` takes a whole URL
         * and does not apply any delta to the current one.
         */
        Router.prototype.navigateByUrl = function (url, extras) {
            if (extras === void 0) {
                extras = { skipLocationChange: false };
            }
            if (url instanceof url_tree_1.UrlTree) {
                return this.scheduleNavigation(url, extras);
            } else {
                var urlTree = this.urlSerializer.parse(url);
                return this.scheduleNavigation(urlTree, extras);
            }
        };
        /**
         * Navigate based on the provided array of commands and a starting point.
         * If no starting route is provided, the navigation is absolute.
         *
         * Returns a promise that:
         * - is resolved with 'true' when navigation succeeds
         * - is resolved with 'false' when navigation fails
         * - is rejected when an error happens
         *
         * ### Usage
         *
         * ```
         * router.navigate(['team', 33, 'team', '11], {relativeTo: route});
         *
         * // Navigate without updating the URL
         * router.navigate(['team', 33, 'team', '11], {relativeTo: route, skipLocationChange: true });
         * ```
         *
         * In opposite to `navigateByUrl`, `navigate` always takes a delta
         * that is applied to the current URL.
         */
        Router.prototype.navigate = function (commands, extras) {
            if (extras === void 0) {
                extras = { skipLocationChange: false };
            }
            return this.scheduleNavigation(this.createUrlTree(commands, extras), extras);
        };
        /**
         * Serializes a {@link UrlTree} into a string.
         */
        Router.prototype.serializeUrl = function (url) {
            return this.urlSerializer.serialize(url);
        };
        /**
         * Parse a string into a {@link UrlTree}.
         */
        Router.prototype.parseUrl = function (url) {
            return this.urlSerializer.parse(url);
        };
        /**
         * Returns if the url is activated or not.
         */
        Router.prototype.isActive = function (url, exact) {
            if (url instanceof url_tree_1.UrlTree) {
                return url_tree_1.containsTree(this.currentUrlTree, url, exact);
            } else {
                var urlTree = this.urlSerializer.parse(url);
                return url_tree_1.containsTree(this.currentUrlTree, urlTree, exact);
            }
        };
        Router.prototype.scheduleNavigation = function (url, extras) {
            var _this = this;
            var id = ++this.navigationId;
            this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));
            return Promise.resolve().then(function (_) {
                return _this.runNavigate(url, extras.skipLocationChange, id);
            });
        };
        Router.prototype.setUpLocationChangeListener = function () {
            var _this = this;
            // Zone.current.wrap is needed because of the issue with RxJS scheduler,
            // which does not work properly with zone.js in IE and Safari
            this.locationSubscription = this.location.subscribe(Zone.current.wrap(function (change) {
                var tree = _this.urlSerializer.parse(change['url']);
                // we fire multiple events for a single URL change
                // we should navigate only once
                return _this.currentUrlTree.toString() !== tree.toString() ? _this.scheduleNavigation(tree, change['pop']) : null;
            }));
        };
        Router.prototype.runNavigate = function (url, preventPushState, id) {
            var _this = this;
            if (id !== this.navigationId) {
                this.location.go(this.urlSerializer.serialize(this.currentUrlTree));
                this.routerEvents.next(new NavigationCancel(id, this.serializeUrl(url)));
                return Promise.resolve(false);
            }
            return new Promise(function (resolvePromise, rejectPromise) {
                var state;
                var navigationIsSuccessful;
                var preActivation;
                var appliedUrl;
                var storedState = _this.currentRouterState;
                var storedUrl = _this.currentUrlTree;
                apply_redirects_1.applyRedirects(_this.injector, _this.configLoader, url, _this.config).mergeMap(function (u) {
                    appliedUrl = u;
                    return recognize_1.recognize(_this.rootComponentType, _this.config, appliedUrl, _this.serializeUrl(appliedUrl));
                }).mergeMap(function (newRouterStateSnapshot) {
                    _this.routerEvents.next(new RoutesRecognized(id, _this.serializeUrl(url), _this.serializeUrl(appliedUrl), newRouterStateSnapshot));
                    return resolve_1.resolve(_this.resolver, newRouterStateSnapshot);
                }).map(function (routerStateSnapshot) {
                    return create_router_state_1.createRouterState(routerStateSnapshot, _this.currentRouterState);
                }).map(function (newState) {
                    state = newState;
                    preActivation = new PreActivation(state.snapshot, _this.currentRouterState.snapshot, _this.injector);
                    preActivation.traverse(_this.outletMap);
                }).mergeMap(function (_) {
                    return preActivation.checkGuards();
                }).mergeMap(function (shouldActivate) {
                    if (shouldActivate) {
                        return preActivation.resolveData().map(function () {
                            return shouldActivate;
                        });
                    } else {
                        return of_1.of(shouldActivate);
                    }
                }).forEach(function (shouldActivate) {
                    if (!shouldActivate || id !== _this.navigationId) {
                        _this.routerEvents.next(new NavigationCancel(id, _this.serializeUrl(url)));
                        navigationIsSuccessful = false;
                        return;
                    }
                    _this.currentUrlTree = appliedUrl;
                    _this.currentRouterState = state;
                    new ActivateRoutes(state, storedState).activate(_this.outletMap);
                    if (!preventPushState) {
                        var path = _this.urlSerializer.serialize(appliedUrl);
                        if (_this.location.isCurrentPathEqualTo(path)) {
                            _this.location.replaceState(path);
                        } else {
                            _this.location.go(path);
                        }
                    }
                    navigationIsSuccessful = true;
                }).then(function () {
                    _this.navigated = true;
                    _this.routerEvents.next(new NavigationEnd(id, _this.serializeUrl(url), _this.serializeUrl(appliedUrl)));
                    resolvePromise(navigationIsSuccessful);
                }, function (e) {
                    _this.currentRouterState = storedState;
                    _this.currentUrlTree = storedUrl;
                    _this.routerEvents.next(new NavigationError(id, _this.serializeUrl(url), e));
                    rejectPromise(e);
                });
            });
        };
        return Router;
    }();
    exports.Router = Router;
    var CanActivate = function () {
        function CanActivate(path) {
            this.path = path;
        }
        Object.defineProperty(CanActivate.prototype, "route", {
            get: function () {
                return this.path[this.path.length - 1];
            },
            enumerable: true,
            configurable: true
        });
        return CanActivate;
    }();
    var CanDeactivate = function () {
        function CanDeactivate(component, route) {
            this.component = component;
            this.route = route;
        }
        return CanDeactivate;
    }();
    var PreActivation = function () {
        function PreActivation(future, curr, injector) {
            this.future = future;
            this.curr = curr;
            this.injector = injector;
            this.checks = [];
        }
        PreActivation.prototype.traverse = function (parentOutletMap) {
            var futureRoot = this.future._root;
            var currRoot = this.curr ? this.curr._root : null;
            this.traverseChildRoutes(futureRoot, currRoot, parentOutletMap, [futureRoot.value]);
        };
        PreActivation.prototype.checkGuards = function () {
            var _this = this;
            if (this.checks.length === 0) return of_1.of(true);
            return from_1.from(this.checks).map(function (s) {
                if (s instanceof CanActivate) {
                    return collection_1.andObservables(from_1.from([_this.runCanActivate(s.route), _this.runCanActivateChild(s.path)]));
                } else if (s instanceof CanDeactivate) {
                    // workaround https://github.com/Microsoft/TypeScript/issues/7271
                    var s2 = s;
                    return _this.runCanDeactivate(s2.component, s2.route);
                } else {
                    throw new Error('Cannot be reached');
                }
            }).mergeAll().every(function (result) {
                return result === true;
            });
        };
        PreActivation.prototype.resolveData = function () {
            var _this = this;
            if (this.checks.length === 0) return of_1.of(null);
            return from_1.from(this.checks).mergeMap(function (s) {
                if (s instanceof CanActivate) {
                    return _this.runResolve(s.route);
                } else {
                    return of_1.of(null);
                }
            }).reduce(function (_, __) {
                return _;
            });
        };
        PreActivation.prototype.traverseChildRoutes = function (futureNode, currNode, outletMap, futurePath) {
            var _this = this;
            var prevChildren = nodeChildrenAsMap(currNode);
            futureNode.children.forEach(function (c) {
                _this.traverseRoutes(c, prevChildren[c.value.outlet], outletMap, futurePath.concat([c.value]));
                delete prevChildren[c.value.outlet];
            });
            collection_1.forEach(prevChildren, function (v, k) {
                return _this.deactivateOutletAndItChildren(v, outletMap._outlets[k]);
            });
        };
        PreActivation.prototype.traverseRoutes = function (futureNode, currNode, parentOutletMap, futurePath) {
            var future = futureNode.value;
            var curr = currNode ? currNode.value : null;
            var outlet = parentOutletMap ? parentOutletMap._outlets[futureNode.value.outlet] : null;
            // reusing the node
            if (curr && future._routeConfig === curr._routeConfig) {
                if (!collection_1.shallowEqual(future.params, curr.params)) {
                    this.checks.push(new CanDeactivate(outlet.component, curr), new CanActivate(futurePath));
                }
                // If we have a component, we need to go through an outlet.
                if (future.component) {
                    this.traverseChildRoutes(futureNode, currNode, outlet ? outlet.outletMap : null, futurePath);
                } else {
                    this.traverseChildRoutes(futureNode, currNode, parentOutletMap, futurePath);
                }
            } else {
                if (curr) {
                    // if we had a normal route, we need to deactivate only that outlet.
                    if (curr.component) {
                        this.deactivateOutletAndItChildren(curr, outlet);
                    } else {
                        this.deactivateOutletMap(parentOutletMap);
                    }
                }
                this.checks.push(new CanActivate(futurePath));
                // If we have a component, we need to go through an outlet.
                if (future.component) {
                    this.traverseChildRoutes(futureNode, null, outlet ? outlet.outletMap : null, futurePath);
                } else {
                    this.traverseChildRoutes(futureNode, null, parentOutletMap, futurePath);
                }
            }
        };
        PreActivation.prototype.deactivateOutletAndItChildren = function (route, outlet) {
            if (outlet && outlet.isActivated) {
                this.deactivateOutletMap(outlet.outletMap);
                this.checks.push(new CanDeactivate(outlet.component, route));
            }
        };
        PreActivation.prototype.deactivateOutletMap = function (outletMap) {
            var _this = this;
            collection_1.forEach(outletMap._outlets, function (v) {
                if (v.isActivated) {
                    _this.deactivateOutletAndItChildren(v.activatedRoute.snapshot, v);
                }
            });
        };
        PreActivation.prototype.runCanActivate = function (future) {
            var _this = this;
            var canActivate = future._routeConfig ? future._routeConfig.canActivate : null;
            if (!canActivate || canActivate.length === 0) return of_1.of(true);
            var obs = from_1.from(canActivate).map(function (c) {
                var guard = _this.getToken(c, future, _this.future);
                if (guard.canActivate) {
                    return collection_1.wrapIntoObservable(guard.canActivate(future, _this.future));
                } else {
                    return collection_1.wrapIntoObservable(guard(future, _this.future));
                }
            });
            return collection_1.andObservables(obs);
        };
        PreActivation.prototype.runCanActivateChild = function (path) {
            var _this = this;
            var future = path[path.length - 1];
            var canActivateChildGuards = path.slice(0, path.length - 1).reverse().map(function (p) {
                return _this.extractCanActivateChild(p);
            }).filter(function (_) {
                return _ !== null;
            });
            return collection_1.andObservables(from_1.from(canActivateChildGuards).map(function (d) {
                var obs = from_1.from(d.guards).map(function (c) {
                    var guard = _this.getToken(c, c.node, _this.future);
                    if (guard.canActivateChild) {
                        return collection_1.wrapIntoObservable(guard.canActivateChild(future, _this.future));
                    } else {
                        return collection_1.wrapIntoObservable(guard(future, _this.future));
                    }
                });
                return collection_1.andObservables(obs);
            }));
        };
        PreActivation.prototype.extractCanActivateChild = function (p) {
            var canActivateChild = p._routeConfig ? p._routeConfig.canActivateChild : null;
            if (!canActivateChild || canActivateChild.length === 0) return null;
            return { node: p, guards: canActivateChild };
        };
        PreActivation.prototype.runCanDeactivate = function (component, curr) {
            var _this = this;
            var canDeactivate = curr && curr._routeConfig ? curr._routeConfig.canDeactivate : null;
            if (!canDeactivate || canDeactivate.length === 0) return of_1.of(true);
            return from_1.from(canDeactivate).map(function (c) {
                var guard = _this.getToken(c, curr, _this.curr);
                if (guard.canDeactivate) {
                    return collection_1.wrapIntoObservable(guard.canDeactivate(component, curr, _this.curr));
                } else {
                    return collection_1.wrapIntoObservable(guard(component, curr, _this.curr));
                }
            }).mergeAll().every(function (result) {
                return result === true;
            });
        };
        PreActivation.prototype.runResolve = function (future) {
            var resolve = future._resolve;
            return this.resolveNode(resolve.current, future).map(function (resolvedData) {
                resolve.resolvedData = resolvedData;
                future.data = collection_1.merge(future.data, resolve.flattenedResolvedData);
                return null;
            });
        };
        PreActivation.prototype.resolveNode = function (resolve, future) {
            var _this = this;
            return collection_1.waitForMap(resolve, function (k, v) {
                var resolver = _this.getToken(v, future, _this.future);
                return resolver.resolve ? collection_1.wrapIntoObservable(resolver.resolve(future, _this.future)) : collection_1.wrapIntoObservable(resolver(future, _this.future));
            });
        };
        PreActivation.prototype.getToken = function (token, snapshot, state) {
            var config = closestLoadedConfig(state, snapshot);
            var injector = config ? config.injector : this.injector;
            return injector.get(token);
        };
        return PreActivation;
    }();
    var ActivateRoutes = function () {
        function ActivateRoutes(futureState, currState) {
            this.futureState = futureState;
            this.currState = currState;
        }
        ActivateRoutes.prototype.activate = function (parentOutletMap) {
            var futureRoot = this.futureState._root;
            var currRoot = this.currState ? this.currState._root : null;
            router_state_1.advanceActivatedRoute(this.futureState.root);
            this.activateChildRoutes(futureRoot, currRoot, parentOutletMap);
        };
        ActivateRoutes.prototype.activateChildRoutes = function (futureNode, currNode, outletMap) {
            var _this = this;
            var prevChildren = nodeChildrenAsMap(currNode);
            futureNode.children.forEach(function (c) {
                _this.activateRoutes(c, prevChildren[c.value.outlet], outletMap);
                delete prevChildren[c.value.outlet];
            });
            collection_1.forEach(prevChildren, function (v, k) {
                return _this.deactivateOutletAndItChildren(outletMap._outlets[k]);
            });
        };
        ActivateRoutes.prototype.activateRoutes = function (futureNode, currNode, parentOutletMap) {
            var future = futureNode.value;
            var curr = currNode ? currNode.value : null;
            // reusing the node
            if (future === curr) {
                // advance the route to push the parameters
                router_state_1.advanceActivatedRoute(future);
                // If we have a normal route, we need to go through an outlet.
                if (future.component) {
                    var outlet = getOutlet(parentOutletMap, futureNode.value);
                    this.activateChildRoutes(futureNode, currNode, outlet.outletMap);
                } else {
                    this.activateChildRoutes(futureNode, currNode, parentOutletMap);
                }
            } else {
                if (curr) {
                    // if we had a normal route, we need to deactivate only that outlet.
                    if (curr.component) {
                        var outlet = getOutlet(parentOutletMap, futureNode.value);
                        this.deactivateOutletAndItChildren(outlet);
                    } else {
                        this.deactivateOutletMap(parentOutletMap);
                    }
                }
                // if we have a normal route, we need to advance the route
                // and place the component into the outlet. After that recurse.
                if (future.component) {
                    router_state_1.advanceActivatedRoute(future);
                    var outlet = getOutlet(parentOutletMap, futureNode.value);
                    var outletMap = new router_outlet_map_1.RouterOutletMap();
                    this.placeComponentIntoOutlet(outletMap, future, outlet);
                    this.activateChildRoutes(futureNode, null, outletMap);
                } else {
                    router_state_1.advanceActivatedRoute(future);
                    this.activateChildRoutes(futureNode, null, parentOutletMap);
                }
            }
        };
        ActivateRoutes.prototype.placeComponentIntoOutlet = function (outletMap, future, outlet) {
            var resolved = [{ provide: router_state_1.ActivatedRoute, useValue: future }, {
                provide: router_outlet_map_1.RouterOutletMap,
                useValue: outletMap
            }];
            var config = closestLoadedConfig(this.futureState.snapshot, future.snapshot);
            var loadedFactoryResolver = null;
            var loadedInjector = null;
            if (config) {
                loadedFactoryResolver = config.factoryResolver;
                loadedInjector = config.injector;
                resolved.push({ provide: core_1.ComponentFactoryResolver, useValue: loadedFactoryResolver });
            }
            ;
            outlet.activate(future, loadedFactoryResolver, loadedInjector, core_1.ReflectiveInjector.resolve(resolved), outletMap);
        };
        ActivateRoutes.prototype.deactivateOutletAndItChildren = function (outlet) {
            if (outlet && outlet.isActivated) {
                this.deactivateOutletMap(outlet.outletMap);
                outlet.deactivate();
            }
        };
        ActivateRoutes.prototype.deactivateOutletMap = function (outletMap) {
            var _this = this;
            collection_1.forEach(outletMap._outlets, function (v) {
                return _this.deactivateOutletAndItChildren(v);
            });
        };
        return ActivateRoutes;
    }();
    function closestLoadedConfig(state, snapshot) {
        var b = state.pathFromRoot(snapshot).filter(function (s) {
            var config = s._routeConfig;
            return config && config._loadedConfig && s !== snapshot;
        });
        return b.length > 0 ? b[b.length - 1]._routeConfig._loadedConfig : null;
    }
    function nodeChildrenAsMap(node) {
        return node ? node.children.reduce(function (m, c) {
            m[c.value.outlet] = c;
            return m;
        }, {}) : {};
    }
    function getOutlet(outletMap, route) {
        var outlet = outletMap._outlets[route.outlet];
        if (!outlet) {
            var componentName = route.component.name;
            if (route.outlet === shared_1.PRIMARY_OUTLET) {
                throw new Error("Cannot find primary outlet to load '" + componentName + "'");
            } else {
                throw new Error("Cannot find the outlet " + route.outlet + " to load '" + componentName + "'");
            }
        }
        return outlet;
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/router@3.0.0-rc.1/src/router_config_loader.js', ['@angular/core', 'rxjs/observable/fromPromise', './utils/collection'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var fromPromise_1 = $__require('rxjs/observable/fromPromise');
    var collection_1 = $__require('./utils/collection');
    /**
     * @deprecated use Routes
     */
    exports.ROUTER_CONFIG = new core_1.OpaqueToken('ROUTER_CONFIG');
    exports.ROUTES = new core_1.OpaqueToken('ROUTES');
    var LoadedRouterConfig = function () {
        function LoadedRouterConfig(routes, injector, factoryResolver) {
            this.routes = routes;
            this.injector = injector;
            this.factoryResolver = factoryResolver;
        }
        return LoadedRouterConfig;
    }();
    exports.LoadedRouterConfig = LoadedRouterConfig;
    var RouterConfigLoader = function () {
        function RouterConfigLoader(loader) {
            this.loader = loader;
        }
        RouterConfigLoader.prototype.load = function (parentInjector, path) {
            return fromPromise_1.fromPromise(this.loader.load(path).then(function (r) {
                var ref = r.create(parentInjector);
                return new LoadedRouterConfig(collection_1.flatten(ref.injector.get(exports.ROUTES)), ref.injector, ref.componentFactoryResolver);
            }));
        };
        return RouterConfigLoader;
    }();
    exports.RouterConfigLoader = RouterConfigLoader;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/router@3.0.0-rc.1/src/router_outlet_map.js", [], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";
  /**
   * @stable
   */

  var define,
      global = this || self,
      GLOBAL = global;
  var RouterOutletMap = function () {
    function RouterOutletMap() {
      /** @internal */
      this._outlets = {};
    }
    RouterOutletMap.prototype.registerOutlet = function (name, outlet) {
      this._outlets[name] = outlet;
    };
    RouterOutletMap.prototype.removeOutlet = function (name) {
      this._outlets[name] = undefined;
    };
    return RouterOutletMap;
  }();
  exports.RouterOutletMap = RouterOutletMap;
  

  return module.exports;
});
System.registerDynamic('npm:@angular/router@3.0.0-rc.1/src/common_router_providers.js', ['@angular/common', '@angular/core', './router', './router_config_loader', './router_outlet_map', './router_state', './url_tree', './utils/collection'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var common_1 = $__require('@angular/common');
    var core_1 = $__require('@angular/core');
    var router_1 = $__require('./router');
    var router_config_loader_1 = $__require('./router_config_loader');
    var router_outlet_map_1 = $__require('./router_outlet_map');
    var router_state_1 = $__require('./router_state');
    var url_tree_1 = $__require('./url_tree');
    var collection_1 = $__require('./utils/collection');
    exports.ROUTER_CONFIGURATION = new core_1.OpaqueToken('ROUTER_CONFIGURATION');
    function setupRouter(ref, resolver, urlSerializer, outletMap, location, injector, loader, config, opts) {
        if (opts === void 0) {
            opts = {};
        }
        if (ref.componentTypes.length == 0) {
            throw new Error('Bootstrap at least one component before injecting Router.');
        }
        var componentType = ref.componentTypes[0];
        var r = new router_1.Router(componentType, resolver, urlSerializer, outletMap, location, injector, loader, collection_1.flatten(config));
        if (opts.enableTracing) {
            r.events.subscribe(function (e) {
                console.group("Router Event: " + e.constructor.name);
                console.log(e.toString());
                console.log(e);
                console.groupEnd();
            });
        }
        return r;
    }
    exports.setupRouter = setupRouter;
    function rootRoute(router) {
        return router.routerState.root;
    }
    exports.rootRoute = rootRoute;
    function initialRouterNavigation(router) {
        return function () {
            router.initialNavigation();
        };
    }
    exports.initialRouterNavigation = initialRouterNavigation;
    /**
     * An array of {@link Provider}s. To use the router, you must add this to your application.
     *
     * ### Example
     *
     * ```
     * @Component({directives: [ROUTER_DIRECTIVES]})
     * class AppCmp {
     *   // ...
     * }
     *
     * const config = [
     *   {path: 'home', component: Home}
     * ];
     *
     * bootstrap(AppCmp, [provideRouter(config)]);
     * ```
     *
     * @deprecated use RouterModule instead
     */
    function provideRouter(routes, config) {
        if (config === void 0) {
            config = {};
        }
        return [provideRoutes(routes), { provide: exports.ROUTER_CONFIGURATION, useValue: config }, common_1.Location, { provide: common_1.LocationStrategy, useClass: common_1.PathLocationStrategy }, { provide: url_tree_1.UrlSerializer, useClass: url_tree_1.DefaultUrlSerializer }, {
            provide: router_1.Router,
            useFactory: setupRouter,
            deps: [core_1.ApplicationRef, core_1.ComponentResolver, url_tree_1.UrlSerializer, router_outlet_map_1.RouterOutletMap, common_1.Location, core_1.Injector, core_1.NgModuleFactoryLoader, router_config_loader_1.ROUTES, exports.ROUTER_CONFIGURATION]
        }, router_outlet_map_1.RouterOutletMap, { provide: router_state_1.ActivatedRoute, useFactory: rootRoute, deps: [router_1.Router] },
        // Trigger initial navigation
        provideRouterInitializer(), { provide: core_1.NgModuleFactoryLoader, useClass: core_1.SystemJsNgModuleLoader }];
    }
    exports.provideRouter = provideRouter;
    function provideRouterInitializer() {
        return {
            provide: core_1.APP_BOOTSTRAP_LISTENER,
            multi: true,
            useFactory: initialRouterNavigation,
            deps: [router_1.Router]
        };
    }
    exports.provideRouterInitializer = provideRouterInitializer;
    /**
     * Router configuration.
     *
     * ### Example
     *
     * ```
     * @NgModule({providers: [
     *   provideRoutes([{path: 'home', component: Home}])
     * ]})
     * class LazyLoadedModule {
     *   // ...
     * }
     * ```
     *
     * @deprecated
     */
    function provideRoutes(routes) {
        return [{ provide: core_1.ANALYZE_FOR_ENTRY_COMPONENTS, multi: true, useValue: routes }, { provide: router_config_loader_1.ROUTES, multi: true, useValue: routes }];
    }
    exports.provideRoutes = provideRoutes;
    /**
     * Router configuration.
     *
     * ### Example
     *
     * ```
     * @NgModule({providers: [
     *   provideRouterOptions({enableTracing: true})
     * ]})
     * class LazyLoadedModule {
     *   // ...
     * }
     * ```
     *
     * @deprecated
     */
    function provideRouterConfig(config) {
        return { provide: exports.ROUTER_CONFIGURATION, useValue: config };
    }
    exports.provideRouterConfig = provideRouterConfig;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/router@3.0.0-rc.1/src/router_providers.js', ['@angular/common', '@angular/platform-browser', './common_router_providers'], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var common_1 = $__require('@angular/common');
  var platform_browser_1 = $__require('@angular/platform-browser');
  var common_router_providers_1 = $__require('./common_router_providers');
  /**
   * A list of {@link Provider}s. To use the router, you must add this to your application.
   *
   * ### Example
   *
   * ```
   * @Component({directives: [ROUTER_DIRECTIVES]})
   * class AppCmp {
   *   // ...
   * }
   *
   * const router = [
   *   {path: 'home', component: Home}
   * ];
   *
   * bootstrap(AppCmp, [provideRouter(router, {enableTracing: true})]);
   * ```
   *
   * @experimental
   */
  function provideRouter(config, opts) {
    if (opts === void 0) {
      opts = {};
    }
    return [{ provide: common_1.PlatformLocation, useClass: platform_browser_1.BrowserPlatformLocation }].concat(common_router_providers_1.provideRouter(config, opts));
  }
  exports.provideRouter = provideRouter;
  

  return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/BehaviorSubject.js', ['./Subject', './util/throwError', './util/ObjectUnsubscribedError'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subject_1 = $__require('./Subject');
    var throwError_1 = $__require('./util/throwError');
    var ObjectUnsubscribedError_1 = $__require('./util/ObjectUnsubscribedError');
    /**
     * @class BehaviorSubject<T>
     */
    var BehaviorSubject = function (_super) {
        __extends(BehaviorSubject, _super);
        function BehaviorSubject(_value) {
            _super.call(this);
            this._value = _value;
        }
        BehaviorSubject.prototype.getValue = function () {
            if (this.hasErrored) {
                throwError_1.throwError(this.errorValue);
            } else if (this.isUnsubscribed) {
                throwError_1.throwError(new ObjectUnsubscribedError_1.ObjectUnsubscribedError());
            } else {
                return this._value;
            }
        };
        Object.defineProperty(BehaviorSubject.prototype, "value", {
            get: function () {
                return this.getValue();
            },
            enumerable: true,
            configurable: true
        });
        BehaviorSubject.prototype._subscribe = function (subscriber) {
            var subscription = _super.prototype._subscribe.call(this, subscriber);
            if (subscription && !subscription.isUnsubscribed) {
                subscriber.next(this._value);
            }
            return subscription;
        };
        BehaviorSubject.prototype._next = function (value) {
            _super.prototype._next.call(this, this._value = value);
        };
        BehaviorSubject.prototype._error = function (err) {
            this.hasErrored = true;
            _super.prototype._error.call(this, this.errorValue = err);
        };
        return BehaviorSubject;
    }(Subject_1.Subject);
    exports.BehaviorSubject = BehaviorSubject;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/router@3.0.0-rc.1/src/utils/tree.js", [], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var Tree = function () {
        function Tree(root) {
            this._root = root;
        }
        Object.defineProperty(Tree.prototype, "root", {
            get: function () {
                return this._root.value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @deprecated (use ActivatedRoute.parent instead)
         */
        Tree.prototype.parent = function (t) {
            var p = this.pathFromRoot(t);
            return p.length > 1 ? p[p.length - 2] : null;
        };
        /**
         * @deprecated (use ActivatedRoute.children instead)
         */
        Tree.prototype.children = function (t) {
            var n = findNode(t, this._root);
            return n ? n.children.map(function (t) {
                return t.value;
            }) : [];
        };
        /**
         * @deprecated (use ActivatedRoute.firstChild instead)
         */
        Tree.prototype.firstChild = function (t) {
            var n = findNode(t, this._root);
            return n && n.children.length > 0 ? n.children[0].value : null;
        };
        /**
         * @deprecated
         */
        Tree.prototype.siblings = function (t) {
            var p = findPath(t, this._root, []);
            if (p.length < 2) return [];
            var c = p[p.length - 2].children.map(function (c) {
                return c.value;
            });
            return c.filter(function (cc) {
                return cc !== t;
            });
        };
        /**
         * @deprecated (use ActivatedRoute.pathFromRoot instead)
         */
        Tree.prototype.pathFromRoot = function (t) {
            return findPath(t, this._root, []).map(function (s) {
                return s.value;
            });
        };
        return Tree;
    }();
    exports.Tree = Tree;
    function findNode(expected, c) {
        if (expected === c.value) return c;
        for (var _i = 0, _a = c.children; _i < _a.length; _i++) {
            var cc = _a[_i];
            var r = findNode(expected, cc);
            if (r) return r;
        }
        return null;
    }
    function findPath(expected, c, collected) {
        collected.push(c);
        if (expected === c.value) return collected;
        for (var _i = 0, _a = c.children; _i < _a.length; _i++) {
            var cc = _a[_i];
            var cloned = collected.slice(0);
            var r = findPath(expected, cc, cloned);
            if (r.length > 0) return r;
        }
        return [];
    }
    var TreeNode = function () {
        function TreeNode(value, children) {
            this.value = value;
            this.children = children;
        }
        TreeNode.prototype.toString = function () {
            return "TreeNode(" + this.value + ")";
        };
        return TreeNode;
    }();
    exports.TreeNode = TreeNode;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/router@3.0.0-rc.1/src/router_state.js', ['rxjs/BehaviorSubject', './shared', './url_tree', './utils/collection', './utils/tree'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var BehaviorSubject_1 = $__require('rxjs/BehaviorSubject');
    var shared_1 = $__require('./shared');
    var url_tree_1 = $__require('./url_tree');
    var collection_1 = $__require('./utils/collection');
    var tree_1 = $__require('./utils/tree');
    /**
     * The state of the router.
     *
     * ### Usage
     *
     * ```
     * class MyComponent {
     *   constructor(router: Router) {
     *     const state = router.routerState;
     *     const id: Observable<string> = state.firstChild(state.root).params.map(p => p.id);
     *     const isDebug: Observable<string> = state.queryParams.map(q => q.debug);
     *   }
     * }
     * ```
     *
     * @stable
     */
    var RouterState = function (_super) {
        __extends(RouterState, _super);
        /**
         * @internal
         */
        function RouterState(root, snapshot) {
            _super.call(this, root);
            this.snapshot = snapshot;
            setRouterStateSnapshot(this, root);
        }
        Object.defineProperty(RouterState.prototype, "queryParams", {
            /**
              * @deprecated (Use root.queryParams)
              */
            get: function () {
                return this.root.queryParams;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouterState.prototype, "fragment", {
            /**
             * @deprecated (Use root.fragment)
             */
            get: function () {
                return this.root.fragment;
            },
            enumerable: true,
            configurable: true
        });
        RouterState.prototype.toString = function () {
            return this.snapshot.toString();
        };
        return RouterState;
    }(tree_1.Tree);
    exports.RouterState = RouterState;
    function createEmptyState(urlTree, rootComponent) {
        var snapshot = createEmptyStateSnapshot(urlTree, rootComponent);
        var emptyUrl = new BehaviorSubject_1.BehaviorSubject([new url_tree_1.UrlSegment('', {})]);
        var emptyParams = new BehaviorSubject_1.BehaviorSubject({});
        var emptyData = new BehaviorSubject_1.BehaviorSubject({});
        var emptyQueryParams = new BehaviorSubject_1.BehaviorSubject({});
        var fragment = new BehaviorSubject_1.BehaviorSubject('');
        var activated = new ActivatedRoute(emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, shared_1.PRIMARY_OUTLET, rootComponent, snapshot.root);
        activated.snapshot = snapshot.root;
        return new RouterState(new tree_1.TreeNode(activated, []), snapshot);
    }
    exports.createEmptyState = createEmptyState;
    function createEmptyStateSnapshot(urlTree, rootComponent) {
        var emptyParams = {};
        var emptyData = {};
        var emptyQueryParams = {};
        var fragment = '';
        var activated = new ActivatedRouteSnapshot([], emptyParams, emptyQueryParams, fragment, emptyData, shared_1.PRIMARY_OUTLET, rootComponent, null, urlTree.root, -1, InheritedResolve.empty);
        return new RouterStateSnapshot('', new tree_1.TreeNode(activated, []));
    }
    /**
     * Contains the information about a component loaded in an outlet. The information is provided
     * through the params, urlSegments, and data observables.
     *
     * ### Usage
     *
     * ```
     * class MyComponent {
     *   constructor(route: ActivatedRoute) {
     *     const id: Observable<string> = route.params.map(p => p.id);
     *     const data = route.data.map(d => d.user); //includes `data` and `resolve`
     *   }
     * }
     * ```
     *
     * @stable
     */
    var ActivatedRoute = function () {
        /**
         * @internal
         */
        function ActivatedRoute(url, params, queryParams, fragment, data, outlet, component, futureSnapshot) {
            this.url = url;
            this.params = params;
            this.queryParams = queryParams;
            this.fragment = fragment;
            this.data = data;
            this.outlet = outlet;
            this.component = component;
            this._futureSnapshot = futureSnapshot;
        }
        Object.defineProperty(ActivatedRoute.prototype, "routeConfig", {
            get: function () {
                return this._futureSnapshot.routeConfig;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActivatedRoute.prototype, "root", {
            get: function () {
                return this._routerState.root;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActivatedRoute.prototype, "parent", {
            get: function () {
                return this._routerState.parent(this);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActivatedRoute.prototype, "firstChild", {
            get: function () {
                return this._routerState.firstChild(this);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActivatedRoute.prototype, "children", {
            get: function () {
                return this._routerState.children(this);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActivatedRoute.prototype, "pathFromRoot", {
            get: function () {
                return this._routerState.pathFromRoot(this);
            },
            enumerable: true,
            configurable: true
        });
        ActivatedRoute.prototype.toString = function () {
            return this.snapshot ? this.snapshot.toString() : "Future(" + this._futureSnapshot + ")";
        };
        return ActivatedRoute;
    }();
    exports.ActivatedRoute = ActivatedRoute;
    /**
     * @internal
     */
    var InheritedResolve = function () {
        function InheritedResolve(parent, current) {
            this.parent = parent;
            this.current = current;
            /**
             * @internal
             */
            this.resolvedData = {};
        }
        Object.defineProperty(InheritedResolve.prototype, "flattenedResolvedData", {
            /**
             * @internal
             */
            get: function () {
                return this.parent ? collection_1.merge(this.parent.flattenedResolvedData, this.resolvedData) : this.resolvedData;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InheritedResolve, "empty", {
            get: function () {
                return new InheritedResolve(null, {});
            },
            enumerable: true,
            configurable: true
        });
        return InheritedResolve;
    }();
    exports.InheritedResolve = InheritedResolve;
    /**
     * Contains the information about a component loaded in an outlet at a particular moment in time.
     *
     * ### Usage
     *
     * ```
     * class MyComponent {
     *   constructor(route: ActivatedRoute) {
     *     const id: string = route.snapshot.params.id;
     *     const data = route.snapshot.data;
     *   }
     * }
     * ```
     *
     * @stable
     */
    var ActivatedRouteSnapshot = function () {
        /**
         * @internal
         */
        function ActivatedRouteSnapshot(url, params, queryParams, fragment, data, outlet, component, routeConfig, urlSegment, lastPathIndex, resolve) {
            this.url = url;
            this.params = params;
            this.queryParams = queryParams;
            this.fragment = fragment;
            this.data = data;
            this.outlet = outlet;
            this.component = component;
            this._routeConfig = routeConfig;
            this._urlSegment = urlSegment;
            this._lastPathIndex = lastPathIndex;
            this._resolve = resolve;
        }
        Object.defineProperty(ActivatedRouteSnapshot.prototype, "routeConfig", {
            get: function () {
                return this._routeConfig;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActivatedRouteSnapshot.prototype, "root", {
            get: function () {
                return this._routerState.root;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActivatedRouteSnapshot.prototype, "parent", {
            get: function () {
                return this._routerState.parent(this);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActivatedRouteSnapshot.prototype, "firstChild", {
            get: function () {
                return this._routerState.firstChild(this);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActivatedRouteSnapshot.prototype, "children", {
            get: function () {
                return this._routerState.children(this);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActivatedRouteSnapshot.prototype, "pathFromRoot", {
            get: function () {
                return this._routerState.pathFromRoot(this);
            },
            enumerable: true,
            configurable: true
        });
        ActivatedRouteSnapshot.prototype.toString = function () {
            var url = this.url.map(function (s) {
                return s.toString();
            }).join('/');
            var matched = this._routeConfig ? this._routeConfig.path : '';
            return "Route(url:'" + url + "', path:'" + matched + "')";
        };
        return ActivatedRouteSnapshot;
    }();
    exports.ActivatedRouteSnapshot = ActivatedRouteSnapshot;
    /**
     * The state of the router at a particular moment in time.
     *
     * ### Usage
     *
     * ```
     * class MyComponent {
     *   constructor(router: Router) {
     *     const snapshot = router.routerState.snapshot;
     *   }
     * }
     * ```
     *
     * @stable
     */
    var RouterStateSnapshot = function (_super) {
        __extends(RouterStateSnapshot, _super);
        /**
         * @internal
         */
        function RouterStateSnapshot(url, root) {
            _super.call(this, root);
            this.url = url;
            setRouterStateSnapshot(this, root);
        }
        Object.defineProperty(RouterStateSnapshot.prototype, "queryParams", {
            /**
             * @deprecated (Use root.queryParams)
             */
            get: function () {
                return this.root.queryParams;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouterStateSnapshot.prototype, "fragment", {
            /**
             * @deprecated (Use root.fragment)
             */
            get: function () {
                return this.root.fragment;
            },
            enumerable: true,
            configurable: true
        });
        RouterStateSnapshot.prototype.toString = function () {
            return serializeNode(this._root);
        };
        return RouterStateSnapshot;
    }(tree_1.Tree);
    exports.RouterStateSnapshot = RouterStateSnapshot;
    function setRouterStateSnapshot(state, node) {
        node.value._routerState = state;
        node.children.forEach(function (c) {
            return setRouterStateSnapshot(state, c);
        });
    }
    function serializeNode(node) {
        var c = node.children.length > 0 ? " { " + node.children.map(serializeNode).join(", ") + " } " : '';
        return "" + node.value + c;
    }
    /**
     * The expectation is that the activate route is created with the right set of parameters.
     * So we push new values into the observables only when they are not the initial values.
     * And we detect that by checking if the snapshot field is set.
     */
    function advanceActivatedRoute(route) {
        if (route.snapshot) {
            if (!collection_1.shallowEqual(route.snapshot.queryParams, route._futureSnapshot.queryParams)) {
                route.queryParams.next(route._futureSnapshot.queryParams);
            }
            if (route.snapshot.fragment !== route._futureSnapshot.fragment) {
                route.fragment.next(route._futureSnapshot.fragment);
            }
            if (!collection_1.shallowEqual(route.snapshot.params, route._futureSnapshot.params)) {
                route.params.next(route._futureSnapshot.params);
                route.data.next(route._futureSnapshot.data);
            }
            if (!collection_1.shallowEqualArrays(route.snapshot.url, route._futureSnapshot.url)) {
                route.url.next(route._futureSnapshot.url);
            }
            route.snapshot = route._futureSnapshot;
        } else {
            route.snapshot = route._futureSnapshot;
            // this is for resolved data
            route.data.next(route._futureSnapshot.data);
        }
    }
    exports.advanceActivatedRoute = advanceActivatedRoute;
    

    return module.exports;
});
System.registerDynamic("npm:rxjs@5.0.0-beta.6/OuterSubscriber.js", ["./Subscriber"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("./Subscriber");
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var OuterSubscriber = function (_super) {
        __extends(OuterSubscriber, _super);
        function OuterSubscriber() {
            _super.apply(this, arguments);
        }
        OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.destination.next(innerValue);
        };
        OuterSubscriber.prototype.notifyError = function (error, innerSub) {
            this.destination.error(error);
        };
        OuterSubscriber.prototype.notifyComplete = function (innerSub) {
            this.destination.complete();
        };
        return OuterSubscriber;
    }(Subscriber_1.Subscriber);
    exports.OuterSubscriber = OuterSubscriber;
    

    return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/util/isPromise.js', [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function isPromise(value) {
        return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
    }
    exports.isPromise = isPromise;
    

    return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/symbol/iterator.js', ['../util/root'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var root_1 = $__require('../util/root');
    var Symbol = root_1.root.Symbol;
    if (typeof Symbol === 'function') {
        if (Symbol.iterator) {
            exports.$$iterator = Symbol.iterator;
        } else if (typeof Symbol.for === 'function') {
            exports.$$iterator = Symbol.for('iterator');
        }
    } else {
        if (root_1.root.Set && typeof new root_1.root.Set()['@@iterator'] === 'function') {
            // Bug for mozilla version
            exports.$$iterator = '@@iterator';
        } else if (root_1.root.Map) {
            // es6-shim specific logic
            var keys = Object.getOwnPropertyNames(root_1.root.Map.prototype);
            for (var i = 0; i < keys.length; ++i) {
                var key = keys[i];
                if (key !== 'entries' && key !== 'size' && root_1.root.Map.prototype[key] === root_1.root.Map.prototype['entries']) {
                    exports.$$iterator = key;
                    break;
                }
            }
        } else {
            exports.$$iterator = '@@iterator';
        }
    }
    

    return module.exports;
});
System.registerDynamic("npm:rxjs@5.0.0-beta.6/InnerSubscriber.js", ["./Subscriber"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("./Subscriber");
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var InnerSubscriber = function (_super) {
        __extends(InnerSubscriber, _super);
        function InnerSubscriber(parent, outerValue, outerIndex) {
            _super.call(this);
            this.parent = parent;
            this.outerValue = outerValue;
            this.outerIndex = outerIndex;
            this.index = 0;
        }
        InnerSubscriber.prototype._next = function (value) {
            this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
        };
        InnerSubscriber.prototype._error = function (error) {
            this.parent.notifyError(error, this);
            this.unsubscribe();
        };
        InnerSubscriber.prototype._complete = function () {
            this.parent.notifyComplete(this);
            this.unsubscribe();
        };
        return InnerSubscriber;
    }(Subscriber_1.Subscriber);
    exports.InnerSubscriber = InnerSubscriber;
    

    return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/util/subscribeToResult.js', ['./root', './isArray', './isPromise', '../Observable', '../symbol/iterator', '../symbol/observable', '../InnerSubscriber'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var root_1 = $__require('./root');
    var isArray_1 = $__require('./isArray');
    var isPromise_1 = $__require('./isPromise');
    var Observable_1 = $__require('../Observable');
    var iterator_1 = $__require('../symbol/iterator');
    var observable_1 = $__require('../symbol/observable');
    var InnerSubscriber_1 = $__require('../InnerSubscriber');
    function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
        var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);
        if (destination.isUnsubscribed) {
            return;
        }
        if (result instanceof Observable_1.Observable) {
            if (result._isScalar) {
                destination.next(result.value);
                destination.complete();
                return;
            } else {
                return result.subscribe(destination);
            }
        }
        if (isArray_1.isArray(result)) {
            for (var i = 0, len = result.length; i < len && !destination.isUnsubscribed; i++) {
                destination.next(result[i]);
            }
            if (!destination.isUnsubscribed) {
                destination.complete();
            }
        } else if (isPromise_1.isPromise(result)) {
            result.then(function (value) {
                if (!destination.isUnsubscribed) {
                    destination.next(value);
                    destination.complete();
                }
            }, function (err) {
                return destination.error(err);
            }).then(null, function (err) {
                // Escaping the Promise trap: globally throw unhandled errors
                root_1.root.setTimeout(function () {
                    throw err;
                });
            });
            return destination;
        } else if (typeof result[iterator_1.$$iterator] === 'function') {
            for (var _i = 0, _a = result; _i < _a.length; _i++) {
                var item = _a[_i];
                destination.next(item);
                if (destination.isUnsubscribed) {
                    break;
                }
            }
            if (!destination.isUnsubscribed) {
                destination.complete();
            }
        } else if (typeof result[observable_1.$$observable] === 'function') {
            var obs = result[observable_1.$$observable]();
            if (typeof obs.subscribe !== 'function') {
                destination.error('invalid observable');
            } else {
                return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));
            }
        } else {
            destination.error(new TypeError('unknown type returned'));
        }
    }
    exports.subscribeToResult = subscribeToResult;
    

    return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/operator/mergeAll.js', ['../OuterSubscriber', '../util/subscribeToResult'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var OuterSubscriber_1 = $__require('../OuterSubscriber');
    var subscribeToResult_1 = $__require('../util/subscribeToResult');
    /**
     * Converts a higher-order Observable into a first-order Observable which
     * concurrently delivers all values that are emitted on the inner Observables.
     *
     * <span class="informal">Flattens an Observable-of-Observables.</span>
     *
     * <img src="./img/mergeAll.png" width="100%">
     *
     * `mergeAll` subscribes to an Observable that emits Observables, also known as
     * a higher-order Observable. Each time it observes one of these emitted inner
     * Observables, it subscribes to that and delivers all the values from the
     * inner Observable on the output Observable. The output Observable only
     * completes once all inner Observables have completed. Any error delivered by
     * a inner Observable will be immediately emitted on the output Observable.
     *
     * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));
     * var firstOrder = higherOrder.mergeAll();
     * firstOrder.subscribe(x => console.log(x));
     *
     * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));
     * var firstOrder = higherOrder.mergeAll(2);
     * firstOrder.subscribe(x => console.log(x));
     *
     * @see {@link combineAll}
     * @see {@link concatAll}
     * @see {@link exhaust}
     * @see {@link merge}
     * @see {@link mergeMap}
     * @see {@link mergeMapTo}
     * @see {@link mergeScan}
     * @see {@link switch}
     * @see {@link zipAll}
     *
     * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner
     * Observables being subscribed to concurrently.
     * @return {Observable} An Observable that emits values coming from all the
     * inner Observables emitted by the source Observable.
     * @method mergeAll
     * @owner Observable
     */
    function mergeAll(concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        return this.lift(new MergeAllOperator(concurrent));
    }
    exports.mergeAll = mergeAll;
    var MergeAllOperator = function () {
        function MergeAllOperator(concurrent) {
            this.concurrent = concurrent;
        }
        MergeAllOperator.prototype.call = function (observer, source) {
            return source._subscribe(new MergeAllSubscriber(observer, this.concurrent));
        };
        return MergeAllOperator;
    }();
    exports.MergeAllOperator = MergeAllOperator;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var MergeAllSubscriber = function (_super) {
        __extends(MergeAllSubscriber, _super);
        function MergeAllSubscriber(destination, concurrent) {
            _super.call(this, destination);
            this.concurrent = concurrent;
            this.hasCompleted = false;
            this.buffer = [];
            this.active = 0;
        }
        MergeAllSubscriber.prototype._next = function (observable) {
            if (this.active < this.concurrent) {
                this.active++;
                this.add(subscribeToResult_1.subscribeToResult(this, observable));
            } else {
                this.buffer.push(observable);
            }
        };
        MergeAllSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (this.active === 0 && this.buffer.length === 0) {
                this.destination.complete();
            }
        };
        MergeAllSubscriber.prototype.notifyComplete = function (innerSub) {
            var buffer = this.buffer;
            this.remove(innerSub);
            this.active--;
            if (buffer.length > 0) {
                this._next(buffer.shift());
            } else if (this.active === 0 && this.hasCompleted) {
                this.destination.complete();
            }
        };
        return MergeAllSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    exports.MergeAllSubscriber = MergeAllSubscriber;
    

    return module.exports;
});
System.registerDynamic("npm:rxjs@5.0.0-beta.6/operator/concatAll.js", ["./mergeAll"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var mergeAll_1 = $__require("./mergeAll");
  /**
   * Converts a higher-order Observable into a first-order Observable by
   * concatenating the inner Observables in order.
   *
   * <span class="informal">Flattens an Observable-of-Observables by putting one
   * inner Observable after the other.</span>
   *
   * <img src="./img/concatAll.png" width="100%">
   *
   * Joins every Observable emitted by the source (a higher-order Observable), in
   * a serial fashion. It subscribes to each inner Observable only after the
   * previous inner Observable has completed, and merges all of their values into
   * the returned observable.
   *
   * __Warning:__ If the source Observable emits Observables quickly and
   * endlessly, and the inner Observables it emits generally complete slower than
   * the source emits, you can run into memory issues as the incoming Observables
   * collect in an unbounded buffer.
   *
   * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set
   * to `1`.
   *
   * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
   * var clicks = Rx.Observable.fromEvent(document, 'click');
   * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));
   * var firstOrder = higherOrder.concatAll();
   * firstOrder.subscribe(x => console.log(x));
   *
   * @see {@link combineAll}
   * @see {@link concat}
   * @see {@link concatMap}
   * @see {@link concatMapTo}
   * @see {@link exhaust}
   * @see {@link mergeAll}
   * @see {@link switch}
   * @see {@link zipAll}
   *
   * @return {Observable} An Observable emitting values from all the inner
   * Observables concatenated.
   * @method concatAll
   * @owner Observable
   */
  function concatAll() {
    return this.lift(new mergeAll_1.MergeAllOperator(1));
  }
  exports.concatAll = concatAll;
  

  return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/add/operator/concatAll.js', ['../../Observable', '../../operator/concatAll'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('../../Observable');
  var concatAll_1 = $__require('../../operator/concatAll');
  Observable_1.Observable.prototype.concatAll = concatAll_1.concatAll;
  

  return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/util/EmptyError.js', [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * An error thrown when an Observable or a sequence was queried but has no
     * elements.
     *
     * @see {@link first}
     * @see {@link last}
     * @see {@link single}
     *
     * @class EmptyError
     */
    var EmptyError = function (_super) {
        __extends(EmptyError, _super);
        function EmptyError() {
            _super.call(this, 'no elements in sequence');
            this.name = 'EmptyError';
        }
        return EmptyError;
    }(Error);
    exports.EmptyError = EmptyError;
    

    return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/operator/last.js', ['../Subscriber', '../util/EmptyError'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('../Subscriber');
    var EmptyError_1 = $__require('../util/EmptyError');
    /**
     * Returns an Observable that emits only the last item emitted by the source Observable.
     * It optionally takes a predicate function as a parameter, in which case, rather than emitting
     * the last item from the source Observable, the resulting Observable will emit the last item
     * from the source Observable that satisfies the predicate.
     *
     * <img src="./img/last.png" width="100%">
     *
     * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
     * callback if the Observable completes before any `next` notification was sent.
     * @param {function} predicate - the condition any source emitted item has to satisfy.
     * @return {Observable} an Observable that emits only the last item satisfying the given condition
     * from the source, or an NoSuchElementException if no such items are emitted.
     * @throws - Throws if no items that match the predicate are emitted by the source Observable.
     * @method last
     * @owner Observable
     */
    function last(predicate, resultSelector, defaultValue) {
        return this.lift(new LastOperator(predicate, resultSelector, defaultValue, this));
    }
    exports.last = last;
    var LastOperator = function () {
        function LastOperator(predicate, resultSelector, defaultValue, source) {
            this.predicate = predicate;
            this.resultSelector = resultSelector;
            this.defaultValue = defaultValue;
            this.source = source;
        }
        LastOperator.prototype.call = function (observer, source) {
            return source._subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
        };
        return LastOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var LastSubscriber = function (_super) {
        __extends(LastSubscriber, _super);
        function LastSubscriber(destination, predicate, resultSelector, defaultValue, source) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.resultSelector = resultSelector;
            this.defaultValue = defaultValue;
            this.source = source;
            this.hasValue = false;
            this.index = 0;
            if (typeof defaultValue !== 'undefined') {
                this.lastValue = defaultValue;
                this.hasValue = true;
            }
        }
        LastSubscriber.prototype._next = function (value) {
            var index = this.index++;
            if (this.predicate) {
                this._tryPredicate(value, index);
            } else {
                if (this.resultSelector) {
                    this._tryResultSelector(value, index);
                    return;
                }
                this.lastValue = value;
                this.hasValue = true;
            }
        };
        LastSubscriber.prototype._tryPredicate = function (value, index) {
            var result;
            try {
                result = this.predicate(value, index, this.source);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            if (result) {
                if (this.resultSelector) {
                    this._tryResultSelector(value, index);
                    return;
                }
                this.lastValue = value;
                this.hasValue = true;
            }
        };
        LastSubscriber.prototype._tryResultSelector = function (value, index) {
            var result;
            try {
                result = this.resultSelector(value, index);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this.lastValue = result;
            this.hasValue = true;
        };
        LastSubscriber.prototype._complete = function () {
            var destination = this.destination;
            if (this.hasValue) {
                destination.next(this.lastValue);
                destination.complete();
            } else {
                destination.error(new EmptyError_1.EmptyError());
            }
        };
        return LastSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/add/operator/last.js', ['../../Observable', '../../operator/last'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('../../Observable');
  var last_1 = $__require('../../operator/last');
  Observable_1.Observable.prototype.last = last_1.last;
  

  return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/observable/PromiseObservable.js', ['../util/root', '../Observable'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var root_1 = $__require('../util/root');
    var Observable_1 = $__require('../Observable');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var PromiseObservable = function (_super) {
        __extends(PromiseObservable, _super);
        function PromiseObservable(promise, scheduler) {
            if (scheduler === void 0) {
                scheduler = null;
            }
            _super.call(this);
            this.promise = promise;
            this.scheduler = scheduler;
        }
        /**
         * @param promise
         * @param scheduler
         * @return {PromiseObservable}
         * @static true
         * @name fromPromise
         * @owner Observable
         */
        PromiseObservable.create = function (promise, scheduler) {
            if (scheduler === void 0) {
                scheduler = null;
            }
            return new PromiseObservable(promise, scheduler);
        };
        PromiseObservable.prototype._subscribe = function (subscriber) {
            var _this = this;
            var promise = this.promise;
            var scheduler = this.scheduler;
            if (scheduler == null) {
                if (this._isScalar) {
                    if (!subscriber.isUnsubscribed) {
                        subscriber.next(this.value);
                        subscriber.complete();
                    }
                } else {
                    promise.then(function (value) {
                        _this.value = value;
                        _this._isScalar = true;
                        if (!subscriber.isUnsubscribed) {
                            subscriber.next(value);
                            subscriber.complete();
                        }
                    }, function (err) {
                        if (!subscriber.isUnsubscribed) {
                            subscriber.error(err);
                        }
                    }).then(null, function (err) {
                        // escape the promise trap, throw unhandled errors
                        root_1.root.setTimeout(function () {
                            throw err;
                        });
                    });
                }
            } else {
                if (this._isScalar) {
                    if (!subscriber.isUnsubscribed) {
                        return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });
                    }
                } else {
                    promise.then(function (value) {
                        _this.value = value;
                        _this._isScalar = true;
                        if (!subscriber.isUnsubscribed) {
                            subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));
                        }
                    }, function (err) {
                        if (!subscriber.isUnsubscribed) {
                            subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));
                        }
                    }).then(null, function (err) {
                        // escape the promise trap, throw unhandled errors
                        root_1.root.setTimeout(function () {
                            throw err;
                        });
                    });
                }
            }
        };
        return PromiseObservable;
    }(Observable_1.Observable);
    exports.PromiseObservable = PromiseObservable;
    function dispatchNext(arg) {
        var value = arg.value,
            subscriber = arg.subscriber;
        if (!subscriber.isUnsubscribed) {
            subscriber.next(value);
            subscriber.complete();
        }
    }
    function dispatchError(arg) {
        var err = arg.err,
            subscriber = arg.subscriber;
        if (!subscriber.isUnsubscribed) {
            subscriber.error(err);
        }
    }
    

    return module.exports;
});
System.registerDynamic("npm:rxjs@5.0.0-beta.6/observable/fromPromise.js", ["./PromiseObservable"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var PromiseObservable_1 = $__require("./PromiseObservable");
  exports.fromPromise = PromiseObservable_1.PromiseObservable.create;
  

  return module.exports;
});
System.registerDynamic("npm:rxjs@5.0.0-beta.6/observable/ScalarObservable.js", ["../Observable"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require("../Observable");
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var ScalarObservable = function (_super) {
        __extends(ScalarObservable, _super);
        function ScalarObservable(value, scheduler) {
            _super.call(this);
            this.value = value;
            this.scheduler = scheduler;
            this._isScalar = true;
        }
        ScalarObservable.create = function (value, scheduler) {
            return new ScalarObservable(value, scheduler);
        };
        ScalarObservable.dispatch = function (state) {
            var done = state.done,
                value = state.value,
                subscriber = state.subscriber;
            if (done) {
                subscriber.complete();
                return;
            }
            subscriber.next(value);
            if (subscriber.isUnsubscribed) {
                return;
            }
            state.done = true;
            this.schedule(state);
        };
        ScalarObservable.prototype._subscribe = function (subscriber) {
            var value = this.value;
            var scheduler = this.scheduler;
            if (scheduler) {
                return scheduler.schedule(ScalarObservable.dispatch, 0, {
                    done: false, value: value, subscriber: subscriber
                });
            } else {
                subscriber.next(value);
                if (!subscriber.isUnsubscribed) {
                    subscriber.complete();
                }
            }
        };
        return ScalarObservable;
    }(Observable_1.Observable);
    exports.ScalarObservable = ScalarObservable;
    

    return module.exports;
});
System.registerDynamic("npm:rxjs@5.0.0-beta.6/observable/EmptyObservable.js", ["../Observable"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require("../Observable");
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var EmptyObservable = function (_super) {
        __extends(EmptyObservable, _super);
        function EmptyObservable(scheduler) {
            _super.call(this);
            this.scheduler = scheduler;
        }
        /**
         * Creates an Observable that emits no items to the Observer and immediately
         * emits a complete notification.
         *
         * <span class="informal">Just emits 'complete', and nothing else.
         * </span>
         *
         * <img src="./img/empty.png" width="100%">
         *
         * This static operator is useful for creating a simple Observable that only
         * emits the complete notification. It can be used for composing with other
         * Observables, such as in a {@link mergeMap}.
         *
         * @example <caption>Emit the number 7, then complete.</caption>
         * var result = Rx.Observable.empty().startWith(7);
         * result.subscribe(x => console.log(x));
         *
         * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>
         * var interval = Rx.Observable.interval(1000);
         * var result = interval.mergeMap(x =>
         *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()
         * );
         * result.subscribe(x => console.log(x));
         *
         * @see {@link create}
         * @see {@link never}
         * @see {@link of}
         * @see {@link throw}
         *
         * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling
         * the emission of the complete notification.
         * @return {Observable} An "empty" Observable: emits only the complete
         * notification.
         * @static true
         * @name empty
         * @owner Observable
         */
        EmptyObservable.create = function (scheduler) {
            return new EmptyObservable(scheduler);
        };
        EmptyObservable.dispatch = function (arg) {
            var subscriber = arg.subscriber;
            subscriber.complete();
        };
        EmptyObservable.prototype._subscribe = function (subscriber) {
            var scheduler = this.scheduler;
            if (scheduler) {
                return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });
            } else {
                subscriber.complete();
            }
        };
        return EmptyObservable;
    }(Observable_1.Observable);
    exports.EmptyObservable = EmptyObservable;
    

    return module.exports;
});
System.registerDynamic("npm:rxjs@5.0.0-beta.6/util/isScheduler.js", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function isScheduler(value) {
        return value && typeof value.schedule === 'function';
    }
    exports.isScheduler = isScheduler;
    

    return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/observable/ArrayObservable.js', ['../Observable', './ScalarObservable', './EmptyObservable', '../util/isScheduler'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require('../Observable');
    var ScalarObservable_1 = $__require('./ScalarObservable');
    var EmptyObservable_1 = $__require('./EmptyObservable');
    var isScheduler_1 = $__require('../util/isScheduler');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var ArrayObservable = function (_super) {
        __extends(ArrayObservable, _super);
        function ArrayObservable(array, scheduler) {
            _super.call(this);
            this.array = array;
            this.scheduler = scheduler;
            if (!scheduler && array.length === 1) {
                this._isScalar = true;
                this.value = array[0];
            }
        }
        ArrayObservable.create = function (array, scheduler) {
            return new ArrayObservable(array, scheduler);
        };
        /**
         * Creates an Observable that emits some values you specify as arguments,
         * immediately one after the other, and then emits a complete notification.
         *
         * <span class="informal">Emits the arguments you provide, then completes.
         * </span>
         *
         * <img src="./img/of.png" width="100%">
         *
         * This static operator is useful for creating a simple Observable that only
         * emits the arguments given, and the complete notification thereafter. It can
         * be used for composing with other Observables, such as with {@link concat}.
         * By default, it uses a `null` Scheduler, which means the `next`
         * notifications are sent synchronously, although with a different Scheduler
         * it is possible to determine when those notifications will be delivered.
         *
         * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>
         * var numbers = Rx.Observable.of(10, 20, 30);
         * var letters = Rx.Observable.of('a', 'b', 'c');
         * var interval = Rx.Observable.interval(1000);
         * var result = numbers.concat(letters).concat(interval);
         * result.subscribe(x => console.log(x));
         *
         * @see {@link create}
         * @see {@link empty}
         * @see {@link never}
         * @see {@link throw}
         *
         * @param {...T} values Arguments that represent `next` values to be emitted.
         * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling
         * the emissions of the `next` notifications.
         * @return {Observable<T>} An Observable that emits each given input value.
         * @static true
         * @name of
         * @owner Observable
         */
        ArrayObservable.of = function () {
            var array = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                array[_i - 0] = arguments[_i];
            }
            var scheduler = array[array.length - 1];
            if (isScheduler_1.isScheduler(scheduler)) {
                array.pop();
            } else {
                scheduler = null;
            }
            var len = array.length;
            if (len > 1) {
                return new ArrayObservable(array, scheduler);
            } else if (len === 1) {
                return new ScalarObservable_1.ScalarObservable(array[0], scheduler);
            } else {
                return new EmptyObservable_1.EmptyObservable(scheduler);
            }
        };
        ArrayObservable.dispatch = function (state) {
            var array = state.array,
                index = state.index,
                count = state.count,
                subscriber = state.subscriber;
            if (index >= count) {
                subscriber.complete();
                return;
            }
            subscriber.next(array[index]);
            if (subscriber.isUnsubscribed) {
                return;
            }
            state.index = index + 1;
            this.schedule(state);
        };
        ArrayObservable.prototype._subscribe = function (subscriber) {
            var index = 0;
            var array = this.array;
            var count = array.length;
            var scheduler = this.scheduler;
            if (scheduler) {
                return scheduler.schedule(ArrayObservable.dispatch, 0, {
                    array: array, index: index, count: count, subscriber: subscriber
                });
            } else {
                for (var i = 0; i < count && !subscriber.isUnsubscribed; i++) {
                    subscriber.next(array[i]);
                }
                subscriber.complete();
            }
        };
        return ArrayObservable;
    }(Observable_1.Observable);
    exports.ArrayObservable = ArrayObservable;
    

    return module.exports;
});
System.registerDynamic("npm:rxjs@5.0.0-beta.6/observable/of.js", ["./ArrayObservable"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var ArrayObservable_1 = $__require("./ArrayObservable");
  exports.of = ArrayObservable_1.ArrayObservable.of;
  

  return module.exports;
});
System.registerDynamic("npm:@angular/router@3.0.0-rc.1/src/shared.js", [], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";
  /**
   * Name of the primary outlet.
   * @type {string}
   *
   * @experimental
   */

  var define,
      global = this || self,
      GLOBAL = global;
  exports.PRIMARY_OUTLET = 'primary';
  

  return module.exports;
});
System.registerDynamic('npm:@angular/router@3.0.0-rc.1/src/utils/collection.js', ['rxjs/add/operator/concatAll', 'rxjs/add/operator/last', 'rxjs/Observable', 'rxjs/observable/fromPromise', 'rxjs/observable/of', '../shared'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    $__require('rxjs/add/operator/concatAll');
    $__require('rxjs/add/operator/last');
    var Observable_1 = $__require('rxjs/Observable');
    var fromPromise_1 = $__require('rxjs/observable/fromPromise');
    var of_1 = $__require('rxjs/observable/of');
    var shared_1 = $__require('../shared');
    function shallowEqualArrays(a, b) {
        if (a.length !== b.length) return false;
        for (var i = 0; i < a.length; ++i) {
            if (!shallowEqual(a[i], b[i])) return false;
        }
        return true;
    }
    exports.shallowEqualArrays = shallowEqualArrays;
    function shallowEqual(a, b) {
        var k1 = Object.keys(a);
        var k2 = Object.keys(b);
        if (k1.length != k2.length) {
            return false;
        }
        var key;
        for (var i = 0; i < k1.length; i++) {
            key = k1[i];
            if (a[key] !== b[key]) {
                return false;
            }
        }
        return true;
    }
    exports.shallowEqual = shallowEqual;
    function flatten(a) {
        var target = [];
        for (var i = 0; i < a.length; ++i) {
            for (var j = 0; j < a[i].length; ++j) {
                target.push(a[i][j]);
            }
        }
        return target;
    }
    exports.flatten = flatten;
    function first(a) {
        return a.length > 0 ? a[0] : null;
    }
    exports.first = first;
    function last(a) {
        return a.length > 0 ? a[a.length - 1] : null;
    }
    exports.last = last;
    function and(bools) {
        return bools.reduce(function (a, b) {
            return a && b;
        }, true);
    }
    exports.and = and;
    function merge(m1, m2) {
        var m = {};
        for (var attr in m1) {
            if (m1.hasOwnProperty(attr)) {
                m[attr] = m1[attr];
            }
        }
        for (var attr in m2) {
            if (m2.hasOwnProperty(attr)) {
                m[attr] = m2[attr];
            }
        }
        return m;
    }
    exports.merge = merge;
    function forEach(map, callback) {
        for (var prop in map) {
            if (map.hasOwnProperty(prop)) {
                callback(map[prop], prop);
            }
        }
    }
    exports.forEach = forEach;
    function waitForMap(obj, fn) {
        var waitFor = [];
        var res = {};
        forEach(obj, function (a, k) {
            if (k === shared_1.PRIMARY_OUTLET) {
                waitFor.push(fn(k, a).map(function (_) {
                    res[k] = _;
                    return _;
                }));
            }
        });
        forEach(obj, function (a, k) {
            if (k !== shared_1.PRIMARY_OUTLET) {
                waitFor.push(fn(k, a).map(function (_) {
                    res[k] = _;
                    return _;
                }));
            }
        });
        if (waitFor.length > 0) {
            return of_1.of.apply(void 0, waitFor).concatAll().last().map(function (last) {
                return res;
            });
        } else {
            return of_1.of(res);
        }
    }
    exports.waitForMap = waitForMap;
    function andObservables(observables) {
        return observables.mergeAll().every(function (result) {
            return result === true;
        });
    }
    exports.andObservables = andObservables;
    function wrapIntoObservable(value) {
        if (value instanceof Observable_1.Observable) {
            return value;
        } else if (value instanceof Promise) {
            return fromPromise_1.fromPromise(value);
        } else {
            return of_1.of(value);
        }
    }
    exports.wrapIntoObservable = wrapIntoObservable;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/router@3.0.0-rc.1/src/url_tree.js', ['./shared', './utils/collection'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var shared_1 = $__require('./shared');
    var collection_1 = $__require('./utils/collection');
    function createEmptyUrlTree() {
        return new UrlTree(new UrlSegmentGroup([], {}), {}, null);
    }
    exports.createEmptyUrlTree = createEmptyUrlTree;
    function containsTree(container, containee, exact) {
        if (exact) {
            return equalSegmentGroups(container.root, containee.root);
        } else {
            return containsSegmentGroup(container.root, containee.root);
        }
    }
    exports.containsTree = containsTree;
    function equalSegmentGroups(container, containee) {
        if (!equalPath(container.segments, containee.segments)) return false;
        if (container.numberOfChildren !== containee.numberOfChildren) return false;
        for (var c in containee.children) {
            if (!container.children[c]) return false;
            if (!equalSegmentGroups(container.children[c], containee.children[c])) return false;
        }
        return true;
    }
    function containsSegmentGroup(container, containee) {
        return containsSegmentGroupHelper(container, containee, containee.segments);
    }
    function containsSegmentGroupHelper(container, containee, containeePaths) {
        if (container.segments.length > containeePaths.length) {
            var current = container.segments.slice(0, containeePaths.length);
            if (!equalPath(current, containeePaths)) return false;
            if (containee.hasChildren()) return false;
            return true;
        } else if (container.segments.length === containeePaths.length) {
            if (!equalPath(container.segments, containeePaths)) return false;
            for (var c in containee.children) {
                if (!container.children[c]) return false;
                if (!containsSegmentGroup(container.children[c], containee.children[c])) return false;
            }
            return true;
        } else {
            var current = containeePaths.slice(0, container.segments.length);
            var next = containeePaths.slice(container.segments.length);
            if (!equalPath(container.segments, current)) return false;
            if (!container.children[shared_1.PRIMARY_OUTLET]) return false;
            return containsSegmentGroupHelper(container.children[shared_1.PRIMARY_OUTLET], containee, next);
        }
    }
    /**
     * A URL in the tree form.
     *
     * @stable
     */
    var UrlTree = function () {
        /**
         * @internal
         */
        function UrlTree(root, queryParams, fragment) {
            this.root = root;
            this.queryParams = queryParams;
            this.fragment = fragment;
        }
        UrlTree.prototype.toString = function () {
            return new DefaultUrlSerializer().serialize(this);
        };
        return UrlTree;
    }();
    exports.UrlTree = UrlTree;
    /**
     * @stable
     */
    var UrlSegmentGroup = function () {
        function UrlSegmentGroup(segments, children) {
            var _this = this;
            this.segments = segments;
            this.children = children;
            this.parent = null;
            collection_1.forEach(children, function (v, k) {
                return v.parent = _this;
            });
        }
        /**
         * Return true if the segment has child segments
         */
        UrlSegmentGroup.prototype.hasChildren = function () {
            return this.numberOfChildren > 0;
        };
        Object.defineProperty(UrlSegmentGroup.prototype, "numberOfChildren", {
            /**
             * Returns the number of child sements.
             */
            get: function () {
                return Object.keys(this.children).length;
            },
            enumerable: true,
            configurable: true
        });
        UrlSegmentGroup.prototype.toString = function () {
            return serializePaths(this);
        };
        return UrlSegmentGroup;
    }();
    exports.UrlSegmentGroup = UrlSegmentGroup;
    /**
     * @stable
     */
    var UrlSegment = function () {
        function UrlSegment(path, parameters) {
            this.path = path;
            this.parameters = parameters;
        }
        UrlSegment.prototype.toString = function () {
            return serializePath(this);
        };
        return UrlSegment;
    }();
    exports.UrlSegment = UrlSegment;
    function equalSegments(a, b) {
        if (a.length !== b.length) return false;
        for (var i = 0; i < a.length; ++i) {
            if (a[i].path !== b[i].path) return false;
            if (!collection_1.shallowEqual(a[i].parameters, b[i].parameters)) return false;
        }
        return true;
    }
    exports.equalSegments = equalSegments;
    function equalPath(a, b) {
        if (a.length !== b.length) return false;
        for (var i = 0; i < a.length; ++i) {
            if (a[i].path !== b[i].path) return false;
        }
        return true;
    }
    exports.equalPath = equalPath;
    function mapChildrenIntoArray(segment, fn) {
        var res = [];
        collection_1.forEach(segment.children, function (child, childOutlet) {
            if (childOutlet === shared_1.PRIMARY_OUTLET) {
                res = res.concat(fn(child, childOutlet));
            }
        });
        collection_1.forEach(segment.children, function (child, childOutlet) {
            if (childOutlet !== shared_1.PRIMARY_OUTLET) {
                res = res.concat(fn(child, childOutlet));
            }
        });
        return res;
    }
    exports.mapChildrenIntoArray = mapChildrenIntoArray;
    /**
     * Defines a way to serialize/deserialize a url tree.
     *
     * @experimental
     */
    var UrlSerializer = function () {
        function UrlSerializer() {}
        return UrlSerializer;
    }();
    exports.UrlSerializer = UrlSerializer;
    /**
     * A default implementation of the serialization.
     *
     * @experimental
     */
    var DefaultUrlSerializer = function () {
        function DefaultUrlSerializer() {}
        DefaultUrlSerializer.prototype.parse = function (url) {
            var p = new UrlParser(url);
            return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());
        };
        DefaultUrlSerializer.prototype.serialize = function (tree) {
            var segment = "/" + serializeSegment(tree.root, true);
            var query = serializeQueryParams(tree.queryParams);
            var fragment = tree.fragment !== null && tree.fragment !== undefined ? "#" + encodeURIComponent(tree.fragment) : '';
            return "" + segment + query + fragment;
        };
        return DefaultUrlSerializer;
    }();
    exports.DefaultUrlSerializer = DefaultUrlSerializer;
    function serializePaths(segment) {
        return segment.segments.map(function (p) {
            return serializePath(p);
        }).join('/');
    }
    exports.serializePaths = serializePaths;
    function serializeSegment(segment, root) {
        if (segment.hasChildren() && root) {
            var primary = segment.children[shared_1.PRIMARY_OUTLET] ? serializeSegment(segment.children[shared_1.PRIMARY_OUTLET], false) : '';
            var children_1 = [];
            collection_1.forEach(segment.children, function (v, k) {
                if (k !== shared_1.PRIMARY_OUTLET) {
                    children_1.push(k + ":" + serializeSegment(v, false));
                }
            });
            if (children_1.length > 0) {
                return primary + "(" + children_1.join('//') + ")";
            } else {
                return "" + primary;
            }
        } else if (segment.hasChildren() && !root) {
            var children = mapChildrenIntoArray(segment, function (v, k) {
                if (k === shared_1.PRIMARY_OUTLET) {
                    return [serializeSegment(segment.children[shared_1.PRIMARY_OUTLET], false)];
                } else {
                    return [k + ":" + serializeSegment(v, false)];
                }
            });
            return serializePaths(segment) + "/(" + children.join('//') + ")";
        } else {
            return serializePaths(segment);
        }
    }
    function encode(s) {
        return encodeURIComponent(s);
    }
    exports.encode = encode;
    function decode(s) {
        return decodeURIComponent(s);
    }
    exports.decode = decode;
    function serializePath(path) {
        return "" + encode(path.path) + serializeParams(path.parameters);
    }
    exports.serializePath = serializePath;
    function serializeParams(params) {
        return pairs(params).map(function (p) {
            return ";" + encode(p.first) + "=" + encode(p.second);
        }).join('');
    }
    function serializeQueryParams(params) {
        var strs = pairs(params).map(function (p) {
            return encode(p.first) + "=" + encode(p.second);
        });
        return strs.length > 0 ? "?" + strs.join("&") : '';
    }
    var Pair = function () {
        function Pair(first, second) {
            this.first = first;
            this.second = second;
        }
        return Pair;
    }();
    function pairs(obj) {
        var res = [];
        for (var prop in obj) {
            if (obj.hasOwnProperty(prop)) {
                res.push(new Pair(prop, obj[prop]));
            }
        }
        return res;
    }
    var SEGMENT_RE = /^[^\/\(\)\?;=&#]+/;
    function matchSegments(str) {
        SEGMENT_RE.lastIndex = 0;
        var match = str.match(SEGMENT_RE);
        return match ? match[0] : '';
    }
    var QUERY_PARAM_RE = /^[^=\?&#]+/;
    function matchQueryParams(str) {
        QUERY_PARAM_RE.lastIndex = 0;
        var match = str.match(SEGMENT_RE);
        return match ? match[0] : '';
    }
    var QUERY_PARAM_VALUE_RE = /^[^\?&#]+/;
    function matchUrlQueryParamValue(str) {
        QUERY_PARAM_VALUE_RE.lastIndex = 0;
        var match = str.match(QUERY_PARAM_VALUE_RE);
        return match ? match[0] : '';
    }
    var UrlParser = function () {
        function UrlParser(url) {
            this.url = url;
            this.remaining = url;
        }
        UrlParser.prototype.peekStartsWith = function (str) {
            return this.remaining.startsWith(str);
        };
        UrlParser.prototype.capture = function (str) {
            if (!this.remaining.startsWith(str)) {
                throw new Error("Expected \"" + str + "\".");
            }
            this.remaining = this.remaining.substring(str.length);
        };
        UrlParser.prototype.parseRootSegment = function () {
            if (this.remaining.startsWith('/')) {
                this.capture('/');
            }
            if (this.remaining === '' || this.remaining.startsWith('?') || this.remaining.startsWith('#')) {
                return new UrlSegmentGroup([], {});
            } else {
                return new UrlSegmentGroup([], this.parseChildren());
            }
        };
        UrlParser.prototype.parseChildren = function () {
            if (this.remaining.length == 0) {
                return {};
            }
            if (this.peekStartsWith('/')) {
                this.capture('/');
            }
            var paths = [];
            if (!this.peekStartsWith('(')) {
                paths.push(this.parseSegments());
            }
            while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {
                this.capture('/');
                paths.push(this.parseSegments());
            }
            var children = {};
            if (this.peekStartsWith('/(')) {
                this.capture('/');
                children = this.parseParens(true);
            }
            var res = {};
            if (this.peekStartsWith('(')) {
                res = this.parseParens(false);
            }
            if (paths.length > 0 || Object.keys(children).length > 0) {
                res[shared_1.PRIMARY_OUTLET] = new UrlSegmentGroup(paths, children);
            }
            return res;
        };
        UrlParser.prototype.parseSegments = function () {
            var path = matchSegments(this.remaining);
            if (path === '' && this.peekStartsWith(';')) {
                throw new Error("Empty path url segment cannot have parameters: '" + this.remaining + "'.");
            }
            this.capture(path);
            var matrixParams = {};
            if (this.peekStartsWith(';')) {
                matrixParams = this.parseMatrixParams();
            }
            return new UrlSegment(decode(path), matrixParams);
        };
        UrlParser.prototype.parseQueryParams = function () {
            var params = {};
            if (this.peekStartsWith('?')) {
                this.capture('?');
                this.parseQueryParam(params);
                while (this.remaining.length > 0 && this.peekStartsWith('&')) {
                    this.capture('&');
                    this.parseQueryParam(params);
                }
            }
            return params;
        };
        UrlParser.prototype.parseFragment = function () {
            if (this.peekStartsWith('#')) {
                return decode(this.remaining.substring(1));
            } else {
                return null;
            }
        };
        UrlParser.prototype.parseMatrixParams = function () {
            var params = {};
            while (this.remaining.length > 0 && this.peekStartsWith(';')) {
                this.capture(';');
                this.parseParam(params);
            }
            return params;
        };
        UrlParser.prototype.parseParam = function (params) {
            var key = matchSegments(this.remaining);
            if (!key) {
                return;
            }
            this.capture(key);
            var value = 'true';
            if (this.peekStartsWith('=')) {
                this.capture('=');
                var valueMatch = matchSegments(this.remaining);
                if (valueMatch) {
                    value = valueMatch;
                    this.capture(value);
                }
            }
            params[decode(key)] = decode(value);
        };
        UrlParser.prototype.parseQueryParam = function (params) {
            var key = matchQueryParams(this.remaining);
            if (!key) {
                return;
            }
            this.capture(key);
            var value = '';
            if (this.peekStartsWith('=')) {
                this.capture('=');
                var valueMatch = matchUrlQueryParamValue(this.remaining);
                if (valueMatch) {
                    value = valueMatch;
                    this.capture(value);
                }
            }
            params[decode(key)] = decode(value);
        };
        UrlParser.prototype.parseParens = function (allowPrimary) {
            var segments = {};
            this.capture('(');
            while (!this.peekStartsWith(')') && this.remaining.length > 0) {
                var path = matchSegments(this.remaining);
                var next = this.remaining[path.length];
                // if is is not one of these characters, then the segment was unescaped
                // or the group was not closed
                if (next !== '/' && next !== ')' && next !== ';') {
                    throw new Error("Cannot parse url '" + this.url + "'");
                }
                var outletName = void 0;
                if (path.indexOf(':') > -1) {
                    outletName = path.substr(0, path.indexOf(':'));
                    this.capture(outletName);
                    this.capture(':');
                } else if (allowPrimary) {
                    outletName = shared_1.PRIMARY_OUTLET;
                }
                var children = this.parseChildren();
                segments[outletName] = Object.keys(children).length === 1 ? children[shared_1.PRIMARY_OUTLET] : new UrlSegmentGroup([], children);
                if (this.peekStartsWith('//')) {
                    this.capture('//');
                }
            }
            this.capture(')');
            return segments;
        };
        return UrlParser;
    }();
    

    return module.exports;
});
System.registerDynamic("npm:@angular/router@3.0.0-rc.1.json", [], false, function() {
  return {
    "main": "index.js",
    "format": "cjs",
    "meta": {
      "*.json": {
        "format": "json"
      },
      "esm/index.d.ts": {
        "format": "esm"
      },
      "esm/index.js": {
        "format": "esm"
      },
      "esm/src/apply_redirects.js": {
        "format": "esm"
      },
      "esm/src/common_router_providers.js": {
        "format": "esm"
      },
      "esm/src/config.js": {
        "format": "esm"
      },
      "esm/src/create_router_state.js": {
        "format": "esm"
      },
      "esm/src/create_url_tree.js": {
        "format": "esm"
      },
      "esm/src/directives/router_link.js": {
        "format": "esm"
      },
      "esm/src/directives/router_link_active.js": {
        "format": "esm"
      },
      "esm/src/directives/router_outlet.js": {
        "format": "esm"
      },
      "esm/src/recognize.js": {
        "format": "esm"
      },
      "esm/src/resolve.js": {
        "format": "esm"
      },
      "esm/src/router.js": {
        "format": "esm"
      },
      "esm/src/router_config_loader.js": {
        "format": "esm"
      },
      "esm/src/router_module.js": {
        "format": "esm"
      },
      "esm/src/router_outlet_map.js": {
        "format": "esm"
      },
      "esm/src/router_providers.js": {
        "format": "esm"
      },
      "esm/src/router_state.js": {
        "format": "esm"
      },
      "esm/src/shared.js": {
        "format": "esm"
      },
      "esm/src/url_tree.js": {
        "format": "esm"
      },
      "esm/src/utils/collection.js": {
        "format": "esm"
      },
      "esm/src/utils/tree.js": {
        "format": "esm"
      },
      "esm/testing.d.ts": {
        "format": "esm"
      },
      "esm/testing.js": {
        "format": "esm"
      },
      "esm/testing/router_testing_module.js": {
        "format": "esm"
      },
      "index.d.ts": {
        "format": "esm"
      },
      "testing.d.ts": {
        "format": "esm"
      }
    }
  };
});

System.registerDynamic('npm:@angular/router@3.0.0-rc.1/index.js', ['./src/common_router_providers', './src/directives/router_link', './src/directives/router_link_active', './src/directives/router_outlet', './src/router', './src/router_module', './src/router_outlet_map', './src/router_providers', './src/router_state', './src/shared', './src/url_tree'], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var common_router_providers_1 = $__require('./src/common_router_providers');
  exports.provideRouterConfig = common_router_providers_1.provideRouterConfig;
  exports.provideRoutes = common_router_providers_1.provideRoutes;
  var router_link_1 = $__require('./src/directives/router_link');
  exports.RouterLink = router_link_1.RouterLink;
  exports.RouterLinkWithHref = router_link_1.RouterLinkWithHref;
  var router_link_active_1 = $__require('./src/directives/router_link_active');
  exports.RouterLinkActive = router_link_active_1.RouterLinkActive;
  var router_outlet_1 = $__require('./src/directives/router_outlet');
  exports.RouterOutlet = router_outlet_1.RouterOutlet;
  var router_1 = $__require('./src/router');
  exports.NavigationCancel = router_1.NavigationCancel;
  exports.NavigationEnd = router_1.NavigationEnd;
  exports.NavigationError = router_1.NavigationError;
  exports.NavigationStart = router_1.NavigationStart;
  exports.Router = router_1.Router;
  exports.RoutesRecognized = router_1.RoutesRecognized;
  var router_module_1 = $__require('./src/router_module');
  exports.ROUTER_DIRECTIVES = router_module_1.ROUTER_DIRECTIVES;
  exports.RouterModule = router_module_1.RouterModule;
  var router_outlet_map_1 = $__require('./src/router_outlet_map');
  exports.RouterOutletMap = router_outlet_map_1.RouterOutletMap;
  var router_providers_1 = $__require('./src/router_providers');
  exports.provideRouter = router_providers_1.provideRouter;
  var router_state_1 = $__require('./src/router_state');
  exports.ActivatedRoute = router_state_1.ActivatedRoute;
  exports.ActivatedRouteSnapshot = router_state_1.ActivatedRouteSnapshot;
  exports.RouterState = router_state_1.RouterState;
  exports.RouterStateSnapshot = router_state_1.RouterStateSnapshot;
  var shared_1 = $__require('./src/shared');
  exports.PRIMARY_OUTLET = shared_1.PRIMARY_OUTLET;
  var url_tree_1 = $__require('./src/url_tree');
  exports.DefaultUrlSerializer = url_tree_1.DefaultUrlSerializer;
  exports.UrlSegment = url_tree_1.UrlSegment;
  exports.UrlSerializer = url_tree_1.UrlSerializer;
  exports.UrlTree = url_tree_1.UrlTree;
  

  return module.exports;
});
System.registerDynamic("npm:@angular/core@2.0.0-rc.5/src/util.js", ["./util/decorators", "reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";
  // Public API for util

  var define,
      global = this || self,
      GLOBAL = global;
  var decorators_1 = $__require("./util/decorators");
  exports.Class = decorators_1.Class;
  

  return module.exports;
});
System.registerDynamic("npm:@angular/core@2.0.0-rc.5/src/zone.js", ["./zone/ng_zone", "reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";
  // Public API for Zone

  var define,
      global = this || self,
      GLOBAL = global;
  var ng_zone_1 = $__require("./zone/ng_zone");
  exports.NgZone = ng_zone_1.NgZone;
  exports.NgZoneError = ng_zone_1.NgZoneError;
  

  return module.exports;
});
System.registerDynamic("npm:@angular/core@2.0.0-rc.5/src/render.js", ["./render/api", "reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";
  // Public API for render

  var define,
      global = this || self,
      GLOBAL = global;
  var api_1 = $__require("./render/api");
  exports.RenderComponentType = api_1.RenderComponentType;
  exports.Renderer = api_1.Renderer;
  exports.RootRenderer = api_1.RootRenderer;
  

  return module.exports;
});
System.registerDynamic("npm:@angular/core@2.0.0-rc.5/src/linker/ng_module_factory_loader.js", ["reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";
  /**
   * Used to load ng moduled factories.
   * @experimental
   */

  var define,
      global = this || self,
      GLOBAL = global;
  var NgModuleFactoryLoader = function () {
    function NgModuleFactoryLoader() {}
    return NgModuleFactoryLoader;
  }();
  exports.NgModuleFactoryLoader = NgModuleFactoryLoader;
  

  return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/linker/query_list.js', ['../facade/async', '../facade/collection', '../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var async_1 = $__require('../facade/async');
    var collection_1 = $__require('../facade/collection');
    var lang_1 = $__require('../facade/lang');
    /**
     * An unmodifiable list of items that Angular keeps up to date when the state
     * of the application changes.
     *
     * The type of object that {@link QueryMetadata} and {@link ViewQueryMetadata} provide.
     *
     * Implements an iterable interface, therefore it can be used in both ES6
     * javascript `for (var i of items)` loops as well as in Angular templates with
     * `*ngFor="let i of myList"`.
     *
     * Changes can be observed by subscribing to the changes `Observable`.
     *
     * NOTE: In the future this class will implement an `Observable` interface.
     *
     * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))
     * ```typescript
     * @Component({...})
     * class Container {
     *   @ViewChildren(Item) items:QueryList<Item>;
     * }
     * ```
     * @stable
     */
    var QueryList = function () {
        function QueryList() {
            this._dirty = true;
            this._results = [];
            this._emitter = new async_1.EventEmitter();
        }
        Object.defineProperty(QueryList.prototype, "changes", {
            get: function () {
                return this._emitter;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(QueryList.prototype, "length", {
            get: function () {
                return this._results.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(QueryList.prototype, "first", {
            get: function () {
                return this._results[0];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(QueryList.prototype, "last", {
            get: function () {
                return this._results[this.length - 1];
            },
            enumerable: true,
            configurable: true
        });
        /**
         * See
         * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
         */
        QueryList.prototype.map = function (fn) {
            return this._results.map(fn);
        };
        /**
         * See
         * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)
         */
        QueryList.prototype.filter = function (fn) {
            return this._results.filter(fn);
        };
        /**
         * See
         * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)
         */
        QueryList.prototype.reduce = function (fn, init) {
            return this._results.reduce(fn, init);
        };
        /**
         * See
         * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)
         */
        QueryList.prototype.forEach = function (fn) {
            this._results.forEach(fn);
        };
        /**
         * See
         * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)
         */
        QueryList.prototype.some = function (fn) {
            return this._results.some(fn);
        };
        QueryList.prototype.toArray = function () {
            return this._results.slice();
        };
        QueryList.prototype[lang_1.getSymbolIterator()] = function () {
            return this._results[lang_1.getSymbolIterator()]();
        };
        QueryList.prototype.toString = function () {
            return this._results.toString();
        };
        QueryList.prototype.reset = function (res) {
            this._results = collection_1.ListWrapper.flatten(res);
            this._dirty = false;
        };
        QueryList.prototype.notifyOnChanges = function () {
            this._emitter.emit(this);
        };
        /** internal */
        QueryList.prototype.setDirty = function () {
            this._dirty = true;
        };
        Object.defineProperty(QueryList.prototype, "dirty", {
            /** internal */
            get: function () {
                return this._dirty;
            },
            enumerable: true,
            configurable: true
        });
        return QueryList;
    }();
    exports.QueryList = QueryList;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/linker/system_js_ng_module_factory_loader.js', ['../di', '../facade/lang', './compiler', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var di_1 = $__require('../di');
    var lang_1 = $__require('../facade/lang');
    var compiler_1 = $__require('./compiler');
    var _SEPARATOR = '#';
    var FACTORY_MODULE_SUFFIX = '.ngfactory';
    var FACTORY_CLASS_SUFFIX = 'NgFactory';
    var SystemJsNgModuleLoader = function () {
        function SystemJsNgModuleLoader(_compiler) {
            this._compiler = _compiler;
        }
        SystemJsNgModuleLoader.prototype.load = function (path) {
            var offlineMode = this._compiler instanceof compiler_1.Compiler;
            return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);
        };
        SystemJsNgModuleLoader.prototype.loadAndCompile = function (path) {
            var _this = this;
            var _a = path.split(_SEPARATOR),
                module = _a[0],
                exportName = _a[1];
            if (exportName === undefined) exportName = 'default';
            return lang_1.global.System.import(module).then(function (module) {
                return module[exportName];
            }).then(function (type) {
                return checkNotEmpty(type, module, exportName);
            }).then(function (type) {
                return _this._compiler.compileModuleAsync(type);
            });
        };
        SystemJsNgModuleLoader.prototype.loadFactory = function (path) {
            var _a = path.split(_SEPARATOR),
                module = _a[0],
                exportName = _a[1];
            if (exportName === undefined) exportName = 'default';
            return lang_1.global.System.import(module + FACTORY_MODULE_SUFFIX).then(function (module) {
                return module[exportName + FACTORY_CLASS_SUFFIX];
            }).then(function (factory) {
                return checkNotEmpty(factory, module, exportName);
            });
        };
        /** @nocollapse */
        SystemJsNgModuleLoader.decorators = [{ type: di_1.Injectable }];
        /** @nocollapse */
        SystemJsNgModuleLoader.ctorParameters = [{ type: compiler_1.Compiler }];
        return SystemJsNgModuleLoader;
    }();
    exports.SystemJsNgModuleLoader = SystemJsNgModuleLoader;
    function checkNotEmpty(value, modulePath, exportName) {
        if (!value) {
            throw new Error("Cannot find '" + exportName + "' in '" + modulePath + "'");
        }
        return value;
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/linker/systemjs_component_resolver.js', ['../console', '../di', '../facade/lang', './component_resolver', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var console_1 = $__require('../console');
    var di_1 = $__require('../di');
    var lang_1 = $__require('../facade/lang');
    var component_resolver_1 = $__require('./component_resolver');
    var _SEPARATOR = '#';
    var SystemJsComponentResolver = function () {
        function SystemJsComponentResolver(_resolver, _console) {
            this._resolver = _resolver;
            this._console = _console;
        }
        SystemJsComponentResolver.prototype.resolveComponent = function (componentType) {
            var _this = this;
            if (lang_1.isString(componentType)) {
                this._console.warn(component_resolver_1.ComponentResolver.LazyLoadingDeprecationMsg);
                var _a = componentType.split(_SEPARATOR),
                    module = _a[0],
                    component_1 = _a[1];
                if (component_1 === void 0) {
                    // Use the default export when no component is specified
                    component_1 = 'default';
                }
                return lang_1.global.System.import(module).then(function (module) {
                    return _this._resolver.resolveComponent(module[component_1]);
                });
            }
            return this._resolver.resolveComponent(componentType);
        };
        SystemJsComponentResolver.prototype.clearCache = function () {};
        /** @nocollapse */
        SystemJsComponentResolver.decorators = [{ type: di_1.Injectable }];
        /** @nocollapse */
        SystemJsComponentResolver.ctorParameters = [{ type: component_resolver_1.ComponentResolver }, { type: console_1.Console }];
        return SystemJsComponentResolver;
    }();
    exports.SystemJsComponentResolver = SystemJsComponentResolver;
    var FACTORY_MODULE_SUFFIX = '.ngfactory';
    var FACTORY_CLASS_SUFFIX = 'NgFactory';
    var SystemJsCmpFactoryResolver = function () {
        function SystemJsCmpFactoryResolver(_console) {
            this._console = _console;
        }
        SystemJsCmpFactoryResolver.prototype.resolveComponent = function (componentType) {
            if (lang_1.isString(componentType)) {
                this._console.warn(component_resolver_1.ComponentResolver.LazyLoadingDeprecationMsg);
                var _a = componentType.split(_SEPARATOR),
                    module = _a[0],
                    factory_1 = _a[1];
                return lang_1.global.System.import(module + FACTORY_MODULE_SUFFIX).then(function (module) {
                    return module[factory_1 + FACTORY_CLASS_SUFFIX];
                });
            }
            return Promise.resolve(null);
        };
        SystemJsCmpFactoryResolver.prototype.clearCache = function () {};
        /** @nocollapse */
        SystemJsCmpFactoryResolver.decorators = [{ type: di_1.Injectable }];
        /** @nocollapse */
        SystemJsCmpFactoryResolver.ctorParameters = [{ type: console_1.Console }];
        return SystemJsCmpFactoryResolver;
    }();
    exports.SystemJsCmpFactoryResolver = SystemJsCmpFactoryResolver;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/linker.js', ['./linker/compiler', './linker/component_factory', './linker/component_factory_resolver', './linker/component_resolver', './linker/dynamic_component_loader', './linker/element_ref', './linker/exceptions', './linker/ng_module_factory', './linker/ng_module_factory_loader', './linker/query_list', './linker/system_js_ng_module_factory_loader', './linker/systemjs_component_resolver', './linker/template_ref', './linker/view_container_ref', './linker/view_ref', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";
  // Public API for compiler

  var define,
      global = this || self,
      GLOBAL = global;
  var compiler_1 = $__require('./linker/compiler');
  exports.COMPILER_OPTIONS = compiler_1.COMPILER_OPTIONS;
  exports.Compiler = compiler_1.Compiler;
  exports.CompilerFactory = compiler_1.CompilerFactory;
  exports.ComponentStillLoadingError = compiler_1.ComponentStillLoadingError;
  exports.ModuleWithComponentFactories = compiler_1.ModuleWithComponentFactories;
  var component_factory_1 = $__require('./linker/component_factory');
  exports.ComponentFactory = component_factory_1.ComponentFactory;
  exports.ComponentRef = component_factory_1.ComponentRef;
  var component_factory_resolver_1 = $__require('./linker/component_factory_resolver');
  exports.ComponentFactoryResolver = component_factory_resolver_1.ComponentFactoryResolver;
  exports.NoComponentFactoryError = component_factory_resolver_1.NoComponentFactoryError;
  var component_resolver_1 = $__require('./linker/component_resolver');
  exports.ComponentResolver = component_resolver_1.ComponentResolver;
  var dynamic_component_loader_1 = $__require('./linker/dynamic_component_loader');
  exports.DynamicComponentLoader = dynamic_component_loader_1.DynamicComponentLoader;
  var element_ref_1 = $__require('./linker/element_ref');
  exports.ElementRef = element_ref_1.ElementRef;
  var exceptions_1 = $__require('./linker/exceptions');
  exports.ExpressionChangedAfterItHasBeenCheckedException = exceptions_1.ExpressionChangedAfterItHasBeenCheckedException;
  var ng_module_factory_1 = $__require('./linker/ng_module_factory');
  exports.NgModuleFactory = ng_module_factory_1.NgModuleFactory;
  exports.NgModuleRef = ng_module_factory_1.NgModuleRef;
  var ng_module_factory_loader_1 = $__require('./linker/ng_module_factory_loader');
  exports.NgModuleFactoryLoader = ng_module_factory_loader_1.NgModuleFactoryLoader;
  var query_list_1 = $__require('./linker/query_list');
  exports.QueryList = query_list_1.QueryList;
  var system_js_ng_module_factory_loader_1 = $__require('./linker/system_js_ng_module_factory_loader');
  exports.SystemJsNgModuleLoader = system_js_ng_module_factory_loader_1.SystemJsNgModuleLoader;
  var systemjs_component_resolver_1 = $__require('./linker/systemjs_component_resolver');
  exports.SystemJsCmpFactoryResolver = systemjs_component_resolver_1.SystemJsCmpFactoryResolver;
  exports.SystemJsComponentResolver = systemjs_component_resolver_1.SystemJsComponentResolver;
  var template_ref_1 = $__require('./linker/template_ref');
  exports.TemplateRef = template_ref_1.TemplateRef;
  var view_container_ref_1 = $__require('./linker/view_container_ref');
  exports.ViewContainerRef = view_container_ref_1.ViewContainerRef;
  var view_ref_1 = $__require('./linker/view_ref');
  exports.EmbeddedViewRef = view_ref_1.EmbeddedViewRef;
  exports.ViewRef = view_ref_1.ViewRef;
  

  return module.exports;
});
System.registerDynamic("npm:@angular/core@2.0.0-rc.5/src/change_detection.js", ["./change_detection/change_detection", "reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";
  /**
   * @module
   * @description
   * Change detection enables data binding in Angular.
   */

  var define,
      global = this || self,
      GLOBAL = global;
  var change_detection_1 = $__require("./change_detection/change_detection");
  exports.ChangeDetectionStrategy = change_detection_1.ChangeDetectionStrategy;
  exports.ChangeDetectorRef = change_detection_1.ChangeDetectorRef;
  exports.CollectionChangeRecord = change_detection_1.CollectionChangeRecord;
  exports.DefaultIterableDiffer = change_detection_1.DefaultIterableDiffer;
  exports.IterableDiffers = change_detection_1.IterableDiffers;
  exports.KeyValueChangeRecord = change_detection_1.KeyValueChangeRecord;
  exports.KeyValueDiffers = change_detection_1.KeyValueDiffers;
  exports.SimpleChange = change_detection_1.SimpleChange;
  exports.WrappedValue = change_detection_1.WrappedValue;
  

  return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/platform_directives_and_pipes.js', ['./di', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var di_1 = $__require('./di');
  /**
    * A token that can be provided when bootstrapping an application to make an array of directives
    * available in every component of the application.
    *
    * ### Example
    *
    * ```typescript
    * import {PLATFORM_DIRECTIVES} from '@angular/core';
    * import {OtherDirective} from './myDirectives';
    *
    * @Component({
    *   selector: 'my-component',
    *   template: `
    *     <!-- can use other directive even though the component does not list it in `directives` -->
    *     <other-directive></other-directive>
    *   `
    * })
    * export class MyComponent {
    *   ...
    * }
    *
    * bootstrap(MyComponent, [{provide: PLATFORM_DIRECTIVES, useValue: [OtherDirective],
    multi:true}]);
    * ```
    *
    * @deprecated Providing platform directives via a provider is deprecated. Provide platform
    * directives via an {@link NgModule} instead.
    */
  exports.PLATFORM_DIRECTIVES = new di_1.OpaqueToken('Platform Directives');
  /**
    * A token that can be provided when bootstraping an application to make an array of pipes
    * available in every component of the application.
    *
    * ### Example
    *
    * ```typescript
    * import {PLATFORM_PIPES} from '@angular/core';
    * import {OtherPipe} from './myPipe';
    *
    * @Component({
    *   selector: 'my-component',
    *   template: `
    *     {{123 | other-pipe}}
    *   `
    * })
    * export class MyComponent {
    *   ...
    * }
    *
    * bootstrap(MyComponent, [{provide: PLATFORM_PIPES, useValue: [OtherPipe], multi:true}]);
    * ```
    *
    * @deprecated Providing platform pipes via a provider is deprecated. Provide platform pipes via an
    * {@link NgModule} instead.
    */
  exports.PLATFORM_PIPES = new di_1.OpaqueToken('Platform Pipes');
  

  return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/platform_core_providers.js', ['./application_ref', './console', './reflection/reflection', './reflection/reflector_reader', './testability/testability', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var application_ref_1 = $__require('./application_ref');
  var console_1 = $__require('./console');
  var reflection_1 = $__require('./reflection/reflection');
  var reflector_reader_1 = $__require('./reflection/reflector_reader');
  var testability_1 = $__require('./testability/testability');
  function _reflector() {
    return reflection_1.reflector;
  }
  var _CORE_PLATFORM_PROVIDERS = [application_ref_1.PlatformRef_, { provide: application_ref_1.PlatformRef, useExisting: application_ref_1.PlatformRef_ }, { provide: reflection_1.Reflector, useFactory: _reflector, deps: [] }, { provide: reflector_reader_1.ReflectorReader, useExisting: reflection_1.Reflector }, testability_1.TestabilityRegistry, console_1.Console];
  /**
   * This platform has to be included in any other platform
   *
   * @experimental
   */
  exports.platformCore = application_ref_1.createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);
  /**
   * A default set of providers which should be included in any Angular platform.
   *
   * @deprecated Create platforms via `createPlatformFactory(corePlatform, ...) instead!
   */
  exports.PLATFORM_COMMON_PROVIDERS = _CORE_PLATFORM_PROVIDERS;
  

  return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/application_init.js', ['../src/facade/lang', './di', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var lang_1 = $__require('../src/facade/lang');
    var di_1 = $__require('./di');
    /**
     * A function that will be executed when an application is initialized.
     * @experimental
     */
    exports.APP_INITIALIZER = new di_1.OpaqueToken('Application Initializer');
    var ApplicationInitStatus = function () {
        function ApplicationInitStatus(appInits) {
            var _this = this;
            this._done = false;
            var asyncInitPromises = [];
            if (appInits) {
                for (var i = 0; i < appInits.length; i++) {
                    var initResult = appInits[i]();
                    if (lang_1.isPromise(initResult)) {
                        asyncInitPromises.push(initResult);
                    }
                }
            }
            this._donePromise = Promise.all(asyncInitPromises).then(function () {
                _this._done = true;
            });
            if (asyncInitPromises.length === 0) {
                this._done = true;
            }
        }
        Object.defineProperty(ApplicationInitStatus.prototype, "done", {
            get: function () {
                return this._done;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ApplicationInitStatus.prototype, "donePromise", {
            get: function () {
                return this._donePromise;
            },
            enumerable: true,
            configurable: true
        });
        /** @nocollapse */
        ApplicationInitStatus.decorators = [{ type: di_1.Injectable }];
        /** @nocollapse */
        ApplicationInitStatus.ctorParameters = [{ type: Array, decorators: [{ type: di_1.Inject, args: [exports.APP_INITIALIZER] }, { type: di_1.Optional }] }];
        return ApplicationInitStatus;
    }();
    exports.ApplicationInitStatus = ApplicationInitStatus;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/linker/component_factory.js', ['../facade/exceptions', '../facade/lang', './view_utils', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var exceptions_1 = $__require('../facade/exceptions');
    var lang_1 = $__require('../facade/lang');
    var view_utils_1 = $__require('./view_utils');
    /**
     * Represents an instance of a Component created via a {@link ComponentFactory}.
     *
     * `ComponentRef` provides access to the Component Instance as well other objects related to this
     * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}
     * method.
     * @stable
     */
    var ComponentRef = function () {
        function ComponentRef() {}
        Object.defineProperty(ComponentRef.prototype, "location", {
            /**
             * Location of the Host Element of this Component Instance.
             */
            get: function () {
                return exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ComponentRef.prototype, "injector", {
            /**
             * The injector on which the component instance exists.
             */
            get: function () {
                return exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ComponentRef.prototype, "instance", {
            /**
             * The instance of the Component.
             */
            get: function () {
                return exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        ;
        Object.defineProperty(ComponentRef.prototype, "hostView", {
            /**
             * The {@link ViewRef} of the Host View of this Component instance.
             */
            get: function () {
                return exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        ;
        Object.defineProperty(ComponentRef.prototype, "changeDetectorRef", {
            /**
             * The {@link ChangeDetectorRef} of the Component instance.
             */
            get: function () {
                return exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ComponentRef.prototype, "componentType", {
            /**
             * The component type.
             */
            get: function () {
                return exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        return ComponentRef;
    }();
    exports.ComponentRef = ComponentRef;
    var ComponentRef_ = function (_super) {
        __extends(ComponentRef_, _super);
        function ComponentRef_(_hostElement, _componentType) {
            _super.call(this);
            this._hostElement = _hostElement;
            this._componentType = _componentType;
        }
        Object.defineProperty(ComponentRef_.prototype, "location", {
            get: function () {
                return this._hostElement.elementRef;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ComponentRef_.prototype, "injector", {
            get: function () {
                return this._hostElement.injector;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ComponentRef_.prototype, "instance", {
            get: function () {
                return this._hostElement.component;
            },
            enumerable: true,
            configurable: true
        });
        ;
        Object.defineProperty(ComponentRef_.prototype, "hostView", {
            get: function () {
                return this._hostElement.parentView.ref;
            },
            enumerable: true,
            configurable: true
        });
        ;
        Object.defineProperty(ComponentRef_.prototype, "changeDetectorRef", {
            get: function () {
                return this._hostElement.parentView.ref;
            },
            enumerable: true,
            configurable: true
        });
        ;
        Object.defineProperty(ComponentRef_.prototype, "componentType", {
            get: function () {
                return this._componentType;
            },
            enumerable: true,
            configurable: true
        });
        ComponentRef_.prototype.destroy = function () {
            this._hostElement.parentView.destroy();
        };
        ComponentRef_.prototype.onDestroy = function (callback) {
            this.hostView.onDestroy(callback);
        };
        return ComponentRef_;
    }(ComponentRef);
    exports.ComponentRef_ = ComponentRef_;
    /**
     * @experimental
     */
    var EMPTY_CONTEXT = new Object();
    /**
     * @stable
     */
    var ComponentFactory = function () {
        function ComponentFactory(selector, _viewFactory, _componentType) {
            this.selector = selector;
            this._viewFactory = _viewFactory;
            this._componentType = _componentType;
        }
        Object.defineProperty(ComponentFactory.prototype, "componentType", {
            get: function () {
                return this._componentType;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new component.
         */
        ComponentFactory.prototype.create = function (injector, projectableNodes, rootSelectorOrNode) {
            if (projectableNodes === void 0) {
                projectableNodes = null;
            }
            if (rootSelectorOrNode === void 0) {
                rootSelectorOrNode = null;
            }
            var vu = injector.get(view_utils_1.ViewUtils);
            if (lang_1.isBlank(projectableNodes)) {
                projectableNodes = [];
            }
            // Note: Host views don't need a declarationAppElement!
            var hostView = this._viewFactory(vu, injector, null);
            var hostElement = hostView.create(EMPTY_CONTEXT, projectableNodes, rootSelectorOrNode);
            return new ComponentRef_(hostElement, this._componentType);
        };
        return ComponentFactory;
    }();
    exports.ComponentFactory = ComponentFactory;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/testability/testability.js', ['../di/decorators', '../facade/collection', '../facade/exceptions', '../facade/lang', '../zone/ng_zone', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var decorators_1 = $__require('../di/decorators');
    var collection_1 = $__require('../facade/collection');
    var exceptions_1 = $__require('../facade/exceptions');
    var lang_1 = $__require('../facade/lang');
    var ng_zone_1 = $__require('../zone/ng_zone');
    var Testability = function () {
        function Testability(_ngZone) {
            this._ngZone = _ngZone;
            /** @internal */
            this._pendingCount = 0;
            /** @internal */
            this._isZoneStable = true;
            /**
             * Whether any work was done since the last 'whenStable' callback. This is
             * useful to detect if this could have potentially destabilized another
             * component while it is stabilizing.
             * @internal
             */
            this._didWork = false;
            /** @internal */
            this._callbacks = [];
            this._watchAngularEvents();
        }
        /** @internal */
        Testability.prototype._watchAngularEvents = function () {
            var _this = this;
            this._ngZone.onUnstable.subscribe({
                next: function () {
                    _this._didWork = true;
                    _this._isZoneStable = false;
                }
            });
            this._ngZone.runOutsideAngular(function () {
                _this._ngZone.onStable.subscribe({
                    next: function () {
                        ng_zone_1.NgZone.assertNotInAngularZone();
                        lang_1.scheduleMicroTask(function () {
                            _this._isZoneStable = true;
                            _this._runCallbacksIfReady();
                        });
                    }
                });
            });
        };
        Testability.prototype.increasePendingRequestCount = function () {
            this._pendingCount += 1;
            this._didWork = true;
            return this._pendingCount;
        };
        Testability.prototype.decreasePendingRequestCount = function () {
            this._pendingCount -= 1;
            if (this._pendingCount < 0) {
                throw new exceptions_1.BaseException('pending async requests below zero');
            }
            this._runCallbacksIfReady();
            return this._pendingCount;
        };
        Testability.prototype.isStable = function () {
            return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;
        };
        /** @internal */
        Testability.prototype._runCallbacksIfReady = function () {
            var _this = this;
            if (this.isStable()) {
                // Schedules the call backs in a new frame so that it is always async.
                lang_1.scheduleMicroTask(function () {
                    while (_this._callbacks.length !== 0) {
                        _this._callbacks.pop()(_this._didWork);
                    }
                    _this._didWork = false;
                });
            } else {
                // Not Ready
                this._didWork = true;
            }
        };
        Testability.prototype.whenStable = function (callback) {
            this._callbacks.push(callback);
            this._runCallbacksIfReady();
        };
        Testability.prototype.getPendingRequestCount = function () {
            return this._pendingCount;
        };
        Testability.prototype.findBindings = function (using, provider, exactMatch) {
            // TODO(juliemr): implement.
            return [];
        };
        Testability.prototype.findProviders = function (using, provider, exactMatch) {
            // TODO(juliemr): implement.
            return [];
        };
        /** @nocollapse */
        Testability.decorators = [{ type: decorators_1.Injectable }];
        /** @nocollapse */
        Testability.ctorParameters = [{ type: ng_zone_1.NgZone }];
        return Testability;
    }();
    exports.Testability = Testability;
    var TestabilityRegistry = function () {
        function TestabilityRegistry() {
            /** @internal */
            this._applications = new collection_1.Map();
            _testabilityGetter.addToWindow(this);
        }
        TestabilityRegistry.prototype.registerApplication = function (token, testability) {
            this._applications.set(token, testability);
        };
        TestabilityRegistry.prototype.getTestability = function (elem) {
            return this._applications.get(elem);
        };
        TestabilityRegistry.prototype.getAllTestabilities = function () {
            return collection_1.MapWrapper.values(this._applications);
        };
        TestabilityRegistry.prototype.getAllRootElements = function () {
            return collection_1.MapWrapper.keys(this._applications);
        };
        TestabilityRegistry.prototype.findTestabilityInTree = function (elem, findInAncestors) {
            if (findInAncestors === void 0) {
                findInAncestors = true;
            }
            return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
        };
        /** @nocollapse */
        TestabilityRegistry.decorators = [{ type: decorators_1.Injectable }];
        /** @nocollapse */
        TestabilityRegistry.ctorParameters = [];
        return TestabilityRegistry;
    }();
    exports.TestabilityRegistry = TestabilityRegistry;
    var _NoopGetTestability = function () {
        function _NoopGetTestability() {}
        _NoopGetTestability.prototype.addToWindow = function (registry) {};
        _NoopGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
            return null;
        };
        return _NoopGetTestability;
    }();
    /**
     * Set the {@link GetTestability} implementation used by the Angular testing framework.
     * @experimental
     */
    function setTestabilityGetter(getter) {
        _testabilityGetter = getter;
    }
    exports.setTestabilityGetter = setTestabilityGetter;
    var _testabilityGetter = new _NoopGetTestability();
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/zone/ng_zone_impl.js', ['reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";
    /**
     * Stores error information; delivered via [NgZone.onError] stream.
     * @deprecated
     */

    var define,
        global = this || self,
        GLOBAL = global;
    var NgZoneError = function () {
        function NgZoneError(error, stackTrace) {
            this.error = error;
            this.stackTrace = stackTrace;
        }
        return NgZoneError;
    }();
    exports.NgZoneError = NgZoneError;
    var NgZoneImpl = function () {
        function NgZoneImpl(_a) {
            var _this = this;
            var trace = _a.trace,
                onEnter = _a.onEnter,
                onLeave = _a.onLeave,
                setMicrotask = _a.setMicrotask,
                setMacrotask = _a.setMacrotask,
                onError = _a.onError;
            this.onEnter = onEnter;
            this.onLeave = onLeave;
            this.setMicrotask = setMicrotask;
            this.setMacrotask = setMacrotask;
            this.onError = onError;
            if (Zone) {
                this.outer = this.inner = Zone.current;
                if (Zone['wtfZoneSpec']) {
                    this.inner = this.inner.fork(Zone['wtfZoneSpec']);
                }
                if (trace && Zone['longStackTraceZoneSpec']) {
                    this.inner = this.inner.fork(Zone['longStackTraceZoneSpec']);
                }
                this.inner = this.inner.fork({
                    name: 'angular',
                    properties: { 'isAngularZone': true },
                    onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {
                        try {
                            _this.onEnter();
                            return delegate.invokeTask(target, task, applyThis, applyArgs);
                        } finally {
                            _this.onLeave();
                        }
                    },
                    onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {
                        try {
                            _this.onEnter();
                            return delegate.invoke(target, callback, applyThis, applyArgs, source);
                        } finally {
                            _this.onLeave();
                        }
                    },
                    onHasTask: function (delegate, current, target, hasTaskState) {
                        delegate.hasTask(target, hasTaskState);
                        if (current == target) {
                            // We are only interested in hasTask events which originate from our zone
                            // (A child hasTask event is not interesting to us)
                            if (hasTaskState.change == 'microTask') {
                                _this.setMicrotask(hasTaskState.microTask);
                            } else if (hasTaskState.change == 'macroTask') {
                                _this.setMacrotask(hasTaskState.macroTask);
                            }
                        }
                    },
                    onHandleError: function (delegate, current, target, error) {
                        delegate.handleError(target, error);
                        _this.onError(new NgZoneError(error, error.stack));
                        return false;
                    }
                });
            } else {
                throw new Error('Angular requires Zone.js polyfill.');
            }
        }
        NgZoneImpl.isInAngularZone = function () {
            return Zone.current.get('isAngularZone') === true;
        };
        NgZoneImpl.prototype.runInner = function (fn) {
            return this.inner.run(fn);
        };
        ;
        NgZoneImpl.prototype.runInnerGuarded = function (fn) {
            return this.inner.runGuarded(fn);
        };
        ;
        NgZoneImpl.prototype.runOuter = function (fn) {
            return this.outer.run(fn);
        };
        ;
        return NgZoneImpl;
    }();
    exports.NgZoneImpl = NgZoneImpl;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/zone/ng_zone.js', ['../facade/async', '../facade/exceptions', './ng_zone_impl', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var async_1 = $__require('../facade/async');
    var exceptions_1 = $__require('../facade/exceptions');
    var ng_zone_impl_1 = $__require('./ng_zone_impl');
    var ng_zone_impl_2 = $__require('./ng_zone_impl');
    exports.NgZoneError = ng_zone_impl_2.NgZoneError;
    /**
     * An injectable service for executing work inside or outside of the Angular zone.
     *
     * The most common use of this service is to optimize performance when starting a work consisting of
     * one or more asynchronous tasks that don't require UI updates or error handling to be handled by
     * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks
     * can reenter the Angular zone via {@link #run}.
     *
     * <!-- TODO: add/fix links to:
     *   - docs explaining zones and the use of zones in Angular and change-detection
     *   - link to runOutsideAngular/run (throughout this file!)
     *   -->
     *
     * ### Example ([live demo](http://plnkr.co/edit/lY9m8HLy7z06vDoUaSN2?p=preview))
     * ```
     * import {Component, View, NgZone} from '@angular/core';
     * import {NgIf} from '@angular/common';
     *
     * @Component({
     *   selector: 'ng-zone-demo'.
     *   template: `
     *     <h2>Demo: NgZone</h2>
     *
     *     <p>Progress: {{progress}}%</p>
     *     <p *ngIf="progress >= 100">Done processing {{label}} of Angular zone!</p>
     *
     *     <button (click)="processWithinAngularZone()">Process within Angular zone</button>
     *     <button (click)="processOutsideOfAngularZone()">Process outside of Angular zone</button>
     *   `,
     *   directives: [NgIf]
     * })
     * export class NgZoneDemo {
     *   progress: number = 0;
     *   label: string;
     *
     *   constructor(private _ngZone: NgZone) {}
     *
     *   // Loop inside the Angular zone
     *   // so the UI DOES refresh after each setTimeout cycle
     *   processWithinAngularZone() {
     *     this.label = 'inside';
     *     this.progress = 0;
     *     this._increaseProgress(() => console.log('Inside Done!'));
     *   }
     *
     *   // Loop outside of the Angular zone
     *   // so the UI DOES NOT refresh after each setTimeout cycle
     *   processOutsideOfAngularZone() {
     *     this.label = 'outside';
     *     this.progress = 0;
     *     this._ngZone.runOutsideAngular(() => {
     *       this._increaseProgress(() => {
     *       // reenter the Angular zone and display done
     *       this._ngZone.run(() => {console.log('Outside Done!') });
     *     }}));
     *   }
     *
     *
     *   _increaseProgress(doneCallback: () => void) {
     *     this.progress += 1;
     *     console.log(`Current progress: ${this.progress}%`);
     *
     *     if (this.progress < 100) {
     *       window.setTimeout(() => this._increaseProgress(doneCallback)), 10)
     *     } else {
     *       doneCallback();
     *     }
     *   }
     * }
     * ```
     * @experimental
     */
    var NgZone = function () {
        function NgZone(_a) {
            var _this = this;
            var _b = _a.enableLongStackTrace,
                enableLongStackTrace = _b === void 0 ? false : _b;
            this._hasPendingMicrotasks = false;
            this._hasPendingMacrotasks = false;
            /** @internal */
            this._isStable = true;
            /** @internal */
            this._nesting = 0;
            /** @internal */
            this._onUnstable = new async_1.EventEmitter(false);
            /** @internal */
            this._onMicrotaskEmpty = new async_1.EventEmitter(false);
            /** @internal */
            this._onStable = new async_1.EventEmitter(false);
            /** @internal */
            this._onErrorEvents = new async_1.EventEmitter(false);
            this._zoneImpl = new ng_zone_impl_1.NgZoneImpl({
                trace: enableLongStackTrace,
                onEnter: function () {
                    // console.log('ZONE.enter', this._nesting, this._isStable);
                    _this._nesting++;
                    if (_this._isStable) {
                        _this._isStable = false;
                        _this._onUnstable.emit(null);
                    }
                },
                onLeave: function () {
                    _this._nesting--;
                    // console.log('ZONE.leave', this._nesting, this._isStable);
                    _this._checkStable();
                },
                setMicrotask: function (hasMicrotasks) {
                    _this._hasPendingMicrotasks = hasMicrotasks;
                    _this._checkStable();
                },
                setMacrotask: function (hasMacrotasks) {
                    _this._hasPendingMacrotasks = hasMacrotasks;
                },
                onError: function (error) {
                    return _this._onErrorEvents.emit(error);
                }
            });
        }
        NgZone.isInAngularZone = function () {
            return ng_zone_impl_1.NgZoneImpl.isInAngularZone();
        };
        NgZone.assertInAngularZone = function () {
            if (!ng_zone_impl_1.NgZoneImpl.isInAngularZone()) {
                throw new exceptions_1.BaseException('Expected to be in Angular Zone, but it is not!');
            }
        };
        NgZone.assertNotInAngularZone = function () {
            if (ng_zone_impl_1.NgZoneImpl.isInAngularZone()) {
                throw new exceptions_1.BaseException('Expected to not be in Angular Zone, but it is!');
            }
        };
        NgZone.prototype._checkStable = function () {
            var _this = this;
            if (this._nesting == 0) {
                if (!this._hasPendingMicrotasks && !this._isStable) {
                    try {
                        // console.log('ZONE.microtaskEmpty');
                        this._nesting++;
                        this._onMicrotaskEmpty.emit(null);
                    } finally {
                        this._nesting--;
                        if (!this._hasPendingMicrotasks) {
                            try {
                                // console.log('ZONE.stable', this._nesting, this._isStable);
                                this.runOutsideAngular(function () {
                                    return _this._onStable.emit(null);
                                });
                            } finally {
                                this._isStable = true;
                            }
                        }
                    }
                }
            }
        };
        ;
        Object.defineProperty(NgZone.prototype, "onUnstable", {
            /**
             * Notifies when code enters Angular Zone. This gets fired first on VM Turn.
             */
            get: function () {
                return this._onUnstable;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgZone.prototype, "onMicrotaskEmpty", {
            /**
             * Notifies when there is no more microtasks enqueue in the current VM Turn.
             * This is a hint for Angular to do change detection, which may enqueue more microtasks.
             * For this reason this event can fire multiple times per VM Turn.
             */
            get: function () {
                return this._onMicrotaskEmpty;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgZone.prototype, "onStable", {
            /**
             * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which
             * implies we are about to relinquish VM turn.
             * This event gets called just once.
             */
            get: function () {
                return this._onStable;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgZone.prototype, "onError", {
            /**
             * Notify that an error has been delivered.
             */
            get: function () {
                return this._onErrorEvents;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgZone.prototype, "isStable", {
            /**
             * Whether there are no outstanding microtasks or microtasks.
             */
            get: function () {
                return this._isStable;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgZone.prototype, "hasPendingMicrotasks", {
            /**
             * Whether there are any outstanding microtasks.
             */
            get: function () {
                return this._hasPendingMicrotasks;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgZone.prototype, "hasPendingMacrotasks", {
            /**
             * Whether there are any outstanding microtasks.
             */
            get: function () {
                return this._hasPendingMacrotasks;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Executes the `fn` function synchronously within the Angular zone and returns value returned by
         * the function.
         *
         * Running functions via `run` allows you to reenter Angular zone from a task that was executed
         * outside of the Angular zone (typically started via {@link #runOutsideAngular}).
         *
         * Any future tasks or microtasks scheduled from within this function will continue executing from
         * within the Angular zone.
         *
         * If a synchronous error happens it will be rethrown and not reported via `onError`.
         */
        NgZone.prototype.run = function (fn) {
            return this._zoneImpl.runInner(fn);
        };
        /**
         * Same as #run, except that synchronous errors are caught and forwarded
         * via `onError` and not rethrown.
         */
        NgZone.prototype.runGuarded = function (fn) {
            return this._zoneImpl.runInnerGuarded(fn);
        };
        /**
         * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by
         * the function.
         *
         * Running functions via `runOutsideAngular` allows you to escape Angular's zone and do work that
         * doesn't trigger Angular change-detection or is subject to Angular's error handling.
         *
         * Any future tasks or microtasks scheduled from within this function will continue executing from
         * outside of the Angular zone.
         *
         * Use {@link #run} to reenter the Angular zone and do work that updates the application model.
         */
        NgZone.prototype.runOutsideAngular = function (fn) {
            return this._zoneImpl.runOuter(fn);
        };
        return NgZone;
    }();
    exports.NgZone = NgZone;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/application_ref.js', ['../src/facade/collection', '../src/facade/exceptions', '../src/facade/lang', './application_init', './application_tokens', './console', './di', './linker/compiler', './linker/component_factory', './linker/component_factory_resolver', './profile/profile', './testability/testability', './zone/ng_zone', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var collection_1 = $__require('../src/facade/collection');
    var exceptions_1 = $__require('../src/facade/exceptions');
    var lang_1 = $__require('../src/facade/lang');
    var application_init_1 = $__require('./application_init');
    var application_tokens_1 = $__require('./application_tokens');
    var console_1 = $__require('./console');
    var di_1 = $__require('./di');
    var compiler_1 = $__require('./linker/compiler');
    var component_factory_1 = $__require('./linker/component_factory');
    var component_factory_resolver_1 = $__require('./linker/component_factory_resolver');
    var profile_1 = $__require('./profile/profile');
    var testability_1 = $__require('./testability/testability');
    var ng_zone_1 = $__require('./zone/ng_zone');
    var _devMode = true;
    var _runModeLocked = false;
    var _platform;
    /**
     * Disable Angular's development mode, which turns off assertions and other
     * checks within the framework.
     *
     * One important assertion this disables verifies that a change detection pass
     * does not result in additional changes to any bindings (also known as
     * unidirectional data flow).
     *
     * @experimental APIs related to application bootstrap are currently under review.
     */
    function enableProdMode() {
        if (_runModeLocked) {
            // Cannot use BaseException as that ends up importing from facade/lang.
            throw new exceptions_1.BaseException('Cannot enable prod mode after platform setup.');
        }
        _devMode = false;
    }
    exports.enableProdMode = enableProdMode;
    /**
     * Locks the run mode of Angular. After this has been called,
     * it can't be changed any more. I.e. `isDevMode()` will always
     * return the same value.
     *
     * @deprecated This is a noop now. {@link isDevMode} automatically locks the run mode on first call.
     */
    function lockRunMode() {
        console.warn('lockRunMode() is deprecated and not needed any more.');
    }
    exports.lockRunMode = lockRunMode;
    /**
     * Returns whether Angular is in development mode. After called once,
     * the value is locked and won't change any more.
     *
     * By default, this is true, unless a user calls `enableProdMode` before calling this.
     *
     * @experimental APIs related to application bootstrap are currently under review.
     */
    function isDevMode() {
        _runModeLocked = true;
        return _devMode;
    }
    exports.isDevMode = isDevMode;
    /**
     * Creates a platform.
     * Platforms have to be eagerly created via this function.
     *
     * @experimental APIs related to application bootstrap are currently under review.
     */
    function createPlatform(injector) {
        if (lang_1.isPresent(_platform) && !_platform.disposed) {
            throw new exceptions_1.BaseException('There can be only one platform. Destroy the previous one to create a new one.');
        }
        _platform = injector.get(PlatformRef);
        var inits = injector.get(application_tokens_1.PLATFORM_INITIALIZER, null);
        if (lang_1.isPresent(inits)) inits.forEach(function (init) {
            return init();
        });
        return _platform;
    }
    exports.createPlatform = createPlatform;
    /**
     * Creates a factory for a platform
     *
     * @experimental APIs related to application bootstrap are currently under review.
     */
    function createPlatformFactory(parentPlaformFactory, name, providers) {
        if (providers === void 0) {
            providers = [];
        }
        var marker = new di_1.OpaqueToken("Platform: " + name);
        return function (extraProviders) {
            if (extraProviders === void 0) {
                extraProviders = [];
            }
            if (!getPlatform()) {
                if (parentPlaformFactory) {
                    parentPlaformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));
                } else {
                    createPlatform(di_1.ReflectiveInjector.resolveAndCreate(providers.concat(extraProviders).concat({ provide: marker, useValue: true })));
                }
            }
            return assertPlatform(marker);
        };
    }
    exports.createPlatformFactory = createPlatformFactory;
    /**
     * Checks that there currently is a platform
     * which contains the given token as a provider.
     *
     * @experimental APIs related to application bootstrap are currently under review.
     */
    function assertPlatform(requiredToken) {
        var platform = getPlatform();
        if (lang_1.isBlank(platform)) {
            throw new exceptions_1.BaseException('No platform exists!');
        }
        if (lang_1.isPresent(platform) && lang_1.isBlank(platform.injector.get(requiredToken, null))) {
            throw new exceptions_1.BaseException('A platform with a different configuration has been created. Please destroy it first.');
        }
        return platform;
    }
    exports.assertPlatform = assertPlatform;
    /**
     * Dispose the existing platform.
     *
     * @deprecated Use `destroyPlatform` instead
     */
    function disposePlatform() {
        destroyPlatform();
    }
    exports.disposePlatform = disposePlatform;
    /**
     * Destroy the existing platform.
     *
     * @experimental APIs related to application bootstrap are currently under review.
     */
    function destroyPlatform() {
        if (lang_1.isPresent(_platform) && !_platform.destroyed) {
            _platform.destroy();
        }
    }
    exports.destroyPlatform = destroyPlatform;
    /**
     * Returns the current platform.
     *
     * @experimental APIs related to application bootstrap are currently under review.
     */
    function getPlatform() {
        return lang_1.isPresent(_platform) && !_platform.disposed ? _platform : null;
    }
    exports.getPlatform = getPlatform;
    /**
     * Shortcut for ApplicationRef.bootstrap.
     * Requires a platform to be created first.
     *
     * @deprecated Use {@link bootstrapModuleFactory} instead.
     */
    function coreBootstrap(componentFactory, injector) {
        throw new exceptions_1.BaseException('coreBootstrap is deprecated. Use bootstrapModuleFactory instead.');
    }
    exports.coreBootstrap = coreBootstrap;
    /**
     * Resolves the componentFactory for the given component,
     * waits for asynchronous initializers and bootstraps the component.
     * Requires a platform to be created first.
     *
     * @deprecated Use {@link bootstrapModule} instead.
     */
    function coreLoadAndBootstrap(componentType, injector) {
        throw new exceptions_1.BaseException('coreLoadAndBootstrap is deprecated. Use bootstrapModule instead.');
    }
    exports.coreLoadAndBootstrap = coreLoadAndBootstrap;
    /**
     * The Angular platform is the entry point for Angular on a web page. Each page
     * has exactly one platform, and services (such as reflection) which are common
     * to every Angular application running on the page are bound in its scope.
     *
     * A page's platform is initialized implicitly when {@link bootstrap}() is called, or
     * explicitly by calling {@link createPlatform}().
     *
     * @experimental APIs related to application bootstrap are currently under review.
     */
    var PlatformRef = function () {
        function PlatformRef() {}
        /**
         * Creates an instance of an `@NgModule` for the given platform
         * for offline compilation.
         *
         * ## Simple Example
         *
         * ```typescript
         * my_module.ts:
         *
         * @NgModule({
         *   imports: [BrowserModule]
         * })
         * class MyModule {}
         *
         * main.ts:
         * import {MyModuleNgFactory} from './my_module.ngfactory';
         * import {browserPlatform} from '@angular/platform-browser';
         *
         * let moduleRef = browserPlatform().bootstrapModuleFactory(MyModuleNgFactory);
         * ```
         *
         * @experimental APIs related to application bootstrap are currently under review.
         */
        PlatformRef.prototype.bootstrapModuleFactory = function (moduleFactory) {
            throw exceptions_1.unimplemented();
        };
        /**
         * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.
         *
         * ## Simple Example
         *
         * ```typescript
         * @NgModule({
         *   imports: [BrowserModule]
         * })
         * class MyModule {}
         *
         * let moduleRef = browserPlatform().bootstrapModule(MyModule);
         * ```
         * @stable
         */
        PlatformRef.prototype.bootstrapModule = function (moduleType, compilerOptions) {
            if (compilerOptions === void 0) {
                compilerOptions = [];
            }
            throw exceptions_1.unimplemented();
        };
        Object.defineProperty(PlatformRef.prototype, "injector", {
            /**
             * Retrieve the platform {@link Injector}, which is the parent injector for
             * every Angular application on the page and provides singleton providers.
             */
            get: function () {
                throw exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        ;
        Object.defineProperty(PlatformRef.prototype, "disposed", {
            /**
             * @deprecated Use `destroyed` instead
             */
            get: function () {
                throw exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlatformRef.prototype, "destroyed", {
            get: function () {
                throw exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        return PlatformRef;
    }();
    exports.PlatformRef = PlatformRef;
    function _callAndReportToExceptionHandler(exceptionHandler, callback) {
        try {
            var result = callback();
            if (lang_1.isPromise(result)) {
                return result.catch(function (e) {
                    exceptionHandler.call(e);
                    // rethrow as the exception handler might not do it
                    throw e;
                });
            } else {
                return result;
            }
        } catch (e) {
            exceptionHandler.call(e);
            // rethrow as the exception handler might not do it
            throw e;
        }
    }
    var PlatformRef_ = function (_super) {
        __extends(PlatformRef_, _super);
        function PlatformRef_(_injector) {
            _super.call(this);
            this._injector = _injector;
            this._modules = [];
            this._destroyListeners = [];
            this._destroyed = false;
        }
        /**
         * @deprecated
         */
        PlatformRef_.prototype.registerDisposeListener = function (dispose) {
            this.onDestroy(dispose);
        };
        PlatformRef_.prototype.onDestroy = function (callback) {
            this._destroyListeners.push(callback);
        };
        Object.defineProperty(PlatformRef_.prototype, "injector", {
            get: function () {
                return this._injector;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlatformRef_.prototype, "disposed", {
            /**
             * @deprecated
             */
            get: function () {
                return this.destroyed;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlatformRef_.prototype, "destroyed", {
            get: function () {
                return this._destroyed;
            },
            enumerable: true,
            configurable: true
        });
        PlatformRef_.prototype.destroy = function () {
            if (this._destroyed) {
                throw new exceptions_1.BaseException('The platform has already been destroyed!');
            }
            collection_1.ListWrapper.clone(this._modules).forEach(function (app) {
                return app.destroy();
            });
            this._destroyListeners.forEach(function (dispose) {
                return dispose();
            });
            this._destroyed = true;
        };
        /**
         * @deprecated
         */
        PlatformRef_.prototype.dispose = function () {
            this.destroy();
        };
        PlatformRef_.prototype.bootstrapModuleFactory = function (moduleFactory) {
            return this._bootstrapModuleFactoryWithZone(moduleFactory, null);
        };
        PlatformRef_.prototype._bootstrapModuleFactoryWithZone = function (moduleFactory, ngZone) {
            var _this = this;
            // Note: We need to create the NgZone _before_ we instantiate the module,
            // as instantiating the module creates some providers eagerly.
            // So we create a mini parent injector that just contains the new NgZone and
            // pass that as parent to the NgModuleFactory.
            if (!ngZone) ngZone = new ng_zone_1.NgZone({ enableLongStackTrace: isDevMode() });
            // Attention: Don't use ApplicationRef.run here,
            // as we want to be sure that all possible constructor calls are inside `ngZone.run`!
            return ngZone.run(function () {
                var ngZoneInjector = di_1.ReflectiveInjector.resolveAndCreate([{ provide: ng_zone_1.NgZone, useValue: ngZone }], _this.injector);
                var moduleRef = moduleFactory.create(ngZoneInjector);
                var exceptionHandler = moduleRef.injector.get(exceptions_1.ExceptionHandler, null);
                if (!exceptionHandler) {
                    throw new Error('No ExceptionHandler. Is platform module (BrowserModule) included?');
                }
                moduleRef.onDestroy(function () {
                    return collection_1.ListWrapper.remove(_this._modules, moduleRef);
                });
                ngZone.onError.subscribe({
                    next: function (error) {
                        exceptionHandler.call(error.error, error.stackTrace);
                    }
                });
                return _callAndReportToExceptionHandler(exceptionHandler, function () {
                    var initStatus = moduleRef.injector.get(application_init_1.ApplicationInitStatus);
                    return initStatus.donePromise.then(function () {
                        _this._moduleDoBootstrap(moduleRef);
                        return moduleRef;
                    });
                });
            });
        };
        PlatformRef_.prototype.bootstrapModule = function (moduleType, compilerOptions) {
            if (compilerOptions === void 0) {
                compilerOptions = [];
            }
            return this._bootstrapModuleWithZone(moduleType, compilerOptions, null);
        };
        PlatformRef_.prototype._bootstrapModuleWithZone = function (moduleType, compilerOptions, ngZone) {
            var _this = this;
            if (compilerOptions === void 0) {
                compilerOptions = [];
            }
            var compilerFactory = this.injector.get(compiler_1.CompilerFactory);
            var compiler = compilerFactory.createCompiler(compilerOptions instanceof Array ? compilerOptions : [compilerOptions]);
            return compiler.compileModuleAsync(moduleType).then(function (moduleFactory) {
                return _this._bootstrapModuleFactoryWithZone(moduleFactory, ngZone);
            });
        };
        PlatformRef_.prototype._moduleDoBootstrap = function (moduleRef) {
            var appRef = moduleRef.injector.get(ApplicationRef);
            if (moduleRef.bootstrapFactories.length > 0) {
                moduleRef.bootstrapFactories.forEach(function (compFactory) {
                    return appRef.bootstrap(compFactory);
                });
            } else if (moduleRef.instance.ngDoBootstrap) {
                moduleRef.instance.ngDoBootstrap(appRef);
            } else {
                throw new exceptions_1.BaseException("The module " + lang_1.stringify(moduleRef.instance.constructor) + " was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. " + "Please define one of these.");
            }
        };
        /** @nocollapse */
        PlatformRef_.decorators = [{ type: di_1.Injectable }];
        /** @nocollapse */
        PlatformRef_.ctorParameters = [{ type: di_1.Injector }];
        return PlatformRef_;
    }(PlatformRef);
    exports.PlatformRef_ = PlatformRef_;
    /**
     * A reference to an Angular application running on a page.
     *
     * For more about Angular applications, see the documentation for {@link bootstrap}.
     *
     * @experimental APIs related to application bootstrap are currently under review.
     */
    var ApplicationRef = function () {
        function ApplicationRef() {}
        Object.defineProperty(ApplicationRef.prototype, "injector", {
            /**
             * Retrieve the application {@link Injector}.
             *
             * @deprecated inject an {@link Injector} directly where needed or use {@link
             * NgModuleRef}.injector.
             */
            get: function () {
                return exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        ;
        Object.defineProperty(ApplicationRef.prototype, "zone", {
            /**
             * Retrieve the application {@link NgZone}.
             *
             * @deprecated inject {@link NgZone} instead of calling this getter.
             */
            get: function () {
                return exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        ;
        Object.defineProperty(ApplicationRef.prototype, "componentTypes", {
            /**
             * Get a list of component types registered to this application.
             * This list is populated even before the component is created.
             */
            get: function () {
                return exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        ;
        Object.defineProperty(ApplicationRef.prototype, "components", {
            /**
             * Get a list of components registered to this application.
             */
            get: function () {
                return exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        ;
        return ApplicationRef;
    }();
    exports.ApplicationRef = ApplicationRef;
    var ApplicationRef_ = function (_super) {
        __extends(ApplicationRef_, _super);
        function ApplicationRef_(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus, _testabilityRegistry, _testability) {
            var _this = this;
            _super.call(this);
            this._zone = _zone;
            this._console = _console;
            this._injector = _injector;
            this._exceptionHandler = _exceptionHandler;
            this._componentFactoryResolver = _componentFactoryResolver;
            this._initStatus = _initStatus;
            this._testabilityRegistry = _testabilityRegistry;
            this._testability = _testability;
            this._bootstrapListeners = [];
            /**
             * @deprecated
             */
            this._disposeListeners = [];
            this._rootComponents = [];
            this._rootComponentTypes = [];
            this._changeDetectorRefs = [];
            this._runningTick = false;
            this._enforceNoNewChanges = false;
            this._enforceNoNewChanges = isDevMode();
            this._zone.onMicrotaskEmpty.subscribe({ next: function () {
                    _this._zone.run(function () {
                        _this.tick();
                    });
                } });
        }
        /**
         * @deprecated
         */
        ApplicationRef_.prototype.registerBootstrapListener = function (listener) {
            this._bootstrapListeners.push(listener);
        };
        /**
         * @deprecated
         */
        ApplicationRef_.prototype.registerDisposeListener = function (dispose) {
            this._disposeListeners.push(dispose);
        };
        ApplicationRef_.prototype.registerChangeDetector = function (changeDetector) {
            this._changeDetectorRefs.push(changeDetector);
        };
        ApplicationRef_.prototype.unregisterChangeDetector = function (changeDetector) {
            collection_1.ListWrapper.remove(this._changeDetectorRefs, changeDetector);
        };
        /**
         * @deprecated
         */
        ApplicationRef_.prototype.waitForAsyncInitializers = function () {
            return this._initStatus.donePromise;
        };
        /**
         * @deprecated
         */
        ApplicationRef_.prototype.run = function (callback) {
            var _this = this;
            return this._zone.run(function () {
                return _callAndReportToExceptionHandler(_this._exceptionHandler, callback);
            });
        };
        ApplicationRef_.prototype.bootstrap = function (componentOrFactory) {
            var _this = this;
            if (!this._initStatus.done) {
                throw new exceptions_1.BaseException('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');
            }
            var componentFactory;
            if (componentOrFactory instanceof component_factory_1.ComponentFactory) {
                componentFactory = componentOrFactory;
            } else {
                componentFactory = this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);
            }
            this._rootComponentTypes.push(componentFactory.componentType);
            var compRef = componentFactory.create(this._injector, [], componentFactory.selector);
            compRef.onDestroy(function () {
                _this._unloadComponent(compRef);
            });
            var testability = compRef.injector.get(testability_1.Testability, null);
            if (lang_1.isPresent(testability)) {
                compRef.injector.get(testability_1.TestabilityRegistry).registerApplication(compRef.location.nativeElement, testability);
            }
            this._loadComponent(compRef);
            if (isDevMode()) {
                this._console.log("Angular 2 is running in the development mode. Call enableProdMode() to enable the production mode.");
            }
            return compRef;
        };
        /** @internal */
        ApplicationRef_.prototype._loadComponent = function (componentRef) {
            this._changeDetectorRefs.push(componentRef.changeDetectorRef);
            this.tick();
            this._rootComponents.push(componentRef);
            // Get the listeners lazily to prevent DI cycles.
            var listeners = this._injector.get(application_tokens_1.APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);
            listeners.forEach(function (listener) {
                return listener(componentRef);
            });
        };
        /** @internal */
        ApplicationRef_.prototype._unloadComponent = function (componentRef) {
            if (!collection_1.ListWrapper.contains(this._rootComponents, componentRef)) {
                return;
            }
            this.unregisterChangeDetector(componentRef.changeDetectorRef);
            collection_1.ListWrapper.remove(this._rootComponents, componentRef);
        };
        Object.defineProperty(ApplicationRef_.prototype, "injector", {
            /**
             * @deprecated
             */
            get: function () {
                return this._injector;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ApplicationRef_.prototype, "zone", {
            /**
             * @deprecated
             */
            get: function () {
                return this._zone;
            },
            enumerable: true,
            configurable: true
        });
        ApplicationRef_.prototype.tick = function () {
            if (this._runningTick) {
                throw new exceptions_1.BaseException('ApplicationRef.tick is called recursively');
            }
            var s = ApplicationRef_._tickScope();
            try {
                this._runningTick = true;
                this._changeDetectorRefs.forEach(function (detector) {
                    return detector.detectChanges();
                });
                if (this._enforceNoNewChanges) {
                    this._changeDetectorRefs.forEach(function (detector) {
                        return detector.checkNoChanges();
                    });
                }
            } finally {
                this._runningTick = false;
                profile_1.wtfLeave(s);
            }
        };
        ApplicationRef_.prototype.ngOnDestroy = function () {
            // TODO(alxhub): Dispose of the NgZone.
            collection_1.ListWrapper.clone(this._rootComponents).forEach(function (ref) {
                return ref.destroy();
            });
            this._disposeListeners.forEach(function (dispose) {
                return dispose();
            });
        };
        /**
         * @deprecated
         */
        ApplicationRef_.prototype.dispose = function () {
            this.ngOnDestroy();
        };
        Object.defineProperty(ApplicationRef_.prototype, "componentTypes", {
            get: function () {
                return this._rootComponentTypes;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ApplicationRef_.prototype, "components", {
            get: function () {
                return this._rootComponents;
            },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        ApplicationRef_._tickScope = profile_1.wtfCreateScope('ApplicationRef#tick()');
        /** @nocollapse */
        ApplicationRef_.decorators = [{ type: di_1.Injectable }];
        /** @nocollapse */
        ApplicationRef_.ctorParameters = [{ type: ng_zone_1.NgZone }, { type: console_1.Console }, { type: di_1.Injector }, { type: exceptions_1.ExceptionHandler }, { type: component_factory_resolver_1.ComponentFactoryResolver }, { type: application_init_1.ApplicationInitStatus }, { type: testability_1.TestabilityRegistry, decorators: [{ type: di_1.Optional }] }, { type: testability_1.Testability, decorators: [{ type: di_1.Optional }] }];
        return ApplicationRef_;
    }(ApplicationRef);
    exports.ApplicationRef_ = ApplicationRef_;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/linker/component_resolver.js', ['reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";
  /**
   * Low-level service for loading {@link ComponentFactory}s, which
   * can later be used to create and render a Component instance.
   *
   * @deprecated Use {@link ComponentFactoryResolver} together with {@link
   * NgModule}.entryComponents}/{@link Component}.entryComponents or
   * {@link ANALYZE_FOR_ENTRY_COMPONENTS} provider for dynamic component creation.
   * Use {@link NgModuleFactoryLoader} for lazy loading.
   */

  var define,
      global = this || self,
      GLOBAL = global;
  var ComponentResolver = function () {
    function ComponentResolver() {}
    ComponentResolver.DynamicCompilationDeprecationMsg = 'ComponentResolver is deprecated for dynamic compilation. Use ComponentFactoryResolver together with @NgModule/@Component.entryComponents or ANALYZE_FOR_ENTRY_COMPONENTS provider instead. For runtime compile only, you can also use Compiler.compileComponentSync/Async.';
    ComponentResolver.LazyLoadingDeprecationMsg = 'ComponentResolver is deprecated for lazy loading. Use NgModuleFactoryLoader instead.';
    return ComponentResolver;
  }();
  exports.ComponentResolver = ComponentResolver;
  

  return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/linker/compiler.js', ['../di', '../facade/exceptions', '../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var di_1 = $__require('../di');
  var exceptions_1 = $__require('../facade/exceptions');
  var lang_1 = $__require('../facade/lang');
  /**
   * Indicates that a component is still being loaded in a synchronous compile.
   *
   * @stable
   */
  var ComponentStillLoadingError = function (_super) {
    __extends(ComponentStillLoadingError, _super);
    function ComponentStillLoadingError(compType) {
      _super.call(this, "Can't compile synchronously as " + lang_1.stringify(compType) + " is still being loaded!");
      this.compType = compType;
    }
    return ComponentStillLoadingError;
  }(exceptions_1.BaseException);
  exports.ComponentStillLoadingError = ComponentStillLoadingError;
  /**
   * Combination of NgModuleFactory and ComponentFactorys.
   *
   * @experimental
   */
  var ModuleWithComponentFactories = function () {
    function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {
      this.ngModuleFactory = ngModuleFactory;
      this.componentFactories = componentFactories;
    }
    return ModuleWithComponentFactories;
  }();
  exports.ModuleWithComponentFactories = ModuleWithComponentFactories;
  function _throwError() {
    throw new exceptions_1.BaseException("Runtime compiler is not loaded");
  }
  /**
   * Low-level service for running the angular compiler duirng runtime
   * to create {@link ComponentFactory}s, which
   * can later be used to create and render a Component instance.
   *
   * Each `@NgModule` provides an own `Compiler` to its injector,
   * that will use the directives/pipes of the ng module for compilation
   * of components.
   * @stable
   */
  var Compiler = function () {
    function Compiler() {}
    /**
     * Loads the template and styles of a component and returns the associated `ComponentFactory`.
     */
    Compiler.prototype.compileComponentAsync = function (component, ngModule) {
      if (ngModule === void 0) {
        ngModule = null;
      }
      throw _throwError();
    };
    /**
     * Compiles the given component. All templates have to be either inline or compiled via
     * `compileComponentAsync` before. Otherwise throws a {@link ComponentStillLoadingError}.
     */
    Compiler.prototype.compileComponentSync = function (component, ngModule) {
      if (ngModule === void 0) {
        ngModule = null;
      }
      throw _throwError();
    };
    /**
     * Compiles the given NgModule and all of its components. All templates of the components listed
     * in `entryComponents`
     * have to be inlined. Otherwise throws a {@link ComponentStillLoadingError}.
     */
    Compiler.prototype.compileModuleSync = function (moduleType) {
      throw _throwError();
    };
    /**
     * Compiles the given NgModule and all of its components
     */
    Compiler.prototype.compileModuleAsync = function (moduleType) {
      throw _throwError();
    };
    /**
     * Same as {@link compileModuleSync} put also creates ComponentFactories for all components.
     */
    Compiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
      throw _throwError();
    };
    /**
     * Same as {@link compileModuleAsync} put also creates ComponentFactories for all components.
     */
    Compiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
      throw _throwError();
    };
    /**
     * Clears all caches
     */
    Compiler.prototype.clearCache = function () {};
    /**
     * Clears the cache for the given component/ngModule.
     */
    Compiler.prototype.clearCacheFor = function (type) {};
    return Compiler;
  }();
  exports.Compiler = Compiler;
  /**
   * Token to provide CompilerOptions in the platform injector.
   *
   * @experimental
   */
  exports.COMPILER_OPTIONS = new di_1.OpaqueToken('compilerOptions');
  /**
   * A factory for creating a Compiler
   *
   * @experimental
   */
  var CompilerFactory = function () {
    function CompilerFactory() {}
    return CompilerFactory;
  }();
  exports.CompilerFactory = CompilerFactory;
  

  return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/linker/dynamic_component_loader.js', ['../di', '../facade/lang', './compiler', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var di_1 = $__require('../di');
    var lang_1 = $__require('../facade/lang');
    var compiler_1 = $__require('./compiler');
    /**
     * Use ComponentFactoryResolver and ViewContainerRef directly.
     *
     * @deprecated
     */
    var DynamicComponentLoader = function () {
        function DynamicComponentLoader() {}
        return DynamicComponentLoader;
    }();
    exports.DynamicComponentLoader = DynamicComponentLoader;
    var DynamicComponentLoader_ = function (_super) {
        __extends(DynamicComponentLoader_, _super);
        function DynamicComponentLoader_(_compiler) {
            _super.call(this);
            this._compiler = _compiler;
        }
        DynamicComponentLoader_.prototype.loadAsRoot = function (type, overrideSelectorOrNode, injector, onDispose, projectableNodes) {
            return this._compiler.compileComponentAsync(type).then(function (componentFactory) {
                var componentRef = componentFactory.create(injector, projectableNodes, lang_1.isPresent(overrideSelectorOrNode) ? overrideSelectorOrNode : componentFactory.selector);
                if (lang_1.isPresent(onDispose)) {
                    componentRef.onDestroy(onDispose);
                }
                return componentRef;
            });
        };
        DynamicComponentLoader_.prototype.loadNextToLocation = function (type, location, providers, projectableNodes) {
            if (providers === void 0) {
                providers = null;
            }
            if (projectableNodes === void 0) {
                projectableNodes = null;
            }
            return this._compiler.compileComponentAsync(type).then(function (componentFactory) {
                var contextInjector = location.parentInjector;
                var childInjector = lang_1.isPresent(providers) && providers.length > 0 ? di_1.ReflectiveInjector.fromResolvedProviders(providers, contextInjector) : contextInjector;
                return location.createComponent(componentFactory, location.length, childInjector, projectableNodes);
            });
        };
        /** @nocollapse */
        DynamicComponentLoader_.decorators = [{ type: di_1.Injectable }];
        /** @nocollapse */
        DynamicComponentLoader_.ctorParameters = [{ type: compiler_1.Compiler }];
        return DynamicComponentLoader_;
    }(DynamicComponentLoader);
    exports.DynamicComponentLoader_ = DynamicComponentLoader_;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/metadata/di.js', ['../di/forward_ref', '../di/metadata', '../di/opaque_token', '../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var forward_ref_1 = $__require('../di/forward_ref');
    var metadata_1 = $__require('../di/metadata');
    var opaque_token_1 = $__require('../di/opaque_token');
    var lang_1 = $__require('../facade/lang');
    /**
     * This token can be used to create a virtual provider that will populate the
     * `entryComponents` fields of components and ng modules based on its `useValue`.
     * All components that are referenced in the `useValue` value (either directly
     * or in a nested array or map) will be added to the `entryComponents` property.
     *
     * ### Example
     * The following example shows how the router can populate the `entryComponents`
     * field of an NgModule based on the router configuration which refers
     * to components.
     *
     * ```typescript
     * // helper function inside the router
     * function provideRoutes(routes) {
     *   return [
     *     {provide: ROUTES, useValue: routes},
     *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}
     *   ];
     * }
     *
     * // user code
     * let routes = [
     *   {path: '/root', component: RootComp},
     *   {path: /teams', component: TeamsComp}
     * ];
     *
     * @NgModule({
     *   providers: [provideRoutes(routes)]
     * })
     * class ModuleWithRoutes {}
     * ```
     *
     * @experimental
     */
    exports.ANALYZE_FOR_ENTRY_COMPONENTS = new opaque_token_1.OpaqueToken('AnalyzeForEntryComponents');
    /**
     * Specifies that a constant attribute value should be injected.
     *
     * The directive can inject constant string literals of host element attributes.
     *
     * ### Example
     *
     * Suppose we have an `<input>` element and want to know its `type`.
     *
     * ```html
     * <input type="text">
     * ```
     *
     * A decorator can inject string literal `text` like so:
     *
     * {@example core/ts/metadata/metadata.ts region='attributeMetadata'}
     * @stable
     */
    var AttributeMetadata = function (_super) {
        __extends(AttributeMetadata, _super);
        function AttributeMetadata(attributeName) {
            _super.call(this);
            this.attributeName = attributeName;
        }
        Object.defineProperty(AttributeMetadata.prototype, "token", {
            get: function () {
                // Normally one would default a token to a type of an injected value but here
                // the type of a variable is "string" and we can't use primitive type as a return value
                // so we use instance of Attribute instead. This doesn't matter much in practice as arguments
                // with @Attribute annotation are injected by ElementInjector that doesn't take tokens into
                // account.
                return this;
            },
            enumerable: true,
            configurable: true
        });
        AttributeMetadata.prototype.toString = function () {
            return "@Attribute(" + lang_1.stringify(this.attributeName) + ")";
        };
        return AttributeMetadata;
    }(metadata_1.DependencyMetadata);
    exports.AttributeMetadata = AttributeMetadata;
    /**
     * Declares an injectable parameter to be a live list of directives or variable
     * bindings from the content children of a directive.
     *
     * ### Example ([live demo](http://plnkr.co/edit/lY9m8HLy7z06vDoUaSN2?p=preview))
     *
     * Assume that `<tabs>` component would like to get a list its children `<pane>`
     * components as shown in this example:
     *
     * ```html
     * <tabs>
     *   <pane title="Overview">...</pane>
     *   <pane *ngFor="let o of objects" [title]="o.title">{{o.text}}</pane>
     * </tabs>
     * ```
     *
     * The preferred solution is to query for `Pane` directives using this decorator.
     *
     * ```javascript
     * @Component({
     *   selector: 'pane',
     *   inputs: ['title']
     * })
     * class Pane {
     *   title:string;
     * }
     *
     * @Component({
     *  selector: 'tabs',
     *  template: `
     *    <ul>
     *      <li *ngFor="let pane of panes">{{pane.title}}</li>
     *    </ul>
     *    <ng-content></ng-content>
     *  `
     * })
     * class Tabs {
     *   panes: QueryList<Pane>;
     *   constructor(@Query(Pane) panes:QueryList<Pane>) {
      *    this.panes = panes;
      *  }
     * }
     * ```
     *
     * A query can look for variable bindings by passing in a string with desired binding symbol.
     *
     * ### Example ([live demo](http://plnkr.co/edit/sT2j25cH1dURAyBRCKx1?p=preview))
     * ```html
     * <seeker>
     *   <div #findme>...</div>
     * </seeker>
     *
     * @Component({ selector: 'seeker' })
     * class Seeker {
     *   constructor(@Query('findme') elList: QueryList<ElementRef>) {...}
     * }
     * ```
     *
     * In this case the object that is injected depend on the type of the variable
     * binding. It can be an ElementRef, a directive or a component.
     *
     * Passing in a comma separated list of variable bindings will query for all of them.
     *
     * ```html
     * <seeker>
     *   <div #find-me>...</div>
     *   <div #find-me-too>...</div>
     * </seeker>
     *
     *  @Component({
     *   selector: 'seeker'
     * })
     * class Seeker {
     *   constructor(@Query('findMe, findMeToo') elList: QueryList<ElementRef>) {...}
     * }
     * ```
     *
     * Configure whether query looks for direct children or all descendants
     * of the querying element, by using the `descendants` parameter.
     * It is set to `false` by default.
     *
     * ### Example ([live demo](http://plnkr.co/edit/wtGeB977bv7qvA5FTYl9?p=preview))
     * ```html
     * <container #first>
     *   <item>a</item>
     *   <item>b</item>
     *   <container #second>
     *     <item>c</item>
     *   </container>
     * </container>
     * ```
     *
     * When querying for items, the first container will see only `a` and `b` by default,
     * but with `Query(TextDirective, {descendants: true})` it will see `c` too.
     *
     * The queried directives are kept in a depth-first pre-order with respect to their
     * positions in the DOM.
     *
     * Query does not look deep into any subcomponent views.
     *
     * Query is updated as part of the change-detection cycle. Since change detection
     * happens after construction of a directive, QueryList will always be empty when observed in the
     * constructor.
     *
     * The injected object is an unmodifiable live list.
     * See {@link QueryList} for more details.
     * @deprecated
     */
    var QueryMetadata = function (_super) {
        __extends(QueryMetadata, _super);
        function QueryMetadata(_selector, _a) {
            var _b = _a === void 0 ? {} : _a,
                _c = _b.descendants,
                descendants = _c === void 0 ? false : _c,
                _d = _b.first,
                first = _d === void 0 ? false : _d,
                _e = _b.read,
                read = _e === void 0 ? null : _e;
            _super.call(this);
            this._selector = _selector;
            this.descendants = descendants;
            this.first = first;
            this.read = read;
        }
        Object.defineProperty(QueryMetadata.prototype, "isViewQuery", {
            /**
             * always `false` to differentiate it with {@link ViewQueryMetadata}.
             */
            get: function () {
                return false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(QueryMetadata.prototype, "selector", {
            /**
             * what this is querying for.
             */
            get: function () {
                return forward_ref_1.resolveForwardRef(this._selector);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(QueryMetadata.prototype, "isVarBindingQuery", {
            /**
             * whether this is querying for a variable binding or a directive.
             */
            get: function () {
                return lang_1.isString(this.selector);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(QueryMetadata.prototype, "varBindings", {
            /**
             * returns a list of variable bindings this is querying for.
             * Only applicable if this is a variable bindings query.
             */
            get: function () {
                return lang_1.StringWrapper.split(this.selector, /\s*,\s*/g);
            },
            enumerable: true,
            configurable: true
        });
        QueryMetadata.prototype.toString = function () {
            return "@Query(" + lang_1.stringify(this.selector) + ")";
        };
        return QueryMetadata;
    }(metadata_1.DependencyMetadata);
    exports.QueryMetadata = QueryMetadata;
    // TODO: add an example after ContentChildren and ViewChildren are in master
    /**
     * Configures a content query.
     *
     * Content queries are set before the `ngAfterContentInit` callback is called.
     *
     * ### Example
     *
     * ```
     * @Directive({
     *   selector: 'someDir'
     * })
     * class SomeDir {
     *   @ContentChildren(ChildDirective) contentChildren: QueryList<ChildDirective>;
     *
     *   ngAfterContentInit() {
     *     // contentChildren is set
     *   }
     * }
     * ```
     * @stable
     */
    var ContentChildrenMetadata = function (_super) {
        __extends(ContentChildrenMetadata, _super);
        function ContentChildrenMetadata(_selector, _a) {
            var _b = _a === void 0 ? {} : _a,
                _c = _b.descendants,
                descendants = _c === void 0 ? false : _c,
                _d = _b.read,
                read = _d === void 0 ? null : _d;
            _super.call(this, _selector, { descendants: descendants, read: read });
        }
        return ContentChildrenMetadata;
    }(QueryMetadata);
    exports.ContentChildrenMetadata = ContentChildrenMetadata;
    // TODO: add an example after ContentChild and ViewChild are in master
    /**
     * Configures a content query.
     *
     * Content queries are set before the `ngAfterContentInit` callback is called.
     *
     * ### Example
     *
     * ```
     * @Directive({
     *   selector: 'someDir'
     * })
     * class SomeDir {
     *   @ContentChild(ChildDirective) contentChild;
     *
     *   ngAfterContentInit() {
     *     // contentChild is set
     *   }
     * }
     * ```
     * @stable
     */
    var ContentChildMetadata = function (_super) {
        __extends(ContentChildMetadata, _super);
        function ContentChildMetadata(_selector, _a) {
            var _b = (_a === void 0 ? {} : _a).read,
                read = _b === void 0 ? null : _b;
            _super.call(this, _selector, { descendants: true, first: true, read: read });
        }
        return ContentChildMetadata;
    }(QueryMetadata);
    exports.ContentChildMetadata = ContentChildMetadata;
    /**
     * Similar to {@link QueryMetadata}, but querying the component view, instead of
     * the content children.
     *
     * ### Example ([live demo](http://plnkr.co/edit/eNsFHDf7YjyM6IzKxM1j?p=preview))
     *
     * ```javascript
     * @Component({
     *   ...,
     *   template: `
     *     <item> a </item>
     *     <item> b </item>
     *     <item> c </item>
     *   `
     * })
     * class MyComponent {
     *   shown: boolean;
     *
     *   constructor(private @ViewQuery(Item) items:QueryList<Item>) {
     *     items.changes.subscribe(() => console.log(items.length));
     *   }
     * }
     * ```
     *
     * Supports the same querying parameters as {@link QueryMetadata}, except
     * `descendants`. This always queries the whole view.
     *
     * As `shown` is flipped between true and false, items will contain zero of one
     * items.
     *
     * Specifies that a {@link QueryList} should be injected.
     *
     * The injected object is an iterable and observable live list.
     * See {@link QueryList} for more details.
     * @deprecated
     */
    var ViewQueryMetadata = function (_super) {
        __extends(ViewQueryMetadata, _super);
        function ViewQueryMetadata(_selector, _a) {
            var _b = _a === void 0 ? {} : _a,
                _c = _b.descendants,
                descendants = _c === void 0 ? false : _c,
                _d = _b.first,
                first = _d === void 0 ? false : _d,
                _e = _b.read,
                read = _e === void 0 ? null : _e;
            _super.call(this, _selector, { descendants: descendants, first: first, read: read });
        }
        Object.defineProperty(ViewQueryMetadata.prototype, "isViewQuery", {
            /**
             * always `true` to differentiate it with {@link QueryMetadata}.
             */
            get: function () {
                return true;
            },
            enumerable: true,
            configurable: true
        });
        ViewQueryMetadata.prototype.toString = function () {
            return "@ViewQuery(" + lang_1.stringify(this.selector) + ")";
        };
        return ViewQueryMetadata;
    }(QueryMetadata);
    exports.ViewQueryMetadata = ViewQueryMetadata;
    /**
     * Declares a list of child element references.
     *
     * Angular automatically updates the list when the DOM is updated.
     *
     * `ViewChildren` takes an argument to select elements.
     *
     * - If the argument is a type, directives or components with the type will be bound.
     *
     * - If the argument is a string, the string is interpreted as a list of comma-separated selectors.
     * For each selector, an element containing the matching template variable (e.g. `#child`) will be
     * bound.
     *
     * View children are set before the `ngAfterViewInit` callback is called.
     *
     * ### Example
     *
     * With type selector:
     *
     * ```
     * @Component({
     *   selector: 'child-cmp',
     *   template: '<p>child</p>'
     * })
     * class ChildCmp {
     *   doSomething() {}
     * }
     *
     * @Component({
     *   selector: 'some-cmp',
     *   template: `
     *     <child-cmp></child-cmp>
     *     <child-cmp></child-cmp>
     *     <child-cmp></child-cmp>
     *   `,
     *   directives: [ChildCmp]
     * })
     * class SomeCmp {
     *   @ViewChildren(ChildCmp) children:QueryList<ChildCmp>;
     *
     *   ngAfterViewInit() {
     *     // children are set
     *     this.children.toArray().forEach((child)=>child.doSomething());
     *   }
     * }
     * ```
     *
     * With string selector:
     *
     * ```
     * @Component({
     *   selector: 'child-cmp',
     *   template: '<p>child</p>'
     * })
     * class ChildCmp {
     *   doSomething() {}
     * }
     *
     * @Component({
     *   selector: 'some-cmp',
     *   template: `
     *     <child-cmp #child1></child-cmp>
     *     <child-cmp #child2></child-cmp>
     *     <child-cmp #child3></child-cmp>
     *   `,
     *   directives: [ChildCmp]
     * })
     * class SomeCmp {
     *   @ViewChildren('child1,child2,child3') children:QueryList<ChildCmp>;
     *
     *   ngAfterViewInit() {
     *     // children are set
     *     this.children.toArray().forEach((child)=>child.doSomething());
     *   }
     * }
     * ```
     * @stable
     */
    var ViewChildrenMetadata = function (_super) {
        __extends(ViewChildrenMetadata, _super);
        function ViewChildrenMetadata(_selector, _a) {
            var _b = (_a === void 0 ? {} : _a).read,
                read = _b === void 0 ? null : _b;
            _super.call(this, _selector, { descendants: true, read: read });
        }
        return ViewChildrenMetadata;
    }(ViewQueryMetadata);
    exports.ViewChildrenMetadata = ViewChildrenMetadata;
    /**
     *
     * Declares a reference of child element.
     *
     * `ViewChildren` takes an argument to select elements.
     *
     * - If the argument is a type, a directive or a component with the type will be bound.
     *
     If the argument is a string, the string is interpreted as a selector. An element containing the
     matching template variable (e.g. `#child`) will be bound.
     *
     * In either case, `@ViewChild()` assigns the first (looking from above) element if there are
     multiple matches.
     *
     * View child is set before the `ngAfterViewInit` callback is called.
     *
     * ### Example
     *
     * With type selector:
     *
     * ```
     * @Component({
     *   selector: 'child-cmp',
     *   template: '<p>child</p>'
     * })
     * class ChildCmp {
     *   doSomething() {}
     * }
     *
     * @Component({
     *   selector: 'some-cmp',
     *   template: '<child-cmp></child-cmp>',
     *   directives: [ChildCmp]
     * })
     * class SomeCmp {
     *   @ViewChild(ChildCmp) child:ChildCmp;
     *
     *   ngAfterViewInit() {
     *     // child is set
     *     this.child.doSomething();
     *   }
     * }
     * ```
     *
     * With string selector:
     *
     * ```
     * @Component({
     *   selector: 'child-cmp',
     *   template: '<p>child</p>'
     * })
     * class ChildCmp {
     *   doSomething() {}
     * }
     *
     * @Component({
     *   selector: 'some-cmp',
     *   template: '<child-cmp #child></child-cmp>',
     *   directives: [ChildCmp]
     * })
     * class SomeCmp {
     *   @ViewChild('child') child:ChildCmp;
     *
     *   ngAfterViewInit() {
     *     // child is set
     *     this.child.doSomething();
     *   }
     * }
     * ```
     * @stable
     */
    var ViewChildMetadata = function (_super) {
        __extends(ViewChildMetadata, _super);
        function ViewChildMetadata(_selector, _a) {
            var _b = (_a === void 0 ? {} : _a).read,
                read = _b === void 0 ? null : _b;
            _super.call(this, _selector, { descendants: true, first: true, read: read });
        }
        return ViewChildMetadata;
    }(ViewQueryMetadata);
    exports.ViewChildMetadata = ViewChildMetadata;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/metadata/directives.js', ['../change_detection/constants', '../di/metadata', '../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var constants_1 = $__require('../change_detection/constants');
    var metadata_1 = $__require('../di/metadata');
    var lang_1 = $__require('../facade/lang');
    /**
     * Directives allow you to attach behavior to elements in the DOM.
     *
     * {@link DirectiveMetadata}s with an embedded view are called {@link ComponentMetadata}s.
     *
     * A directive consists of a single directive annotation and a controller class. When the
     * directive's `selector` matches
     * elements in the DOM, the following steps occur:
     *
     * 1. For each directive, the `ElementInjector` attempts to resolve the directive's constructor
     * arguments.
     * 2. Angular instantiates directives for each matched element using `ElementInjector` in a
     * depth-first order,
     *    as declared in the HTML.
     *
     * ## Understanding How Injection Works
     *
     * There are three stages of injection resolution.
     * - *Pre-existing Injectors*:
     *   - The terminal {@link Injector} cannot resolve dependencies. It either throws an error or, if
     * the dependency was
     *     specified as `@Optional`, returns `null`.
     *   - The platform injector resolves browser singleton resources, such as: cookies, title,
     * location, and others.
     * - *Component Injectors*: Each component instance has its own {@link Injector}, and they follow
     * the same parent-child hierarchy
     *     as the component instances in the DOM.
     * - *Element Injectors*: Each component instance has a Shadow DOM. Within the Shadow DOM each
     * element has an `ElementInjector`
     *     which follow the same parent-child hierarchy as the DOM elements themselves.
     *
     * When a template is instantiated, it also must instantiate the corresponding directives in a
     * depth-first order. The
     * current `ElementInjector` resolves the constructor dependencies for each directive.
     *
     * Angular then resolves dependencies as follows, according to the order in which they appear in the
     * {@link ComponentMetadata}:
     *
     * 1. Dependencies on the current element
     * 2. Dependencies on element injectors and their parents until it encounters a Shadow DOM boundary
     * 3. Dependencies on component injectors and their parents until it encounters the root component
     * 4. Dependencies on pre-existing injectors
     *
     *
     * The `ElementInjector` can inject other directives, element-specific special objects, or it can
     * delegate to the parent
     * injector.
     *
     * To inject other directives, declare the constructor parameter as:
     * - `directive:DirectiveType`: a directive on the current element only
     * - `@Host() directive:DirectiveType`: any directive that matches the type between the current
     * element and the
     *    Shadow DOM root.
     * - `@Query(DirectiveType) query:QueryList<DirectiveType>`: A live collection of direct child
     * directives.
     * - `@QueryDescendants(DirectiveType) query:QueryList<DirectiveType>`: A live collection of any
     * child directives.
     *
     * To inject element-specific special objects, declare the constructor parameter as:
     * - `element: ElementRef` to obtain a reference to logical element in the view.
     * - `viewContainer: ViewContainerRef` to control child template instantiation, for
     * {@link DirectiveMetadata} directives only
     * - `bindingPropagation: BindingPropagation` to control change detection in a more granular way.
     *
     * ### Example
     *
     * The following example demonstrates how dependency injection resolves constructor arguments in
     * practice.
     *
     *
     * Assume this HTML template:
     *
     * ```
     * <div dependency="1">
     *   <div dependency="2">
     *     <div dependency="3" my-directive>
     *       <div dependency="4">
     *         <div dependency="5"></div>
     *       </div>
     *       <div dependency="6"></div>
     *     </div>
     *   </div>
     * </div>
     * ```
     *
     * With the following `dependency` decorator and `SomeService` injectable class.
     *
     * ```
     * @Injectable()
     * class SomeService {
     * }
     *
     * @Directive({
     *   selector: '[dependency]',
     *   inputs: [
     *     'id: dependency'
     *   ]
     * })
     * class Dependency {
     *   id:string;
     * }
     * ```
     *
     * Let's step through the different ways in which `MyDirective` could be declared...
     *
     *
     * ### No injection
     *
     * Here the constructor is declared with no arguments, therefore nothing is injected into
     * `MyDirective`.
     *
     * ```
     * @Directive({ selector: '[my-directive]' })
     * class MyDirective {
     *   constructor() {
     *   }
     * }
     * ```
     *
     * This directive would be instantiated with no dependencies.
     *
     *
     * ### Component-level injection
     *
     * Directives can inject any injectable instance from the closest component injector or any of its
     * parents.
     *
     * Here, the constructor declares a parameter, `someService`, and injects the `SomeService` type
     * from the parent
     * component's injector.
     * ```
     * @Directive({ selector: '[my-directive]' })
     * class MyDirective {
     *   constructor(someService: SomeService) {
     *   }
     * }
     * ```
     *
     * This directive would be instantiated with a dependency on `SomeService`.
     *
     *
     * ### Injecting a directive from the current element
     *
     * Directives can inject other directives declared on the current element.
     *
     * ```
     * @Directive({ selector: '[my-directive]' })
     * class MyDirective {
     *   constructor(dependency: Dependency) {
     *     expect(dependency.id).toEqual(3);
     *   }
     * }
     * ```
     * This directive would be instantiated with `Dependency` declared at the same element, in this case
     * `dependency="3"`.
     *
     * ### Injecting a directive from any ancestor elements
     *
     * Directives can inject other directives declared on any ancestor element (in the current Shadow
     * DOM), i.e. on the current element, the
     * parent element, or its parents.
     * ```
     * @Directive({ selector: '[my-directive]' })
     * class MyDirective {
     *   constructor(@Host() dependency: Dependency) {
     *     expect(dependency.id).toEqual(2);
     *   }
     * }
     * ```
     *
     * `@Host` checks the current element, the parent, as well as its parents recursively. If
     * `dependency="2"` didn't
     * exist on the direct parent, this injection would
     * have returned
     * `dependency="1"`.
     *
     *
     * ### Injecting a live collection of direct child directives
     *
     *
     * A directive can also query for other child directives. Since parent directives are instantiated
     * before child directives, a directive can't simply inject the list of child directives. Instead,
     * the directive injects a {@link QueryList}, which updates its contents as children are added,
     * removed, or moved by a directive that uses a {@link ViewContainerRef} such as a `ngFor`, an
     * `ngIf`, or an `ngSwitch`.
     *
     * ```
     * @Directive({ selector: '[my-directive]' })
     * class MyDirective {
     *   constructor(@Query(Dependency) dependencies:QueryList<Dependency>) {
     *   }
     * }
     * ```
     *
     * This directive would be instantiated with a {@link QueryList} which contains `Dependency` 4 and
     * `Dependency` 6. Here, `Dependency` 5 would not be included, because it is not a direct child.
     *
     * ### Injecting a live collection of descendant directives
     *
     * By passing the descendant flag to `@Query` above, we can include the children of the child
     * elements.
     *
     * ```
     * @Directive({ selector: '[my-directive]' })
     * class MyDirective {
     *   constructor(@Query(Dependency, {descendants: true}) dependencies:QueryList<Dependency>) {
     *   }
     * }
     * ```
     *
     * This directive would be instantiated with a Query which would contain `Dependency` 4, 5 and 6.
     *
     * ### Optional injection
     *
     * The normal behavior of directives is to return an error when a specified dependency cannot be
     * resolved. If you
     * would like to inject `null` on unresolved dependency instead, you can annotate that dependency
     * with `@Optional()`.
     * This explicitly permits the author of a template to treat some of the surrounding directives as
     * optional.
     *
     * ```
     * @Directive({ selector: '[my-directive]' })
     * class MyDirective {
     *   constructor(@Optional() dependency:Dependency) {
     *   }
     * }
     * ```
     *
     * This directive would be instantiated with a `Dependency` directive found on the current element.
     * If none can be
     * found, the injector supplies `null` instead of throwing an error.
     *
     * ### Example
     *
     * Here we use a decorator directive to simply define basic tool-tip behavior.
     *
     * ```
     * @Directive({
     *   selector: '[tooltip]',
     *   inputs: [
     *     'text: tooltip'
     *   ],
     *   host: {
     *     '(mouseenter)': 'onMouseEnter()',
     *     '(mouseleave)': 'onMouseLeave()'
     *   }
     * })
     * class Tooltip{
     *   text:string;
     *   overlay:Overlay; // NOT YET IMPLEMENTED
     *   overlayManager:OverlayManager; // NOT YET IMPLEMENTED
     *
     *   constructor(overlayManager:OverlayManager) {
     *     this.overlay = overlay;
     *   }
     *
     *   onMouseEnter() {
     *     // exact signature to be determined
     *     this.overlay = this.overlayManager.open(text, ...);
     *   }
     *
     *   onMouseLeave() {
     *     this.overlay.close();
     *     this.overlay = null;
     *   }
     * }
     * ```
     * In our HTML template, we can then add this behavior to a `<div>` or any other element with the
     * `tooltip` selector,
     * like so:
     *
     * ```
     * <div tooltip="some text here"></div>
     * ```
     *
     * Directives can also control the instantiation, destruction, and positioning of inline template
     * elements:
     *
     * A directive uses a {@link ViewContainerRef} to instantiate, insert, move, and destroy views at
     * runtime.
     * The {@link ViewContainerRef} is created as a result of `<template>` element, and represents a
     * location in the current view
     * where these actions are performed.
     *
     * Views are always created as children of the current {@link ComponentMetadata}, and as siblings of
     * the
     * `<template>` element. Thus a
     * directive in a child view cannot inject the directive that created it.
     *
     * Since directives that create views via ViewContainers are common in Angular, and using the full
     * `<template>` element syntax is wordy, Angular
     * also supports a shorthand notation: `<li *foo="bar">` and `<li template="foo: bar">` are
     * equivalent.
     *
     * Thus,
     *
     * ```
     * <ul>
     *   <li *foo="bar" title="text"></li>
     * </ul>
     * ```
     *
     * Expands in use to:
     *
     * ```
     * <ul>
     *   <template [foo]="bar">
     *     <li title="text"></li>
     *   </template>
     * </ul>
     * ```
     *
     * Notice that although the shorthand places `*foo="bar"` within the `<li>` element, the binding for
     * the directive
     * controller is correctly instantiated on the `<template>` element rather than the `<li>` element.
     *
     * ## Lifecycle hooks
     *
     * When the directive class implements some {@linkDocs guide/lifecycle-hooks} the
     * callbacks are called by the change detection at defined points in time during the life of the
     * directive.
     *
     * ### Example
     *
     * Let's suppose we want to implement the `unless` behavior, to conditionally include a template.
     *
     * Here is a simple directive that triggers on an `unless` selector:
     *
     * ```
     * @Directive({
     *   selector: '[unless]',
     *   inputs: ['unless']
     * })
     * export class Unless {
     *   viewContainer: ViewContainerRef;
     *   templateRef: TemplateRef;
     *   prevCondition: boolean;
     *
     *   constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef) {
     *     this.viewContainer = viewContainer;
     *     this.templateRef = templateRef;
     *     this.prevCondition = null;
     *   }
     *
     *   set unless(newCondition) {
     *     if (newCondition && (isBlank(this.prevCondition) || !this.prevCondition)) {
     *       this.prevCondition = true;
     *       this.viewContainer.clear();
     *     } else if (!newCondition && (isBlank(this.prevCondition) || this.prevCondition)) {
     *       this.prevCondition = false;
     *       this.viewContainer.create(this.templateRef);
     *     }
     *   }
     * }
     * ```
     *
     * We can then use this `unless` selector in a template:
     * ```
     * <ul>
     *   <li *unless="expr"></li>
     * </ul>
     * ```
     *
     * Once the directive instantiates the child view, the shorthand notation for the template expands
     * and the result is:
     *
     * ```
     * <ul>
     *   <template [unless]="exp">
     *     <li></li>
     *   </template>
     *   <li></li>
     * </ul>
     * ```
     *
     * Note also that although the `<li></li>` template still exists inside the `<template></template>`,
     * the instantiated
     * view occurs on the second `<li></li>` which is a sibling to the `<template>` element.
     * @stable
     */
    var DirectiveMetadata = function (_super) {
        __extends(DirectiveMetadata, _super);
        function DirectiveMetadata(_a) {
            var _b = _a === void 0 ? {} : _a,
                selector = _b.selector,
                inputs = _b.inputs,
                outputs = _b.outputs,
                properties = _b.properties,
                events = _b.events,
                host = _b.host,
                providers = _b.providers,
                exportAs = _b.exportAs,
                queries = _b.queries;
            _super.call(this);
            this.selector = selector;
            this._inputs = inputs;
            this._properties = properties;
            this._outputs = outputs;
            this._events = events;
            this.host = host;
            this.exportAs = exportAs;
            this.queries = queries;
            this._providers = providers;
        }
        Object.defineProperty(DirectiveMetadata.prototype, "inputs", {
            /**
             * Enumerates the set of data-bound input properties for a directive
             *
             * Angular automatically updates input properties during change detection.
             *
             * The `inputs` property defines a set of `directiveProperty` to `bindingProperty`
             * configuration:
             *
             * - `directiveProperty` specifies the component property where the value is written.
             * - `bindingProperty` specifies the DOM property where the value is read from.
             *
             * When `bindingProperty` is not provided, it is assumed to be equal to `directiveProperty`.
             *
             * ### Example ([live demo](http://plnkr.co/edit/ivhfXY?p=preview))
             *
             * The following example creates a component with two data-bound properties.
             *
             * ```typescript
             * @Component({
             *   selector: 'bank-account',
             *   inputs: ['bankName', 'id: account-id'],
             *   template: `
             *     Bank Name: {{bankName}}
             *     Account Id: {{id}}
             *   `
             * })
             * class BankAccount {
             *   bankName: string;
             *   id: string;
             *
             *   // this property is not bound, and won't be automatically updated by Angular
             *   normalizedBankName: string;
             * }
             *
             * @Component({
             *   selector: 'app',
             *   template: `
             *     <bank-account bank-name="RBC" account-id="4747"></bank-account>
             *   `,
             *   directives: [BankAccount]
             * })
             * class App {}
             *
             * bootstrap(App);
             * ```
             *
             */
            get: function () {
                return lang_1.isPresent(this._properties) && this._properties.length > 0 ? this._properties : this._inputs;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DirectiveMetadata.prototype, "properties", {
            /**
             * Use `inputs` instead
             *
             * @deprecated
             */
            get: function () {
                return this.inputs;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DirectiveMetadata.prototype, "outputs", {
            /**
             * Enumerates the set of event-bound output properties.
             *
             * When an output property emits an event, an event handler attached to that event
             * the template is invoked.
             *
             * The `outputs` property defines a set of `directiveProperty` to `bindingProperty`
             * configuration:
             *
             * - `directiveProperty` specifies the component property that emits events.
             * - `bindingProperty` specifies the DOM property the event handler is attached to.
             *
             * ### Example ([live demo](http://plnkr.co/edit/d5CNq7?p=preview))
             *
             * ```typescript
             * @Directive({
             *   selector: 'interval-dir',
             *   outputs: ['everySecond', 'five5Secs: everyFiveSeconds']
             * })
             * class IntervalDir {
             *   everySecond = new EventEmitter();
             *   five5Secs = new EventEmitter();
             *
             *   constructor() {
             *     setInterval(() => this.everySecond.emit("event"), 1000);
             *     setInterval(() => this.five5Secs.emit("event"), 5000);
             *   }
             * }
             *
             * @Component({
             *   selector: 'app',
             *   template: `
             *     <interval-dir (everySecond)="everySecond()" (everyFiveSeconds)="everyFiveSeconds()">
             *     </interval-dir>
             *   `,
             *   directives: [IntervalDir]
             * })
             * class App {
             *   everySecond() { console.log('second'); }
             *   everyFiveSeconds() { console.log('five seconds'); }
             * }
             * bootstrap(App);
             * ```
             *
             */
            get: function () {
                return lang_1.isPresent(this._events) && this._events.length > 0 ? this._events : this._outputs;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DirectiveMetadata.prototype, "events", {
            /**
             * Use `outputs` instead
             *
             * @deprecated
             */
            get: function () {
                return this.outputs;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DirectiveMetadata.prototype, "providers", {
            /**
             * Defines the set of injectable objects that are visible to a Directive and its light DOM
             * children.
             *
             * ## Simple Example
             *
             * Here is an example of a class that can be injected:
             *
             * ```
             * class Greeter {
             *    greet(name:string) {
             *      return 'Hello ' + name + '!';
             *    }
             * }
             *
             * @Directive({
             *   selector: 'greet',
             *   providers: [
             *     Greeter
             *   ]
             * })
             * class HelloWorld {
             *   greeter:Greeter;
             *
             *   constructor(greeter:Greeter) {
             *     this.greeter = greeter;
             *   }
             * }
             * ```
             */
            get: function () {
                return this._providers;
            },
            enumerable: true,
            configurable: true
        });
        return DirectiveMetadata;
    }(metadata_1.InjectableMetadata);
    exports.DirectiveMetadata = DirectiveMetadata;
    /**
     * Declare reusable UI building blocks for an application.
     *
     * Each Angular component requires a single `@Component` annotation. The
     * `@Component`
     * annotation specifies when a component is instantiated, and which properties and hostListeners it
     * binds to.
     *
     * When a component is instantiated, Angular
     * - creates a shadow DOM for the component.
     * - loads the selected template into the shadow DOM.
     * - creates all the injectable objects configured with `providers` and `viewProviders`.
     *
     * All template expressions and statements are then evaluated against the component instance.
     *
     * ## Lifecycle hooks
     *
     * When the component class implements some {@linkDocs guide/lifecycle-hooks} the
     * callbacks are called by the change detection at defined points in time during the life of the
     * component.
     *
     * ### Example
     *
     * {@example core/ts/metadata/metadata.ts region='component'}
     * @stable
     */
    var ComponentMetadata = function (_super) {
        __extends(ComponentMetadata, _super);
        function ComponentMetadata(_a) {
            var _b = _a === void 0 ? {} : _a,
                selector = _b.selector,
                inputs = _b.inputs,
                outputs = _b.outputs,
                properties = _b.properties,
                events = _b.events,
                host = _b.host,
                exportAs = _b.exportAs,
                moduleId = _b.moduleId,
                providers = _b.providers,
                viewProviders = _b.viewProviders,
                _c = _b.changeDetection,
                changeDetection = _c === void 0 ? constants_1.ChangeDetectionStrategy.Default : _c,
                queries = _b.queries,
                templateUrl = _b.templateUrl,
                template = _b.template,
                styleUrls = _b.styleUrls,
                styles = _b.styles,
                animations = _b.animations,
                directives = _b.directives,
                pipes = _b.pipes,
                encapsulation = _b.encapsulation,
                interpolation = _b.interpolation,
                entryComponents = _b.entryComponents;
            _super.call(this, {
                selector: selector,
                inputs: inputs,
                outputs: outputs,
                properties: properties,
                events: events,
                host: host,
                exportAs: exportAs,
                providers: providers,
                queries: queries
            });
            this.changeDetection = changeDetection;
            this._viewProviders = viewProviders;
            this.templateUrl = templateUrl;
            this.template = template;
            this.styleUrls = styleUrls;
            this.styles = styles;
            this.directives = directives;
            this.pipes = pipes;
            this.encapsulation = encapsulation;
            this.moduleId = moduleId;
            this.animations = animations;
            this.interpolation = interpolation;
            this.entryComponents = entryComponents;
        }
        Object.defineProperty(ComponentMetadata.prototype, "viewProviders", {
            /**
             * Defines the set of injectable objects that are visible to its view DOM children.
             *
             * ## Simple Example
             *
             * Here is an example of a class that can be injected:
             *
             * ```
             * class Greeter {
             *    greet(name:string) {
             *      return 'Hello ' + name + '!';
             *    }
             * }
             *
             * @Directive({
             *   selector: 'needs-greeter'
             * })
             * class NeedsGreeter {
             *   greeter:Greeter;
             *
             *   constructor(greeter:Greeter) {
             *     this.greeter = greeter;
             *   }
             * }
             *
             * @Component({
             *   selector: 'greet',
             *   viewProviders: [
             *     Greeter
             *   ],
             *   template: `<needs-greeter></needs-greeter>`,
             *   directives: [NeedsGreeter]
             * })
             * class HelloWorld {
             * }
             *
             * ```
             */
            get: function () {
                return this._viewProviders;
            },
            enumerable: true,
            configurable: true
        });
        return ComponentMetadata;
    }(DirectiveMetadata);
    exports.ComponentMetadata = ComponentMetadata;
    /**
     * Declare reusable pipe function.
     *
     * A "pure" pipe is only re-evaluated when either the input or any of the arguments change.
     *
     * When not specified, pipes default to being pure.
     *
     * ### Example
     *
     * {@example core/ts/metadata/metadata.ts region='pipe'}
     * @stable
     */
    var PipeMetadata = function (_super) {
        __extends(PipeMetadata, _super);
        function PipeMetadata(_a) {
            var name = _a.name,
                pure = _a.pure;
            _super.call(this);
            this.name = name;
            this._pure = pure;
        }
        Object.defineProperty(PipeMetadata.prototype, "pure", {
            get: function () {
                return lang_1.isPresent(this._pure) ? this._pure : true;
            },
            enumerable: true,
            configurable: true
        });
        return PipeMetadata;
    }(metadata_1.InjectableMetadata);
    exports.PipeMetadata = PipeMetadata;
    /**
     * Declares a data-bound input property.
     *
     * Angular automatically updates data-bound properties during change detection.
     *
     * `InputMetadata` takes an optional parameter that specifies the name
     * used when instantiating a component in the template. When not provided,
     * the name of the decorated property is used.
     *
     * ### Example
     *
     * The following example creates a component with two input properties.
     *
     * ```typescript
     * @Component({
     *   selector: 'bank-account',
     *   template: `
     *     Bank Name: {{bankName}}
     *     Account Id: {{id}}
     *   `
     * })
     * class BankAccount {
     *   @Input() bankName: string;
     *   @Input('account-id') id: string;
     *
     *   // this property is not bound, and won't be automatically updated by Angular
     *   normalizedBankName: string;
     * }
     *
     * @Component({
     *   selector: 'app',
     *   template: `
     *     <bank-account bank-name="RBC" account-id="4747"></bank-account>
     *   `,
     *   directives: [BankAccount]
     * })
     * class App {}
     *
     * bootstrap(App);
     * ```
     * @stable
     */
    var InputMetadata = function () {
        function InputMetadata(
        /**
         * Name used when instantiating a component in the template.
         */
        bindingPropertyName) {
            this.bindingPropertyName = bindingPropertyName;
        }
        return InputMetadata;
    }();
    exports.InputMetadata = InputMetadata;
    /**
     * Declares an event-bound output property.
     *
     * When an output property emits an event, an event handler attached to that event
     * the template is invoked.
     *
     * `OutputMetadata` takes an optional parameter that specifies the name
     * used when instantiating a component in the template. When not provided,
     * the name of the decorated property is used.
     *
     * ### Example
     *
     * ```typescript
     * @Directive({
     *   selector: 'interval-dir',
     * })
     * class IntervalDir {
     *   @Output() everySecond = new EventEmitter();
     *   @Output('everyFiveSeconds') five5Secs = new EventEmitter();
     *
     *   constructor() {
     *     setInterval(() => this.everySecond.emit("event"), 1000);
     *     setInterval(() => this.five5Secs.emit("event"), 5000);
     *   }
     * }
     *
     * @Component({
     *   selector: 'app',
     *   template: `
     *     <interval-dir (everySecond)="everySecond()" (everyFiveSeconds)="everyFiveSeconds()">
     *     </interval-dir>
     *   `,
     *   directives: [IntervalDir]
     * })
     * class App {
     *   everySecond() { console.log('second'); }
     *   everyFiveSeconds() { console.log('five seconds'); }
     * }
     * bootstrap(App);
     * ```
     * @stable
     */
    var OutputMetadata = function () {
        function OutputMetadata(bindingPropertyName) {
            this.bindingPropertyName = bindingPropertyName;
        }
        return OutputMetadata;
    }();
    exports.OutputMetadata = OutputMetadata;
    /**
     * Declares a host property binding.
     *
     * Angular automatically checks host property bindings during change detection.
     * If a binding changes, it will update the host element of the directive.
     *
     * `HostBindingMetadata` takes an optional parameter that specifies the property
     * name of the host element that will be updated. When not provided,
     * the class property name is used.
     *
     * ### Example
     *
     * The following example creates a directive that sets the `valid` and `invalid` classes
     * on the DOM element that has ngModel directive on it.
     *
     * ```typescript
     * @Directive({selector: '[ngModel]'})
     * class NgModelStatus {
     *   constructor(public control:NgModel) {}
     *   @HostBinding('class.valid') get valid { return this.control.valid; }
     *   @HostBinding('class.invalid') get invalid { return this.control.invalid; }
     * }
     *
     * @Component({
     *   selector: 'app',
     *   template: `<input [(ngModel)]="prop">`,
     *   directives: [FORM_DIRECTIVES, NgModelStatus]
     * })
     * class App {
     *   prop;
     * }
     *
     * bootstrap(App);
     * ```
     * @stable
     */
    var HostBindingMetadata = function () {
        function HostBindingMetadata(hostPropertyName) {
            this.hostPropertyName = hostPropertyName;
        }
        return HostBindingMetadata;
    }();
    exports.HostBindingMetadata = HostBindingMetadata;
    /**
     * Declares a host listener.
     *
     * Angular will invoke the decorated method when the host element emits the specified event.
     *
     * If the decorated method returns `false`, then `preventDefault` is applied on the DOM
     * event.
     *
     * ### Example
     *
     * The following example declares a directive that attaches a click listener to the button and
     * counts clicks.
     *
     * ```typescript
     * @Directive({selector: 'button[counting]'})
     * class CountClicks {
     *   numberOfClicks = 0;
     *
     *   @HostListener('click', ['$event.target'])
     *   onClick(btn) {
     *     console.log("button", btn, "number of clicks:", this.numberOfClicks++);
     *   }
     * }
     *
     * @Component({
     *   selector: 'app',
     *   template: `<button counting>Increment</button>`,
     *   directives: [CountClicks]
     * })
     * class App {}
     *
     * bootstrap(App);
     * ```
     * @stable
     */
    var HostListenerMetadata = function () {
        function HostListenerMetadata(eventName, args) {
            this.eventName = eventName;
            this.args = args;
        }
        return HostListenerMetadata;
    }();
    exports.HostListenerMetadata = HostListenerMetadata;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/metadata/ng_module.js', ['../di/metadata', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var metadata_1 = $__require('../di/metadata');
    /**
     * Defines a schema that will allow any property on elements with a `-` in their name,
     * which is the common rule for custom elements.
     *
     * @experimental
     */
    exports.CUSTOM_ELEMENTS_SCHEMA = {
        name: 'custom-elements'
    };
    /**
     * Declares an Angular Module.
     * @experimental
     */
    var NgModuleMetadata = function (_super) {
        __extends(NgModuleMetadata, _super);
        function NgModuleMetadata(options) {
            if (options === void 0) {
                options = {};
            }
            // We cannot use destructuring of the constructor argument because `exports` is a
            // protected symbol in CommonJS and closure tries to aggressively optimize it away.
            _super.call(this);
            this._providers = options.providers;
            this.declarations = options.declarations;
            this.imports = options.imports;
            this.exports = options.exports;
            this.entryComponents = options.entryComponents;
            this.bootstrap = options.bootstrap;
            this.schemas = options.schemas;
        }
        Object.defineProperty(NgModuleMetadata.prototype, "providers", {
            /**
             * Defines the set of injectable objects that are available in the injector
             * of this module.
             *
             * ## Simple Example
             *
             * Here is an example of a class that can be injected:
             *
             * ```
             * class Greeter {
             *    greet(name:string) {
             *      return 'Hello ' + name + '!';
             *    }
             * }
             *
             * @NgModule({
             *   providers: [
             *     Greeter
             *   ]
             * })
             * class HelloWorld {
             *   greeter:Greeter;
             *
             *   constructor(greeter:Greeter) {
             *     this.greeter = greeter;
             *   }
             * }
             * ```
             */
            get: function () {
                return this._providers;
            },
            enumerable: true,
            configurable: true
        });
        return NgModuleMetadata;
    }(metadata_1.InjectableMetadata);
    exports.NgModuleMetadata = NgModuleMetadata;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/metadata.js', ['./metadata/di', './metadata/directives', './metadata/ng_module', './util/decorators', './metadata/lifecycle_hooks', './metadata/view', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var di_1 = $__require('./metadata/di');
  var directives_1 = $__require('./metadata/directives');
  var ng_module_1 = $__require('./metadata/ng_module');
  var decorators_1 = $__require('./util/decorators');
  var di_2 = $__require('./metadata/di');
  exports.ANALYZE_FOR_ENTRY_COMPONENTS = di_2.ANALYZE_FOR_ENTRY_COMPONENTS;
  exports.AttributeMetadata = di_2.AttributeMetadata;
  exports.ContentChildMetadata = di_2.ContentChildMetadata;
  exports.ContentChildrenMetadata = di_2.ContentChildrenMetadata;
  exports.QueryMetadata = di_2.QueryMetadata;
  exports.ViewChildMetadata = di_2.ViewChildMetadata;
  exports.ViewChildrenMetadata = di_2.ViewChildrenMetadata;
  exports.ViewQueryMetadata = di_2.ViewQueryMetadata;
  var directives_2 = $__require('./metadata/directives');
  exports.ComponentMetadata = directives_2.ComponentMetadata;
  exports.DirectiveMetadata = directives_2.DirectiveMetadata;
  exports.HostBindingMetadata = directives_2.HostBindingMetadata;
  exports.HostListenerMetadata = directives_2.HostListenerMetadata;
  exports.InputMetadata = directives_2.InputMetadata;
  exports.OutputMetadata = directives_2.OutputMetadata;
  exports.PipeMetadata = directives_2.PipeMetadata;
  var lifecycle_hooks_1 = $__require('./metadata/lifecycle_hooks');
  exports.AfterContentChecked = lifecycle_hooks_1.AfterContentChecked;
  exports.AfterContentInit = lifecycle_hooks_1.AfterContentInit;
  exports.AfterViewChecked = lifecycle_hooks_1.AfterViewChecked;
  exports.AfterViewInit = lifecycle_hooks_1.AfterViewInit;
  exports.DoCheck = lifecycle_hooks_1.DoCheck;
  exports.OnChanges = lifecycle_hooks_1.OnChanges;
  exports.OnDestroy = lifecycle_hooks_1.OnDestroy;
  exports.OnInit = lifecycle_hooks_1.OnInit;
  var ng_module_2 = $__require('./metadata/ng_module');
  exports.CUSTOM_ELEMENTS_SCHEMA = ng_module_2.CUSTOM_ELEMENTS_SCHEMA;
  exports.NgModuleMetadata = ng_module_2.NgModuleMetadata;
  var view_1 = $__require('./metadata/view');
  exports.ViewEncapsulation = view_1.ViewEncapsulation;
  exports.ViewMetadata = view_1.ViewMetadata;
  // TODO(alexeagle): remove the duplication of this doc. It is copied from ComponentMetadata.
  /**
   * Declare reusable UI building blocks for an application.
   *
   * Each Angular component requires a single `@Component` annotation. The `@Component`
   * annotation specifies when a component is instantiated, and which properties and hostListeners it
   * binds to.
   *
   * When a component is instantiated, Angular
   * - creates a shadow DOM for the component.
   * - loads the selected template into the shadow DOM.
   * - creates all the injectable objects configured with `providers` and `viewProviders`.
   *
   * All template expressions and statements are then evaluated against the component instance.
   *
   * ## Lifecycle hooks
   *
   * When the component class implements some {@linkDocs guide/lifecycle-hooks} the
   * callbacks are called by the change detection at defined points in time during the life of the
   * component.
   *
   * ### Example
   *
   * {@example core/ts/metadata/metadata.ts region='component'}
   * @stable
   * @Annotation
   */
  exports.Component = decorators_1.makeDecorator(directives_1.ComponentMetadata);
  // TODO(alexeagle): remove the duplication of this doc. It is copied from DirectiveMetadata.
  /**
   * Directives allow you to attach behavior to elements in the DOM.
   *
   * {@link DirectiveMetadata}s with an embedded view are called {@link ComponentMetadata}s.
   *
   * A directive consists of a single directive annotation and a controller class. When the
   * directive's `selector` matches
   * elements in the DOM, the following steps occur:
   *
   * 1. For each directive, the `ElementInjector` attempts to resolve the directive's constructor
   * arguments.
   * 2. Angular instantiates directives for each matched element using `ElementInjector` in a
   * depth-first order,
   *    as declared in the HTML.
   *
   * ## Understanding How Injection Works
   *
   * There are three stages of injection resolution.
   * - *Pre-existing Injectors*:
   *   - The terminal {@link Injector} cannot resolve dependencies. It either throws an error or, if
   * the dependency was
   *     specified as `@Optional`, returns `null`.
   *   - The platform injector resolves browser singleton resources, such as: cookies, title,
   * location, and others.
   * - *Component Injectors*: Each component instance has its own {@link Injector}, and they follow
   * the same parent-child hierarchy
   *     as the component instances in the DOM.
   * - *Element Injectors*: Each component instance has a Shadow DOM. Within the Shadow DOM each
   * element has an `ElementInjector`
   *     which follow the same parent-child hierarchy as the DOM elements themselves.
   *
   * When a template is instantiated, it also must instantiate the corresponding directives in a
   * depth-first order. The
   * current `ElementInjector` resolves the constructor dependencies for each directive.
   *
   * Angular then resolves dependencies as follows, according to the order in which they appear in the
   * {@link ComponentMetadata}:
   *
   * 1. Dependencies on the current element
   * 2. Dependencies on element injectors and their parents until it encounters a Shadow DOM boundary
   * 3. Dependencies on component injectors and their parents until it encounters the root component
   * 4. Dependencies on pre-existing injectors
   *
   *
   * The `ElementInjector` can inject other directives, element-specific special objects, or it can
   * delegate to the parent
   * injector.
   *
   * To inject other directives, declare the constructor parameter as:
   * - `directive:DirectiveType`: a directive on the current element only
   * - `@Host() directive:DirectiveType`: any directive that matches the type between the current
   * element and the
   *    Shadow DOM root.
   * - `@Query(DirectiveType) query:QueryList<DirectiveType>`: A live collection of direct child
   * directives.
   * - `@QueryDescendants(DirectiveType) query:QueryList<DirectiveType>`: A live collection of any
   * child directives.
   *
   * To inject element-specific special objects, declare the constructor parameter as:
   * - `element: ElementRef` to obtain a reference to logical element in the view.
   * - `viewContainer: ViewContainerRef` to control child template instantiation, for
   * {@link DirectiveMetadata} directives only
   * - `bindingPropagation: BindingPropagation` to control change detection in a more granular way.
   *
   * ### Example
   *
   * The following example demonstrates how dependency injection resolves constructor arguments in
   * practice.
   *
   *
   * Assume this HTML template:
   *
   * ```
   * <div dependency="1">
   *   <div dependency="2">
   *     <div dependency="3" my-directive>
   *       <div dependency="4">
   *         <div dependency="5"></div>
   *       </div>
   *       <div dependency="6"></div>
   *     </div>
   *   </div>
   * </div>
   * ```
   *
   * With the following `dependency` decorator and `SomeService` injectable class.
   *
   * ```
   * @Injectable()
   * class SomeService {
   * }
   *
   * @Directive({
   *   selector: '[dependency]',
   *   inputs: [
   *     'id: dependency'
   *   ]
   * })
   * class Dependency {
   *   id:string;
   * }
   * ```
   *
   * Let's step through the different ways in which `MyDirective` could be declared...
   *
   *
   * ### No injection
   *
   * Here the constructor is declared with no arguments, therefore nothing is injected into
   * `MyDirective`.
   *
   * ```
   * @Directive({ selector: '[my-directive]' })
   * class MyDirective {
   *   constructor() {
   *   }
   * }
   * ```
   *
   * This directive would be instantiated with no dependencies.
   *
   *
   * ### Component-level injection
   *
   * Directives can inject any injectable instance from the closest component injector or any of its
   * parents.
   *
   * Here, the constructor declares a parameter, `someService`, and injects the `SomeService` type
   * from the parent
   * component's injector.
   * ```
   * @Directive({ selector: '[my-directive]' })
   * class MyDirective {
   *   constructor(someService: SomeService) {
   *   }
   * }
   * ```
   *
   * This directive would be instantiated with a dependency on `SomeService`.
   *
   *
   * ### Injecting a directive from the current element
   *
   * Directives can inject other directives declared on the current element.
   *
   * ```
   * @Directive({ selector: '[my-directive]' })
   * class MyDirective {
   *   constructor(dependency: Dependency) {
   *     expect(dependency.id).toEqual(3);
   *   }
   * }
   * ```
   * This directive would be instantiated with `Dependency` declared at the same element, in this case
   * `dependency="3"`.
   *
   * ### Injecting a directive from any ancestor elements
   *
   * Directives can inject other directives declared on any ancestor element (in the current Shadow
   * DOM), i.e. on the current element, the
   * parent element, or its parents.
   * ```
   * @Directive({ selector: '[my-directive]' })
   * class MyDirective {
   *   constructor(@Host() dependency: Dependency) {
   *     expect(dependency.id).toEqual(2);
   *   }
   * }
   * ```
   *
   * `@Host` checks the current element, the parent, as well as its parents recursively. If
   * `dependency="2"` didn't
   * exist on the direct parent, this injection would
   * have returned
   * `dependency="1"`.
   *
   *
   * ### Injecting a live collection of direct child directives
   *
   *
   * A directive can also query for other child directives. Since parent directives are instantiated
   * before child directives, a directive can't simply inject the list of child directives. Instead,
   * the directive injects a {@link QueryList}, which updates its contents as children are added,
   * removed, or moved by a directive that uses a {@link ViewContainerRef} such as a `ngFor`, an
   * `ngIf`, or an `ngSwitch`.
   *
   * ```
   * @Directive({ selector: '[my-directive]' })
   * class MyDirective {
   *   constructor(@Query(Dependency) dependencies:QueryList<Dependency>) {
   *   }
   * }
   * ```
   *
   * This directive would be instantiated with a {@link QueryList} which contains `Dependency` 4 and
   * 6. Here, `Dependency` 5 would not be included, because it is not a direct child.
   *
   * ### Injecting a live collection of descendant directives
   *
   * By passing the descendant flag to `@Query` above, we can include the children of the child
   * elements.
   *
   * ```
   * @Directive({ selector: '[my-directive]' })
   * class MyDirective {
   *   constructor(@Query(Dependency, {descendants: true}) dependencies:QueryList<Dependency>) {
   *   }
   * }
   * ```
   *
   * This directive would be instantiated with a Query which would contain `Dependency` 4, 5 and 6.
   *
   * ### Optional injection
   *
   * The normal behavior of directives is to return an error when a specified dependency cannot be
   * resolved. If you
   * would like to inject `null` on unresolved dependency instead, you can annotate that dependency
   * with `@Optional()`.
   * This explicitly permits the author of a template to treat some of the surrounding directives as
   * optional.
   *
   * ```
   * @Directive({ selector: '[my-directive]' })
   * class MyDirective {
   *   constructor(@Optional() dependency:Dependency) {
   *   }
   * }
   * ```
   *
   * This directive would be instantiated with a `Dependency` directive found on the current element.
   * If none can be
   * found, the injector supplies `null` instead of throwing an error.
   *
   * ### Example
   *
   * Here we use a decorator directive to simply define basic tool-tip behavior.
   *
   * ```
   * @Directive({
   *   selector: '[tooltip]',
   *   inputs: [
   *     'text: tooltip'
   *   ],
   *   host: {
   *     '(mouseenter)': 'onMouseEnter()',
   *     '(mouseleave)': 'onMouseLeave()'
   *   }
   * })
   * class Tooltip{
   *   text:string;
   *   overlay:Overlay; // NOT YET IMPLEMENTED
   *   overlayManager:OverlayManager; // NOT YET IMPLEMENTED
   *
   *   constructor(overlayManager:OverlayManager) {
   *     this.overlayManager = overlayManager;
   *   }
   *
   *   onMouseEnter() {
   *     // exact signature to be determined
   *     this.overlay = this.overlayManager.open(text, ...);
   *   }
   *
   *   onMouseLeave() {
   *     this.overlay.close();
   *     this.overlay = null;
   *   }
   * }
   * ```
   * In our HTML template, we can then add this behavior to a `<div>` or any other element with the
   * `tooltip` selector,
   * like so:
   *
   * ```
   * <div tooltip="some text here"></div>
   * ```
   *
   * Directives can also control the instantiation, destruction, and positioning of inline template
   * elements:
   *
   * A directive uses a {@link ViewContainerRef} to instantiate, insert, move, and destroy views at
   * runtime.
   * The {@link ViewContainerRef} is created as a result of `<template>` element, and represents a
   * location in the current view
   * where these actions are performed.
   *
   * Views are always created as children of the current {@link ComponentMetadata}, and as siblings of
   * the
   * `<template>` element. Thus a
   * directive in a child view cannot inject the directive that created it.
   *
   * Since directives that create views via ViewContainers are common in Angular, and using the full
   * `<template>` element syntax is wordy, Angular
   * also supports a shorthand notation: `<li *foo="bar">` and `<li template="foo: bar">` are
   * equivalent.
   *
   * Thus,
   *
   * ```
   * <ul>
   *   <li *foo="bar" title="text"></li>
   * </ul>
   * ```
   *
   * Expands in use to:
   *
   * ```
   * <ul>
   *   <template [foo]="bar">
   *     <li title="text"></li>
   *   </template>
   * </ul>
   * ```
   *
   * Notice that although the shorthand places `*foo="bar"` within the `<li>` element, the binding for
   * the directive
   * controller is correctly instantiated on the `<template>` element rather than the `<li>` element.
   *
   * ## Lifecycle hooks
   *
   * When the directive class implements some {@linkDocs guide/lifecycle-hooks} the
   * callbacks are called by the change detection at defined points in time during the life of the
   * directive.
   *
   * ### Example
   *
   * Let's suppose we want to implement the `unless` behavior, to conditionally include a template.
   *
   * Here is a simple directive that triggers on an `unless` selector:
   *
   * ```
   * @Directive({
   *   selector: '[unless]',
   *   inputs: ['unless']
   * })
   * export class Unless {
   *   viewContainer: ViewContainerRef;
   *   templateRef: TemplateRef;
   *   prevCondition: boolean;
   *
   *   constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef) {
   *     this.viewContainer = viewContainer;
   *     this.templateRef = templateRef;
   *     this.prevCondition = null;
   *   }
   *
   *   set unless(newCondition) {
   *     if (newCondition && (isBlank(this.prevCondition) || !this.prevCondition)) {
   *       this.prevCondition = true;
   *       this.viewContainer.clear();
   *     } else if (!newCondition && (isBlank(this.prevCondition) || this.prevCondition)) {
   *       this.prevCondition = false;
   *       this.viewContainer.create(this.templateRef);
   *     }
   *   }
   * }
   * ```
   *
   * We can then use this `unless` selector in a template:
   * ```
   * <ul>
   *   <li *unless="expr"></li>
   * </ul>
   * ```
   *
   * Once the directive instantiates the child view, the shorthand notation for the template expands
   * and the result is:
   *
   * ```
   * <ul>
   *   <template [unless]="exp">
   *     <li></li>
   *   </template>
   *   <li></li>
   * </ul>
   * ```
   *
   * Note also that although the `<li></li>` template still exists inside the `<template></template>`,
   * the instantiated
   * view occurs on the second `<li></li>` which is a sibling to the `<template>` element.
   * @stable
   * @Annotation
   */
  exports.Directive = decorators_1.makeDecorator(directives_1.DirectiveMetadata);
  /**
   * Specifies that a constant attribute value should be injected.
   *
   * The directive can inject constant string literals of host element attributes.
   *
   * ### Example
   *
   * Suppose we have an `<input>` element and want to know its `type`.
   *
   * ```html
   * <input type="text">
   * ```
   *
   * A decorator can inject string literal `text` like so:
   *
   * {@example core/ts/metadata/metadata.ts region='attributeMetadata'}
   * @stable
   * @Annotation
   */
  exports.Attribute = decorators_1.makeParamDecorator(di_1.AttributeMetadata);
  // TODO(alexeagle): remove the duplication of this doc. It is copied from QueryMetadata.
  /**
   * Declares an injectable parameter to be a live list of directives or variable
   * bindings from the content children of a directive.
   *
   * ### Example ([live demo](http://plnkr.co/edit/lY9m8HLy7z06vDoUaSN2?p=preview))
   *
   * Assume that `<tabs>` component would like to get a list its children `<pane>`
   * components as shown in this example:
   *
   * ```html
   * <tabs>
   *   <pane title="Overview">...</pane>
   *   <pane *ngFor="let o of objects" [title]="o.title">{{o.text}}</pane>
   * </tabs>
   * ```
   *
   * The preferred solution is to query for `Pane` directives using this decorator.
   *
   * ```javascript
   * @Component({
   *   selector: 'pane',
   *   inputs: ['title']
   * })
   * class Pane {
   *   title:string;
   * }
   *
   * @Component({
   *  selector: 'tabs',
   *  template: `
   *    <ul>
   *      <li *ngFor="let pane of panes">{{pane.title}}</li>
   *    </ul>
   *    <ng-content></ng-content>
   *  `
   * })
   * class Tabs {
   *   panes: QueryList<Pane>;
   *   constructor(@Query(Pane) panes:QueryList<Pane>) {
   *     this.panes = panes;
   *   }
   * }
   * ```
   *
   * A query can look for variable bindings by passing in a string with desired binding symbol.
   *
   * ### Example ([live demo](http://plnkr.co/edit/sT2j25cH1dURAyBRCKx1?p=preview))
   * ```html
   * <seeker>
   *   <div #findme>...</div>
   * </seeker>
   *
   * @Component({ selector: 'seeker' })
   * class seeker {
   *   constructor(@Query('findme') elList: QueryList<ElementRef>) {...}
   * }
   * ```
   *
   * In this case the object that is injected depend on the type of the variable
   * binding. It can be an ElementRef, a directive or a component.
   *
   * Passing in a comma separated list of variable bindings will query for all of them.
   *
   * ```html
   * <seeker>
   *   <div #findMe>...</div>
   *   <div #findMeToo>...</div>
   * </seeker>
   *
   *  @Component({
   *   selector: 'seeker'
   * })
   * class Seeker {
   *   constructor(@Query('findMe, findMeToo') elList: QueryList<ElementRef>) {...}
   * }
   * ```
   *
   * Configure whether query looks for direct children or all descendants
   * of the querying element, by using the `descendants` parameter.
   * It is set to `false` by default.
   *
   * ### Example ([live demo](http://plnkr.co/edit/wtGeB977bv7qvA5FTYl9?p=preview))
   * ```html
   * <container #first>
   *   <item>a</item>
   *   <item>b</item>
   *   <container #second>
   *     <item>c</item>
   *   </container>
   * </container>
   * ```
   *
   * When querying for items, the first container will see only `a` and `b` by default,
   * but with `Query(TextDirective, {descendants: true})` it will see `c` too.
   *
   * The queried directives are kept in a depth-first pre-order with respect to their
   * positions in the DOM.
   *
   * Query does not look deep into any subcomponent views.
   *
   * Query is updated as part of the change-detection cycle. Since change detection
   * happens after construction of a directive, QueryList will always be empty when observed in the
   * constructor.
   *
   * The injected object is an unmodifiable live list.
   * See {@link QueryList} for more details.
   * @deprecated
   * @Annotation
   */
  exports.Query = decorators_1.makeParamDecorator(di_1.QueryMetadata);
  // TODO(alexeagle): remove the duplication of this doc. It is copied from ContentChildrenMetadata.
  /**
   * Configures a content query.
   *
   * Content queries are set before the `ngAfterContentInit` callback is called.
   *
   * ### Example
   *
   * ```
   * @Directive({
   *   selector: 'someDir'
   * })
   * class SomeDir {
   *   @ContentChildren(ChildDirective) contentChildren: QueryList<ChildDirective>;
   *
   *   ngAfterContentInit() {
   *     // contentChildren is set
   *   }
   * }
   * ```
   * @stable
   * @Annotation
   */
  exports.ContentChildren = decorators_1.makePropDecorator(di_1.ContentChildrenMetadata);
  // TODO(alexeagle): remove the duplication of this doc. It is copied from ContentChildMetadata.
  /**
   * Configures a content query.
   *
   * Content queries are set before the `ngAfterContentInit` callback is called.
   *
   * ### Example
   *
   * ```
   * @Directive({
   *   selector: 'someDir'
   * })
   * class SomeDir {
   *   @ContentChild(ChildDirective) contentChild;
   *   @ContentChild('container_ref') containerChild
   *
   *   ngAfterContentInit() {
   *     // contentChild is set
   *     // containerChild is set
   *   }
   * }
   * ```
   *
   * ```html
   * <container #container_ref>
   *   <item>a</item>
   *   <item>b</item>
   * </container>
   * ```
   * @stable
   * @Annotation
   */
  exports.ContentChild = decorators_1.makePropDecorator(di_1.ContentChildMetadata);
  // TODO(alexeagle): remove the duplication of this doc. It is copied from ViewChildrenMetadata.
  /**
   * Declares a list of child element references.
   *
   * Angular automatically updates the list when the DOM is updated.
   *
   * `ViewChildren` takes a argument to select elements.
   *
   * - If the argument is a type, directives or components with the type will be bound.
   *
   * - If the argument is a string, the string is interpreted as a list of comma-separated selectors.
   * For each selector, an element containing the matching template variable (e.g. `#child`) will be
   * bound.
   *
   * View children are set before the `ngAfterViewInit` callback is called.
   *
   * ### Example
   *
   * With type selector:
   *
   * ```
   * @Component({
   *   selector: 'child-cmp',
   *   template: '<p>child</p>'
   * })
   * class ChildCmp {
   *   doSomething() {}
   * }
   *
   * @Component({
   *   selector: 'some-cmp',
   *   template: `
   *     <child-cmp></child-cmp>
   *     <child-cmp></child-cmp>
   *     <child-cmp></child-cmp>
   *   `,
   *   directives: [ChildCmp]
   * })
   * class SomeCmp {
   *   @ViewChildren(ChildCmp) children:QueryList<ChildCmp>;
   *
   *   ngAfterViewInit() {
   *     // children are set
   *     this.children.toArray().forEach((child)=>child.doSomething());
   *   }
   * }
   * ```
   *
   * With string selector:
   *
   * ```
   * @Component({
   *   selector: 'child-cmp',
   *   template: '<p>child</p>'
   * })
   * class ChildCmp {
   *   doSomething() {}
   * }
   *
   * @Component({
   *   selector: 'some-cmp',
   *   template: `
   *     <child-cmp #child1></child-cmp>
   *     <child-cmp #child2></child-cmp>
   *     <child-cmp #child3></child-cmp>
   *   `,
   *   directives: [ChildCmp]
   * })
   * class SomeCmp {
   *   @ViewChildren('child1,child2,child3') children:QueryList<ChildCmp>;
   *
   *   ngAfterViewInit() {
   *     // children are set
   *     this.children.toArray().forEach((child)=>child.doSomething());
   *   }
   * }
   * ```
   *
   * See also: [ViewChildrenMetadata]
   * @stable
   * @Annotation
   */
  exports.ViewChildren = decorators_1.makePropDecorator(di_1.ViewChildrenMetadata);
  // TODO(alexeagle): remove the duplication of this doc. It is copied from ViewChildMetadata.
  /**
   * Declares a reference to a child element.
   *
   * `ViewChildren` takes a argument to select elements.
   *
   * - If the argument is a type, a directive or a component with the type will be bound.
   *
   * - If the argument is a string, the string is interpreted as a selector. An element containing the
   * matching template variable (e.g. `#child`) will be bound.
   *
   * In either case, `@ViewChild()` assigns the first (looking from above) element if there are
   * multiple matches.
   *
   * View child is set before the `ngAfterViewInit` callback is called.
   *
   * ### Example
   *
   * With type selector:
   *
   * ```
   * @Component({
   *   selector: 'child-cmp',
   *   template: '<p>child</p>'
   * })
   * class ChildCmp {
   *   doSomething() {}
   * }
   *
   * @Component({
   *   selector: 'some-cmp',
   *   template: '<child-cmp></child-cmp>',
   *   directives: [ChildCmp]
   * })
   * class SomeCmp {
   *   @ViewChild(ChildCmp) child:ChildCmp;
   *
   *   ngAfterViewInit() {
   *     // child is set
   *     this.child.doSomething();
   *   }
   * }
   * ```
   *
   * With string selector:
   *
   * ```
   * @Component({
   *   selector: 'child-cmp',
   *   template: '<p>child</p>'
   * })
   * class ChildCmp {
   *   doSomething() {}
   * }
   *
   * @Component({
   *   selector: 'some-cmp',
   *   template: '<child-cmp #child></child-cmp>',
   *   directives: [ChildCmp]
   * })
   * class SomeCmp {
   *   @ViewChild('child') child:ChildCmp;
   *
   *   ngAfterViewInit() {
   *     // child is set
   *     this.child.doSomething();
   *   }
   * }
   * ```
   * See also: [ViewChildMetadata]
   * @stable
   * @Annotation
   */
  exports.ViewChild = decorators_1.makePropDecorator(di_1.ViewChildMetadata);
  // TODO(alexeagle): remove the duplication of this doc. It is copied from ViewQueryMetadata.
  /**
   * Similar to {@link QueryMetadata}, but querying the component view, instead of
   * the content children.
   *
   * ### Example ([live demo](http://plnkr.co/edit/eNsFHDf7YjyM6IzKxM1j?p=preview))
   *
   * ```javascript
   * @Component({
   *   ...,
   *   template: `
   *     <item> a </item>
   *     <item> b </item>
   *     <item> c </item>
   *   `
   * })
   * class MyComponent {
   *   shown: boolean;
   *
   *   constructor(private @Query(Item) items:QueryList<Item>) {
   *     items.changes.subscribe(() => console.log(items.length));
   *   }
   * }
   * ```
   *
   * Supports the same querying parameters as {@link QueryMetadata}, except
   * `descendants`. This always queries the whole view.
   *
   * As `shown` is flipped between true and false, items will contain zero of one
   * items.
   *
   * Specifies that a {@link QueryList} should be injected.
   *
   * The injected object is an iterable and observable live list.
   * See {@link QueryList} for more details.
   * @deprecated
   * @Annotation
   */
  exports.ViewQuery = decorators_1.makeParamDecorator(di_1.ViewQueryMetadata);
  // TODO(alexeagle): remove the duplication of this doc. It is copied from PipeMetadata.
  /**
   * Declare reusable pipe function.
   *
   * ### Example
   *
   * {@example core/ts/metadata/metadata.ts region='pipe'}
   * @stable
   * @Annotation
   */
  exports.Pipe = decorators_1.makeDecorator(directives_1.PipeMetadata);
  // TODO(alexeagle): remove the duplication of this doc. It is copied from InputMetadata.
  /**
   * Declares a data-bound input property.
   *
   * Angular automatically updates data-bound properties during change detection.
   *
   * `InputMetadata` takes an optional parameter that specifies the name
   * used when instantiating a component in the template. When not provided,
   * the name of the decorated property is used.
   *
   * ### Example
   *
   * The following example creates a component with two input properties.
   *
   * ```typescript
   * @Component({
   *   selector: 'bank-account',
   *   template: `
   *     Bank Name: {{bankName}}
   *     Account Id: {{id}}
   *   `
   * })
   * class BankAccount {
   *   @Input() bankName: string;
   *   @Input('account-id') id: string;
   *
   *   // this property is not bound, and won't be automatically updated by Angular
   *   normalizedBankName: string;
   * }
   *
   * @Component({
   *   selector: 'app',
   *   template: `
   *     <bank-account bank-name="RBC" account-id="4747"></bank-account>
   *   `,
   *   directives: [BankAccount]
   * })
   * class App {}
   *
   * bootstrap(App);
   * ```
   * @stable
   * @Annotation
   */
  exports.Input = decorators_1.makePropDecorator(directives_1.InputMetadata);
  // TODO(alexeagle): remove the duplication of this doc. It is copied from OutputMetadata.
  /**
   * Declares an event-bound output property.
   *
   * When an output property emits an event, an event handler attached to that event
   * the template is invoked.
   *
   * `OutputMetadata` takes an optional parameter that specifies the name
   * used when instantiating a component in the template. When not provided,
   * the name of the decorated property is used.
   *
   * ### Example
   *
   * ```typescript
   * @Directive({
   *   selector: 'interval-dir',
   * })
   * class IntervalDir {
   *   @Output() everySecond = new EventEmitter();
   *   @Output('everyFiveSeconds') five5Secs = new EventEmitter();
   *
   *   constructor() {
   *     setInterval(() => this.everySecond.emit("event"), 1000);
   *     setInterval(() => this.five5Secs.emit("event"), 5000);
   *   }
   * }
   *
   * @Component({
   *   selector: 'app',
   *   template: `
   *     <interval-dir (everySecond)="everySecond()" (everyFiveSeconds)="everyFiveSeconds()">
   *     </interval-dir>
   *   `,
   *   directives: [IntervalDir]
   * })
   * class App {
   *   everySecond() { console.log('second'); }
   *   everyFiveSeconds() { console.log('five seconds'); }
   * }
   * bootstrap(App);
   * ```
   * @stable
   * @Annotation
   */
  exports.Output = decorators_1.makePropDecorator(directives_1.OutputMetadata);
  // TODO(alexeagle): remove the duplication of this doc. It is copied from HostBindingMetadata.
  /**
   * Declares a host property binding.
   *
   * Angular automatically checks host property bindings during change detection.
   * If a binding changes, it will update the host element of the directive.
   *
   * `HostBindingMetadata` takes an optional parameter that specifies the property
   * name of the host element that will be updated. When not provided,
   * the class property name is used.
   *
   * ### Example
   *
   * The following example creates a directive that sets the `valid` and `invalid` classes
   * on the DOM element that has ngModel directive on it.
   *
   * ```typescript
   * @Directive({selector: '[ngModel]'})
   * class NgModelStatus {
   *   constructor(public control:NgModel) {}
   *   @HostBinding('class.valid') get valid() { return this.control.valid; }
   *   @HostBinding('class.invalid') get invalid() { return this.control.invalid; }
   * }
   *
   * @Component({
   *   selector: 'app',
   *   template: `<input [(ngModel)]="prop">`,
   *   directives: [FORM_DIRECTIVES, NgModelStatus]
   * })
   * class App {
   *   prop;
   * }
   *
   * bootstrap(App);
   * ```
   * @stable
   * @Annotation
   */
  exports.HostBinding = decorators_1.makePropDecorator(directives_1.HostBindingMetadata);
  // TODO(alexeagle): remove the duplication of this doc. It is copied from HostListenerMetadata.
  /**
   * Declares a host listener.
   *
   * Angular will invoke the decorated method when the host element emits the specified event.
   *
   * If the decorated method returns `false`, then `preventDefault` is applied on the DOM
   * event.
   *
   * ### Example
   *
   * The following example declares a directive that attaches a click listener to the button and
   * counts clicks.
   *
   * ```typescript
   * @Directive({selector: 'button[counting]'})
   * class CountClicks {
   *   numberOfClicks = 0;
   *
   *   @HostListener('click', ['$event.target'])
   *   onClick(btn) {
   *     console.log("button", btn, "number of clicks:", this.numberOfClicks++);
   *   }
   * }
   *
   * @Component({
   *   selector: 'app',
   *   template: `<button counting>Increment</button>`,
   *   directives: [CountClicks]
   * })
   * class App {}
   *
   * bootstrap(App);
   * ```
   * @stable
   * @Annotation
   */
  exports.HostListener = decorators_1.makePropDecorator(directives_1.HostListenerMetadata);
  /**
   * Declares an ng module.
   * @experimental
   * @Annotation
   */
  exports.NgModule = decorators_1.makeDecorator(ng_module_1.NgModuleMetadata);
  

  return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/application_module.js', ['./application_init', './application_ref', './application_tokens', './change_detection/change_detection', './linker/compiler', './linker/component_resolver', './linker/dynamic_component_loader', './linker/view_utils', './metadata', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var application_init_1 = $__require('./application_init');
    var application_ref_1 = $__require('./application_ref');
    var application_tokens_1 = $__require('./application_tokens');
    var change_detection_1 = $__require('./change_detection/change_detection');
    var compiler_1 = $__require('./linker/compiler');
    var component_resolver_1 = $__require('./linker/component_resolver');
    var dynamic_component_loader_1 = $__require('./linker/dynamic_component_loader');
    var view_utils_1 = $__require('./linker/view_utils');
    var metadata_1 = $__require('./metadata');
    function _iterableDiffersFactory() {
        return change_detection_1.defaultIterableDiffers;
    }
    exports._iterableDiffersFactory = _iterableDiffersFactory;
    function _keyValueDiffersFactory() {
        return change_detection_1.defaultKeyValueDiffers;
    }
    exports._keyValueDiffersFactory = _keyValueDiffersFactory;
    /**
     * A default set of providers which should be included in any Angular
     * application, regardless of the platform it runs onto.
     *
     * @deprecated Include `ApplicationModule` instead.
     */
    exports.APPLICATION_COMMON_PROVIDERS = [];
    var ApplicationModule = function () {
        function ApplicationModule() {}
        /** @nocollapse */
        ApplicationModule.decorators = [{ type: metadata_1.NgModule, args: [{
                providers: [application_ref_1.ApplicationRef_, { provide: application_ref_1.ApplicationRef, useExisting: application_ref_1.ApplicationRef_ }, application_init_1.ApplicationInitStatus, compiler_1.Compiler, { provide: component_resolver_1.ComponentResolver, useExisting: compiler_1.Compiler }, application_tokens_1.APP_ID_RANDOM_PROVIDER, view_utils_1.ViewUtils, { provide: change_detection_1.IterableDiffers, useFactory: _iterableDiffersFactory }, { provide: change_detection_1.KeyValueDiffers, useFactory: _keyValueDiffersFactory }, { provide: dynamic_component_loader_1.DynamicComponentLoader, useClass: dynamic_component_loader_1.DynamicComponentLoader_ }]
            }] }];
        return ApplicationModule;
    }();
    exports.ApplicationModule = ApplicationModule;
    

    return module.exports;
});
System.registerDynamic("npm:rxjs@5.0.0-beta.6/SubjectSubscription.js", ["./Subscription"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscription_1 = $__require("./Subscription");
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SubjectSubscription = function (_super) {
        __extends(SubjectSubscription, _super);
        function SubjectSubscription(subject, observer) {
            _super.call(this);
            this.subject = subject;
            this.observer = observer;
            this.isUnsubscribed = false;
        }
        SubjectSubscription.prototype.unsubscribe = function () {
            if (this.isUnsubscribed) {
                return;
            }
            this.isUnsubscribed = true;
            var subject = this.subject;
            var observers = subject.observers;
            this.subject = null;
            if (!observers || observers.length === 0 || subject.isUnsubscribed) {
                return;
            }
            var subscriberIndex = observers.indexOf(this.observer);
            if (subscriberIndex !== -1) {
                observers.splice(subscriberIndex, 1);
            }
        };
        return SubjectSubscription;
    }(Subscription_1.Subscription);
    exports.SubjectSubscription = SubjectSubscription;
    

    return module.exports;
});
System.registerDynamic("npm:rxjs@5.0.0-beta.6/util/throwError.js", [], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  function throwError(e) {
    throw e;
  }
  exports.throwError = throwError;
  

  return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/util/ObjectUnsubscribedError.js', [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * An error thrown when an action is invalid because the object has been
     * unsubscribed.
     *
     * @see {@link Subject}
     * @see {@link BehaviorSubject}
     *
     * @class ObjectUnsubscribedError
     */
    var ObjectUnsubscribedError = function (_super) {
        __extends(ObjectUnsubscribedError, _super);
        function ObjectUnsubscribedError() {
            _super.call(this, 'object unsubscribed');
            this.name = 'ObjectUnsubscribedError';
        }
        return ObjectUnsubscribedError;
    }(Error);
    exports.ObjectUnsubscribedError = ObjectUnsubscribedError;
    

    return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/Subject.js', ['./Observable', './Subscriber', './Subscription', './SubjectSubscription', './symbol/rxSubscriber', './util/throwError', './util/ObjectUnsubscribedError'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require('./Observable');
    var Subscriber_1 = $__require('./Subscriber');
    var Subscription_1 = $__require('./Subscription');
    var SubjectSubscription_1 = $__require('./SubjectSubscription');
    var rxSubscriber_1 = $__require('./symbol/rxSubscriber');
    var throwError_1 = $__require('./util/throwError');
    var ObjectUnsubscribedError_1 = $__require('./util/ObjectUnsubscribedError');
    /**
     * @class Subject<T>
     */
    var Subject = function (_super) {
        __extends(Subject, _super);
        function Subject(destination, source) {
            _super.call(this);
            this.destination = destination;
            this.source = source;
            this.observers = [];
            this.isUnsubscribed = false;
            this.isStopped = false;
            this.hasErrored = false;
            this.dispatching = false;
            this.hasCompleted = false;
            this.source = source;
        }
        Subject.prototype.lift = function (operator) {
            var subject = new Subject(this.destination || this, this);
            subject.operator = operator;
            return subject;
        };
        Subject.prototype.add = function (subscription) {
            return Subscription_1.Subscription.prototype.add.call(this, subscription);
        };
        Subject.prototype.remove = function (subscription) {
            Subscription_1.Subscription.prototype.remove.call(this, subscription);
        };
        Subject.prototype.unsubscribe = function () {
            Subscription_1.Subscription.prototype.unsubscribe.call(this);
        };
        Subject.prototype._subscribe = function (subscriber) {
            if (this.source) {
                return this.source.subscribe(subscriber);
            } else {
                if (subscriber.isUnsubscribed) {
                    return;
                } else if (this.hasErrored) {
                    return subscriber.error(this.errorValue);
                } else if (this.hasCompleted) {
                    return subscriber.complete();
                }
                this.throwIfUnsubscribed();
                var subscription = new SubjectSubscription_1.SubjectSubscription(this, subscriber);
                this.observers.push(subscriber);
                return subscription;
            }
        };
        Subject.prototype._unsubscribe = function () {
            this.source = null;
            this.isStopped = true;
            this.observers = null;
            this.destination = null;
        };
        Subject.prototype.next = function (value) {
            this.throwIfUnsubscribed();
            if (this.isStopped) {
                return;
            }
            this.dispatching = true;
            this._next(value);
            this.dispatching = false;
            if (this.hasErrored) {
                this._error(this.errorValue);
            } else if (this.hasCompleted) {
                this._complete();
            }
        };
        Subject.prototype.error = function (err) {
            this.throwIfUnsubscribed();
            if (this.isStopped) {
                return;
            }
            this.isStopped = true;
            this.hasErrored = true;
            this.errorValue = err;
            if (this.dispatching) {
                return;
            }
            this._error(err);
        };
        Subject.prototype.complete = function () {
            this.throwIfUnsubscribed();
            if (this.isStopped) {
                return;
            }
            this.isStopped = true;
            this.hasCompleted = true;
            if (this.dispatching) {
                return;
            }
            this._complete();
        };
        Subject.prototype.asObservable = function () {
            var observable = new SubjectObservable(this);
            return observable;
        };
        Subject.prototype._next = function (value) {
            if (this.destination) {
                this.destination.next(value);
            } else {
                this._finalNext(value);
            }
        };
        Subject.prototype._finalNext = function (value) {
            var index = -1;
            var observers = this.observers.slice(0);
            var len = observers.length;
            while (++index < len) {
                observers[index].next(value);
            }
        };
        Subject.prototype._error = function (err) {
            if (this.destination) {
                this.destination.error(err);
            } else {
                this._finalError(err);
            }
        };
        Subject.prototype._finalError = function (err) {
            var index = -1;
            var observers = this.observers;
            // optimization to block our SubjectSubscriptions from
            // splicing themselves out of the observers list one by one.
            this.observers = null;
            this.isUnsubscribed = true;
            if (observers) {
                var len = observers.length;
                while (++index < len) {
                    observers[index].error(err);
                }
            }
            this.isUnsubscribed = false;
            this.unsubscribe();
        };
        Subject.prototype._complete = function () {
            if (this.destination) {
                this.destination.complete();
            } else {
                this._finalComplete();
            }
        };
        Subject.prototype._finalComplete = function () {
            var index = -1;
            var observers = this.observers;
            // optimization to block our SubjectSubscriptions from
            // splicing themselves out of the observers list one by one.
            this.observers = null;
            this.isUnsubscribed = true;
            if (observers) {
                var len = observers.length;
                while (++index < len) {
                    observers[index].complete();
                }
            }
            this.isUnsubscribed = false;
            this.unsubscribe();
        };
        Subject.prototype.throwIfUnsubscribed = function () {
            if (this.isUnsubscribed) {
                throwError_1.throwError(new ObjectUnsubscribedError_1.ObjectUnsubscribedError());
            }
        };
        Subject.prototype[rxSubscriber_1.$$rxSubscriber] = function () {
            return new Subscriber_1.Subscriber(this);
        };
        Subject.create = function (destination, source) {
            return new Subject(destination, source);
        };
        return Subject;
    }(Observable_1.Observable);
    exports.Subject = Subject;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SubjectObservable = function (_super) {
        __extends(SubjectObservable, _super);
        function SubjectObservable(source) {
            _super.call(this);
            this.source = source;
        }
        return SubjectObservable;
    }(Observable_1.Observable);
    

    return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/symbol/observable.js', ['../util/root'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var root_1 = $__require('../util/root');
    var Symbol = root_1.root.Symbol;
    if (typeof Symbol === 'function') {
        if (Symbol.observable) {
            exports.$$observable = Symbol.observable;
        } else {
            if (typeof Symbol.for === 'function') {
                exports.$$observable = Symbol.for('observable');
            } else {
                exports.$$observable = Symbol('observable');
            }
            Symbol.observable = exports.$$observable;
        }
    } else {
        exports.$$observable = '@@observable';
    }
    

    return module.exports;
});
System.registerDynamic("npm:rxjs@5.0.0-beta.6/util/isArray.js", [], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  exports.isArray = Array.isArray || function (x) {
    return x && typeof x.length === 'number';
  };
  

  return module.exports;
});
System.registerDynamic("npm:rxjs@5.0.0-beta.6/util/isObject.js", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function isObject(x) {
        return x != null && typeof x === 'object';
    }
    exports.isObject = isObject;
    

    return module.exports;
});
System.registerDynamic("npm:rxjs@5.0.0-beta.6/util/isFunction.js", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function isFunction(x) {
        return typeof x === 'function';
    }
    exports.isFunction = isFunction;
    

    return module.exports;
});
System.registerDynamic("npm:rxjs@5.0.0-beta.6/util/tryCatch.js", ["./errorObject"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var errorObject_1 = $__require("./errorObject");
    var tryCatchTarget;
    function tryCatcher() {
        try {
            return tryCatchTarget.apply(this, arguments);
        } catch (e) {
            errorObject_1.errorObject.e = e;
            return errorObject_1.errorObject;
        }
    }
    function tryCatch(fn) {
        tryCatchTarget = fn;
        return tryCatcher;
    }
    exports.tryCatch = tryCatch;
    ;
    

    return module.exports;
});
System.registerDynamic("npm:rxjs@5.0.0-beta.6/util/errorObject.js", [], true, function ($__require, exports, module) {
  "use strict";
  // typeof any so that it we don't have to cast when comparing a result to the error object

  var define,
      global = this || self,
      GLOBAL = global;
  exports.errorObject = { e: {} };
  

  return module.exports;
});
System.registerDynamic("npm:rxjs@5.0.0-beta.6/util/UnsubscriptionError.js", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * An error thrown when one or more errors have occurred during the
     * `unsubscribe` of a {@link Subscription}.
     */
    var UnsubscriptionError = function (_super) {
        __extends(UnsubscriptionError, _super);
        function UnsubscriptionError(errors) {
            _super.call(this);
            this.errors = errors;
            this.name = 'UnsubscriptionError';
            this.message = errors ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) {
                return i + 1 + ") " + err.toString();
            }).join('\n') : '';
        }
        return UnsubscriptionError;
    }(Error);
    exports.UnsubscriptionError = UnsubscriptionError;
    

    return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/Subscription.js', ['./util/isArray', './util/isObject', './util/isFunction', './util/tryCatch', './util/errorObject', './util/UnsubscriptionError'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var isArray_1 = $__require('./util/isArray');
    var isObject_1 = $__require('./util/isObject');
    var isFunction_1 = $__require('./util/isFunction');
    var tryCatch_1 = $__require('./util/tryCatch');
    var errorObject_1 = $__require('./util/errorObject');
    var UnsubscriptionError_1 = $__require('./util/UnsubscriptionError');
    /**
     * Represents a disposable resource, such as the execution of an Observable. A
     * Subscription has one important method, `unsubscribe`, that takes no argument
     * and just disposes the resource held by the subscription.
     *
     * Additionally, subscriptions may be grouped together through the `add()`
     * method, which will attach a child Subscription to the current Subscription.
     * When a Subscription is unsubscribed, all its children (and its grandchildren)
     * will be unsubscribed as well.
     *
     * @class Subscription
     */
    var Subscription = function () {
        /**
         * @param {function(): void} [unsubscribe] A function describing how to
         * perform the disposal of resources when the `unsubscribe` method is called.
         */
        function Subscription(unsubscribe) {
            /**
             * A flag to indicate whether this Subscription has already been unsubscribed.
             * @type {boolean}
             */
            this.isUnsubscribed = false;
            if (unsubscribe) {
                this._unsubscribe = unsubscribe;
            }
        }
        /**
         * Disposes the resources held by the subscription. May, for instance, cancel
         * an ongoing Observable execution or cancel any other type of work that
         * started when the Subscription was created.
         * @return {void}
         */
        Subscription.prototype.unsubscribe = function () {
            var hasErrors = false;
            var errors;
            if (this.isUnsubscribed) {
                return;
            }
            this.isUnsubscribed = true;
            var _a = this,
                _unsubscribe = _a._unsubscribe,
                _subscriptions = _a._subscriptions;
            this._subscriptions = null;
            if (isFunction_1.isFunction(_unsubscribe)) {
                var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
                if (trial === errorObject_1.errorObject) {
                    hasErrors = true;
                    (errors = errors || []).push(errorObject_1.errorObject.e);
                }
            }
            if (isArray_1.isArray(_subscriptions)) {
                var index = -1;
                var len = _subscriptions.length;
                while (++index < len) {
                    var sub = _subscriptions[index];
                    if (isObject_1.isObject(sub)) {
                        var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
                        if (trial === errorObject_1.errorObject) {
                            hasErrors = true;
                            errors = errors || [];
                            var err = errorObject_1.errorObject.e;
                            if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
                                errors = errors.concat(err.errors);
                            } else {
                                errors.push(err);
                            }
                        }
                    }
                }
            }
            if (hasErrors) {
                throw new UnsubscriptionError_1.UnsubscriptionError(errors);
            }
        };
        /**
         * Adds a tear down to be called during the unsubscribe() of this
         * Subscription.
         *
         * If the tear down being added is a subscription that is already
         * unsubscribed, is the same reference `add` is being called on, or is
         * `Subscription.EMPTY`, it will not be added.
         *
         * If this subscription is already in an `isUnsubscribed` state, the passed
         * tear down logic will be executed immediately.
         *
         * @param {TeardownLogic} teardown The additional logic to execute on
         * teardown.
         * @return {Subscription} Returns the Subscription used or created to be
         * added to the inner subscriptions list. This Subscription can be used with
         * `remove()` to remove the passed teardown logic from the inner subscriptions
         * list.
         */
        Subscription.prototype.add = function (teardown) {
            if (!teardown || teardown === this || teardown === Subscription.EMPTY) {
                return;
            }
            var sub = teardown;
            switch (typeof teardown) {
                case 'function':
                    sub = new Subscription(teardown);
                case 'object':
                    if (sub.isUnsubscribed || typeof sub.unsubscribe !== 'function') {
                        break;
                    } else if (this.isUnsubscribed) {
                        sub.unsubscribe();
                    } else {
                        (this._subscriptions || (this._subscriptions = [])).push(sub);
                    }
                    break;
                default:
                    throw new Error('Unrecognized teardown ' + teardown + ' added to Subscription.');
            }
            return sub;
        };
        /**
         * Removes a Subscription from the internal list of subscriptions that will
         * unsubscribe during the unsubscribe process of this Subscription.
         * @param {Subscription} subscription The subscription to remove.
         * @return {void}
         */
        Subscription.prototype.remove = function (subscription) {
            // HACK: This might be redundant because of the logic in `add()`
            if (subscription == null || subscription === this || subscription === Subscription.EMPTY) {
                return;
            }
            var subscriptions = this._subscriptions;
            if (subscriptions) {
                var subscriptionIndex = subscriptions.indexOf(subscription);
                if (subscriptionIndex !== -1) {
                    subscriptions.splice(subscriptionIndex, 1);
                }
            }
        };
        Subscription.EMPTY = function (empty) {
            empty.isUnsubscribed = true;
            return empty;
        }(new Subscription());
        return Subscription;
    }();
    exports.Subscription = Subscription;
    

    return module.exports;
});
System.registerDynamic("npm:rxjs@5.0.0-beta.6/Observer.js", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    exports.empty = {
        isUnsubscribed: true,
        next: function (value) {},
        error: function (err) {
            throw err;
        },
        complete: function () {}
    };
    

    return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/Subscriber.js', ['./util/isFunction', './Subscription', './symbol/rxSubscriber', './Observer'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var isFunction_1 = $__require('./util/isFunction');
    var Subscription_1 = $__require('./Subscription');
    var rxSubscriber_1 = $__require('./symbol/rxSubscriber');
    var Observer_1 = $__require('./Observer');
    /**
     * Implements the {@link Observer} interface and extends the
     * {@link Subscription} class. While the {@link Observer} is the public API for
     * consuming the values of an {@link Observable}, all Observers get converted to
     * a Subscriber, in order to provide Subscription-like capabilities such as
     * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for
     * implementing operators, but it is rarely used as a public API.
     *
     * @class Subscriber<T>
     */
    var Subscriber = function (_super) {
        __extends(Subscriber, _super);
        /**
         * @param {Observer|function(value: T): void} [destinationOrNext] A partially
         * defined Observer or a `next` callback function.
         * @param {function(e: ?any): void} [error] The `error` callback of an
         * Observer.
         * @param {function(): void} [complete] The `complete` callback of an
         * Observer.
         */
        function Subscriber(destinationOrNext, error, complete) {
            _super.call(this);
            this.syncErrorValue = null;
            this.syncErrorThrown = false;
            this.syncErrorThrowable = false;
            this.isStopped = false;
            switch (arguments.length) {
                case 0:
                    this.destination = Observer_1.empty;
                    break;
                case 1:
                    if (!destinationOrNext) {
                        this.destination = Observer_1.empty;
                        break;
                    }
                    if (typeof destinationOrNext === 'object') {
                        if (destinationOrNext instanceof Subscriber) {
                            this.destination = destinationOrNext;
                            this.destination.add(this);
                        } else {
                            this.syncErrorThrowable = true;
                            this.destination = new SafeSubscriber(this, destinationOrNext);
                        }
                        break;
                    }
                default:
                    this.syncErrorThrowable = true;
                    this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);
                    break;
            }
        }
        /**
         * A static factory for a Subscriber, given a (potentially partial) definition
         * of an Observer.
         * @param {function(x: ?T): void} [next] The `next` callback of an Observer.
         * @param {function(e: ?any): void} [error] The `error` callback of an
         * Observer.
         * @param {function(): void} [complete] The `complete` callback of an
         * Observer.
         * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)
         * Observer represented by the given arguments.
         */
        Subscriber.create = function (next, error, complete) {
            var subscriber = new Subscriber(next, error, complete);
            subscriber.syncErrorThrowable = false;
            return subscriber;
        };
        /**
         * The {@link Observer} callback to receive notifications of type `next` from
         * the Observable, with a value. The Observable may call this method 0 or more
         * times.
         * @param {T} [value] The `next` value.
         * @return {void}
         */
        Subscriber.prototype.next = function (value) {
            if (!this.isStopped) {
                this._next(value);
            }
        };
        /**
         * The {@link Observer} callback to receive notifications of type `error` from
         * the Observable, with an attached {@link Error}. Notifies the Observer that
         * the Observable has experienced an error condition.
         * @param {any} [err] The `error` exception.
         * @return {void}
         */
        Subscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                this.isStopped = true;
                this._error(err);
            }
        };
        /**
         * The {@link Observer} callback to receive a valueless notification of type
         * `complete` from the Observable. Notifies the Observer that the Observable
         * has finished sending push-based notifications.
         * @return {void}
         */
        Subscriber.prototype.complete = function () {
            if (!this.isStopped) {
                this.isStopped = true;
                this._complete();
            }
        };
        Subscriber.prototype.unsubscribe = function () {
            if (this.isUnsubscribed) {
                return;
            }
            this.isStopped = true;
            _super.prototype.unsubscribe.call(this);
        };
        Subscriber.prototype._next = function (value) {
            this.destination.next(value);
        };
        Subscriber.prototype._error = function (err) {
            this.destination.error(err);
            this.unsubscribe();
        };
        Subscriber.prototype._complete = function () {
            this.destination.complete();
            this.unsubscribe();
        };
        Subscriber.prototype[rxSubscriber_1.$$rxSubscriber] = function () {
            return this;
        };
        return Subscriber;
    }(Subscription_1.Subscription);
    exports.Subscriber = Subscriber;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SafeSubscriber = function (_super) {
        __extends(SafeSubscriber, _super);
        function SafeSubscriber(_parent, observerOrNext, error, complete) {
            _super.call(this);
            this._parent = _parent;
            var next;
            var context = this;
            if (isFunction_1.isFunction(observerOrNext)) {
                next = observerOrNext;
            } else if (observerOrNext) {
                context = observerOrNext;
                next = observerOrNext.next;
                error = observerOrNext.error;
                complete = observerOrNext.complete;
                if (isFunction_1.isFunction(context.unsubscribe)) {
                    this.add(context.unsubscribe.bind(context));
                }
                context.unsubscribe = this.unsubscribe.bind(this);
            }
            this._context = context;
            this._next = next;
            this._error = error;
            this._complete = complete;
        }
        SafeSubscriber.prototype.next = function (value) {
            if (!this.isStopped && this._next) {
                var _parent = this._parent;
                if (!_parent.syncErrorThrowable) {
                    this.__tryOrUnsub(this._next, value);
                } else if (this.__tryOrSetError(_parent, this._next, value)) {
                    this.unsubscribe();
                }
            }
        };
        SafeSubscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                var _parent = this._parent;
                if (this._error) {
                    if (!_parent.syncErrorThrowable) {
                        this.__tryOrUnsub(this._error, err);
                        this.unsubscribe();
                    } else {
                        this.__tryOrSetError(_parent, this._error, err);
                        this.unsubscribe();
                    }
                } else if (!_parent.syncErrorThrowable) {
                    this.unsubscribe();
                    throw err;
                } else {
                    _parent.syncErrorValue = err;
                    _parent.syncErrorThrown = true;
                    this.unsubscribe();
                }
            }
        };
        SafeSubscriber.prototype.complete = function () {
            if (!this.isStopped) {
                var _parent = this._parent;
                if (this._complete) {
                    if (!_parent.syncErrorThrowable) {
                        this.__tryOrUnsub(this._complete);
                        this.unsubscribe();
                    } else {
                        this.__tryOrSetError(_parent, this._complete);
                        this.unsubscribe();
                    }
                } else {
                    this.unsubscribe();
                }
            }
        };
        SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
            try {
                fn.call(this._context, value);
            } catch (err) {
                this.unsubscribe();
                throw err;
            }
        };
        SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
            try {
                fn.call(this._context, value);
            } catch (err) {
                parent.syncErrorValue = err;
                parent.syncErrorThrown = true;
                return true;
            }
            return false;
        };
        SafeSubscriber.prototype._unsubscribe = function () {
            var _parent = this._parent;
            this._context = null;
            this._parent = null;
            _parent.unsubscribe();
        };
        return SafeSubscriber;
    }(Subscriber);
    

    return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/util/root.js', [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var objectTypes = {
        'boolean': false,
        'function': true,
        'object': true,
        'number': false,
        'string': false,
        'undefined': false
    };
    exports.root = objectTypes[typeof self] && self || objectTypes[typeof window] && window;
    /* tslint:disable:no-unused-variable */
    var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;
    var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;
    var freeGlobal = objectTypes[typeof global] && global;
    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
        exports.root = freeGlobal;
    }
    

    return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/symbol/rxSubscriber.js', ['../util/root'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var root_1 = $__require('../util/root');
    var Symbol = root_1.root.Symbol;
    exports.$$rxSubscriber = typeof Symbol === 'function' && typeof Symbol.for === 'function' ? Symbol.for('rxSubscriber') : '@@rxSubscriber';
    

    return module.exports;
});
System.registerDynamic('npm:rxjs@5.0.0-beta.6/util/toSubscriber.js', ['../Subscriber', '../symbol/rxSubscriber'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var Subscriber_1 = $__require('../Subscriber');
    var rxSubscriber_1 = $__require('../symbol/rxSubscriber');
    function toSubscriber(nextOrObserver, error, complete) {
        if (nextOrObserver && typeof nextOrObserver === 'object') {
            if (nextOrObserver instanceof Subscriber_1.Subscriber) {
                return nextOrObserver;
            } else if (typeof nextOrObserver[rxSubscriber_1.$$rxSubscriber] === 'function') {
                return nextOrObserver[rxSubscriber_1.$$rxSubscriber]();
            }
        }
        return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
    }
    exports.toSubscriber = toSubscriber;
    

    return module.exports;
});
System.registerDynamic("npm:rxjs@5.0.0-beta.6.json", [], false, function() {
  return {
    "main": "Rx.js",
    "format": "cjs",
    "meta": {
      "*.json": {
        "format": "json"
      },
      "Rx.KitchenSink.d.ts": {
        "format": "esm"
      },
      "bundles/Rx.js": {
        "format": "register"
      },
      "bundles/Rx.min.js": {
        "format": "register"
      },
      "bundles/Rx.umd.js": {
        "cjsRequireDetection": false
      },
      "src/Rx.DOM.ts": {
        "format": "esm"
      },
      "src/Rx.KitchenSink.ts": {
        "format": "esm"
      },
      "src/Rx.ts": {
        "format": "esm"
      },
      "src/add/observable/if.ts": {
        "format": "esm"
      },
      "src/add/observable/throw.ts": {
        "format": "esm"
      },
      "src/observable/bindCallback.ts": {
        "format": "esm"
      },
      "src/observable/bindNodeCallback.ts": {
        "format": "esm"
      },
      "src/observable/concat.ts": {
        "format": "esm"
      },
      "src/observable/defer.ts": {
        "format": "esm"
      },
      "src/observable/dom/webSocket.ts": {
        "format": "esm"
      },
      "src/observable/empty.ts": {
        "format": "esm"
      },
      "src/observable/forkJoin.ts": {
        "format": "esm"
      },
      "src/observable/from.ts": {
        "format": "esm"
      },
      "src/observable/fromEvent.ts": {
        "format": "esm"
      },
      "src/observable/fromEventPattern.ts": {
        "format": "esm"
      },
      "src/observable/fromPromise.ts": {
        "format": "esm"
      },
      "src/observable/if.ts": {
        "format": "esm"
      },
      "src/observable/interval.ts": {
        "format": "esm"
      },
      "src/observable/merge.ts": {
        "format": "esm"
      },
      "src/observable/never.ts": {
        "format": "esm"
      },
      "src/observable/of.ts": {
        "format": "esm"
      },
      "src/observable/range.ts": {
        "format": "esm"
      },
      "src/observable/throw.ts": {
        "format": "esm"
      },
      "src/observable/timer.ts": {
        "format": "esm"
      },
      "src/observable/using.ts": {
        "format": "esm"
      },
      "src/observable/zip.ts": {
        "format": "esm"
      },
      "src/scheduler/animationFrame.ts": {
        "format": "esm"
      },
      "src/scheduler/asap.ts": {
        "format": "esm"
      },
      "src/scheduler/async.ts": {
        "format": "esm"
      },
      "src/scheduler/queue.ts": {
        "format": "esm"
      },
      "src/util/ArgumentOutOfRangeError.ts": {
        "format": "esm"
      },
      "src/util/EmptyError.ts": {
        "format": "esm"
      },
      "src/util/Map.ts": {
        "format": "esm"
      },
      "src/util/ObjectUnsubscribedError.ts": {
        "format": "esm"
      },
      "src/util/noop.ts": {
        "format": "esm"
      }
    }
  };
});

System.registerDynamic('npm:rxjs@5.0.0-beta.6/Observable.js', ['./util/root', './symbol/observable', './util/toSubscriber'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var root_1 = $__require('./util/root');
    var observable_1 = $__require('./symbol/observable');
    var toSubscriber_1 = $__require('./util/toSubscriber');
    /**
     * A representation of any set of values over any amount of time. This the most basic building block
     * of RxJS.
     *
     * @class Observable<T>
     */
    var Observable = function () {
        /**
         * @constructor
         * @param {Function} subscribe the function that is  called when the Observable is
         * initially subscribed to. This function is given a Subscriber, to which new values
         * can be `next`ed, or an `error` method can be called to raise an error, or
         * `complete` can be called to notify of a successful completion.
         */
        function Observable(subscribe) {
            this._isScalar = false;
            if (subscribe) {
                this._subscribe = subscribe;
            }
        }
        /**
         * Creates a new Observable, with this Observable as the source, and the passed
         * operator defined as the new observable's operator.
         * @method lift
         * @param {Operator} operator the operator defining the operation to take on the observable
         * @return {Observable} a new observable with the Operator applied
         */
        Observable.prototype.lift = function (operator) {
            var observable = new Observable();
            observable.source = this;
            observable.operator = operator;
            return observable;
        };
        /**
         * Registers handlers for handling emitted values, error and completions from the observable, and
         *  executes the observable's subscriber function, which will take action to set up the underlying data stream
         * @method subscribe
         * @param {PartialObserver|Function} observerOrNext (optional) either an observer defining all functions to be called,
         *  or the first of three possible handlers, which is the handler for each value emitted from the observable.
         * @param {Function} error (optional) a handler for a terminal event resulting from an error. If no error handler is provided,
         *  the error will be thrown as unhandled
         * @param {Function} complete (optional) a handler for a terminal event resulting from successful completion.
         * @return {ISubscription} a subscription reference to the registered handlers
         */
        Observable.prototype.subscribe = function (observerOrNext, error, complete) {
            var operator = this.operator;
            var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
            sink.add(operator ? operator.call(sink, this) : this._subscribe(sink));
            if (sink.syncErrorThrowable) {
                sink.syncErrorThrowable = false;
                if (sink.syncErrorThrown) {
                    throw sink.syncErrorValue;
                }
            }
            return sink;
        };
        /**
         * @method forEach
         * @param {Function} next a handler for each value emitted by the observable
         * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise
         * @return {Promise} a promise that either resolves on observable completion or
         *  rejects with the handled error
         */
        Observable.prototype.forEach = function (next, PromiseCtor) {
            var _this = this;
            if (!PromiseCtor) {
                if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
                    PromiseCtor = root_1.root.Rx.config.Promise;
                } else if (root_1.root.Promise) {
                    PromiseCtor = root_1.root.Promise;
                }
            }
            if (!PromiseCtor) {
                throw new Error('no Promise impl found');
            }
            return new PromiseCtor(function (resolve, reject) {
                var subscription = _this.subscribe(function (value) {
                    if (subscription) {
                        // if there is a subscription, then we can surmise
                        // the next handling is asynchronous. Any errors thrown
                        // need to be rejected explicitly and unsubscribe must be
                        // called manually
                        try {
                            next(value);
                        } catch (err) {
                            reject(err);
                            subscription.unsubscribe();
                        }
                    } else {
                        // if there is NO subscription, then we're getting a nexted
                        // value synchronously during subscription. We can just call it.
                        // If it errors, Observable's `subscribe` imple will ensure the
                        // unsubscription logic is called, then synchronously rethrow the error.
                        // After that, Promise will trap the error and send it
                        // down the rejection path.
                        next(value);
                    }
                }, reject, resolve);
            });
        };
        Observable.prototype._subscribe = function (subscriber) {
            return this.source.subscribe(subscriber);
        };
        /**
         * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable
         * @method Symbol.observable
         * @return {Observable} this instance of the observable
         */
        Observable.prototype[observable_1.$$observable] = function () {
            return this;
        };
        // HACK: Since TypeScript inherits static properties too, we have to
        // fight against TypeScript here so Subject can have a different static create signature
        /**
         * Creates a new cold Observable by calling the Observable constructor
         * @static true
         * @owner Observable
         * @method create
         * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor
         * @return {Observable} a new cold observable
         */
        Observable.create = function (subscribe) {
            return new Observable(subscribe);
        };
        return Observable;
    }();
    exports.Observable = Observable;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/facade/async.js', ['rxjs/Subject', 'rxjs/Observable', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subject_1 = $__require('rxjs/Subject');
    var Observable_1 = $__require('rxjs/Observable');
    exports.Observable = Observable_1.Observable;
    var Subject_2 = $__require('rxjs/Subject');
    exports.Subject = Subject_2.Subject;
    /**
     * Use by directives and components to emit custom Events.
     *
     * ### Examples
     *
     * In the following example, `Zippy` alternatively emits `open` and `close` events when its
     * title gets clicked:
     *
     * ```
     * @Component({
     *   selector: 'zippy',
     *   template: `
     *   <div class="zippy">
     *     <div (click)="toggle()">Toggle</div>
     *     <div [hidden]="!visible">
     *       <ng-content></ng-content>
     *     </div>
     *  </div>`})
     * export class Zippy {
     *   visible: boolean = true;
     *   @Output() open: EventEmitter<any> = new EventEmitter();
     *   @Output() close: EventEmitter<any> = new EventEmitter();
     *
     *   toggle() {
     *     this.visible = !this.visible;
     *     if (this.visible) {
     *       this.open.emit(null);
     *     } else {
     *       this.close.emit(null);
     *     }
     *   }
     * }
     * ```
     *
     * The events payload can be accessed by the parameter `$event` on the components output event
     * handler:
     *
     * ```
     * <zippy (open)="onOpen($event)" (close)="onClose($event)"></zippy>
     * ```
     *
     * Uses Rx.Observable but provides an adapter to make it work as specified here:
     * https://github.com/jhusain/observable-spec
     *
     * Once a reference implementation of the spec is available, switch to it.
     * @stable
     */
    var EventEmitter = function (_super) {
        __extends(EventEmitter, _super);
        /**
         * Creates an instance of [EventEmitter], which depending on [isAsync],
         * delivers events synchronously or asynchronously.
         */
        function EventEmitter(isAsync) {
            if (isAsync === void 0) {
                isAsync = false;
            }
            _super.call(this);
            this.__isAsync = isAsync;
        }
        EventEmitter.prototype.emit = function (value) {
            _super.prototype.next.call(this, value);
        };
        /**
         * @deprecated - use .emit(value) instead
         */
        EventEmitter.prototype.next = function (value) {
            _super.prototype.next.call(this, value);
        };
        EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {
            var schedulerFn;
            var errorFn = function (err) {
                return null;
            };
            var completeFn = function () {
                return null;
            };
            if (generatorOrNext && typeof generatorOrNext === 'object') {
                schedulerFn = this.__isAsync ? function (value /** TODO #9100 */) {
                    setTimeout(function () {
                        return generatorOrNext.next(value);
                    });
                } : function (value /** TODO #9100 */) {
                    generatorOrNext.next(value);
                };
                if (generatorOrNext.error) {
                    errorFn = this.__isAsync ? function (err) {
                        setTimeout(function () {
                            return generatorOrNext.error(err);
                        });
                    } : function (err) {
                        generatorOrNext.error(err);
                    };
                }
                if (generatorOrNext.complete) {
                    completeFn = this.__isAsync ? function () {
                        setTimeout(function () {
                            return generatorOrNext.complete();
                        });
                    } : function () {
                        generatorOrNext.complete();
                    };
                }
            } else {
                schedulerFn = this.__isAsync ? function (value /** TODO #9100 */) {
                    setTimeout(function () {
                        return generatorOrNext(value);
                    });
                } : function (value /** TODO #9100 */) {
                    generatorOrNext(value);
                };
                if (error) {
                    errorFn = this.__isAsync ? function (err) {
                        setTimeout(function () {
                            return error(err);
                        });
                    } : function (err) {
                        error(err);
                    };
                }
                if (complete) {
                    completeFn = this.__isAsync ? function () {
                        setTimeout(function () {
                            return complete();
                        });
                    } : function () {
                        complete();
                    };
                }
            }
            return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
        };
        return EventEmitter;
    }(Subject_1.Subject);
    exports.EventEmitter = EventEmitter;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/core@2.0.0-rc.5/src/animation/animation_keyframe.js", ["reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var AnimationKeyframe = function () {
        function AnimationKeyframe(offset, styles) {
            this.offset = offset;
            this.styles = styles;
        }
        return AnimationKeyframe;
    }();
    exports.AnimationKeyframe = AnimationKeyframe;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/animation/animation_sequence_player.js', ['../facade/lang', './animation_player', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var lang_1 = $__require('../facade/lang');
    var animation_player_1 = $__require('./animation_player');
    var AnimationSequencePlayer = function () {
        function AnimationSequencePlayer(_players) {
            var _this = this;
            this._players = _players;
            this._currentIndex = 0;
            this._subscriptions = [];
            this._finished = false;
            this._started = false;
            this.parentPlayer = null;
            this._players.forEach(function (player) {
                player.parentPlayer = _this;
            });
            this._onNext(false);
        }
        AnimationSequencePlayer.prototype._onNext = function (start) {
            var _this = this;
            if (this._finished) return;
            if (this._players.length == 0) {
                this._activePlayer = new animation_player_1.NoOpAnimationPlayer();
                lang_1.scheduleMicroTask(function () {
                    return _this._onFinish();
                });
            } else if (this._currentIndex >= this._players.length) {
                this._activePlayer = new animation_player_1.NoOpAnimationPlayer();
                this._onFinish();
            } else {
                var player = this._players[this._currentIndex++];
                player.onDone(function () {
                    return _this._onNext(true);
                });
                this._activePlayer = player;
                if (start) {
                    player.play();
                }
            }
        };
        AnimationSequencePlayer.prototype._onFinish = function () {
            if (!this._finished) {
                this._finished = true;
                if (!lang_1.isPresent(this.parentPlayer)) {
                    this.destroy();
                }
                this._subscriptions.forEach(function (subscription) {
                    return subscription();
                });
                this._subscriptions = [];
            }
        };
        AnimationSequencePlayer.prototype.init = function () {
            this._players.forEach(function (player) {
                return player.init();
            });
        };
        AnimationSequencePlayer.prototype.onDone = function (fn) {
            this._subscriptions.push(fn);
        };
        AnimationSequencePlayer.prototype.hasStarted = function () {
            return this._started;
        };
        AnimationSequencePlayer.prototype.play = function () {
            if (!lang_1.isPresent(this.parentPlayer)) {
                this.init();
            }
            this._started = true;
            this._activePlayer.play();
        };
        AnimationSequencePlayer.prototype.pause = function () {
            this._activePlayer.pause();
        };
        AnimationSequencePlayer.prototype.restart = function () {
            if (this._players.length > 0) {
                this.reset();
                this._players[0].restart();
            }
        };
        AnimationSequencePlayer.prototype.reset = function () {
            this._players.forEach(function (player) {
                return player.reset();
            });
        };
        AnimationSequencePlayer.prototype.finish = function () {
            this._onFinish();
            this._players.forEach(function (player) {
                return player.finish();
            });
        };
        AnimationSequencePlayer.prototype.destroy = function () {
            this._onFinish();
            this._players.forEach(function (player) {
                return player.destroy();
            });
        };
        AnimationSequencePlayer.prototype.setPosition = function (p /** TODO #9100 */) {
            this._players[0].setPosition(p);
        };
        AnimationSequencePlayer.prototype.getPosition = function () {
            return this._players[0].getPosition();
        };
        return AnimationSequencePlayer;
    }();
    exports.AnimationSequencePlayer = AnimationSequencePlayer;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/animation/animation_constants.js', ['reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  exports.FILL_STYLE_FLAG = 'true'; // TODO (matsko): change to boolean
  exports.ANY_STATE = '*';
  exports.DEFAULT_STATE = '*';
  exports.EMPTY_STATE = 'void';
  

  return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/animation/animation_style_util.js', ['../facade/collection', '../facade/lang', './animation_constants', './metadata', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var collection_1 = $__require('../facade/collection');
    var lang_1 = $__require('../facade/lang');
    var animation_constants_1 = $__require('./animation_constants');
    var metadata_1 = $__require('./metadata');
    function prepareFinalAnimationStyles(previousStyles, newStyles, nullValue) {
        if (nullValue === void 0) {
            nullValue = null;
        }
        var finalStyles = {};
        collection_1.StringMapWrapper.forEach(newStyles, function (value, prop) {
            finalStyles[prop] = value == metadata_1.AUTO_STYLE ? nullValue : value.toString();
        });
        collection_1.StringMapWrapper.forEach(previousStyles, function (value, prop) {
            if (!lang_1.isPresent(finalStyles[prop])) {
                finalStyles[prop] = nullValue;
            }
        });
        return finalStyles;
    }
    exports.prepareFinalAnimationStyles = prepareFinalAnimationStyles;
    function balanceAnimationKeyframes(collectedStyles, finalStateStyles, keyframes) {
        var limit = keyframes.length - 1;
        var firstKeyframe = keyframes[0];
        // phase 1: copy all the styles from the first keyframe into the lookup map
        var flatenedFirstKeyframeStyles = flattenStyles(firstKeyframe.styles.styles);
        var extraFirstKeyframeStyles = {};
        var hasExtraFirstStyles = false;
        collection_1.StringMapWrapper.forEach(collectedStyles, function (value, prop) {
            // if the style is already defined in the first keyframe then
            // we do not replace it.
            if (!flatenedFirstKeyframeStyles[prop]) {
                flatenedFirstKeyframeStyles[prop] = value;
                extraFirstKeyframeStyles[prop] = value;
                hasExtraFirstStyles = true;
            }
        });
        var keyframeCollectedStyles = collection_1.StringMapWrapper.merge({}, flatenedFirstKeyframeStyles);
        // phase 2: normalize the final keyframe
        var finalKeyframe = keyframes[limit];
        collection_1.ListWrapper.insert(finalKeyframe.styles.styles, 0, finalStateStyles);
        var flatenedFinalKeyframeStyles = flattenStyles(finalKeyframe.styles.styles);
        var extraFinalKeyframeStyles = {};
        var hasExtraFinalStyles = false;
        collection_1.StringMapWrapper.forEach(keyframeCollectedStyles, function (value, prop) {
            if (!lang_1.isPresent(flatenedFinalKeyframeStyles[prop])) {
                extraFinalKeyframeStyles[prop] = metadata_1.AUTO_STYLE;
                hasExtraFinalStyles = true;
            }
        });
        if (hasExtraFinalStyles) {
            finalKeyframe.styles.styles.push(extraFinalKeyframeStyles);
        }
        collection_1.StringMapWrapper.forEach(flatenedFinalKeyframeStyles, function (value, prop) {
            if (!lang_1.isPresent(flatenedFirstKeyframeStyles[prop])) {
                extraFirstKeyframeStyles[prop] = metadata_1.AUTO_STYLE;
                hasExtraFirstStyles = true;
            }
        });
        if (hasExtraFirstStyles) {
            firstKeyframe.styles.styles.push(extraFirstKeyframeStyles);
        }
        return keyframes;
    }
    exports.balanceAnimationKeyframes = balanceAnimationKeyframes;
    function clearStyles(styles) {
        var finalStyles = {};
        collection_1.StringMapWrapper.keys(styles).forEach(function (key) {
            finalStyles[key] = null;
        });
        return finalStyles;
    }
    exports.clearStyles = clearStyles;
    function collectAndResolveStyles(collection, styles) {
        return styles.map(function (entry) {
            var stylesObj = {};
            collection_1.StringMapWrapper.forEach(entry, function (value, prop) {
                if (value == animation_constants_1.FILL_STYLE_FLAG) {
                    value = collection[prop];
                    if (!lang_1.isPresent(value)) {
                        value = metadata_1.AUTO_STYLE;
                    }
                }
                collection[prop] = value;
                stylesObj[prop] = value;
            });
            return stylesObj;
        });
    }
    exports.collectAndResolveStyles = collectAndResolveStyles;
    function renderStyles(element, renderer, styles) {
        collection_1.StringMapWrapper.forEach(styles, function (value, prop) {
            renderer.setElementStyle(element, prop, value);
        });
    }
    exports.renderStyles = renderStyles;
    function flattenStyles(styles) {
        var finalStyles = {};
        styles.forEach(function (entry) {
            collection_1.StringMapWrapper.forEach(entry, function (value, prop) {
                finalStyles[prop] = value;
            });
        });
        return finalStyles;
    }
    exports.flattenStyles = flattenStyles;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/core@2.0.0-rc.5/src/animation/animation_styles.js", ["reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var AnimationStyles = function () {
        function AnimationStyles(styles) {
            this.styles = styles;
        }
        return AnimationStyles;
    }();
    exports.AnimationStyles = AnimationStyles;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/console.js', ['./di/decorators', './facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var decorators_1 = $__require('./di/decorators');
    var lang_1 = $__require('./facade/lang');
    var Console = function () {
        function Console() {}
        Console.prototype.log = function (message) {
            lang_1.print(message);
        };
        // Note: for reporting errors use `DOM.logError()` as it is platform specific
        Console.prototype.warn = function (message) {
            lang_1.warn(message);
        };
        /** @nocollapse */
        Console.decorators = [{ type: decorators_1.Injectable }];
        return Console;
    }();
    exports.Console = Console;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/debug/debug_node.js', ['../facade/collection', '../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var collection_1 = $__require('../facade/collection');
    var lang_1 = $__require('../facade/lang');
    var EventListener = function () {
        function EventListener(name, callback) {
            this.name = name;
            this.callback = callback;
        }
        ;
        return EventListener;
    }();
    exports.EventListener = EventListener;
    /**
     * @experimental All debugging apis are currently experimental.
     */
    var DebugNode = function () {
        function DebugNode(nativeNode, parent, _debugInfo) {
            this._debugInfo = _debugInfo;
            this.nativeNode = nativeNode;
            if (lang_1.isPresent(parent) && parent instanceof DebugElement) {
                parent.addChild(this);
            } else {
                this.parent = null;
            }
            this.listeners = [];
        }
        Object.defineProperty(DebugNode.prototype, "injector", {
            get: function () {
                return lang_1.isPresent(this._debugInfo) ? this._debugInfo.injector : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugNode.prototype, "componentInstance", {
            get: function () {
                return lang_1.isPresent(this._debugInfo) ? this._debugInfo.component : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugNode.prototype, "context", {
            get: function () {
                return lang_1.isPresent(this._debugInfo) ? this._debugInfo.context : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugNode.prototype, "references", {
            get: function () {
                return lang_1.isPresent(this._debugInfo) ? this._debugInfo.references : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugNode.prototype, "providerTokens", {
            get: function () {
                return lang_1.isPresent(this._debugInfo) ? this._debugInfo.providerTokens : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugNode.prototype, "source", {
            get: function () {
                return lang_1.isPresent(this._debugInfo) ? this._debugInfo.source : null;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Use injector.get(token) instead.
         *
         * @deprecated
         */
        DebugNode.prototype.inject = function (token) {
            return this.injector.get(token);
        };
        return DebugNode;
    }();
    exports.DebugNode = DebugNode;
    /**
     * @experimental All debugging apis are currently experimental.
     */
    var DebugElement = function (_super) {
        __extends(DebugElement, _super);
        function DebugElement(nativeNode, parent, _debugInfo) {
            _super.call(this, nativeNode, parent, _debugInfo);
            this.properties = {};
            this.attributes = {};
            this.classes = {};
            this.styles = {};
            this.childNodes = [];
            this.nativeElement = nativeNode;
        }
        DebugElement.prototype.addChild = function (child) {
            if (lang_1.isPresent(child)) {
                this.childNodes.push(child);
                child.parent = this;
            }
        };
        DebugElement.prototype.removeChild = function (child) {
            var childIndex = this.childNodes.indexOf(child);
            if (childIndex !== -1) {
                child.parent = null;
                this.childNodes.splice(childIndex, 1);
            }
        };
        DebugElement.prototype.insertChildrenAfter = function (child, newChildren) {
            var siblingIndex = this.childNodes.indexOf(child);
            if (siblingIndex !== -1) {
                var previousChildren = this.childNodes.slice(0, siblingIndex + 1);
                var nextChildren = this.childNodes.slice(siblingIndex + 1);
                this.childNodes = collection_1.ListWrapper.concat(collection_1.ListWrapper.concat(previousChildren, newChildren), nextChildren);
                for (var i = 0; i < newChildren.length; ++i) {
                    var newChild = newChildren[i];
                    if (lang_1.isPresent(newChild.parent)) {
                        newChild.parent.removeChild(newChild);
                    }
                    newChild.parent = this;
                }
            }
        };
        DebugElement.prototype.query = function (predicate) {
            var results = this.queryAll(predicate);
            return results.length > 0 ? results[0] : null;
        };
        DebugElement.prototype.queryAll = function (predicate) {
            var matches = [];
            _queryElementChildren(this, predicate, matches);
            return matches;
        };
        DebugElement.prototype.queryAllNodes = function (predicate) {
            var matches = [];
            _queryNodeChildren(this, predicate, matches);
            return matches;
        };
        Object.defineProperty(DebugElement.prototype, "children", {
            get: function () {
                var children = [];
                this.childNodes.forEach(function (node) {
                    if (node instanceof DebugElement) {
                        children.push(node);
                    }
                });
                return children;
            },
            enumerable: true,
            configurable: true
        });
        DebugElement.prototype.triggerEventHandler = function (eventName, eventObj) {
            this.listeners.forEach(function (listener) {
                if (listener.name == eventName) {
                    listener.callback(eventObj);
                }
            });
        };
        return DebugElement;
    }(DebugNode);
    exports.DebugElement = DebugElement;
    /**
     * @experimental
     */
    function asNativeElements(debugEls) {
        return debugEls.map(function (el) {
            return el.nativeElement;
        });
    }
    exports.asNativeElements = asNativeElements;
    function _queryElementChildren(element, predicate, matches) {
        element.childNodes.forEach(function (node) {
            if (node instanceof DebugElement) {
                if (predicate(node)) {
                    matches.push(node);
                }
                _queryElementChildren(node, predicate, matches);
            }
        });
    }
    function _queryNodeChildren(parentNode, predicate, matches) {
        if (parentNode instanceof DebugElement) {
            parentNode.childNodes.forEach(function (node) {
                if (predicate(node)) {
                    matches.push(node);
                }
                if (node instanceof DebugElement) {
                    _queryNodeChildren(node, predicate, matches);
                }
            });
        }
    }
    // Need to keep the nodes in a global Map so that multiple angular apps are supported.
    var _nativeNodeToDebugNode = new Map();
    /**
     * @experimental
     */
    function getDebugNode(nativeNode) {
        return _nativeNodeToDebugNode.get(nativeNode);
    }
    exports.getDebugNode = getDebugNode;
    function getAllDebugNodes() {
        return collection_1.MapWrapper.values(_nativeNodeToDebugNode);
    }
    exports.getAllDebugNodes = getAllDebugNodes;
    function indexDebugNode(node) {
        _nativeNodeToDebugNode.set(node.nativeNode, node);
    }
    exports.indexDebugNode = indexDebugNode;
    function removeDebugNodeFromIndex(node) {
        _nativeNodeToDebugNode.delete(node.nativeNode);
    }
    exports.removeDebugNodeFromIndex = removeDebugNodeFromIndex;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/debug/debug_renderer.js', ['../facade/lang', './debug_node', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var lang_1 = $__require('../facade/lang');
    var debug_node_1 = $__require('./debug_node');
    var DebugDomRootRenderer = function () {
        function DebugDomRootRenderer(_delegate) {
            this._delegate = _delegate;
        }
        DebugDomRootRenderer.prototype.renderComponent = function (componentProto) {
            return new DebugDomRenderer(this._delegate.renderComponent(componentProto));
        };
        return DebugDomRootRenderer;
    }();
    exports.DebugDomRootRenderer = DebugDomRootRenderer;
    var DebugDomRenderer = function () {
        function DebugDomRenderer(_delegate) {
            this._delegate = _delegate;
        }
        DebugDomRenderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) {
            var nativeEl = this._delegate.selectRootElement(selectorOrNode, debugInfo);
            var debugEl = new debug_node_1.DebugElement(nativeEl, null, debugInfo);
            debug_node_1.indexDebugNode(debugEl);
            return nativeEl;
        };
        DebugDomRenderer.prototype.createElement = function (parentElement, name, debugInfo) {
            var nativeEl = this._delegate.createElement(parentElement, name, debugInfo);
            var debugEl = new debug_node_1.DebugElement(nativeEl, debug_node_1.getDebugNode(parentElement), debugInfo);
            debugEl.name = name;
            debug_node_1.indexDebugNode(debugEl);
            return nativeEl;
        };
        DebugDomRenderer.prototype.createViewRoot = function (hostElement) {
            return this._delegate.createViewRoot(hostElement);
        };
        DebugDomRenderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) {
            var comment = this._delegate.createTemplateAnchor(parentElement, debugInfo);
            var debugEl = new debug_node_1.DebugNode(comment, debug_node_1.getDebugNode(parentElement), debugInfo);
            debug_node_1.indexDebugNode(debugEl);
            return comment;
        };
        DebugDomRenderer.prototype.createText = function (parentElement, value, debugInfo) {
            var text = this._delegate.createText(parentElement, value, debugInfo);
            var debugEl = new debug_node_1.DebugNode(text, debug_node_1.getDebugNode(parentElement), debugInfo);
            debug_node_1.indexDebugNode(debugEl);
            return text;
        };
        DebugDomRenderer.prototype.projectNodes = function (parentElement, nodes) {
            var debugParent = debug_node_1.getDebugNode(parentElement);
            if (lang_1.isPresent(debugParent) && debugParent instanceof debug_node_1.DebugElement) {
                var debugElement_1 = debugParent;
                nodes.forEach(function (node) {
                    debugElement_1.addChild(debug_node_1.getDebugNode(node));
                });
            }
            this._delegate.projectNodes(parentElement, nodes);
        };
        DebugDomRenderer.prototype.attachViewAfter = function (node, viewRootNodes) {
            var debugNode = debug_node_1.getDebugNode(node);
            if (lang_1.isPresent(debugNode)) {
                var debugParent = debugNode.parent;
                if (viewRootNodes.length > 0 && lang_1.isPresent(debugParent)) {
                    var debugViewRootNodes = [];
                    viewRootNodes.forEach(function (rootNode) {
                        return debugViewRootNodes.push(debug_node_1.getDebugNode(rootNode));
                    });
                    debugParent.insertChildrenAfter(debugNode, debugViewRootNodes);
                }
            }
            this._delegate.attachViewAfter(node, viewRootNodes);
        };
        DebugDomRenderer.prototype.detachView = function (viewRootNodes) {
            viewRootNodes.forEach(function (node) {
                var debugNode = debug_node_1.getDebugNode(node);
                if (lang_1.isPresent(debugNode) && lang_1.isPresent(debugNode.parent)) {
                    debugNode.parent.removeChild(debugNode);
                }
            });
            this._delegate.detachView(viewRootNodes);
        };
        DebugDomRenderer.prototype.destroyView = function (hostElement, viewAllNodes) {
            viewAllNodes.forEach(function (node) {
                debug_node_1.removeDebugNodeFromIndex(debug_node_1.getDebugNode(node));
            });
            this._delegate.destroyView(hostElement, viewAllNodes);
        };
        DebugDomRenderer.prototype.listen = function (renderElement, name, callback) {
            var debugEl = debug_node_1.getDebugNode(renderElement);
            if (lang_1.isPresent(debugEl)) {
                debugEl.listeners.push(new debug_node_1.EventListener(name, callback));
            }
            return this._delegate.listen(renderElement, name, callback);
        };
        DebugDomRenderer.prototype.listenGlobal = function (target, name, callback) {
            return this._delegate.listenGlobal(target, name, callback);
        };
        DebugDomRenderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {
            var debugEl = debug_node_1.getDebugNode(renderElement);
            if (lang_1.isPresent(debugEl) && debugEl instanceof debug_node_1.DebugElement) {
                debugEl.properties[propertyName] = propertyValue;
            }
            this._delegate.setElementProperty(renderElement, propertyName, propertyValue);
        };
        DebugDomRenderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) {
            var debugEl = debug_node_1.getDebugNode(renderElement);
            if (lang_1.isPresent(debugEl) && debugEl instanceof debug_node_1.DebugElement) {
                debugEl.attributes[attributeName] = attributeValue;
            }
            this._delegate.setElementAttribute(renderElement, attributeName, attributeValue);
        };
        DebugDomRenderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) {
            this._delegate.setBindingDebugInfo(renderElement, propertyName, propertyValue);
        };
        DebugDomRenderer.prototype.setElementClass = function (renderElement, className, isAdd) {
            var debugEl = debug_node_1.getDebugNode(renderElement);
            if (lang_1.isPresent(debugEl) && debugEl instanceof debug_node_1.DebugElement) {
                debugEl.classes[className] = isAdd;
            }
            this._delegate.setElementClass(renderElement, className, isAdd);
        };
        DebugDomRenderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) {
            var debugEl = debug_node_1.getDebugNode(renderElement);
            if (lang_1.isPresent(debugEl) && debugEl instanceof debug_node_1.DebugElement) {
                debugEl.styles[styleName] = styleValue;
            }
            this._delegate.setElementStyle(renderElement, styleName, styleValue);
        };
        DebugDomRenderer.prototype.invokeElementMethod = function (renderElement, methodName, args) {
            this._delegate.invokeElementMethod(renderElement, methodName, args);
        };
        DebugDomRenderer.prototype.setText = function (renderNode, text) {
            this._delegate.setText(renderNode, text);
        };
        DebugDomRenderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing) {
            return this._delegate.animate(element, startingStyles, keyframes, duration, delay, easing);
        };
        return DebugDomRenderer;
    }();
    exports.DebugDomRenderer = DebugDomRenderer;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/linker/component_factory_resolver.js', ['../facade/exceptions', '../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var exceptions_1 = $__require('../facade/exceptions');
    var lang_1 = $__require('../facade/lang');
    /**
     * @stable
     */
    var NoComponentFactoryError = function (_super) {
        __extends(NoComponentFactoryError, _super);
        function NoComponentFactoryError(component) {
            _super.call(this, "No component factory found for " + lang_1.stringify(component));
            this.component = component;
        }
        return NoComponentFactoryError;
    }(exceptions_1.BaseException);
    exports.NoComponentFactoryError = NoComponentFactoryError;
    var _NullComponentFactoryResolver = function () {
        function _NullComponentFactoryResolver() {}
        _NullComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {
            throw new NoComponentFactoryError(component);
        };
        return _NullComponentFactoryResolver;
    }();
    /**
     * @stable
     */
    var ComponentFactoryResolver = function () {
        function ComponentFactoryResolver() {}
        ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();
        return ComponentFactoryResolver;
    }();
    exports.ComponentFactoryResolver = ComponentFactoryResolver;
    var CodegenComponentFactoryResolver = function () {
        function CodegenComponentFactoryResolver(factories, _parent) {
            this._parent = _parent;
            this._factories = new Map();
            for (var i = 0; i < factories.length; i++) {
                var factory = factories[i];
                this._factories.set(factory.componentType, factory);
            }
        }
        CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {
            var result = this._factories.get(component);
            if (!result) {
                result = this._parent.resolveComponentFactory(component);
            }
            return result;
        };
        return CodegenComponentFactoryResolver;
    }();
    exports.CodegenComponentFactoryResolver = CodegenComponentFactoryResolver;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/linker/ng_module_factory.js', ['../di/injector', '../facade/exceptions', '../facade/lang', './component_factory_resolver', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var injector_1 = $__require('../di/injector');
    var exceptions_1 = $__require('../facade/exceptions');
    var lang_1 = $__require('../facade/lang');
    var component_factory_resolver_1 = $__require('./component_factory_resolver');
    /**
     * Represents an instance of an NgModule created via a {@link NgModuleFactory}.
     *
     * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this
     * NgModule Instance.
     *
     * @experimental
     */
    var NgModuleRef = function () {
        function NgModuleRef() {}
        Object.defineProperty(NgModuleRef.prototype, "injector", {
            /**
             * The injector that contains all of the providers of the NgModule.
             */
            get: function () {
                return exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgModuleRef.prototype, "componentFactoryResolver", {
            /**
             * The ComponentFactoryResolver to get hold of the ComponentFactories
             * delcared in the `entryComponents` property of the module.
             */
            get: function () {
                return exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgModuleRef.prototype, "instance", {
            /**
             * The NgModule instance.
             */
            get: function () {
                return exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        return NgModuleRef;
    }();
    exports.NgModuleRef = NgModuleRef;
    /**
     * @experimental
     */
    var NgModuleFactory = function () {
        function NgModuleFactory(_injectorClass, _moduleype) {
            this._injectorClass = _injectorClass;
            this._moduleype = _moduleype;
        }
        Object.defineProperty(NgModuleFactory.prototype, "moduleType", {
            get: function () {
                return this._moduleype;
            },
            enumerable: true,
            configurable: true
        });
        NgModuleFactory.prototype.create = function (parentInjector) {
            if (!parentInjector) {
                parentInjector = injector_1.Injector.NULL;
            }
            var instance = new this._injectorClass(parentInjector);
            instance.create();
            return instance;
        };
        return NgModuleFactory;
    }();
    exports.NgModuleFactory = NgModuleFactory;
    var _UNDEFINED = new Object();
    var NgModuleInjector = function (_super) {
        __extends(NgModuleInjector, _super);
        function NgModuleInjector(parent, factories, bootstrapFactories) {
            _super.call(this, factories, parent.get(component_factory_resolver_1.ComponentFactoryResolver, component_factory_resolver_1.ComponentFactoryResolver.NULL));
            this.parent = parent;
            this.bootstrapFactories = bootstrapFactories;
            this._destroyListeners = [];
            this._destroyed = false;
        }
        NgModuleInjector.prototype.create = function () {
            this.instance = this.createInternal();
        };
        NgModuleInjector.prototype.get = function (token, notFoundValue) {
            if (notFoundValue === void 0) {
                notFoundValue = injector_1.THROW_IF_NOT_FOUND;
            }
            if (token === injector_1.Injector || token === component_factory_resolver_1.ComponentFactoryResolver) {
                return this;
            }
            var result = this.getInternal(token, _UNDEFINED);
            return result === _UNDEFINED ? this.parent.get(token, notFoundValue) : result;
        };
        Object.defineProperty(NgModuleInjector.prototype, "injector", {
            get: function () {
                return this;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgModuleInjector.prototype, "componentFactoryResolver", {
            get: function () {
                return this;
            },
            enumerable: true,
            configurable: true
        });
        NgModuleInjector.prototype.destroy = function () {
            if (this._destroyed) {
                throw new exceptions_1.BaseException("The ng module " + lang_1.stringify(this.instance.constructor) + " has already been destroyed.");
            }
            this._destroyed = true;
            this.destroyInternal();
            this._destroyListeners.forEach(function (listener) {
                return listener();
            });
        };
        NgModuleInjector.prototype.onDestroy = function (callback) {
            this._destroyListeners.push(callback);
        };
        return NgModuleInjector;
    }(component_factory_resolver_1.CodegenComponentFactoryResolver);
    exports.NgModuleInjector = NgModuleInjector;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/core@2.0.0-rc.5/src/linker/template_ref.js", ["reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * Represents an Embedded Template that can be used to instantiate Embedded Views.
     *
     * You can access a `TemplateRef`, in two ways. Via a directive placed on a `<template>` element (or
     * directive prefixed with `*`) and have the `TemplateRef` for this Embedded View injected into the
     * constructor of the directive using the `TemplateRef` Token. Alternatively you can query for the
     * `TemplateRef` from a Component or a Directive via {@link Query}.
     *
     * To instantiate Embedded Views based on a Template, use
     * {@link ViewContainerRef#createEmbeddedView}, which will create the View and attach it to the
     * View Container.
     * @stable
     */
    var TemplateRef = function () {
        function TemplateRef() {}
        Object.defineProperty(TemplateRef.prototype, "elementRef", {
            /**
             * The location in the View where the Embedded View logically belongs to.
             *
             * The data-binding and injection contexts of Embedded Views created from this `TemplateRef`
             * inherit from the contexts of this location.
             *
             * Typically new Embedded Views are attached to the View Container of this location, but in
             * advanced use-cases, the View can be attached to a different container while keeping the
             * data-binding and injection context from the original location.
             *
             */
            // TODO(i): rename to anchor or location
            get: function () {
                return null;
            },
            enumerable: true,
            configurable: true
        });
        return TemplateRef;
    }();
    exports.TemplateRef = TemplateRef;
    var TemplateRef_ = function (_super) {
        __extends(TemplateRef_, _super);
        function TemplateRef_(_appElement, _viewFactory) {
            _super.call(this);
            this._appElement = _appElement;
            this._viewFactory = _viewFactory;
        }
        TemplateRef_.prototype.createEmbeddedView = function (context) {
            var view = this._viewFactory(this._appElement.parentView.viewUtils, this._appElement.parentInjector, this._appElement);
            view.create(context || {}, null, null);
            return view.ref;
        };
        Object.defineProperty(TemplateRef_.prototype, "elementRef", {
            get: function () {
                return this._appElement.elementRef;
            },
            enumerable: true,
            configurable: true
        });
        return TemplateRef_;
    }(TemplateRef);
    exports.TemplateRef_ = TemplateRef_;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/core@2.0.0-rc.5/src/facade/math.js", ["./lang", "reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var lang_1 = $__require("./lang");
  exports.Math = lang_1.global.Math;
  exports.NaN = typeof exports.NaN;
  

  return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/animation/animation_group_player.js', ['../facade/lang', '../facade/math', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var lang_1 = $__require('../facade/lang');
    var math_1 = $__require('../facade/math');
    var AnimationGroupPlayer = function () {
        function AnimationGroupPlayer(_players) {
            var _this = this;
            this._players = _players;
            this._subscriptions = [];
            this._finished = false;
            this._started = false;
            this.parentPlayer = null;
            var count = 0;
            var total = this._players.length;
            if (total == 0) {
                lang_1.scheduleMicroTask(function () {
                    return _this._onFinish();
                });
            } else {
                this._players.forEach(function (player) {
                    player.parentPlayer = _this;
                    player.onDone(function () {
                        if (++count >= total) {
                            _this._onFinish();
                        }
                    });
                });
            }
        }
        AnimationGroupPlayer.prototype._onFinish = function () {
            if (!this._finished) {
                this._finished = true;
                if (!lang_1.isPresent(this.parentPlayer)) {
                    this.destroy();
                }
                this._subscriptions.forEach(function (subscription) {
                    return subscription();
                });
                this._subscriptions = [];
            }
        };
        AnimationGroupPlayer.prototype.init = function () {
            this._players.forEach(function (player) {
                return player.init();
            });
        };
        AnimationGroupPlayer.prototype.onDone = function (fn) {
            this._subscriptions.push(fn);
        };
        AnimationGroupPlayer.prototype.hasStarted = function () {
            return this._started;
        };
        AnimationGroupPlayer.prototype.play = function () {
            if (!lang_1.isPresent(this.parentPlayer)) {
                this.init();
            }
            this._started = true;
            this._players.forEach(function (player) {
                return player.play();
            });
        };
        AnimationGroupPlayer.prototype.pause = function () {
            this._players.forEach(function (player) {
                return player.pause();
            });
        };
        AnimationGroupPlayer.prototype.restart = function () {
            this._players.forEach(function (player) {
                return player.restart();
            });
        };
        AnimationGroupPlayer.prototype.finish = function () {
            this._onFinish();
            this._players.forEach(function (player) {
                return player.finish();
            });
        };
        AnimationGroupPlayer.prototype.destroy = function () {
            this._onFinish();
            this._players.forEach(function (player) {
                return player.destroy();
            });
        };
        AnimationGroupPlayer.prototype.reset = function () {
            this._players.forEach(function (player) {
                return player.reset();
            });
        };
        AnimationGroupPlayer.prototype.setPosition = function (p /** TODO #9100 */) {
            this._players.forEach(function (player) {
                player.setPosition(p);
            });
        };
        AnimationGroupPlayer.prototype.getPosition = function () {
            var min = 0;
            this._players.forEach(function (player) {
                var p = player.getPosition();
                min = math_1.Math.min(p, min);
            });
            return min;
        };
        return AnimationGroupPlayer;
    }();
    exports.AnimationGroupPlayer = AnimationGroupPlayer;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/animation/view_animation_map.js', ['../facade/collection', '../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var collection_1 = $__require('../facade/collection');
    var lang_1 = $__require('../facade/lang');
    var ViewAnimationMap = function () {
        function ViewAnimationMap() {
            this._map = new collection_1.Map();
            this._allPlayers = [];
        }
        Object.defineProperty(ViewAnimationMap.prototype, "length", {
            get: function () {
                return this.getAllPlayers().length;
            },
            enumerable: true,
            configurable: true
        });
        ViewAnimationMap.prototype.find = function (element, animationName) {
            var playersByAnimation = this._map.get(element);
            if (lang_1.isPresent(playersByAnimation)) {
                return playersByAnimation[animationName];
            }
        };
        ViewAnimationMap.prototype.findAllPlayersByElement = function (element) {
            var el = this._map.get(element);
            return el ? collection_1.StringMapWrapper.values(el) : [];
        };
        ViewAnimationMap.prototype.set = function (element, animationName, player) {
            var playersByAnimation = this._map.get(element);
            if (!lang_1.isPresent(playersByAnimation)) {
                playersByAnimation = {};
            }
            var existingEntry = playersByAnimation[animationName];
            if (lang_1.isPresent(existingEntry)) {
                this.remove(element, animationName);
            }
            playersByAnimation[animationName] = player;
            this._allPlayers.push(player);
            this._map.set(element, playersByAnimation);
        };
        ViewAnimationMap.prototype.getAllPlayers = function () {
            return this._allPlayers;
        };
        ViewAnimationMap.prototype.remove = function (element, animationName) {
            var playersByAnimation = this._map.get(element);
            if (lang_1.isPresent(playersByAnimation)) {
                var player = playersByAnimation[animationName];
                delete playersByAnimation[animationName];
                var index = this._allPlayers.indexOf(player);
                collection_1.ListWrapper.removeAt(this._allPlayers, index);
                if (collection_1.StringMapWrapper.isEmpty(playersByAnimation)) {
                    this._map.delete(element);
                }
            }
        };
        return ViewAnimationMap;
    }();
    exports.ViewAnimationMap = ViewAnimationMap;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/linker/debug_context.js', ['../facade/collection', '../facade/lang', './view_type', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var collection_1 = $__require('../facade/collection');
    var lang_1 = $__require('../facade/lang');
    var view_type_1 = $__require('./view_type');
    var StaticNodeDebugInfo = function () {
        function StaticNodeDebugInfo(providerTokens, componentToken, refTokens) {
            this.providerTokens = providerTokens;
            this.componentToken = componentToken;
            this.refTokens = refTokens;
        }
        return StaticNodeDebugInfo;
    }();
    exports.StaticNodeDebugInfo = StaticNodeDebugInfo;
    var DebugContext = function () {
        function DebugContext(_view, _nodeIndex, _tplRow, _tplCol) {
            this._view = _view;
            this._nodeIndex = _nodeIndex;
            this._tplRow = _tplRow;
            this._tplCol = _tplCol;
        }
        Object.defineProperty(DebugContext.prototype, "_staticNodeInfo", {
            get: function () {
                return lang_1.isPresent(this._nodeIndex) ? this._view.staticNodeDebugInfos[this._nodeIndex] : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugContext.prototype, "context", {
            get: function () {
                return this._view.context;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugContext.prototype, "component", {
            get: function () {
                var staticNodeInfo = this._staticNodeInfo;
                if (lang_1.isPresent(staticNodeInfo) && lang_1.isPresent(staticNodeInfo.componentToken)) {
                    return this.injector.get(staticNodeInfo.componentToken);
                }
                return null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugContext.prototype, "componentRenderElement", {
            get: function () {
                var componentView = this._view;
                while (lang_1.isPresent(componentView.declarationAppElement) && componentView.type !== view_type_1.ViewType.COMPONENT) {
                    componentView = componentView.declarationAppElement.parentView;
                }
                return lang_1.isPresent(componentView.declarationAppElement) ? componentView.declarationAppElement.nativeElement : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugContext.prototype, "injector", {
            get: function () {
                return this._view.injector(this._nodeIndex);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugContext.prototype, "renderNode", {
            get: function () {
                if (lang_1.isPresent(this._nodeIndex) && this._view.allNodes) {
                    return this._view.allNodes[this._nodeIndex];
                } else {
                    return null;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugContext.prototype, "providerTokens", {
            get: function () {
                var staticNodeInfo = this._staticNodeInfo;
                return lang_1.isPresent(staticNodeInfo) ? staticNodeInfo.providerTokens : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugContext.prototype, "source", {
            get: function () {
                return this._view.componentType.templateUrl + ":" + this._tplRow + ":" + this._tplCol;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugContext.prototype, "references", {
            get: function () {
                var _this = this;
                var varValues = {};
                var staticNodeInfo = this._staticNodeInfo;
                if (lang_1.isPresent(staticNodeInfo)) {
                    var refs = staticNodeInfo.refTokens;
                    collection_1.StringMapWrapper.forEach(refs, function (refToken, refName) {
                        var varValue;
                        if (lang_1.isBlank(refToken)) {
                            varValue = _this._view.allNodes ? _this._view.allNodes[_this._nodeIndex] : null;
                        } else {
                            varValue = _this._view.injectorGet(refToken, _this._nodeIndex, null);
                        }
                        varValues[refName] = varValue;
                    });
                }
                return varValues;
            },
            enumerable: true,
            configurable: true
        });
        return DebugContext;
    }();
    exports.DebugContext = DebugContext;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/core@2.0.0-rc.5/src/linker/element_injector.js", ["../di/injector", "reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var injector_1 = $__require("../di/injector");
    var _UNDEFINED = new Object();
    var ElementInjector = function (_super) {
        __extends(ElementInjector, _super);
        function ElementInjector(_view, _nodeIndex) {
            _super.call(this);
            this._view = _view;
            this._nodeIndex = _nodeIndex;
        }
        ElementInjector.prototype.get = function (token, notFoundValue) {
            if (notFoundValue === void 0) {
                notFoundValue = injector_1.THROW_IF_NOT_FOUND;
            }
            var result = _UNDEFINED;
            if (result === _UNDEFINED) {
                result = this._view.injectorGet(token, this._nodeIndex, _UNDEFINED);
            }
            if (result === _UNDEFINED) {
                result = this._view.parentInjector.get(token, notFoundValue);
            }
            return result;
        };
        return ElementInjector;
    }(injector_1.Injector);
    exports.ElementInjector = ElementInjector;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/linker/view_ref.js', ['../change_detection/constants', '../facade/exceptions', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var constants_1 = $__require('../change_detection/constants');
    var exceptions_1 = $__require('../facade/exceptions');
    /**
     * @stable
     */
    var ViewRef = function () {
        function ViewRef() {}
        Object.defineProperty(ViewRef.prototype, "destroyed", {
            get: function () {
                return exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        return ViewRef;
    }();
    exports.ViewRef = ViewRef;
    /**
     * Represents an Angular View.
     *
     * <!-- TODO: move the next two paragraphs to the dev guide -->
     * A View is a fundamental building block of the application UI. It is the smallest grouping of
     * Elements which are created and destroyed together.
     *
     * Properties of elements in a View can change, but the structure (number and order) of elements in
     * a View cannot. Changing the structure of Elements can only be done by inserting, moving or
     * removing nested Views via a {@link ViewContainerRef}. Each View can contain many View Containers.
     * <!-- /TODO -->
     *
     * ### Example
     *
     * Given this template...
     *
     * ```
     * Count: {{items.length}}
     * <ul>
     *   <li *ngFor="let  item of items">{{item}}</li>
     * </ul>
     * ```
     *
     * We have two {@link TemplateRef}s:
     *
     * Outer {@link TemplateRef}:
     * ```
     * Count: {{items.length}}
     * <ul>
     *   <template ngFor let-item [ngForOf]="items"></template>
     * </ul>
     * ```
     *
     * Inner {@link TemplateRef}:
     * ```
     *   <li>{{item}}</li>
     * ```
     *
     * Notice that the original template is broken down into two separate {@link TemplateRef}s.
     *
     * The outer/inner {@link TemplateRef}s are then assembled into views like so:
     *
     * ```
     * <!-- ViewRef: outer-0 -->
     * Count: 2
     * <ul>
     *   <template view-container-ref></template>
     *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->
     *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->
     * </ul>
     * <!-- /ViewRef: outer-0 -->
     * ```
     * @experimental
     */
    var EmbeddedViewRef = function (_super) {
        __extends(EmbeddedViewRef, _super);
        function EmbeddedViewRef() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(EmbeddedViewRef.prototype, "context", {
            get: function () {
                return exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmbeddedViewRef.prototype, "rootNodes", {
            get: function () {
                return exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        ;
        return EmbeddedViewRef;
    }(ViewRef);
    exports.EmbeddedViewRef = EmbeddedViewRef;
    var ViewRef_ = function () {
        function ViewRef_(_view) {
            this._view = _view;
            this._view = _view;
            this._originalMode = this._view.cdMode;
        }
        Object.defineProperty(ViewRef_.prototype, "internalView", {
            get: function () {
                return this._view;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewRef_.prototype, "rootNodes", {
            get: function () {
                return this._view.flatRootNodes;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewRef_.prototype, "context", {
            get: function () {
                return this._view.context;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewRef_.prototype, "destroyed", {
            get: function () {
                return this._view.destroyed;
            },
            enumerable: true,
            configurable: true
        });
        ViewRef_.prototype.markForCheck = function () {
            this._view.markPathToRootAsCheckOnce();
        };
        ViewRef_.prototype.detach = function () {
            this._view.cdMode = constants_1.ChangeDetectorStatus.Detached;
        };
        ViewRef_.prototype.detectChanges = function () {
            this._view.detectChanges(false);
        };
        ViewRef_.prototype.checkNoChanges = function () {
            this._view.detectChanges(true);
        };
        ViewRef_.prototype.reattach = function () {
            this._view.cdMode = this._originalMode;
            this.markForCheck();
        };
        ViewRef_.prototype.onDestroy = function (callback) {
            this._view.disposables.push(callback);
        };
        ViewRef_.prototype.destroy = function () {
            this._view.destroy();
        };
        return ViewRef_;
    }();
    exports.ViewRef_ = ViewRef_;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/linker/view.js', ['../animation/animation_group_player', '../animation/view_animation_map', '../change_detection/change_detection', '../facade/collection', '../facade/lang', '../profile/profile', './debug_context', './element', './element_injector', './exceptions', './view_ref', './view_type', './view_utils', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var animation_group_player_1 = $__require('../animation/animation_group_player');
    var view_animation_map_1 = $__require('../animation/view_animation_map');
    var change_detection_1 = $__require('../change_detection/change_detection');
    var collection_1 = $__require('../facade/collection');
    var lang_1 = $__require('../facade/lang');
    var profile_1 = $__require('../profile/profile');
    var debug_context_1 = $__require('./debug_context');
    var element_1 = $__require('./element');
    var element_injector_1 = $__require('./element_injector');
    var exceptions_1 = $__require('./exceptions');
    var view_ref_1 = $__require('./view_ref');
    var view_type_1 = $__require('./view_type');
    var view_utils_1 = $__require('./view_utils');
    var _scope_check = profile_1.wtfCreateScope("AppView#check(ascii id)");
    /**
     * Cost of making objects: http://jsperf.com/instantiate-size-of-object
     *
     */
    var AppView = function () {
        function AppView(clazz, componentType, type, viewUtils, parentInjector, declarationAppElement, cdMode) {
            this.clazz = clazz;
            this.componentType = componentType;
            this.type = type;
            this.viewUtils = viewUtils;
            this.parentInjector = parentInjector;
            this.declarationAppElement = declarationAppElement;
            this.cdMode = cdMode;
            this.contentChildren = [];
            this.viewChildren = [];
            this.viewContainerElement = null;
            this.numberOfChecks = 0;
            this.animationPlayers = new view_animation_map_1.ViewAnimationMap();
            this.ref = new view_ref_1.ViewRef_(this);
            if (type === view_type_1.ViewType.COMPONENT || type === view_type_1.ViewType.HOST) {
                this.renderer = viewUtils.renderComponent(componentType);
            } else {
                this.renderer = declarationAppElement.parentView.renderer;
            }
        }
        Object.defineProperty(AppView.prototype, "destroyed", {
            get: function () {
                return this.cdMode === change_detection_1.ChangeDetectorStatus.Destroyed;
            },
            enumerable: true,
            configurable: true
        });
        AppView.prototype.cancelActiveAnimation = function (element, animationName, removeAllAnimations) {
            if (removeAllAnimations === void 0) {
                removeAllAnimations = false;
            }
            if (removeAllAnimations) {
                this.animationPlayers.findAllPlayersByElement(element).forEach(function (player) {
                    return player.destroy();
                });
            } else {
                var player = this.animationPlayers.find(element, animationName);
                if (lang_1.isPresent(player)) {
                    player.destroy();
                }
            }
        };
        AppView.prototype.queueAnimation = function (element, animationName, player) {
            var _this = this;
            this.animationPlayers.set(element, animationName, player);
            player.onDone(function () {
                _this.animationPlayers.remove(element, animationName);
            });
        };
        AppView.prototype.triggerQueuedAnimations = function () {
            this.animationPlayers.getAllPlayers().forEach(function (player) {
                if (!player.hasStarted()) {
                    player.play();
                }
            });
        };
        AppView.prototype.create = function (context, givenProjectableNodes, rootSelectorOrNode) {
            this.context = context;
            var projectableNodes;
            switch (this.type) {
                case view_type_1.ViewType.COMPONENT:
                    projectableNodes = view_utils_1.ensureSlotCount(givenProjectableNodes, this.componentType.slotCount);
                    break;
                case view_type_1.ViewType.EMBEDDED:
                    projectableNodes = this.declarationAppElement.parentView.projectableNodes;
                    break;
                case view_type_1.ViewType.HOST:
                    // Note: Don't ensure the slot count for the projectableNodes as we store
                    // them only for the contained component view (which will later check the slot count...)
                    projectableNodes = givenProjectableNodes;
                    break;
            }
            this._hasExternalHostElement = lang_1.isPresent(rootSelectorOrNode);
            this.projectableNodes = projectableNodes;
            return this.createInternal(rootSelectorOrNode);
        };
        /**
         * Overwritten by implementations.
         * Returns the AppElement for the host element for ViewType.HOST.
         */
        AppView.prototype.createInternal = function (rootSelectorOrNode) {
            return null;
        };
        AppView.prototype.init = function (rootNodesOrAppElements, allNodes, disposables, subscriptions) {
            this.rootNodesOrAppElements = rootNodesOrAppElements;
            this.allNodes = allNodes;
            this.disposables = disposables;
            this.subscriptions = subscriptions;
            if (this.type === view_type_1.ViewType.COMPONENT) {
                // Note: the render nodes have been attached to their host element
                // in the ViewFactory already.
                this.declarationAppElement.parentView.viewChildren.push(this);
                this.dirtyParentQueriesInternal();
            }
        };
        AppView.prototype.selectOrCreateHostElement = function (elementName, rootSelectorOrNode, debugInfo) {
            var hostElement;
            if (lang_1.isPresent(rootSelectorOrNode)) {
                hostElement = this.renderer.selectRootElement(rootSelectorOrNode, debugInfo);
            } else {
                hostElement = this.renderer.createElement(null, elementName, debugInfo);
            }
            return hostElement;
        };
        AppView.prototype.injectorGet = function (token, nodeIndex, notFoundResult) {
            return this.injectorGetInternal(token, nodeIndex, notFoundResult);
        };
        /**
         * Overwritten by implementations
         */
        AppView.prototype.injectorGetInternal = function (token, nodeIndex, notFoundResult) {
            return notFoundResult;
        };
        AppView.prototype.injector = function (nodeIndex) {
            if (lang_1.isPresent(nodeIndex)) {
                return new element_injector_1.ElementInjector(this, nodeIndex);
            } else {
                return this.parentInjector;
            }
        };
        AppView.prototype.destroy = function () {
            if (this._hasExternalHostElement) {
                this.renderer.detachView(this.flatRootNodes);
            } else if (lang_1.isPresent(this.viewContainerElement)) {
                this.viewContainerElement.detachView(this.viewContainerElement.nestedViews.indexOf(this));
            }
            this._destroyRecurse();
        };
        AppView.prototype._destroyRecurse = function () {
            if (this.cdMode === change_detection_1.ChangeDetectorStatus.Destroyed) {
                return;
            }
            var children = this.contentChildren;
            for (var i = 0; i < children.length; i++) {
                children[i]._destroyRecurse();
            }
            children = this.viewChildren;
            for (var i = 0; i < children.length; i++) {
                children[i]._destroyRecurse();
            }
            this.destroyLocal();
            this.cdMode = change_detection_1.ChangeDetectorStatus.Destroyed;
        };
        AppView.prototype.destroyLocal = function () {
            var _this = this;
            var hostElement = this.type === view_type_1.ViewType.COMPONENT ? this.declarationAppElement.nativeElement : null;
            for (var i = 0; i < this.disposables.length; i++) {
                this.disposables[i]();
            }
            for (var i = 0; i < this.subscriptions.length; i++) {
                this.subscriptions[i].unsubscribe();
            }
            this.destroyInternal();
            this.dirtyParentQueriesInternal();
            if (this.animationPlayers.length == 0) {
                this.renderer.destroyView(hostElement, this.allNodes);
            } else {
                var player = new animation_group_player_1.AnimationGroupPlayer(this.animationPlayers.getAllPlayers());
                player.onDone(function () {
                    _this.renderer.destroyView(hostElement, _this.allNodes);
                });
            }
        };
        /**
         * Overwritten by implementations
         */
        AppView.prototype.destroyInternal = function () {};
        /**
         * Overwritten by implementations
         */
        AppView.prototype.detachInternal = function () {};
        AppView.prototype.detach = function () {
            var _this = this;
            this.detachInternal();
            if (this.animationPlayers.length == 0) {
                this.renderer.detachView(this.flatRootNodes);
            } else {
                var player = new animation_group_player_1.AnimationGroupPlayer(this.animationPlayers.getAllPlayers());
                player.onDone(function () {
                    _this.renderer.detachView(_this.flatRootNodes);
                });
            }
        };
        Object.defineProperty(AppView.prototype, "changeDetectorRef", {
            get: function () {
                return this.ref;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppView.prototype, "parent", {
            get: function () {
                return lang_1.isPresent(this.declarationAppElement) ? this.declarationAppElement.parentView : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppView.prototype, "flatRootNodes", {
            get: function () {
                return view_utils_1.flattenNestedViewRenderNodes(this.rootNodesOrAppElements);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppView.prototype, "lastRootNode", {
            get: function () {
                var lastNode = this.rootNodesOrAppElements.length > 0 ? this.rootNodesOrAppElements[this.rootNodesOrAppElements.length - 1] : null;
                return _findLastRenderNode(lastNode);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Overwritten by implementations
         */
        AppView.prototype.dirtyParentQueriesInternal = function () {};
        AppView.prototype.detectChanges = function (throwOnChange) {
            var s = _scope_check(this.clazz);
            if (this.cdMode === change_detection_1.ChangeDetectorStatus.Checked || this.cdMode === change_detection_1.ChangeDetectorStatus.Errored) return;
            if (this.cdMode === change_detection_1.ChangeDetectorStatus.Destroyed) {
                this.throwDestroyedError('detectChanges');
            }
            this.detectChangesInternal(throwOnChange);
            if (this.cdMode === change_detection_1.ChangeDetectorStatus.CheckOnce) this.cdMode = change_detection_1.ChangeDetectorStatus.Checked;
            this.numberOfChecks++;
            profile_1.wtfLeave(s);
        };
        /**
         * Overwritten by implementations
         */
        AppView.prototype.detectChangesInternal = function (throwOnChange) {
            this.detectContentChildrenChanges(throwOnChange);
            this.detectViewChildrenChanges(throwOnChange);
        };
        AppView.prototype.detectContentChildrenChanges = function (throwOnChange) {
            for (var i = 0; i < this.contentChildren.length; ++i) {
                var child = this.contentChildren[i];
                if (child.cdMode === change_detection_1.ChangeDetectorStatus.Detached) continue;
                child.detectChanges(throwOnChange);
            }
        };
        AppView.prototype.detectViewChildrenChanges = function (throwOnChange) {
            for (var i = 0; i < this.viewChildren.length; ++i) {
                var child = this.viewChildren[i];
                if (child.cdMode === change_detection_1.ChangeDetectorStatus.Detached) continue;
                child.detectChanges(throwOnChange);
            }
        };
        AppView.prototype.markContentChildAsMoved = function (renderAppElement) {
            this.dirtyParentQueriesInternal();
        };
        AppView.prototype.addToContentChildren = function (renderAppElement) {
            renderAppElement.parentView.contentChildren.push(this);
            this.viewContainerElement = renderAppElement;
            this.dirtyParentQueriesInternal();
        };
        AppView.prototype.removeFromContentChildren = function (renderAppElement) {
            collection_1.ListWrapper.remove(renderAppElement.parentView.contentChildren, this);
            this.dirtyParentQueriesInternal();
            this.viewContainerElement = null;
        };
        AppView.prototype.markAsCheckOnce = function () {
            this.cdMode = change_detection_1.ChangeDetectorStatus.CheckOnce;
        };
        AppView.prototype.markPathToRootAsCheckOnce = function () {
            var c = this;
            while (lang_1.isPresent(c) && c.cdMode !== change_detection_1.ChangeDetectorStatus.Detached) {
                if (c.cdMode === change_detection_1.ChangeDetectorStatus.Checked) {
                    c.cdMode = change_detection_1.ChangeDetectorStatus.CheckOnce;
                }
                var parentEl = c.type === view_type_1.ViewType.COMPONENT ? c.declarationAppElement : c.viewContainerElement;
                c = lang_1.isPresent(parentEl) ? parentEl.parentView : null;
            }
        };
        AppView.prototype.eventHandler = function (cb) {
            return cb;
        };
        AppView.prototype.throwDestroyedError = function (details) {
            throw new exceptions_1.ViewDestroyedException(details);
        };
        return AppView;
    }();
    exports.AppView = AppView;
    var DebugAppView = function (_super) {
        __extends(DebugAppView, _super);
        function DebugAppView(clazz, componentType, type, viewUtils, parentInjector, declarationAppElement, cdMode, staticNodeDebugInfos) {
            _super.call(this, clazz, componentType, type, viewUtils, parentInjector, declarationAppElement, cdMode);
            this.staticNodeDebugInfos = staticNodeDebugInfos;
            this._currentDebugContext = null;
        }
        DebugAppView.prototype.create = function (context, givenProjectableNodes, rootSelectorOrNode) {
            this._resetDebug();
            try {
                return _super.prototype.create.call(this, context, givenProjectableNodes, rootSelectorOrNode);
            } catch (e) {
                this._rethrowWithContext(e, e.stack);
                throw e;
            }
        };
        DebugAppView.prototype.injectorGet = function (token, nodeIndex, notFoundResult) {
            this._resetDebug();
            try {
                return _super.prototype.injectorGet.call(this, token, nodeIndex, notFoundResult);
            } catch (e) {
                this._rethrowWithContext(e, e.stack);
                throw e;
            }
        };
        DebugAppView.prototype.detach = function () {
            this._resetDebug();
            try {
                _super.prototype.detach.call(this);
            } catch (e) {
                this._rethrowWithContext(e, e.stack);
                throw e;
            }
        };
        DebugAppView.prototype.destroyLocal = function () {
            this._resetDebug();
            try {
                _super.prototype.destroyLocal.call(this);
            } catch (e) {
                this._rethrowWithContext(e, e.stack);
                throw e;
            }
        };
        DebugAppView.prototype.detectChanges = function (throwOnChange) {
            this._resetDebug();
            try {
                _super.prototype.detectChanges.call(this, throwOnChange);
            } catch (e) {
                this._rethrowWithContext(e, e.stack);
                throw e;
            }
        };
        DebugAppView.prototype._resetDebug = function () {
            this._currentDebugContext = null;
        };
        DebugAppView.prototype.debug = function (nodeIndex, rowNum, colNum) {
            return this._currentDebugContext = new debug_context_1.DebugContext(this, nodeIndex, rowNum, colNum);
        };
        DebugAppView.prototype._rethrowWithContext = function (e, stack) {
            if (!(e instanceof exceptions_1.ViewWrappedException)) {
                if (!(e instanceof exceptions_1.ExpressionChangedAfterItHasBeenCheckedException)) {
                    this.cdMode = change_detection_1.ChangeDetectorStatus.Errored;
                }
                if (lang_1.isPresent(this._currentDebugContext)) {
                    throw new exceptions_1.ViewWrappedException(e, stack, this._currentDebugContext);
                }
            }
        };
        DebugAppView.prototype.eventHandler = function (cb) {
            var _this = this;
            var superHandler = _super.prototype.eventHandler.call(this, cb);
            return function (event) {
                _this._resetDebug();
                try {
                    return superHandler(event);
                } catch (e) {
                    _this._rethrowWithContext(e, e.stack);
                    throw e;
                }
            };
        };
        return DebugAppView;
    }(AppView);
    exports.DebugAppView = DebugAppView;
    function _findLastRenderNode(node) {
        var lastNode;
        if (node instanceof element_1.AppElement) {
            var appEl = node;
            lastNode = appEl.nativeElement;
            if (lang_1.isPresent(appEl.nestedViews)) {
                // Note: Views might have no root nodes at all!
                for (var i = appEl.nestedViews.length - 1; i >= 0; i--) {
                    var nestedView = appEl.nestedViews[i];
                    if (nestedView.rootNodesOrAppElements.length > 0) {
                        lastNode = _findLastRenderNode(nestedView.rootNodesOrAppElements[nestedView.rootNodesOrAppElements.length - 1]);
                    }
                }
            }
        } else {
            lastNode = node;
        }
        return lastNode;
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/application_tokens.js', ['../src/facade/lang', './di', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var lang_1 = $__require('../src/facade/lang');
  var di_1 = $__require('./di');
  /**
   * A DI Token representing a unique string id assigned to the application by Angular and used
   * primarily for prefixing application attributes and CSS styles when
   * {@link ViewEncapsulation#Emulated} is being used.
   *
   * If you need to avoid randomly generated value to be used as an application id, you can provide
   * a custom value via a DI provider <!-- TODO: provider --> configuring the root {@link Injector}
   * using this token.
   * @experimental
   */
  exports.APP_ID = new di_1.OpaqueToken('AppId');
  function _appIdRandomProviderFactory() {
    return "" + _randomChar() + _randomChar() + _randomChar();
  }
  exports._appIdRandomProviderFactory = _appIdRandomProviderFactory;
  /**
   * Providers that will generate a random APP_ID_TOKEN.
   * @experimental
   */
  exports.APP_ID_RANDOM_PROVIDER = {
    provide: exports.APP_ID,
    useFactory: _appIdRandomProviderFactory,
    deps: []
  };
  function _randomChar() {
    return lang_1.StringWrapper.fromCharCode(97 + lang_1.Math.floor(lang_1.Math.random() * 25));
  }
  /**
   * A function that will be executed when a platform is initialized.
   * @experimental
   */
  exports.PLATFORM_INITIALIZER = new di_1.OpaqueToken('Platform Initializer');
  /**
   * All callbacks provided via this token will be called for every component that is bootstrapped.
   * Signature of the callback:
   *
   * `(componentRef: ComponentRef) => void`.
   *
   * @experimental
   */
  exports.APP_BOOTSTRAP_LISTENER = new di_1.OpaqueToken('appBootstrapListener');
  /**
   * A token which indicates the root directory of the application
   * @experimental
   */
  exports.PACKAGE_ROOT_URL = new di_1.OpaqueToken('Application Packages Root URL');
  

  return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/change_detection/differs/default_iterable_differ.js', ['../../facade/collection', '../../facade/exceptions', '../../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var collection_1 = $__require('../../facade/collection');
    var exceptions_1 = $__require('../../facade/exceptions');
    var lang_1 = $__require('../../facade/lang');
    var DefaultIterableDifferFactory = function () {
        function DefaultIterableDifferFactory() {}
        DefaultIterableDifferFactory.prototype.supports = function (obj) {
            return collection_1.isListLikeIterable(obj);
        };
        DefaultIterableDifferFactory.prototype.create = function (cdRef, trackByFn) {
            return new DefaultIterableDiffer(trackByFn);
        };
        return DefaultIterableDifferFactory;
    }();
    exports.DefaultIterableDifferFactory = DefaultIterableDifferFactory;
    var trackByIdentity = function (index, item) {
        return item;
    };
    /**
     * @stable
     */
    var DefaultIterableDiffer = function () {
        function DefaultIterableDiffer(_trackByFn) {
            this._trackByFn = _trackByFn;
            this._length = null;
            this._collection = null;
            // Keeps track of the used records at any point in time (during & across `_check()` calls)
            this._linkedRecords = null;
            // Keeps track of the removed records at any point in time during `_check()` calls.
            this._unlinkedRecords = null;
            this._previousItHead = null;
            this._itHead = null;
            this._itTail = null;
            this._additionsHead = null;
            this._additionsTail = null;
            this._movesHead = null;
            this._movesTail = null;
            this._removalsHead = null;
            this._removalsTail = null;
            // Keeps track of records where custom track by is the same, but item identity has changed
            this._identityChangesHead = null;
            this._identityChangesTail = null;
            this._trackByFn = lang_1.isPresent(this._trackByFn) ? this._trackByFn : trackByIdentity;
        }
        Object.defineProperty(DefaultIterableDiffer.prototype, "collection", {
            get: function () {
                return this._collection;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DefaultIterableDiffer.prototype, "length", {
            get: function () {
                return this._length;
            },
            enumerable: true,
            configurable: true
        });
        DefaultIterableDiffer.prototype.forEachItem = function (fn) {
            var record;
            for (record = this._itHead; record !== null; record = record._next) {
                fn(record);
            }
        };
        DefaultIterableDiffer.prototype.forEachOperation = function (fn) {
            var nextIt = this._itHead;
            var nextRemove = this._removalsHead;
            var addRemoveOffset = 0;
            var moveOffsets = null;
            while (nextIt || nextRemove) {
                // Figure out which is the next record to process
                // Order: remove, add, move
                var record = !nextRemove || nextIt && nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? nextIt : nextRemove;
                var adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);
                var currentIndex = record.currentIndex;
                // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary
                if (record === nextRemove) {
                    addRemoveOffset--;
                    nextRemove = nextRemove._nextRemoved;
                } else {
                    nextIt = nextIt._next;
                    if (record.previousIndex == null) {
                        addRemoveOffset++;
                    } else {
                        // INVARIANT:  currentIndex < previousIndex
                        if (!moveOffsets) moveOffsets = [];
                        var localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;
                        var localCurrentIndex = currentIndex - addRemoveOffset;
                        if (localMovePreviousIndex != localCurrentIndex) {
                            for (var i = 0; i < localMovePreviousIndex; i++) {
                                var offset = i < moveOffsets.length ? moveOffsets[i] : moveOffsets[i] = 0;
                                var index = offset + i;
                                if (localCurrentIndex <= index && index < localMovePreviousIndex) {
                                    moveOffsets[i] = offset + 1;
                                }
                            }
                            var previousIndex = record.previousIndex;
                            moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
                        }
                    }
                }
                if (adjPreviousIndex !== currentIndex) {
                    fn(record, adjPreviousIndex, currentIndex);
                }
            }
        };
        DefaultIterableDiffer.prototype.forEachPreviousItem = function (fn) {
            var record;
            for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
                fn(record);
            }
        };
        DefaultIterableDiffer.prototype.forEachAddedItem = function (fn) {
            var record;
            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
                fn(record);
            }
        };
        DefaultIterableDiffer.prototype.forEachMovedItem = function (fn) {
            var record;
            for (record = this._movesHead; record !== null; record = record._nextMoved) {
                fn(record);
            }
        };
        DefaultIterableDiffer.prototype.forEachRemovedItem = function (fn) {
            var record;
            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
                fn(record);
            }
        };
        DefaultIterableDiffer.prototype.forEachIdentityChange = function (fn) {
            var record;
            for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
                fn(record);
            }
        };
        DefaultIterableDiffer.prototype.diff = function (collection) {
            if (lang_1.isBlank(collection)) collection = [];
            if (!collection_1.isListLikeIterable(collection)) {
                throw new exceptions_1.BaseException("Error trying to diff '" + collection + "'");
            }
            if (this.check(collection)) {
                return this;
            } else {
                return null;
            }
        };
        DefaultIterableDiffer.prototype.onDestroy = function () {};
        // todo(vicb): optim for UnmodifiableListView (frozen arrays)
        DefaultIterableDiffer.prototype.check = function (collection) {
            var _this = this;
            this._reset();
            var record = this._itHead;
            var mayBeDirty = false;
            var index;
            var item;
            var itemTrackBy;
            if (lang_1.isArray(collection)) {
                var list = collection;
                this._length = collection.length;
                for (index = 0; index < this._length; index++) {
                    item = list[index];
                    itemTrackBy = this._trackByFn(index, item);
                    if (record === null || !lang_1.looseIdentical(record.trackById, itemTrackBy)) {
                        record = this._mismatch(record, item, itemTrackBy, index);
                        mayBeDirty = true;
                    } else {
                        if (mayBeDirty) {
                            // TODO(misko): can we limit this to duplicates only?
                            record = this._verifyReinsertion(record, item, itemTrackBy, index);
                        }
                        if (!lang_1.looseIdentical(record.item, item)) this._addIdentityChange(record, item);
                    }
                    record = record._next;
                }
            } else {
                index = 0;
                collection_1.iterateListLike(collection, function (item /** TODO #9100 */) {
                    itemTrackBy = _this._trackByFn(index, item);
                    if (record === null || !lang_1.looseIdentical(record.trackById, itemTrackBy)) {
                        record = _this._mismatch(record, item, itemTrackBy, index);
                        mayBeDirty = true;
                    } else {
                        if (mayBeDirty) {
                            // TODO(misko): can we limit this to duplicates only?
                            record = _this._verifyReinsertion(record, item, itemTrackBy, index);
                        }
                        if (!lang_1.looseIdentical(record.item, item)) _this._addIdentityChange(record, item);
                    }
                    record = record._next;
                    index++;
                });
                this._length = index;
            }
            this._truncate(record);
            this._collection = collection;
            return this.isDirty;
        };
        Object.defineProperty(DefaultIterableDiffer.prototype, "isDirty", {
            /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity
             * changes.
             */
            get: function () {
                return this._additionsHead !== null || this._movesHead !== null || this._removalsHead !== null || this._identityChangesHead !== null;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Reset the state of the change objects to show no changes. This means set previousKey to
         * currentKey, and clear all of the queues (additions, moves, removals).
         * Set the previousIndexes of moved and added items to their currentIndexes
         * Reset the list of additions, moves and removals
         *
         * @internal
         */
        DefaultIterableDiffer.prototype._reset = function () {
            if (this.isDirty) {
                var record;
                var nextRecord;
                for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
                    record._nextPrevious = record._next;
                }
                for (record = this._additionsHead; record !== null; record = record._nextAdded) {
                    record.previousIndex = record.currentIndex;
                }
                this._additionsHead = this._additionsTail = null;
                for (record = this._movesHead; record !== null; record = nextRecord) {
                    record.previousIndex = record.currentIndex;
                    nextRecord = record._nextMoved;
                }
                this._movesHead = this._movesTail = null;
                this._removalsHead = this._removalsTail = null;
                this._identityChangesHead = this._identityChangesTail = null;
            }
        };
        /**
         * This is the core function which handles differences between collections.
         *
         * - `record` is the record which we saw at this position last time. If null then it is a new
         *   item.
         * - `item` is the current item in the collection
         * - `index` is the position of the item in the collection
         *
         * @internal
         */
        DefaultIterableDiffer.prototype._mismatch = function (record, item, itemTrackBy, index) {
            // The previous record after which we will append the current one.
            var previousRecord;
            if (record === null) {
                previousRecord = this._itTail;
            } else {
                previousRecord = record._prev;
                // Remove the record from the collection since we know it does not match the item.
                this._remove(record);
            }
            // Attempt to see if we have seen the item before.
            record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);
            if (record !== null) {
                // We have seen this before, we need to move it forward in the collection.
                // But first we need to check if identity changed, so we can update in view if necessary
                if (!lang_1.looseIdentical(record.item, item)) this._addIdentityChange(record, item);
                this._moveAfter(record, previousRecord, index);
            } else {
                // Never seen it, check evicted list.
                record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
                if (record !== null) {
                    // It is an item which we have evicted earlier: reinsert it back into the list.
                    // But first we need to check if identity changed, so we can update in view if necessary
                    if (!lang_1.looseIdentical(record.item, item)) this._addIdentityChange(record, item);
                    this._reinsertAfter(record, previousRecord, index);
                } else {
                    // It is a new item: add it.
                    record = this._addAfter(new CollectionChangeRecord(item, itemTrackBy), previousRecord, index);
                }
            }
            return record;
        };
        /**
         * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
         *
         * Use case: `[a, a]` => `[b, a, a]`
         *
         * If we did not have this check then the insertion of `b` would:
         *   1) evict first `a`
         *   2) insert `b` at `0` index.
         *   3) leave `a` at index `1` as is. <-- this is wrong!
         *   3) reinsert `a` at index 2. <-- this is wrong!
         *
         * The correct behavior is:
         *   1) evict first `a`
         *   2) insert `b` at `0` index.
         *   3) reinsert `a` at index 1.
         *   3) move `a` at from `1` to `2`.
         *
         *
         * Double check that we have not evicted a duplicate item. We need to check if the item type may
         * have already been removed:
         * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
         * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
         * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
         * at the end.
         *
         * @internal
         */
        DefaultIterableDiffer.prototype._verifyReinsertion = function (record, item, itemTrackBy, index) {
            var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
            if (reinsertRecord !== null) {
                record = this._reinsertAfter(reinsertRecord, record._prev, index);
            } else if (record.currentIndex != index) {
                record.currentIndex = index;
                this._addToMoves(record, index);
            }
            return record;
        };
        /**
         * Get rid of any excess {@link CollectionChangeRecord}s from the previous collection
         *
         * - `record` The first excess {@link CollectionChangeRecord}.
         *
         * @internal
         */
        DefaultIterableDiffer.prototype._truncate = function (record) {
            // Anything after that needs to be removed;
            while (record !== null) {
                var nextRecord = record._next;
                this._addToRemovals(this._unlink(record));
                record = nextRecord;
            }
            if (this._unlinkedRecords !== null) {
                this._unlinkedRecords.clear();
            }
            if (this._additionsTail !== null) {
                this._additionsTail._nextAdded = null;
            }
            if (this._movesTail !== null) {
                this._movesTail._nextMoved = null;
            }
            if (this._itTail !== null) {
                this._itTail._next = null;
            }
            if (this._removalsTail !== null) {
                this._removalsTail._nextRemoved = null;
            }
            if (this._identityChangesTail !== null) {
                this._identityChangesTail._nextIdentityChange = null;
            }
        };
        /** @internal */
        DefaultIterableDiffer.prototype._reinsertAfter = function (record, prevRecord, index) {
            if (this._unlinkedRecords !== null) {
                this._unlinkedRecords.remove(record);
            }
            var prev = record._prevRemoved;
            var next = record._nextRemoved;
            if (prev === null) {
                this._removalsHead = next;
            } else {
                prev._nextRemoved = next;
            }
            if (next === null) {
                this._removalsTail = prev;
            } else {
                next._prevRemoved = prev;
            }
            this._insertAfter(record, prevRecord, index);
            this._addToMoves(record, index);
            return record;
        };
        /** @internal */
        DefaultIterableDiffer.prototype._moveAfter = function (record, prevRecord, index) {
            this._unlink(record);
            this._insertAfter(record, prevRecord, index);
            this._addToMoves(record, index);
            return record;
        };
        /** @internal */
        DefaultIterableDiffer.prototype._addAfter = function (record, prevRecord, index) {
            this._insertAfter(record, prevRecord, index);
            if (this._additionsTail === null) {
                // todo(vicb)
                // assert(this._additionsHead === null);
                this._additionsTail = this._additionsHead = record;
            } else {
                // todo(vicb)
                // assert(_additionsTail._nextAdded === null);
                // assert(record._nextAdded === null);
                this._additionsTail = this._additionsTail._nextAdded = record;
            }
            return record;
        };
        /** @internal */
        DefaultIterableDiffer.prototype._insertAfter = function (record, prevRecord, index) {
            // todo(vicb)
            // assert(record != prevRecord);
            // assert(record._next === null);
            // assert(record._prev === null);
            var next = prevRecord === null ? this._itHead : prevRecord._next;
            // todo(vicb)
            // assert(next != record);
            // assert(prevRecord != record);
            record._next = next;
            record._prev = prevRecord;
            if (next === null) {
                this._itTail = record;
            } else {
                next._prev = record;
            }
            if (prevRecord === null) {
                this._itHead = record;
            } else {
                prevRecord._next = record;
            }
            if (this._linkedRecords === null) {
                this._linkedRecords = new _DuplicateMap();
            }
            this._linkedRecords.put(record);
            record.currentIndex = index;
            return record;
        };
        /** @internal */
        DefaultIterableDiffer.prototype._remove = function (record) {
            return this._addToRemovals(this._unlink(record));
        };
        /** @internal */
        DefaultIterableDiffer.prototype._unlink = function (record) {
            if (this._linkedRecords !== null) {
                this._linkedRecords.remove(record);
            }
            var prev = record._prev;
            var next = record._next;
            // todo(vicb)
            // assert((record._prev = null) === null);
            // assert((record._next = null) === null);
            if (prev === null) {
                this._itHead = next;
            } else {
                prev._next = next;
            }
            if (next === null) {
                this._itTail = prev;
            } else {
                next._prev = prev;
            }
            return record;
        };
        /** @internal */
        DefaultIterableDiffer.prototype._addToMoves = function (record, toIndex) {
            // todo(vicb)
            // assert(record._nextMoved === null);
            if (record.previousIndex === toIndex) {
                return record;
            }
            if (this._movesTail === null) {
                // todo(vicb)
                // assert(_movesHead === null);
                this._movesTail = this._movesHead = record;
            } else {
                // todo(vicb)
                // assert(_movesTail._nextMoved === null);
                this._movesTail = this._movesTail._nextMoved = record;
            }
            return record;
        };
        /** @internal */
        DefaultIterableDiffer.prototype._addToRemovals = function (record) {
            if (this._unlinkedRecords === null) {
                this._unlinkedRecords = new _DuplicateMap();
            }
            this._unlinkedRecords.put(record);
            record.currentIndex = null;
            record._nextRemoved = null;
            if (this._removalsTail === null) {
                // todo(vicb)
                // assert(_removalsHead === null);
                this._removalsTail = this._removalsHead = record;
                record._prevRemoved = null;
            } else {
                // todo(vicb)
                // assert(_removalsTail._nextRemoved === null);
                // assert(record._nextRemoved === null);
                record._prevRemoved = this._removalsTail;
                this._removalsTail = this._removalsTail._nextRemoved = record;
            }
            return record;
        };
        /** @internal */
        DefaultIterableDiffer.prototype._addIdentityChange = function (record, item) {
            record.item = item;
            if (this._identityChangesTail === null) {
                this._identityChangesTail = this._identityChangesHead = record;
            } else {
                this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
            }
            return record;
        };
        DefaultIterableDiffer.prototype.toString = function () {
            var list = [];
            this.forEachItem(function (record /** TODO #9100 */) {
                return list.push(record);
            });
            var previous = [];
            this.forEachPreviousItem(function (record /** TODO #9100 */) {
                return previous.push(record);
            });
            var additions = [];
            this.forEachAddedItem(function (record /** TODO #9100 */) {
                return additions.push(record);
            });
            var moves = [];
            this.forEachMovedItem(function (record /** TODO #9100 */) {
                return moves.push(record);
            });
            var removals = [];
            this.forEachRemovedItem(function (record /** TODO #9100 */) {
                return removals.push(record);
            });
            var identityChanges = [];
            this.forEachIdentityChange(function (record /** TODO #9100 */) {
                return identityChanges.push(record);
            });
            return 'collection: ' + list.join(', ') + '\n' + 'previous: ' + previous.join(', ') + '\n' + 'additions: ' + additions.join(', ') + '\n' + 'moves: ' + moves.join(', ') + '\n' + 'removals: ' + removals.join(', ') + '\n' + 'identityChanges: ' + identityChanges.join(', ') + '\n';
        };
        return DefaultIterableDiffer;
    }();
    exports.DefaultIterableDiffer = DefaultIterableDiffer;
    /**
     * @stable
     */
    var CollectionChangeRecord = function () {
        function CollectionChangeRecord(item, trackById) {
            this.item = item;
            this.trackById = trackById;
            this.currentIndex = null;
            this.previousIndex = null;
            /** @internal */
            this._nextPrevious = null;
            /** @internal */
            this._prev = null;
            /** @internal */
            this._next = null;
            /** @internal */
            this._prevDup = null;
            /** @internal */
            this._nextDup = null;
            /** @internal */
            this._prevRemoved = null;
            /** @internal */
            this._nextRemoved = null;
            /** @internal */
            this._nextAdded = null;
            /** @internal */
            this._nextMoved = null;
            /** @internal */
            this._nextIdentityChange = null;
        }
        CollectionChangeRecord.prototype.toString = function () {
            return this.previousIndex === this.currentIndex ? lang_1.stringify(this.item) : lang_1.stringify(this.item) + '[' + lang_1.stringify(this.previousIndex) + '->' + lang_1.stringify(this.currentIndex) + ']';
        };
        return CollectionChangeRecord;
    }();
    exports.CollectionChangeRecord = CollectionChangeRecord;
    // A linked list of CollectionChangeRecords with the same CollectionChangeRecord.item
    var _DuplicateItemRecordList = function () {
        function _DuplicateItemRecordList() {
            /** @internal */
            this._head = null;
            /** @internal */
            this._tail = null;
        }
        /**
         * Append the record to the list of duplicates.
         *
         * Note: by design all records in the list of duplicates hold the same value in record.item.
         */
        _DuplicateItemRecordList.prototype.add = function (record) {
            if (this._head === null) {
                this._head = this._tail = record;
                record._nextDup = null;
                record._prevDup = null;
            } else {
                // todo(vicb)
                // assert(record.item ==  _head.item ||
                //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);
                this._tail._nextDup = record;
                record._prevDup = this._tail;
                record._nextDup = null;
                this._tail = record;
            }
        };
        // Returns a CollectionChangeRecord having CollectionChangeRecord.trackById == trackById and
        // CollectionChangeRecord.currentIndex >= afterIndex
        _DuplicateItemRecordList.prototype.get = function (trackById, afterIndex) {
            var record;
            for (record = this._head; record !== null; record = record._nextDup) {
                if ((afterIndex === null || afterIndex < record.currentIndex) && lang_1.looseIdentical(record.trackById, trackById)) {
                    return record;
                }
            }
            return null;
        };
        /**
         * Remove one {@link CollectionChangeRecord} from the list of duplicates.
         *
         * Returns whether the list of duplicates is empty.
         */
        _DuplicateItemRecordList.prototype.remove = function (record) {
            // todo(vicb)
            // assert(() {
            //  // verify that the record being removed is in the list.
            //  for (CollectionChangeRecord cursor = _head; cursor != null; cursor = cursor._nextDup) {
            //    if (identical(cursor, record)) return true;
            //  }
            //  return false;
            //});
            var prev = record._prevDup;
            var next = record._nextDup;
            if (prev === null) {
                this._head = next;
            } else {
                prev._nextDup = next;
            }
            if (next === null) {
                this._tail = prev;
            } else {
                next._prevDup = prev;
            }
            return this._head === null;
        };
        return _DuplicateItemRecordList;
    }();
    var _DuplicateMap = function () {
        function _DuplicateMap() {
            this.map = new Map();
        }
        _DuplicateMap.prototype.put = function (record) {
            // todo(vicb) handle corner cases
            var key = lang_1.getMapKey(record.trackById);
            var duplicates = this.map.get(key);
            if (!lang_1.isPresent(duplicates)) {
                duplicates = new _DuplicateItemRecordList();
                this.map.set(key, duplicates);
            }
            duplicates.add(record);
        };
        /**
         * Retrieve the `value` using key. Because the CollectionChangeRecord value may be one which we
         * have already iterated over, we use the afterIndex to pretend it is not there.
         *
         * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
         * have any more `a`s needs to return the last `a` not the first or second.
         */
        _DuplicateMap.prototype.get = function (trackById, afterIndex) {
            if (afterIndex === void 0) {
                afterIndex = null;
            }
            var key = lang_1.getMapKey(trackById);
            var recordList = this.map.get(key);
            return lang_1.isBlank(recordList) ? null : recordList.get(trackById, afterIndex);
        };
        /**
         * Removes a {@link CollectionChangeRecord} from the list of duplicates.
         *
         * The list of duplicates also is removed from the map if it gets empty.
         */
        _DuplicateMap.prototype.remove = function (record) {
            var key = lang_1.getMapKey(record.trackById);
            // todo(vicb)
            // assert(this.map.containsKey(key));
            var recordList = this.map.get(key);
            // Remove the list of duplicates when it gets empty
            if (recordList.remove(record)) {
                this.map.delete(key);
            }
            return record;
        };
        Object.defineProperty(_DuplicateMap.prototype, "isEmpty", {
            get: function () {
                return this.map.size === 0;
            },
            enumerable: true,
            configurable: true
        });
        _DuplicateMap.prototype.clear = function () {
            this.map.clear();
        };
        _DuplicateMap.prototype.toString = function () {
            return '_DuplicateMap(' + lang_1.stringify(this.map) + ')';
        };
        return _DuplicateMap;
    }();
    function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
        var previousIndex = item.previousIndex;
        if (previousIndex === null) return previousIndex;
        var moveOffset = 0;
        if (moveOffsets && previousIndex < moveOffsets.length) {
            moveOffset = moveOffsets[previousIndex];
        }
        return previousIndex + addRemoveOffset + moveOffset;
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/change_detection/differs/default_keyvalue_differ.js', ['../../facade/collection', '../../facade/exceptions', '../../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var collection_1 = $__require('../../facade/collection');
    var exceptions_1 = $__require('../../facade/exceptions');
    var lang_1 = $__require('../../facade/lang');
    var DefaultKeyValueDifferFactory = function () {
        function DefaultKeyValueDifferFactory() {}
        DefaultKeyValueDifferFactory.prototype.supports = function (obj) {
            return obj instanceof Map || lang_1.isJsObject(obj);
        };
        DefaultKeyValueDifferFactory.prototype.create = function (cdRef) {
            return new DefaultKeyValueDiffer();
        };
        return DefaultKeyValueDifferFactory;
    }();
    exports.DefaultKeyValueDifferFactory = DefaultKeyValueDifferFactory;
    var DefaultKeyValueDiffer = function () {
        function DefaultKeyValueDiffer() {
            this._records = new Map();
            this._mapHead = null;
            this._previousMapHead = null;
            this._changesHead = null;
            this._changesTail = null;
            this._additionsHead = null;
            this._additionsTail = null;
            this._removalsHead = null;
            this._removalsTail = null;
        }
        Object.defineProperty(DefaultKeyValueDiffer.prototype, "isDirty", {
            get: function () {
                return this._additionsHead !== null || this._changesHead !== null || this._removalsHead !== null;
            },
            enumerable: true,
            configurable: true
        });
        DefaultKeyValueDiffer.prototype.forEachItem = function (fn) {
            var record;
            for (record = this._mapHead; record !== null; record = record._next) {
                fn(record);
            }
        };
        DefaultKeyValueDiffer.prototype.forEachPreviousItem = function (fn) {
            var record;
            for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
                fn(record);
            }
        };
        DefaultKeyValueDiffer.prototype.forEachChangedItem = function (fn) {
            var record;
            for (record = this._changesHead; record !== null; record = record._nextChanged) {
                fn(record);
            }
        };
        DefaultKeyValueDiffer.prototype.forEachAddedItem = function (fn) {
            var record;
            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
                fn(record);
            }
        };
        DefaultKeyValueDiffer.prototype.forEachRemovedItem = function (fn) {
            var record;
            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
                fn(record);
            }
        };
        DefaultKeyValueDiffer.prototype.diff = function (map) {
            if (!map) {
                map = new Map();
            } else if (!(map instanceof Map || lang_1.isJsObject(map))) {
                throw new exceptions_1.BaseException("Error trying to diff '" + map + "'");
            }
            return this.check(map) ? this : null;
        };
        DefaultKeyValueDiffer.prototype.onDestroy = function () {};
        DefaultKeyValueDiffer.prototype.check = function (map) {
            var _this = this;
            this._reset();
            var records = this._records;
            var oldSeqRecord = this._mapHead;
            var lastOldSeqRecord = null;
            var lastNewSeqRecord = null;
            var seqChanged = false;
            this._forEach(map, function (value, key) {
                var newSeqRecord;
                if (oldSeqRecord && key === oldSeqRecord.key) {
                    newSeqRecord = oldSeqRecord;
                    _this._maybeAddToChanges(newSeqRecord, value);
                } else {
                    seqChanged = true;
                    if (oldSeqRecord !== null) {
                        _this._removeFromSeq(lastOldSeqRecord, oldSeqRecord);
                        _this._addToRemovals(oldSeqRecord);
                    }
                    if (records.has(key)) {
                        newSeqRecord = records.get(key);
                        _this._maybeAddToChanges(newSeqRecord, value);
                    } else {
                        newSeqRecord = new KeyValueChangeRecord(key);
                        records.set(key, newSeqRecord);
                        newSeqRecord.currentValue = value;
                        _this._addToAdditions(newSeqRecord);
                    }
                }
                if (seqChanged) {
                    if (_this._isInRemovals(newSeqRecord)) {
                        _this._removeFromRemovals(newSeqRecord);
                    }
                    if (lastNewSeqRecord == null) {
                        _this._mapHead = newSeqRecord;
                    } else {
                        lastNewSeqRecord._next = newSeqRecord;
                    }
                }
                lastOldSeqRecord = oldSeqRecord;
                lastNewSeqRecord = newSeqRecord;
                oldSeqRecord = oldSeqRecord && oldSeqRecord._next;
            });
            this._truncate(lastOldSeqRecord, oldSeqRecord);
            return this.isDirty;
        };
        /** @internal */
        DefaultKeyValueDiffer.prototype._reset = function () {
            if (this.isDirty) {
                var record = void 0;
                // Record the state of the mapping
                for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {
                    record._nextPrevious = record._next;
                }
                for (record = this._changesHead; record !== null; record = record._nextChanged) {
                    record.previousValue = record.currentValue;
                }
                for (record = this._additionsHead; record != null; record = record._nextAdded) {
                    record.previousValue = record.currentValue;
                }
                this._changesHead = this._changesTail = null;
                this._additionsHead = this._additionsTail = null;
                this._removalsHead = this._removalsTail = null;
            }
        };
        /** @internal */
        DefaultKeyValueDiffer.prototype._truncate = function (lastRecord, record) {
            while (record !== null) {
                if (lastRecord === null) {
                    this._mapHead = null;
                } else {
                    lastRecord._next = null;
                }
                var nextRecord = record._next;
                this._addToRemovals(record);
                lastRecord = record;
                record = nextRecord;
            }
            for (var rec = this._removalsHead; rec !== null; rec = rec._nextRemoved) {
                rec.previousValue = rec.currentValue;
                rec.currentValue = null;
                this._records.delete(rec.key);
            }
        };
        DefaultKeyValueDiffer.prototype._maybeAddToChanges = function (record, newValue) {
            if (!lang_1.looseIdentical(newValue, record.currentValue)) {
                record.previousValue = record.currentValue;
                record.currentValue = newValue;
                this._addToChanges(record);
            }
        };
        /** @internal */
        DefaultKeyValueDiffer.prototype._isInRemovals = function (record) {
            return record === this._removalsHead || record._nextRemoved !== null || record._prevRemoved !== null;
        };
        /** @internal */
        DefaultKeyValueDiffer.prototype._addToRemovals = function (record) {
            if (this._removalsHead === null) {
                this._removalsHead = this._removalsTail = record;
            } else {
                this._removalsTail._nextRemoved = record;
                record._prevRemoved = this._removalsTail;
                this._removalsTail = record;
            }
        };
        /** @internal */
        DefaultKeyValueDiffer.prototype._removeFromSeq = function (prev, record) {
            var next = record._next;
            if (prev === null) {
                this._mapHead = next;
            } else {
                prev._next = next;
            }
            record._next = null;
        };
        /** @internal */
        DefaultKeyValueDiffer.prototype._removeFromRemovals = function (record) {
            var prev = record._prevRemoved;
            var next = record._nextRemoved;
            if (prev === null) {
                this._removalsHead = next;
            } else {
                prev._nextRemoved = next;
            }
            if (next === null) {
                this._removalsTail = prev;
            } else {
                next._prevRemoved = prev;
            }
            record._prevRemoved = record._nextRemoved = null;
        };
        /** @internal */
        DefaultKeyValueDiffer.prototype._addToAdditions = function (record) {
            if (this._additionsHead === null) {
                this._additionsHead = this._additionsTail = record;
            } else {
                this._additionsTail._nextAdded = record;
                this._additionsTail = record;
            }
        };
        /** @internal */
        DefaultKeyValueDiffer.prototype._addToChanges = function (record) {
            if (this._changesHead === null) {
                this._changesHead = this._changesTail = record;
            } else {
                this._changesTail._nextChanged = record;
                this._changesTail = record;
            }
        };
        DefaultKeyValueDiffer.prototype.toString = function () {
            var items = [];
            var previous = [];
            var changes = [];
            var additions = [];
            var removals = [];
            var record;
            for (record = this._mapHead; record !== null; record = record._next) {
                items.push(lang_1.stringify(record));
            }
            for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
                previous.push(lang_1.stringify(record));
            }
            for (record = this._changesHead; record !== null; record = record._nextChanged) {
                changes.push(lang_1.stringify(record));
            }
            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
                additions.push(lang_1.stringify(record));
            }
            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
                removals.push(lang_1.stringify(record));
            }
            return 'map: ' + items.join(', ') + '\n' + 'previous: ' + previous.join(', ') + '\n' + 'additions: ' + additions.join(', ') + '\n' + 'changes: ' + changes.join(', ') + '\n' + 'removals: ' + removals.join(', ') + '\n';
        };
        /** @internal */
        DefaultKeyValueDiffer.prototype._forEach = function (obj, fn) {
            if (obj instanceof Map) {
                obj.forEach(fn);
            } else {
                collection_1.StringMapWrapper.forEach(obj, fn);
            }
        };
        return DefaultKeyValueDiffer;
    }();
    exports.DefaultKeyValueDiffer = DefaultKeyValueDiffer;
    /**
     * @stable
     */
    var KeyValueChangeRecord = function () {
        function KeyValueChangeRecord(key) {
            this.key = key;
            this.previousValue = null;
            this.currentValue = null;
            /** @internal */
            this._nextPrevious = null;
            /** @internal */
            this._next = null;
            /** @internal */
            this._nextAdded = null;
            /** @internal */
            this._nextRemoved = null;
            /** @internal */
            this._prevRemoved = null;
            /** @internal */
            this._nextChanged = null;
        }
        KeyValueChangeRecord.prototype.toString = function () {
            return lang_1.looseIdentical(this.previousValue, this.currentValue) ? lang_1.stringify(this.key) : lang_1.stringify(this.key) + '[' + lang_1.stringify(this.previousValue) + '->' + lang_1.stringify(this.currentValue) + ']';
        };
        return KeyValueChangeRecord;
    }();
    exports.KeyValueChangeRecord = KeyValueChangeRecord;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/change_detection/differs/iterable_differs.js', ['../../di', '../../facade/collection', '../../facade/exceptions', '../../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var di_1 = $__require('../../di');
    var collection_1 = $__require('../../facade/collection');
    var exceptions_1 = $__require('../../facade/exceptions');
    var lang_1 = $__require('../../facade/lang');
    /**
     * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.
     * @stable
     */
    var IterableDiffers = function () {
        function IterableDiffers(factories) {
            this.factories = factories;
        }
        IterableDiffers.create = function (factories, parent) {
            if (lang_1.isPresent(parent)) {
                var copied = collection_1.ListWrapper.clone(parent.factories);
                factories = factories.concat(copied);
                return new IterableDiffers(factories);
            } else {
                return new IterableDiffers(factories);
            }
        };
        /**
         * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the
         * inherited {@link IterableDiffers} instance with the provided factories and return a new
         * {@link IterableDiffers} instance.
         *
         * The following example shows how to extend an existing list of factories,
               * which will only be applied to the injector for this component and its children.
               * This step is all that's required to make a new {@link IterableDiffer} available.
         *
         * ### Example
         *
         * ```
         * @Component({
         *   viewProviders: [
         *     IterableDiffers.extend([new ImmutableListDiffer()])
         *   ]
         * })
         * ```
         */
        IterableDiffers.extend = function (factories) {
            return new di_1.Provider(IterableDiffers, {
                useFactory: function (parent) {
                    if (lang_1.isBlank(parent)) {
                        // Typically would occur when calling IterableDiffers.extend inside of dependencies passed
                        // to
                        // bootstrap(), which would override default pipes instead of extending them.
                        throw new exceptions_1.BaseException('Cannot extend IterableDiffers without a parent injector');
                    }
                    return IterableDiffers.create(factories, parent);
                },
                // Dependency technically isn't optional, but we can provide a better error message this way.
                deps: [[IterableDiffers, new di_1.SkipSelfMetadata(), new di_1.OptionalMetadata()]]
            });
        };
        IterableDiffers.prototype.find = function (iterable) {
            var factory = this.factories.find(function (f) {
                return f.supports(iterable);
            });
            if (lang_1.isPresent(factory)) {
                return factory;
            } else {
                throw new exceptions_1.BaseException("Cannot find a differ supporting object '" + iterable + "' of type '" + lang_1.getTypeNameForDebugging(iterable) + "'");
            }
        };
        return IterableDiffers;
    }();
    exports.IterableDiffers = IterableDiffers;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/di/injector.js', ['../facade/exceptions', '../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var exceptions_1 = $__require('../facade/exceptions');
    var lang_1 = $__require('../facade/lang');
    var _THROW_IF_NOT_FOUND = new Object();
    exports.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
    var _NullInjector = function () {
        function _NullInjector() {}
        _NullInjector.prototype.get = function (token, notFoundValue) {
            if (notFoundValue === void 0) {
                notFoundValue = _THROW_IF_NOT_FOUND;
            }
            if (notFoundValue === _THROW_IF_NOT_FOUND) {
                throw new exceptions_1.BaseException("No provider for " + lang_1.stringify(token) + "!");
            }
            return notFoundValue;
        };
        return _NullInjector;
    }();
    /**
     * @stable
     */
    var Injector = function () {
        function Injector() {}
        /**
         * Retrieves an instance from the injector based on the provided token.
         * If not found:
         * - Throws {@link NoProviderError} if no `notFoundValue` that is not equal to
         * Injector.THROW_IF_NOT_FOUND is given
         * - Returns the `notFoundValue` otherwise
         *
         * ### Example ([live demo](http://plnkr.co/edit/HeXSHg?p=preview))
         *
         * ```typescript
         * var injector = ReflectiveInjector.resolveAndCreate([
         *   {provide: "validToken", useValue: "Value"}
         * ]);
         * expect(injector.get("validToken")).toEqual("Value");
         * expect(() => injector.get("invalidToken")).toThrowError();
         * ```
         *
         * `Injector` returns itself when given `Injector` as a token.
         *
         * ```typescript
         * var injector = ReflectiveInjector.resolveAndCreate([]);
         * expect(injector.get(Injector)).toBe(injector);
         * ```
         */
        Injector.prototype.get = function (token, notFoundValue) {
            return exceptions_1.unimplemented();
        };
        Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
        Injector.NULL = new _NullInjector();
        return Injector;
    }();
    exports.Injector = Injector;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/di/reflective_injector.js', ['../facade/collection', '../facade/exceptions', './injector', './metadata', './reflective_exceptions', './reflective_key', './reflective_provider', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var collection_1 = $__require('../facade/collection');
    var exceptions_1 = $__require('../facade/exceptions');
    var injector_1 = $__require('./injector');
    var metadata_1 = $__require('./metadata');
    var reflective_exceptions_1 = $__require('./reflective_exceptions');
    var reflective_key_1 = $__require('./reflective_key');
    var reflective_provider_1 = $__require('./reflective_provider');
    var __unused; // avoid unused import when Type union types are erased
    // Threshold for the dynamic version
    var _MAX_CONSTRUCTION_COUNTER = 10;
    var UNDEFINED = new Object();
    var ReflectiveProtoInjectorInlineStrategy = function () {
        function ReflectiveProtoInjectorInlineStrategy(protoEI, providers) {
            this.provider0 = null;
            this.provider1 = null;
            this.provider2 = null;
            this.provider3 = null;
            this.provider4 = null;
            this.provider5 = null;
            this.provider6 = null;
            this.provider7 = null;
            this.provider8 = null;
            this.provider9 = null;
            this.keyId0 = null;
            this.keyId1 = null;
            this.keyId2 = null;
            this.keyId3 = null;
            this.keyId4 = null;
            this.keyId5 = null;
            this.keyId6 = null;
            this.keyId7 = null;
            this.keyId8 = null;
            this.keyId9 = null;
            var length = providers.length;
            if (length > 0) {
                this.provider0 = providers[0];
                this.keyId0 = providers[0].key.id;
            }
            if (length > 1) {
                this.provider1 = providers[1];
                this.keyId1 = providers[1].key.id;
            }
            if (length > 2) {
                this.provider2 = providers[2];
                this.keyId2 = providers[2].key.id;
            }
            if (length > 3) {
                this.provider3 = providers[3];
                this.keyId3 = providers[3].key.id;
            }
            if (length > 4) {
                this.provider4 = providers[4];
                this.keyId4 = providers[4].key.id;
            }
            if (length > 5) {
                this.provider5 = providers[5];
                this.keyId5 = providers[5].key.id;
            }
            if (length > 6) {
                this.provider6 = providers[6];
                this.keyId6 = providers[6].key.id;
            }
            if (length > 7) {
                this.provider7 = providers[7];
                this.keyId7 = providers[7].key.id;
            }
            if (length > 8) {
                this.provider8 = providers[8];
                this.keyId8 = providers[8].key.id;
            }
            if (length > 9) {
                this.provider9 = providers[9];
                this.keyId9 = providers[9].key.id;
            }
        }
        ReflectiveProtoInjectorInlineStrategy.prototype.getProviderAtIndex = function (index) {
            if (index == 0) return this.provider0;
            if (index == 1) return this.provider1;
            if (index == 2) return this.provider2;
            if (index == 3) return this.provider3;
            if (index == 4) return this.provider4;
            if (index == 5) return this.provider5;
            if (index == 6) return this.provider6;
            if (index == 7) return this.provider7;
            if (index == 8) return this.provider8;
            if (index == 9) return this.provider9;
            throw new reflective_exceptions_1.OutOfBoundsError(index);
        };
        ReflectiveProtoInjectorInlineStrategy.prototype.createInjectorStrategy = function (injector) {
            return new ReflectiveInjectorInlineStrategy(injector, this);
        };
        return ReflectiveProtoInjectorInlineStrategy;
    }();
    exports.ReflectiveProtoInjectorInlineStrategy = ReflectiveProtoInjectorInlineStrategy;
    var ReflectiveProtoInjectorDynamicStrategy = function () {
        function ReflectiveProtoInjectorDynamicStrategy(protoInj, providers) {
            this.providers = providers;
            var len = providers.length;
            this.keyIds = collection_1.ListWrapper.createFixedSize(len);
            for (var i = 0; i < len; i++) {
                this.keyIds[i] = providers[i].key.id;
            }
        }
        ReflectiveProtoInjectorDynamicStrategy.prototype.getProviderAtIndex = function (index) {
            if (index < 0 || index >= this.providers.length) {
                throw new reflective_exceptions_1.OutOfBoundsError(index);
            }
            return this.providers[index];
        };
        ReflectiveProtoInjectorDynamicStrategy.prototype.createInjectorStrategy = function (ei) {
            return new ReflectiveInjectorDynamicStrategy(this, ei);
        };
        return ReflectiveProtoInjectorDynamicStrategy;
    }();
    exports.ReflectiveProtoInjectorDynamicStrategy = ReflectiveProtoInjectorDynamicStrategy;
    var ReflectiveProtoInjector = function () {
        function ReflectiveProtoInjector(providers) {
            this.numberOfProviders = providers.length;
            this._strategy = providers.length > _MAX_CONSTRUCTION_COUNTER ? new ReflectiveProtoInjectorDynamicStrategy(this, providers) : new ReflectiveProtoInjectorInlineStrategy(this, providers);
        }
        ReflectiveProtoInjector.fromResolvedProviders = function (providers) {
            return new ReflectiveProtoInjector(providers);
        };
        ReflectiveProtoInjector.prototype.getProviderAtIndex = function (index) {
            return this._strategy.getProviderAtIndex(index);
        };
        return ReflectiveProtoInjector;
    }();
    exports.ReflectiveProtoInjector = ReflectiveProtoInjector;
    var ReflectiveInjectorInlineStrategy = function () {
        function ReflectiveInjectorInlineStrategy(injector, protoStrategy) {
            this.injector = injector;
            this.protoStrategy = protoStrategy;
            this.obj0 = UNDEFINED;
            this.obj1 = UNDEFINED;
            this.obj2 = UNDEFINED;
            this.obj3 = UNDEFINED;
            this.obj4 = UNDEFINED;
            this.obj5 = UNDEFINED;
            this.obj6 = UNDEFINED;
            this.obj7 = UNDEFINED;
            this.obj8 = UNDEFINED;
            this.obj9 = UNDEFINED;
        }
        ReflectiveInjectorInlineStrategy.prototype.resetConstructionCounter = function () {
            this.injector._constructionCounter = 0;
        };
        ReflectiveInjectorInlineStrategy.prototype.instantiateProvider = function (provider) {
            return this.injector._new(provider);
        };
        ReflectiveInjectorInlineStrategy.prototype.getObjByKeyId = function (keyId) {
            var p = this.protoStrategy;
            var inj = this.injector;
            if (p.keyId0 === keyId) {
                if (this.obj0 === UNDEFINED) {
                    this.obj0 = inj._new(p.provider0);
                }
                return this.obj0;
            }
            if (p.keyId1 === keyId) {
                if (this.obj1 === UNDEFINED) {
                    this.obj1 = inj._new(p.provider1);
                }
                return this.obj1;
            }
            if (p.keyId2 === keyId) {
                if (this.obj2 === UNDEFINED) {
                    this.obj2 = inj._new(p.provider2);
                }
                return this.obj2;
            }
            if (p.keyId3 === keyId) {
                if (this.obj3 === UNDEFINED) {
                    this.obj3 = inj._new(p.provider3);
                }
                return this.obj3;
            }
            if (p.keyId4 === keyId) {
                if (this.obj4 === UNDEFINED) {
                    this.obj4 = inj._new(p.provider4);
                }
                return this.obj4;
            }
            if (p.keyId5 === keyId) {
                if (this.obj5 === UNDEFINED) {
                    this.obj5 = inj._new(p.provider5);
                }
                return this.obj5;
            }
            if (p.keyId6 === keyId) {
                if (this.obj6 === UNDEFINED) {
                    this.obj6 = inj._new(p.provider6);
                }
                return this.obj6;
            }
            if (p.keyId7 === keyId) {
                if (this.obj7 === UNDEFINED) {
                    this.obj7 = inj._new(p.provider7);
                }
                return this.obj7;
            }
            if (p.keyId8 === keyId) {
                if (this.obj8 === UNDEFINED) {
                    this.obj8 = inj._new(p.provider8);
                }
                return this.obj8;
            }
            if (p.keyId9 === keyId) {
                if (this.obj9 === UNDEFINED) {
                    this.obj9 = inj._new(p.provider9);
                }
                return this.obj9;
            }
            return UNDEFINED;
        };
        ReflectiveInjectorInlineStrategy.prototype.getObjAtIndex = function (index) {
            if (index == 0) return this.obj0;
            if (index == 1) return this.obj1;
            if (index == 2) return this.obj2;
            if (index == 3) return this.obj3;
            if (index == 4) return this.obj4;
            if (index == 5) return this.obj5;
            if (index == 6) return this.obj6;
            if (index == 7) return this.obj7;
            if (index == 8) return this.obj8;
            if (index == 9) return this.obj9;
            throw new reflective_exceptions_1.OutOfBoundsError(index);
        };
        ReflectiveInjectorInlineStrategy.prototype.getMaxNumberOfObjects = function () {
            return _MAX_CONSTRUCTION_COUNTER;
        };
        return ReflectiveInjectorInlineStrategy;
    }();
    exports.ReflectiveInjectorInlineStrategy = ReflectiveInjectorInlineStrategy;
    var ReflectiveInjectorDynamicStrategy = function () {
        function ReflectiveInjectorDynamicStrategy(protoStrategy, injector) {
            this.protoStrategy = protoStrategy;
            this.injector = injector;
            this.objs = collection_1.ListWrapper.createFixedSize(protoStrategy.providers.length);
            collection_1.ListWrapper.fill(this.objs, UNDEFINED);
        }
        ReflectiveInjectorDynamicStrategy.prototype.resetConstructionCounter = function () {
            this.injector._constructionCounter = 0;
        };
        ReflectiveInjectorDynamicStrategy.prototype.instantiateProvider = function (provider) {
            return this.injector._new(provider);
        };
        ReflectiveInjectorDynamicStrategy.prototype.getObjByKeyId = function (keyId) {
            var p = this.protoStrategy;
            for (var i = 0; i < p.keyIds.length; i++) {
                if (p.keyIds[i] === keyId) {
                    if (this.objs[i] === UNDEFINED) {
                        this.objs[i] = this.injector._new(p.providers[i]);
                    }
                    return this.objs[i];
                }
            }
            return UNDEFINED;
        };
        ReflectiveInjectorDynamicStrategy.prototype.getObjAtIndex = function (index) {
            if (index < 0 || index >= this.objs.length) {
                throw new reflective_exceptions_1.OutOfBoundsError(index);
            }
            return this.objs[index];
        };
        ReflectiveInjectorDynamicStrategy.prototype.getMaxNumberOfObjects = function () {
            return this.objs.length;
        };
        return ReflectiveInjectorDynamicStrategy;
    }();
    exports.ReflectiveInjectorDynamicStrategy = ReflectiveInjectorDynamicStrategy;
    /**
     * A ReflectiveDependency injection container used for instantiating objects and resolving
     * dependencies.
     *
     * An `Injector` is a replacement for a `new` operator, which can automatically resolve the
     * constructor dependencies.
     *
     * In typical use, application code asks for the dependencies in the constructor and they are
     * resolved by the `Injector`.
     *
     * ### Example ([live demo](http://plnkr.co/edit/jzjec0?p=preview))
     *
     * The following example creates an `Injector` configured to create `Engine` and `Car`.
     *
     * ```typescript
     * @Injectable()
     * class Engine {
     * }
     *
     * @Injectable()
     * class Car {
     *   constructor(public engine:Engine) {}
     * }
     *
     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
     * var car = injector.get(Car);
     * expect(car instanceof Car).toBe(true);
     * expect(car.engine instanceof Engine).toBe(true);
     * ```
     *
     * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`
     * resolve all of the object's dependencies automatically.
     *
     * @stable
     */
    var ReflectiveInjector = function () {
        function ReflectiveInjector() {}
        /**
         * Turns an array of provider definitions into an array of resolved providers.
         *
         * A resolution is a process of flattening multiple nested arrays and converting individual
         * providers into an array of {@link ResolvedReflectiveProvider}s.
         *
         * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))
         *
         * ```typescript
         * @Injectable()
         * class Engine {
         * }
         *
         * @Injectable()
         * class Car {
         *   constructor(public engine:Engine) {}
         * }
         *
         * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);
         *
         * expect(providers.length).toEqual(2);
         *
         * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);
         * expect(providers[0].key.displayName).toBe("Car");
         * expect(providers[0].dependencies.length).toEqual(1);
         * expect(providers[0].factory).toBeDefined();
         *
         * expect(providers[1].key.displayName).toBe("Engine");
         * });
         * ```
         *
         * See {@link ReflectiveInjector#fromResolvedProviders} for more info.
         */
        ReflectiveInjector.resolve = function (providers) {
            return reflective_provider_1.resolveReflectiveProviders(providers);
        };
        /**
         * Resolves an array of providers and creates an injector from those providers.
         *
         * The passed-in providers can be an array of `Type`, {@link Provider},
         * or a recursive array of more providers.
         *
         * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))
         *
         * ```typescript
         * @Injectable()
         * class Engine {
         * }
         *
         * @Injectable()
         * class Car {
         *   constructor(public engine:Engine) {}
         * }
         *
         * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
         * expect(injector.get(Car) instanceof Car).toBe(true);
         * ```
         *
         * This function is slower than the corresponding `fromResolvedProviders`
         * because it needs to resolve the passed-in providers first.
         * See {@link Injector#resolve} and {@link Injector#fromResolvedProviders}.
         */
        ReflectiveInjector.resolveAndCreate = function (providers, parent) {
            if (parent === void 0) {
                parent = null;
            }
            var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
            return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);
        };
        /**
         * Creates an injector from previously resolved providers.
         *
         * This API is the recommended way to construct injectors in performance-sensitive parts.
         *
         * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))
         *
         * ```typescript
         * @Injectable()
         * class Engine {
         * }
         *
         * @Injectable()
         * class Car {
         *   constructor(public engine:Engine) {}
         * }
         *
         * var providers = ReflectiveInjector.resolve([Car, Engine]);
         * var injector = ReflectiveInjector.fromResolvedProviders(providers);
         * expect(injector.get(Car) instanceof Car).toBe(true);
         * ```
         * @experimental
         */
        ReflectiveInjector.fromResolvedProviders = function (providers, parent) {
            if (parent === void 0) {
                parent = null;
            }
            return new ReflectiveInjector_(ReflectiveProtoInjector.fromResolvedProviders(providers), parent);
        };
        /**
         * @deprecated
         */
        ReflectiveInjector.fromResolvedBindings = function (providers) {
            return ReflectiveInjector.fromResolvedProviders(providers);
        };
        Object.defineProperty(ReflectiveInjector.prototype, "parent", {
            /**
             * Parent of this injector.
             *
             * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
             * -->
             *
             * ### Example ([live demo](http://plnkr.co/edit/eosMGo?p=preview))
             *
             * ```typescript
             * var parent = ReflectiveInjector.resolveAndCreate([]);
             * var child = parent.resolveAndCreateChild([]);
             * expect(child.parent).toBe(parent);
             * ```
             */
            get: function () {
                return exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @internal
         */
        ReflectiveInjector.prototype.debugContext = function () {
            return null;
        };
        /**
         * Resolves an array of providers and creates a child injector from those providers.
         *
         * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
         * -->
         *
         * The passed-in providers can be an array of `Type`, {@link Provider},
         * or a recursive array of more providers.
         *
         * ### Example ([live demo](http://plnkr.co/edit/opB3T4?p=preview))
         *
         * ```typescript
         * class ParentProvider {}
         * class ChildProvider {}
         *
         * var parent = ReflectiveInjector.resolveAndCreate([ParentProvider]);
         * var child = parent.resolveAndCreateChild([ChildProvider]);
         *
         * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);
         * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);
         * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));
         * ```
         *
         * This function is slower than the corresponding `createChildFromResolved`
         * because it needs to resolve the passed-in providers first.
         * See {@link Injector#resolve} and {@link Injector#createChildFromResolved}.
         */
        ReflectiveInjector.prototype.resolveAndCreateChild = function (providers) {
            return exceptions_1.unimplemented();
        };
        /**
         * Creates a child injector from previously resolved providers.
         *
         * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
         * -->
         *
         * This API is the recommended way to construct injectors in performance-sensitive parts.
         *
         * ### Example ([live demo](http://plnkr.co/edit/VhyfjN?p=preview))
         *
         * ```typescript
         * class ParentProvider {}
         * class ChildProvider {}
         *
         * var parentProviders = ReflectiveInjector.resolve([ParentProvider]);
         * var childProviders = ReflectiveInjector.resolve([ChildProvider]);
         *
         * var parent = ReflectiveInjector.fromResolvedProviders(parentProviders);
         * var child = parent.createChildFromResolved(childProviders);
         *
         * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);
         * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);
         * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));
         * ```
         */
        ReflectiveInjector.prototype.createChildFromResolved = function (providers) {
            return exceptions_1.unimplemented();
        };
        /**
         * Resolves a provider and instantiates an object in the context of the injector.
         *
         * The created object does not get cached by the injector.
         *
         * ### Example ([live demo](http://plnkr.co/edit/yvVXoB?p=preview))
         *
         * ```typescript
         * @Injectable()
         * class Engine {
         * }
         *
         * @Injectable()
         * class Car {
         *   constructor(public engine:Engine) {}
         * }
         *
         * var injector = ReflectiveInjector.resolveAndCreate([Engine]);
         *
         * var car = injector.resolveAndInstantiate(Car);
         * expect(car.engine).toBe(injector.get(Engine));
         * expect(car).not.toBe(injector.resolveAndInstantiate(Car));
         * ```
         */
        ReflectiveInjector.prototype.resolveAndInstantiate = function (provider) {
            return exceptions_1.unimplemented();
        };
        /**
         * Instantiates an object using a resolved provider in the context of the injector.
         *
         * The created object does not get cached by the injector.
         *
         * ### Example ([live demo](http://plnkr.co/edit/ptCImQ?p=preview))
         *
         * ```typescript
         * @Injectable()
         * class Engine {
         * }
         *
         * @Injectable()
         * class Car {
         *   constructor(public engine:Engine) {}
         * }
         *
         * var injector = ReflectiveInjector.resolveAndCreate([Engine]);
         * var carProvider = ReflectiveInjector.resolve([Car])[0];
         * var car = injector.instantiateResolved(carProvider);
         * expect(car.engine).toBe(injector.get(Engine));
         * expect(car).not.toBe(injector.instantiateResolved(carProvider));
         * ```
         */
        ReflectiveInjector.prototype.instantiateResolved = function (provider) {
            return exceptions_1.unimplemented();
        };
        return ReflectiveInjector;
    }();
    exports.ReflectiveInjector = ReflectiveInjector;
    var ReflectiveInjector_ = function () {
        /**
         * Private
         */
        function ReflectiveInjector_(_proto /* ProtoInjector */, _parent, _debugContext) {
            if (_parent === void 0) {
                _parent = null;
            }
            if (_debugContext === void 0) {
                _debugContext = null;
            }
            this._debugContext = _debugContext;
            /** @internal */
            this._constructionCounter = 0;
            this._proto = _proto;
            this._parent = _parent;
            this._strategy = _proto._strategy.createInjectorStrategy(this);
        }
        /**
         * @internal
         */
        ReflectiveInjector_.prototype.debugContext = function () {
            return this._debugContext();
        };
        ReflectiveInjector_.prototype.get = function (token, notFoundValue) {
            if (notFoundValue === void 0) {
                notFoundValue = injector_1.THROW_IF_NOT_FOUND;
            }
            return this._getByKey(reflective_key_1.ReflectiveKey.get(token), null, null, notFoundValue);
        };
        ReflectiveInjector_.prototype.getAt = function (index) {
            return this._strategy.getObjAtIndex(index);
        };
        Object.defineProperty(ReflectiveInjector_.prototype, "parent", {
            get: function () {
                return this._parent;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReflectiveInjector_.prototype, "internalStrategy", {
            /**
             * @internal
             * Internal. Do not use.
             * We return `any` not to export the InjectorStrategy type.
             */
            get: function () {
                return this._strategy;
            },
            enumerable: true,
            configurable: true
        });
        ReflectiveInjector_.prototype.resolveAndCreateChild = function (providers) {
            var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
            return this.createChildFromResolved(ResolvedReflectiveProviders);
        };
        ReflectiveInjector_.prototype.createChildFromResolved = function (providers) {
            var proto = new ReflectiveProtoInjector(providers);
            var inj = new ReflectiveInjector_(proto);
            inj._parent = this;
            return inj;
        };
        ReflectiveInjector_.prototype.resolveAndInstantiate = function (provider) {
            return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);
        };
        ReflectiveInjector_.prototype.instantiateResolved = function (provider) {
            return this._instantiateProvider(provider);
        };
        /** @internal */
        ReflectiveInjector_.prototype._new = function (provider) {
            if (this._constructionCounter++ > this._strategy.getMaxNumberOfObjects()) {
                throw new reflective_exceptions_1.CyclicDependencyError(this, provider.key);
            }
            return this._instantiateProvider(provider);
        };
        ReflectiveInjector_.prototype._instantiateProvider = function (provider) {
            if (provider.multiProvider) {
                var res = collection_1.ListWrapper.createFixedSize(provider.resolvedFactories.length);
                for (var i = 0; i < provider.resolvedFactories.length; ++i) {
                    res[i] = this._instantiate(provider, provider.resolvedFactories[i]);
                }
                return res;
            } else {
                return this._instantiate(provider, provider.resolvedFactories[0]);
            }
        };
        ReflectiveInjector_.prototype._instantiate = function (provider, ResolvedReflectiveFactory) {
            var factory = ResolvedReflectiveFactory.factory;
            var deps = ResolvedReflectiveFactory.dependencies;
            var length = deps.length;
            var d0;
            var d1;
            var d2;
            var d3;
            var d4;
            var d5;
            var d6;
            var d7;
            var d8;
            var d9;
            var d10;
            var d11;
            var d12;
            var d13;
            var d14;
            var d15;
            var d16;
            var d17;
            var d18;
            var d19;
            try {
                d0 = length > 0 ? this._getByReflectiveDependency(provider, deps[0]) : null;
                d1 = length > 1 ? this._getByReflectiveDependency(provider, deps[1]) : null;
                d2 = length > 2 ? this._getByReflectiveDependency(provider, deps[2]) : null;
                d3 = length > 3 ? this._getByReflectiveDependency(provider, deps[3]) : null;
                d4 = length > 4 ? this._getByReflectiveDependency(provider, deps[4]) : null;
                d5 = length > 5 ? this._getByReflectiveDependency(provider, deps[5]) : null;
                d6 = length > 6 ? this._getByReflectiveDependency(provider, deps[6]) : null;
                d7 = length > 7 ? this._getByReflectiveDependency(provider, deps[7]) : null;
                d8 = length > 8 ? this._getByReflectiveDependency(provider, deps[8]) : null;
                d9 = length > 9 ? this._getByReflectiveDependency(provider, deps[9]) : null;
                d10 = length > 10 ? this._getByReflectiveDependency(provider, deps[10]) : null;
                d11 = length > 11 ? this._getByReflectiveDependency(provider, deps[11]) : null;
                d12 = length > 12 ? this._getByReflectiveDependency(provider, deps[12]) : null;
                d13 = length > 13 ? this._getByReflectiveDependency(provider, deps[13]) : null;
                d14 = length > 14 ? this._getByReflectiveDependency(provider, deps[14]) : null;
                d15 = length > 15 ? this._getByReflectiveDependency(provider, deps[15]) : null;
                d16 = length > 16 ? this._getByReflectiveDependency(provider, deps[16]) : null;
                d17 = length > 17 ? this._getByReflectiveDependency(provider, deps[17]) : null;
                d18 = length > 18 ? this._getByReflectiveDependency(provider, deps[18]) : null;
                d19 = length > 19 ? this._getByReflectiveDependency(provider, deps[19]) : null;
            } catch (e) {
                if (e instanceof reflective_exceptions_1.AbstractProviderError || e instanceof reflective_exceptions_1.InstantiationError) {
                    e.addKey(this, provider.key);
                }
                throw e;
            }
            var obj;
            try {
                switch (length) {
                    case 0:
                        obj = factory();
                        break;
                    case 1:
                        obj = factory(d0);
                        break;
                    case 2:
                        obj = factory(d0, d1);
                        break;
                    case 3:
                        obj = factory(d0, d1, d2);
                        break;
                    case 4:
                        obj = factory(d0, d1, d2, d3);
                        break;
                    case 5:
                        obj = factory(d0, d1, d2, d3, d4);
                        break;
                    case 6:
                        obj = factory(d0, d1, d2, d3, d4, d5);
                        break;
                    case 7:
                        obj = factory(d0, d1, d2, d3, d4, d5, d6);
                        break;
                    case 8:
                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7);
                        break;
                    case 9:
                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8);
                        break;
                    case 10:
                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9);
                        break;
                    case 11:
                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10);
                        break;
                    case 12:
                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11);
                        break;
                    case 13:
                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12);
                        break;
                    case 14:
                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13);
                        break;
                    case 15:
                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14);
                        break;
                    case 16:
                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15);
                        break;
                    case 17:
                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16);
                        break;
                    case 18:
                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17);
                        break;
                    case 19:
                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18);
                        break;
                    case 20:
                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19);
                        break;
                    default:
                        throw new exceptions_1.BaseException("Cannot instantiate '" + provider.key.displayName + "' because it has more than 20 dependencies");
                }
            } catch (e) {
                throw new reflective_exceptions_1.InstantiationError(this, e, e.stack, provider.key);
            }
            return obj;
        };
        ReflectiveInjector_.prototype._getByReflectiveDependency = function (provider, dep) {
            return this._getByKey(dep.key, dep.lowerBoundVisibility, dep.upperBoundVisibility, dep.optional ? null : injector_1.THROW_IF_NOT_FOUND);
        };
        ReflectiveInjector_.prototype._getByKey = function (key, lowerBoundVisibility, upperBoundVisibility, notFoundValue) {
            if (key === INJECTOR_KEY) {
                return this;
            }
            if (upperBoundVisibility instanceof metadata_1.SelfMetadata) {
                return this._getByKeySelf(key, notFoundValue);
            } else {
                return this._getByKeyDefault(key, notFoundValue, lowerBoundVisibility);
            }
        };
        /** @internal */
        ReflectiveInjector_.prototype._throwOrNull = function (key, notFoundValue) {
            if (notFoundValue !== injector_1.THROW_IF_NOT_FOUND) {
                return notFoundValue;
            } else {
                throw new reflective_exceptions_1.NoProviderError(this, key);
            }
        };
        /** @internal */
        ReflectiveInjector_.prototype._getByKeySelf = function (key, notFoundValue) {
            var obj = this._strategy.getObjByKeyId(key.id);
            return obj !== UNDEFINED ? obj : this._throwOrNull(key, notFoundValue);
        };
        /** @internal */
        ReflectiveInjector_.prototype._getByKeyDefault = function (key, notFoundValue, lowerBoundVisibility) {
            var inj;
            if (lowerBoundVisibility instanceof metadata_1.SkipSelfMetadata) {
                inj = this._parent;
            } else {
                inj = this;
            }
            while (inj instanceof ReflectiveInjector_) {
                var inj_ = inj;
                var obj = inj_._strategy.getObjByKeyId(key.id);
                if (obj !== UNDEFINED) return obj;
                inj = inj_._parent;
            }
            if (inj !== null) {
                return inj.get(key.token, notFoundValue);
            } else {
                return this._throwOrNull(key, notFoundValue);
            }
        };
        Object.defineProperty(ReflectiveInjector_.prototype, "displayName", {
            get: function () {
                var providers = _mapProviders(this, function (b) {
                    return ' "' + b.key.displayName + '" ';
                }).join(', ');
                return "ReflectiveInjector(providers: [" + providers + "])";
            },
            enumerable: true,
            configurable: true
        });
        ReflectiveInjector_.prototype.toString = function () {
            return this.displayName;
        };
        return ReflectiveInjector_;
    }();
    exports.ReflectiveInjector_ = ReflectiveInjector_;
    var INJECTOR_KEY = reflective_key_1.ReflectiveKey.get(injector_1.Injector);
    function _mapProviders(injector, fn) {
        var res = new Array(injector._proto.numberOfProviders);
        for (var i = 0; i < injector._proto.numberOfProviders; ++i) {
            res[i] = fn(injector._proto.getProviderAtIndex(i));
        }
        return res;
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/di/provider.js', ['../facade/exceptions', '../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var exceptions_1 = $__require('../facade/exceptions');
    var lang_1 = $__require('../facade/lang');
    /**
     * Describes how the {@link Injector} should instantiate a given token.
     *
     * See {@link provide}.
     *
     * ### Example ([live demo](http://plnkr.co/edit/GNAyj6K6PfYg2NBzgwZ5?p%3Dpreview&p=preview))
     *
     * ```javascript
     * var injector = Injector.resolveAndCreate([
     *   new Provider("message", { useValue: 'Hello' })
     * ]);
     *
     * expect(injector.get("message")).toEqual('Hello');
     * ```
     * @deprecated
     */
    var Provider = function () {
        function Provider(token, _a) {
            var useClass = _a.useClass,
                useValue = _a.useValue,
                useExisting = _a.useExisting,
                useFactory = _a.useFactory,
                deps = _a.deps,
                multi = _a.multi;
            this.token = token;
            this.useClass = useClass;
            this.useValue = useValue;
            this.useExisting = useExisting;
            this.useFactory = useFactory;
            this.dependencies = deps;
            this._multi = multi;
        }
        Object.defineProperty(Provider.prototype, "multi", {
            // TODO: Provide a full working example after alpha38 is released.
            /**
             * Creates multiple providers matching the same token (a multi-provider).
             *
             * Multi-providers are used for creating pluggable service, where the system comes
             * with some default providers, and the user can register additional providers.
             * The combination of the default providers and the additional providers will be
             * used to drive the behavior of the system.
             *
             * ### Example
             *
             * ```typescript
             * var injector = Injector.resolveAndCreate([
             *   new Provider("Strings", { useValue: "String1", multi: true}),
             *   new Provider("Strings", { useValue: "String2", multi: true})
             * ]);
             *
             * expect(injector.get("Strings")).toEqual(["String1", "String2"]);
             * ```
             *
             * Multi-providers and regular providers cannot be mixed. The following
             * will throw an exception:
             *
             * ```typescript
             * var injector = Injector.resolveAndCreate([
             *   new Provider("Strings", { useValue: "String1", multi: true }),
             *   new Provider("Strings", { useValue: "String2"})
             * ]);
             * ```
             */
            get: function () {
                return lang_1.normalizeBool(this._multi);
            },
            enumerable: true,
            configurable: true
        });
        return Provider;
    }();
    exports.Provider = Provider;
    /**
     * See {@link Provider} instead.
     *
     * @deprecated
     */
    var Binding = function (_super) {
        __extends(Binding, _super);
        function Binding(token, _a) {
            var toClass = _a.toClass,
                toValue = _a.toValue,
                toAlias = _a.toAlias,
                toFactory = _a.toFactory,
                deps = _a.deps,
                multi = _a.multi;
            _super.call(this, token, {
                useClass: toClass,
                useValue: toValue,
                useExisting: toAlias,
                useFactory: toFactory,
                deps: deps,
                multi: multi
            });
        }
        Object.defineProperty(Binding.prototype, "toClass", {
            /**
             * @deprecated
             */
            get: function () {
                return this.useClass;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Binding.prototype, "toAlias", {
            /**
             * @deprecated
             */
            get: function () {
                return this.useExisting;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Binding.prototype, "toFactory", {
            /**
             * @deprecated
             */
            get: function () {
                return this.useFactory;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Binding.prototype, "toValue", {
            /**
             * @deprecated
             */
            get: function () {
                return this.useValue;
            },
            enumerable: true,
            configurable: true
        });
        return Binding;
    }(Provider);
    exports.Binding = Binding;
    /**
     * Creates a {@link Provider}.
     *
     * To construct a {@link Provider}, bind a `token` to either a class, a value, a factory function,
     * or
     * to an existing `token`.
     * See {@link ProviderBuilder} for more details.
     *
     * The `token` is most commonly a class or {@link OpaqueToken}.
     *
     * @deprecated
     */
    function bind(token) {
        return new ProviderBuilder(token);
    }
    exports.bind = bind;
    /**
     * Helper class for the {@link bind} function.
     * @deprecated
     */
    var ProviderBuilder = function () {
        function ProviderBuilder(token) {
            this.token = token;
        }
        /**
         * Binds a DI token to a class.
         *
         * ### Example ([live demo](http://plnkr.co/edit/ZpBCSYqv6e2ud5KXLdxQ?p=preview))
         *
         * Because `toAlias` and `toClass` are often confused, the example contains
         * both use cases for easy comparison.
         *
         * ```typescript
         * class Vehicle {}
         *
         * class Car extends Vehicle {}
         *
         * var injectorClass = Injector.resolveAndCreate([
         *   Car,
         *   {provide: Vehicle, useClass: Car}
         * ]);
         * var injectorAlias = Injector.resolveAndCreate([
         *   Car,
         *   {provide: Vehicle, useExisting: Car}
         * ]);
         *
         * expect(injectorClass.get(Vehicle)).not.toBe(injectorClass.get(Car));
         * expect(injectorClass.get(Vehicle) instanceof Car).toBe(true);
         *
         * expect(injectorAlias.get(Vehicle)).toBe(injectorAlias.get(Car));
         * expect(injectorAlias.get(Vehicle) instanceof Car).toBe(true);
         * ```
         */
        ProviderBuilder.prototype.toClass = function (type) {
            if (!lang_1.isType(type)) {
                throw new exceptions_1.BaseException("Trying to create a class provider but \"" + lang_1.stringify(type) + "\" is not a class!");
            }
            return new Provider(this.token, { useClass: type });
        };
        /**
         * Binds a DI token to a value.
         *
         * ### Example ([live demo](http://plnkr.co/edit/G024PFHmDL0cJFgfZK8O?p=preview))
         *
         * ```typescript
         * var injector = Injector.resolveAndCreate([
         *   {provide: 'message', useValue: 'Hello'}
         * ]);
         *
         * expect(injector.get('message')).toEqual('Hello');
         * ```
         */
        ProviderBuilder.prototype.toValue = function (value) {
            return new Provider(this.token, { useValue: value });
        };
        /**
         * Binds a DI token to an existing token.
         *
         * Angular will return the same instance as if the provided token was used. (This is
         * in contrast to `useClass` where a separate instance of `useClass` will be returned.)
         *
         * ### Example ([live demo](http://plnkr.co/edit/uBaoF2pN5cfc5AfZapNw?p=preview))
         *
         * Because `toAlias` and `toClass` are often confused, the example contains
         * both use cases for easy comparison.
         *
         * ```typescript
         * class Vehicle {}
         *
         * class Car extends Vehicle {}
         *
         * var injectorAlias = Injector.resolveAndCreate([
         *   Car,
         *   {provide: Vehicle, useExisting: Car}
         * ]);
         * var injectorClass = Injector.resolveAndCreate([
         *   Car,
         *   {provide: Vehicle, useClass: Car})
         * ]);
         *
         * expect(injectorAlias.get(Vehicle)).toBe(injectorAlias.get(Car));
         * expect(injectorAlias.get(Vehicle) instanceof Car).toBe(true);
         *
         * expect(injectorClass.get(Vehicle)).not.toBe(injectorClass.get(Car));
         * expect(injectorClass.get(Vehicle) instanceof Car).toBe(true);
         * ```
         */
        ProviderBuilder.prototype.toAlias = function (aliasToken) {
            if (lang_1.isBlank(aliasToken)) {
                throw new exceptions_1.BaseException("Can not alias " + lang_1.stringify(this.token) + " to a blank value!");
            }
            return new Provider(this.token, { useExisting: aliasToken });
        };
        /**
         * Binds a DI token to a function which computes the value.
         *
         * ### Example ([live demo](http://plnkr.co/edit/OejNIfTT3zb1iBxaIYOb?p=preview))
         *
         * ```typescript
         * var injector = Injector.resolveAndCreate([
         *   {provide: Number, useFactory: () => { return 1+2; }},
         *   {provide: String, useFactory: (v) => { return "Value: " + v; }, deps: [Number]}
         * ]);
         *
         * expect(injector.get(Number)).toEqual(3);
         * expect(injector.get(String)).toEqual('Value: 3');
         * ```
         */
        ProviderBuilder.prototype.toFactory = function (factory, dependencies) {
            if (!lang_1.isFunction(factory)) {
                throw new exceptions_1.BaseException("Trying to create a factory provider but \"" + lang_1.stringify(factory) + "\" is not a function!");
            }
            return new Provider(this.token, { useFactory: factory, deps: dependencies });
        };
        return ProviderBuilder;
    }();
    exports.ProviderBuilder = ProviderBuilder;
    /**
     * Creates a {@link Provider}.
     *
     * See {@link Provider} for more details.
     *
     * <!-- TODO: improve the docs -->
     * @deprecated
     */
    function provide(token, _a) {
        var useClass = _a.useClass,
            useValue = _a.useValue,
            useExisting = _a.useExisting,
            useFactory = _a.useFactory,
            deps = _a.deps,
            multi = _a.multi;
        return new Provider(token, {
            useClass: useClass,
            useValue: useValue,
            useExisting: useExisting,
            useFactory: useFactory,
            deps: deps,
            multi: multi
        });
    }
    exports.provide = provide;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/di/provider_util.js', ['./provider', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var provider_1 = $__require('./provider');
    function isProviderLiteral(obj) {
        return obj && typeof obj == 'object' && obj.provide;
    }
    exports.isProviderLiteral = isProviderLiteral;
    function createProvider(obj) {
        return new provider_1.Provider(obj.provide, obj);
    }
    exports.createProvider = createProvider;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/di/reflective_provider.js', ['../facade/collection', '../facade/lang', '../reflection/reflection', './forward_ref', './metadata', './provider', './provider_util', './reflective_exceptions', './reflective_key', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var collection_1 = $__require('../facade/collection');
    var lang_1 = $__require('../facade/lang');
    var reflection_1 = $__require('../reflection/reflection');
    var forward_ref_1 = $__require('./forward_ref');
    var metadata_1 = $__require('./metadata');
    var provider_1 = $__require('./provider');
    var provider_util_1 = $__require('./provider_util');
    var reflective_exceptions_1 = $__require('./reflective_exceptions');
    var reflective_key_1 = $__require('./reflective_key');
    /**
     * `Dependency` is used by the framework to extend DI.
     * This is internal to Angular and should not be used directly.
     */
    var ReflectiveDependency = function () {
        function ReflectiveDependency(key, optional, lowerBoundVisibility, upperBoundVisibility, properties) {
            this.key = key;
            this.optional = optional;
            this.lowerBoundVisibility = lowerBoundVisibility;
            this.upperBoundVisibility = upperBoundVisibility;
            this.properties = properties;
        }
        ReflectiveDependency.fromKey = function (key) {
            return new ReflectiveDependency(key, false, null, null, []);
        };
        return ReflectiveDependency;
    }();
    exports.ReflectiveDependency = ReflectiveDependency;
    var _EMPTY_LIST = [];
    var ResolvedReflectiveProvider_ = function () {
        function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {
            this.key = key;
            this.resolvedFactories = resolvedFactories;
            this.multiProvider = multiProvider;
        }
        Object.defineProperty(ResolvedReflectiveProvider_.prototype, "resolvedFactory", {
            get: function () {
                return this.resolvedFactories[0];
            },
            enumerable: true,
            configurable: true
        });
        return ResolvedReflectiveProvider_;
    }();
    exports.ResolvedReflectiveProvider_ = ResolvedReflectiveProvider_;
    /**
     * An internal resolved representation of a factory function created by resolving {@link Provider}.
     * @experimental
     */
    var ResolvedReflectiveFactory = function () {
        function ResolvedReflectiveFactory(
        /**
         * Factory function which can return an instance of an object represented by a key.
         */
        factory,
        /**
         * Arguments (dependencies) to the `factory` function.
         */
        dependencies) {
            this.factory = factory;
            this.dependencies = dependencies;
        }
        return ResolvedReflectiveFactory;
    }();
    exports.ResolvedReflectiveFactory = ResolvedReflectiveFactory;
    /**
     * Resolve a single provider.
     */
    function resolveReflectiveFactory(provider) {
        var factoryFn;
        var resolvedDeps;
        if (lang_1.isPresent(provider.useClass)) {
            var useClass = forward_ref_1.resolveForwardRef(provider.useClass);
            factoryFn = reflection_1.reflector.factory(useClass);
            resolvedDeps = _dependenciesFor(useClass);
        } else if (lang_1.isPresent(provider.useExisting)) {
            factoryFn = function (aliasInstance) {
                return aliasInstance;
            };
            resolvedDeps = [ReflectiveDependency.fromKey(reflective_key_1.ReflectiveKey.get(provider.useExisting))];
        } else if (lang_1.isPresent(provider.useFactory)) {
            factoryFn = provider.useFactory;
            resolvedDeps = constructDependencies(provider.useFactory, provider.dependencies);
        } else {
            factoryFn = function () {
                return provider.useValue;
            };
            resolvedDeps = _EMPTY_LIST;
        }
        return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);
    }
    exports.resolveReflectiveFactory = resolveReflectiveFactory;
    /**
     * Converts the {@link Provider} into {@link ResolvedProvider}.
     *
     * {@link Injector} internally only uses {@link ResolvedProvider}, {@link Provider} contains
     * convenience provider syntax.
     */
    function resolveReflectiveProvider(provider) {
        return new ResolvedReflectiveProvider_(reflective_key_1.ReflectiveKey.get(provider.token), [resolveReflectiveFactory(provider)], provider.multi);
    }
    exports.resolveReflectiveProvider = resolveReflectiveProvider;
    /**
     * Resolve a list of Providers.
     */
    function resolveReflectiveProviders(providers) {
        var normalized = _normalizeProviders(providers, []);
        var resolved = normalized.map(resolveReflectiveProvider);
        return collection_1.MapWrapper.values(mergeResolvedReflectiveProviders(resolved, new Map()));
    }
    exports.resolveReflectiveProviders = resolveReflectiveProviders;
    /**
     * Merges a list of ResolvedProviders into a list where
     * each key is contained exactly once and multi providers
     * have been merged.
     */
    function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {
        for (var i = 0; i < providers.length; i++) {
            var provider = providers[i];
            var existing = normalizedProvidersMap.get(provider.key.id);
            if (lang_1.isPresent(existing)) {
                if (provider.multiProvider !== existing.multiProvider) {
                    throw new reflective_exceptions_1.MixingMultiProvidersWithRegularProvidersError(existing, provider);
                }
                if (provider.multiProvider) {
                    for (var j = 0; j < provider.resolvedFactories.length; j++) {
                        existing.resolvedFactories.push(provider.resolvedFactories[j]);
                    }
                } else {
                    normalizedProvidersMap.set(provider.key.id, provider);
                }
            } else {
                var resolvedProvider;
                if (provider.multiProvider) {
                    resolvedProvider = new ResolvedReflectiveProvider_(provider.key, collection_1.ListWrapper.clone(provider.resolvedFactories), provider.multiProvider);
                } else {
                    resolvedProvider = provider;
                }
                normalizedProvidersMap.set(provider.key.id, resolvedProvider);
            }
        }
        return normalizedProvidersMap;
    }
    exports.mergeResolvedReflectiveProviders = mergeResolvedReflectiveProviders;
    function _normalizeProviders(providers, res) {
        providers.forEach(function (b) {
            if (b instanceof lang_1.Type) {
                res.push(provider_1.provide(b, { useClass: b }));
            } else if (b instanceof provider_1.Provider) {
                res.push(b);
            } else if (provider_util_1.isProviderLiteral(b)) {
                res.push(provider_util_1.createProvider(b));
            } else if (b instanceof Array) {
                _normalizeProviders(b, res);
            } else if (b instanceof provider_1.ProviderBuilder) {
                throw new reflective_exceptions_1.InvalidProviderError(b.token);
            } else {
                throw new reflective_exceptions_1.InvalidProviderError(b);
            }
        });
        return res;
    }
    function constructDependencies(typeOrFunc, dependencies) {
        if (lang_1.isBlank(dependencies)) {
            return _dependenciesFor(typeOrFunc);
        } else {
            var params = dependencies.map(function (t) {
                return [t];
            });
            return dependencies.map(function (t) {
                return _extractToken(typeOrFunc, t, params);
            });
        }
    }
    exports.constructDependencies = constructDependencies;
    function _dependenciesFor(typeOrFunc) {
        var params = reflection_1.reflector.parameters(typeOrFunc);
        if (lang_1.isBlank(params)) return [];
        if (params.some(lang_1.isBlank)) {
            throw new reflective_exceptions_1.NoAnnotationError(typeOrFunc, params);
        }
        return params.map(function (p) {
            return _extractToken(typeOrFunc, p, params);
        });
    }
    function _extractToken(typeOrFunc /** TODO #9100 */, metadata /** TODO #9100 */ /*any[] | any*/, params) {
        var depProps = [];
        var token = null;
        var optional = false;
        if (!lang_1.isArray(metadata)) {
            if (metadata instanceof metadata_1.InjectMetadata) {
                return _createDependency(metadata.token, optional, null, null, depProps);
            } else {
                return _createDependency(metadata, optional, null, null, depProps);
            }
        }
        var lowerBoundVisibility = null;
        var upperBoundVisibility = null;
        for (var i = 0; i < metadata.length; ++i) {
            var paramMetadata = metadata[i];
            if (paramMetadata instanceof lang_1.Type) {
                token = paramMetadata;
            } else if (paramMetadata instanceof metadata_1.InjectMetadata) {
                token = paramMetadata.token;
            } else if (paramMetadata instanceof metadata_1.OptionalMetadata) {
                optional = true;
            } else if (paramMetadata instanceof metadata_1.SelfMetadata) {
                upperBoundVisibility = paramMetadata;
            } else if (paramMetadata instanceof metadata_1.HostMetadata) {
                upperBoundVisibility = paramMetadata;
            } else if (paramMetadata instanceof metadata_1.SkipSelfMetadata) {
                lowerBoundVisibility = paramMetadata;
            } else if (paramMetadata instanceof metadata_1.DependencyMetadata) {
                if (lang_1.isPresent(paramMetadata.token)) {
                    token = paramMetadata.token;
                }
                depProps.push(paramMetadata);
            }
        }
        token = forward_ref_1.resolveForwardRef(token);
        if (lang_1.isPresent(token)) {
            return _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps);
        } else {
            throw new reflective_exceptions_1.NoAnnotationError(typeOrFunc, params);
        }
    }
    function _createDependency(token /** TODO #9100 */, optional /** TODO #9100 */, lowerBoundVisibility /** TODO #9100 */, upperBoundVisibility /** TODO #9100 */, depProps /** TODO #9100 */) {
        return new ReflectiveDependency(reflective_key_1.ReflectiveKey.get(token), optional, lowerBoundVisibility, upperBoundVisibility, depProps);
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/di/forward_ref.js', ['../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var lang_1 = $__require('../facade/lang');
    /**
     * Allows to refer to references which are not yet defined.
     *
     * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of
     * DI is declared,
     * but not yet defined. It is also used when the `token` which we use when creating a query is not
     * yet defined.
     *
     * ### Example
     * {@example core/di/ts/forward_ref/forward_ref.ts region='forward_ref'}
     * @experimental
     */
    function forwardRef(forwardRefFn) {
        forwardRefFn.__forward_ref__ = forwardRef;
        forwardRefFn.toString = function () {
            return lang_1.stringify(this());
        };
        return forwardRefFn;
    }
    exports.forwardRef = forwardRef;
    /**
     * Lazily retrieves the reference value from a forwardRef.
     *
     * Acts as the identity function when given a non-forward-ref value.
     *
     * ### Example ([live demo](http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview))
     *
     * ```typescript
     * var ref = forwardRef(() => "refValue");
     * expect(resolveForwardRef(ref)).toEqual("refValue");
     * expect(resolveForwardRef("regularValue")).toEqual("regularValue");
     * ```
     *
     * See: {@link forwardRef}
     * @experimental
     */
    function resolveForwardRef(type) {
        if (lang_1.isFunction(type) && type.hasOwnProperty('__forward_ref__') && type.__forward_ref__ === forwardRef) {
            return type();
        } else {
            return type;
        }
    }
    exports.resolveForwardRef = resolveForwardRef;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/di/reflective_key.js', ['../facade/exceptions', '../facade/lang', './forward_ref', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var exceptions_1 = $__require('../facade/exceptions');
    var lang_1 = $__require('../facade/lang');
    var forward_ref_1 = $__require('./forward_ref');
    /**
     * A unique object used for retrieving items from the {@link ReflectiveInjector}.
     *
     * Keys have:
     * - a system-wide unique `id`.
     * - a `token`.
     *
     * `Key` is used internally by {@link ReflectiveInjector} because its system-wide unique `id` allows
     * the
     * injector to store created objects in a more efficient way.
     *
     * `Key` should not be created directly. {@link ReflectiveInjector} creates keys automatically when
     * resolving
     * providers.
     * @experimental
     */
    var ReflectiveKey = function () {
        /**
         * Private
         */
        function ReflectiveKey(token, id) {
            this.token = token;
            this.id = id;
            if (lang_1.isBlank(token)) {
                throw new exceptions_1.BaseException('Token must be defined!');
            }
        }
        Object.defineProperty(ReflectiveKey.prototype, "displayName", {
            /**
             * Returns a stringified token.
             */
            get: function () {
                return lang_1.stringify(this.token);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Retrieves a `Key` for a token.
         */
        ReflectiveKey.get = function (token) {
            return _globalKeyRegistry.get(forward_ref_1.resolveForwardRef(token));
        };
        Object.defineProperty(ReflectiveKey, "numberOfKeys", {
            /**
             * @returns the number of keys registered in the system.
             */
            get: function () {
                return _globalKeyRegistry.numberOfKeys;
            },
            enumerable: true,
            configurable: true
        });
        return ReflectiveKey;
    }();
    exports.ReflectiveKey = ReflectiveKey;
    /**
     * @internal
     */
    var KeyRegistry = function () {
        function KeyRegistry() {
            this._allKeys = new Map();
        }
        KeyRegistry.prototype.get = function (token) {
            if (token instanceof ReflectiveKey) return token;
            if (this._allKeys.has(token)) {
                return this._allKeys.get(token);
            }
            var newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);
            this._allKeys.set(token, newKey);
            return newKey;
        };
        Object.defineProperty(KeyRegistry.prototype, "numberOfKeys", {
            get: function () {
                return this._allKeys.size;
            },
            enumerable: true,
            configurable: true
        });
        return KeyRegistry;
    }();
    exports.KeyRegistry = KeyRegistry;
    var _globalKeyRegistry = new KeyRegistry();
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/di/reflective_exceptions.js', ['../facade/collection', '../facade/exceptions', '../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var collection_1 = $__require('../facade/collection');
    var exceptions_1 = $__require('../facade/exceptions');
    var lang_1 = $__require('../facade/lang');
    function findFirstClosedCycle(keys) {
        var res = [];
        for (var i = 0; i < keys.length; ++i) {
            if (collection_1.ListWrapper.contains(res, keys[i])) {
                res.push(keys[i]);
                return res;
            }
            res.push(keys[i]);
        }
        return res;
    }
    function constructResolvingPath(keys) {
        if (keys.length > 1) {
            var reversed = findFirstClosedCycle(collection_1.ListWrapper.reversed(keys));
            var tokenStrs = reversed.map(function (k) {
                return lang_1.stringify(k.token);
            });
            return ' (' + tokenStrs.join(' -> ') + ')';
        }
        return '';
    }
    /**
     * Base class for all errors arising from misconfigured providers.
     * @stable
     */
    var AbstractProviderError = function (_super) {
        __extends(AbstractProviderError, _super);
        function AbstractProviderError(injector, key, constructResolvingMessage) {
            _super.call(this, 'DI Exception');
            this.keys = [key];
            this.injectors = [injector];
            this.constructResolvingMessage = constructResolvingMessage;
            this.message = this.constructResolvingMessage(this.keys);
        }
        AbstractProviderError.prototype.addKey = function (injector, key) {
            this.injectors.push(injector);
            this.keys.push(key);
            this.message = this.constructResolvingMessage(this.keys);
        };
        Object.defineProperty(AbstractProviderError.prototype, "context", {
            get: function () {
                return this.injectors[this.injectors.length - 1].debugContext();
            },
            enumerable: true,
            configurable: true
        });
        return AbstractProviderError;
    }(exceptions_1.BaseException);
    exports.AbstractProviderError = AbstractProviderError;
    /**
     * Thrown when trying to retrieve a dependency by key from {@link Injector}, but the
     * {@link Injector} does not have a {@link Provider} for the given key.
     *
     * ### Example ([live demo](http://plnkr.co/edit/vq8D3FRB9aGbnWJqtEPE?p=preview))
     *
     * ```typescript
     * class A {
     *   constructor(b:B) {}
     * }
     *
     * expect(() => Injector.resolveAndCreate([A])).toThrowError();
     * ```
     * @stable
     */
    var NoProviderError = function (_super) {
        __extends(NoProviderError, _super);
        function NoProviderError(injector, key) {
            _super.call(this, injector, key, function (keys) {
                var first = lang_1.stringify(collection_1.ListWrapper.first(keys).token);
                return "No provider for " + first + "!" + constructResolvingPath(keys);
            });
        }
        return NoProviderError;
    }(AbstractProviderError);
    exports.NoProviderError = NoProviderError;
    /**
     * Thrown when dependencies form a cycle.
     *
     * ### Example ([live demo](http://plnkr.co/edit/wYQdNos0Tzql3ei1EV9j?p=info))
     *
     * ```typescript
     * var injector = Injector.resolveAndCreate([
     *   {provide: "one", useFactory: (two) => "two", deps: [[new Inject("two")]]},
     *   {provide: "two", useFactory: (one) => "one", deps: [[new Inject("one")]]}
     * ]);
     *
     * expect(() => injector.get("one")).toThrowError();
     * ```
     *
     * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.
     * @stable
     */
    var CyclicDependencyError = function (_super) {
        __extends(CyclicDependencyError, _super);
        function CyclicDependencyError(injector, key) {
            _super.call(this, injector, key, function (keys) {
                return "Cannot instantiate cyclic dependency!" + constructResolvingPath(keys);
            });
        }
        return CyclicDependencyError;
    }(AbstractProviderError);
    exports.CyclicDependencyError = CyclicDependencyError;
    /**
     * Thrown when a constructing type returns with an Error.
     *
     * The `InstantiationError` class contains the original error plus the dependency graph which caused
     * this object to be instantiated.
     *
     * ### Example ([live demo](http://plnkr.co/edit/7aWYdcqTQsP0eNqEdUAf?p=preview))
     *
     * ```typescript
     * class A {
     *   constructor() {
     *     throw new Error('message');
     *   }
     * }
     *
     * var injector = Injector.resolveAndCreate([A]);
    
     * try {
     *   injector.get(A);
     * } catch (e) {
     *   expect(e instanceof InstantiationError).toBe(true);
     *   expect(e.originalException.message).toEqual("message");
     *   expect(e.originalStack).toBeDefined();
     * }
     * ```
     * @stable
     */
    var InstantiationError = function (_super) {
        __extends(InstantiationError, _super);
        function InstantiationError(injector, originalException, originalStack, key) {
            _super.call(this, 'DI Exception', originalException, originalStack, null);
            this.keys = [key];
            this.injectors = [injector];
        }
        InstantiationError.prototype.addKey = function (injector, key) {
            this.injectors.push(injector);
            this.keys.push(key);
        };
        Object.defineProperty(InstantiationError.prototype, "wrapperMessage", {
            get: function () {
                var first = lang_1.stringify(collection_1.ListWrapper.first(this.keys).token);
                return "Error during instantiation of " + first + "!" + constructResolvingPath(this.keys) + ".";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InstantiationError.prototype, "causeKey", {
            get: function () {
                return this.keys[0];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InstantiationError.prototype, "context", {
            get: function () {
                return this.injectors[this.injectors.length - 1].debugContext();
            },
            enumerable: true,
            configurable: true
        });
        return InstantiationError;
    }(exceptions_1.WrappedException);
    exports.InstantiationError = InstantiationError;
    /**
     * Thrown when an object other then {@link Provider} (or `Type`) is passed to {@link Injector}
     * creation.
     *
     * ### Example ([live demo](http://plnkr.co/edit/YatCFbPAMCL0JSSQ4mvH?p=preview))
     *
     * ```typescript
     * expect(() => Injector.resolveAndCreate(["not a type"])).toThrowError();
     * ```
     * @stable
     */
    var InvalidProviderError = function (_super) {
        __extends(InvalidProviderError, _super);
        function InvalidProviderError(provider) {
            _super.call(this, "Invalid provider - only instances of Provider and Type are allowed, got: " + provider);
        }
        return InvalidProviderError;
    }(exceptions_1.BaseException);
    exports.InvalidProviderError = InvalidProviderError;
    /**
     * Thrown when the class has no annotation information.
     *
     * Lack of annotation information prevents the {@link Injector} from determining which dependencies
     * need to be injected into the constructor.
     *
     * ### Example ([live demo](http://plnkr.co/edit/rHnZtlNS7vJOPQ6pcVkm?p=preview))
     *
     * ```typescript
     * class A {
     *   constructor(b) {}
     * }
     *
     * expect(() => Injector.resolveAndCreate([A])).toThrowError();
     * ```
     *
     * This error is also thrown when the class not marked with {@link Injectable} has parameter types.
     *
     * ```typescript
     * class B {}
     *
     * class A {
     *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.
     * }
     *
     * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();
     * ```
     * @stable
     */
    var NoAnnotationError = function (_super) {
        __extends(NoAnnotationError, _super);
        function NoAnnotationError(typeOrFunc, params) {
            _super.call(this, NoAnnotationError._genMessage(typeOrFunc, params));
        }
        NoAnnotationError._genMessage = function (typeOrFunc, params) {
            var signature = [];
            for (var i = 0, ii = params.length; i < ii; i++) {
                var parameter = params[i];
                if (lang_1.isBlank(parameter) || parameter.length == 0) {
                    signature.push('?');
                } else {
                    signature.push(parameter.map(lang_1.stringify).join(' '));
                }
            }
            return 'Cannot resolve all parameters for \'' + lang_1.stringify(typeOrFunc) + '\'(' + signature.join(', ') + '). ' + 'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \'' + lang_1.stringify(typeOrFunc) + '\' is decorated with Injectable.';
        };
        return NoAnnotationError;
    }(exceptions_1.BaseException);
    exports.NoAnnotationError = NoAnnotationError;
    /**
     * Thrown when getting an object by index.
     *
     * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))
     *
     * ```typescript
     * class A {}
     *
     * var injector = Injector.resolveAndCreate([A]);
     *
     * expect(() => injector.getAt(100)).toThrowError();
     * ```
     * @stable
     */
    var OutOfBoundsError = function (_super) {
        __extends(OutOfBoundsError, _super);
        function OutOfBoundsError(index) {
            _super.call(this, "Index " + index + " is out-of-bounds.");
        }
        return OutOfBoundsError;
    }(exceptions_1.BaseException);
    exports.OutOfBoundsError = OutOfBoundsError;
    // TODO: add a working example after alpha38 is released
    /**
     * Thrown when a multi provider and a regular provider are bound to the same token.
     *
     * ### Example
     *
     * ```typescript
     * expect(() => Injector.resolveAndCreate([
     *   new Provider("Strings", {useValue: "string1", multi: true}),
     *   new Provider("Strings", {useValue: "string2", multi: false})
     * ])).toThrowError();
     * ```
     */
    var MixingMultiProvidersWithRegularProvidersError = function (_super) {
        __extends(MixingMultiProvidersWithRegularProvidersError, _super);
        function MixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
            _super.call(this, 'Cannot mix multi providers and regular providers, got: ' + provider1.toString() + ' ' + provider2.toString());
        }
        return MixingMultiProvidersWithRegularProvidersError;
    }(exceptions_1.BaseException);
    exports.MixingMultiProvidersWithRegularProvidersError = MixingMultiProvidersWithRegularProvidersError;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/core@2.0.0-rc.5/src/di/opaque_token.js", ["./decorators", "reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var decorators_1 = $__require("./decorators"); // so that metadata is gathered for this class
    var OpaqueToken = function () {
        function OpaqueToken(_desc) {
            this._desc = _desc;
        }
        OpaqueToken.prototype.toString = function () {
            return "Token " + this._desc;
        };
        /** @nocollapse */
        OpaqueToken.decorators = [{ type: decorators_1.Injectable }];
        /** @nocollapse */
        OpaqueToken.ctorParameters = [null];
        return OpaqueToken;
    }();
    exports.OpaqueToken = OpaqueToken;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/di.js', ['./di/metadata', './di/decorators', './di/forward_ref', './di/injector', './di/reflective_injector', './di/provider', './di/reflective_provider', './di/reflective_key', './di/reflective_exceptions', './di/opaque_token', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
  }
  /**
   * @module
   * @description
   * The `di` module provides dependency injection container services.
   */
  var metadata_1 = $__require('./di/metadata');
  exports.HostMetadata = metadata_1.HostMetadata;
  exports.InjectMetadata = metadata_1.InjectMetadata;
  exports.InjectableMetadata = metadata_1.InjectableMetadata;
  exports.OptionalMetadata = metadata_1.OptionalMetadata;
  exports.SelfMetadata = metadata_1.SelfMetadata;
  exports.SkipSelfMetadata = metadata_1.SkipSelfMetadata;
  // we have to reexport * because Dart and TS export two different sets of types
  __export($__require('./di/decorators'));
  var forward_ref_1 = $__require('./di/forward_ref');
  exports.forwardRef = forward_ref_1.forwardRef;
  exports.resolveForwardRef = forward_ref_1.resolveForwardRef;
  var injector_1 = $__require('./di/injector');
  exports.Injector = injector_1.Injector;
  var reflective_injector_1 = $__require('./di/reflective_injector');
  exports.ReflectiveInjector = reflective_injector_1.ReflectiveInjector;
  var provider_1 = $__require('./di/provider');
  exports.Binding = provider_1.Binding;
  exports.ProviderBuilder = provider_1.ProviderBuilder;
  exports.bind = provider_1.bind;
  exports.Provider = provider_1.Provider;
  exports.provide = provider_1.provide;
  var reflective_provider_1 = $__require('./di/reflective_provider');
  exports.ResolvedReflectiveFactory = reflective_provider_1.ResolvedReflectiveFactory;
  var reflective_key_1 = $__require('./di/reflective_key');
  exports.ReflectiveKey = reflective_key_1.ReflectiveKey;
  var reflective_exceptions_1 = $__require('./di/reflective_exceptions');
  exports.NoProviderError = reflective_exceptions_1.NoProviderError;
  exports.AbstractProviderError = reflective_exceptions_1.AbstractProviderError;
  exports.CyclicDependencyError = reflective_exceptions_1.CyclicDependencyError;
  exports.InstantiationError = reflective_exceptions_1.InstantiationError;
  exports.InvalidProviderError = reflective_exceptions_1.InvalidProviderError;
  exports.NoAnnotationError = reflective_exceptions_1.NoAnnotationError;
  exports.OutOfBoundsError = reflective_exceptions_1.OutOfBoundsError;
  var opaque_token_1 = $__require('./di/opaque_token');
  exports.OpaqueToken = opaque_token_1.OpaqueToken;
  

  return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/change_detection/differs/keyvalue_differs.js', ['../../di', '../../facade/collection', '../../facade/exceptions', '../../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var di_1 = $__require('../../di');
    var collection_1 = $__require('../../facade/collection');
    var exceptions_1 = $__require('../../facade/exceptions');
    var lang_1 = $__require('../../facade/lang');
    /**
     * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.
     * @stable
     */
    var KeyValueDiffers = function () {
        function KeyValueDiffers(factories) {
            this.factories = factories;
        }
        KeyValueDiffers.create = function (factories, parent) {
            if (lang_1.isPresent(parent)) {
                var copied = collection_1.ListWrapper.clone(parent.factories);
                factories = factories.concat(copied);
                return new KeyValueDiffers(factories);
            } else {
                return new KeyValueDiffers(factories);
            }
        };
        /**
         * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the
         * inherited {@link KeyValueDiffers} instance with the provided factories and return a new
         * {@link KeyValueDiffers} instance.
         *
         * The following example shows how to extend an existing list of factories,
               * which will only be applied to the injector for this component and its children.
               * This step is all that's required to make a new {@link KeyValueDiffer} available.
         *
         * ### Example
         *
         * ```
         * @Component({
         *   viewProviders: [
         *     KeyValueDiffers.extend([new ImmutableMapDiffer()])
         *   ]
         * })
         * ```
         */
        KeyValueDiffers.extend = function (factories) {
            return new di_1.Provider(KeyValueDiffers, {
                useFactory: function (parent) {
                    if (lang_1.isBlank(parent)) {
                        // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed
                        // to
                        // bootstrap(), which would override default pipes instead of extending them.
                        throw new exceptions_1.BaseException('Cannot extend KeyValueDiffers without a parent injector');
                    }
                    return KeyValueDiffers.create(factories, parent);
                },
                // Dependency technically isn't optional, but we can provide a better error message this way.
                deps: [[KeyValueDiffers, new di_1.SkipSelfMetadata(), new di_1.OptionalMetadata()]]
            });
        };
        KeyValueDiffers.prototype.find = function (kv) {
            var factory = this.factories.find(function (f) {
                return f.supports(kv);
            });
            if (lang_1.isPresent(factory)) {
                return factory;
            } else {
                throw new exceptions_1.BaseException("Cannot find a differ supporting object '" + kv + "'");
            }
        };
        return KeyValueDiffers;
    }();
    exports.KeyValueDiffers = KeyValueDiffers;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/core@2.0.0-rc.5/src/change_detection/change_detector_ref.js", ["reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";
  /**
   * @stable
   */

  var define,
      global = this || self,
      GLOBAL = global;
  var ChangeDetectorRef = function () {
    function ChangeDetectorRef() {}
    return ChangeDetectorRef;
  }();
  exports.ChangeDetectorRef = ChangeDetectorRef;
  

  return module.exports;
});
System.registerDynamic("npm:@angular/core@2.0.0-rc.5/src/change_detection/constants.js", ["../facade/lang", "reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var lang_1 = $__require("../facade/lang");
  /**
   * Describes within the change detector which strategy will be used the next time change
   * detection is triggered.
   * @stable
   */
  (function (ChangeDetectionStrategy) {
    /**
     * `OnPush` means that the change detector's mode will be set to `CheckOnce` during hydration.
     */
    ChangeDetectionStrategy[ChangeDetectionStrategy["OnPush"] = 0] = "OnPush";
    /**
     * `Default` means that the change detector's mode will be set to `CheckAlways` during hydration.
     */
    ChangeDetectionStrategy[ChangeDetectionStrategy["Default"] = 1] = "Default";
  })(exports.ChangeDetectionStrategy || (exports.ChangeDetectionStrategy = {}));
  var ChangeDetectionStrategy = exports.ChangeDetectionStrategy;
  /**
   * Describes the status of the detector.
   */
  (function (ChangeDetectorStatus) {
    /**
     * `CheckedOnce` means that after calling detectChanges the mode of the change detector
     * will become `Checked`.
     */
    ChangeDetectorStatus[ChangeDetectorStatus["CheckOnce"] = 0] = "CheckOnce";
    /**
     * `Checked` means that the change detector should be skipped until its mode changes to
     * `CheckOnce`.
     */
    ChangeDetectorStatus[ChangeDetectorStatus["Checked"] = 1] = "Checked";
    /**
     * `CheckAlways` means that after calling detectChanges the mode of the change detector
     * will remain `CheckAlways`.
     */
    ChangeDetectorStatus[ChangeDetectorStatus["CheckAlways"] = 2] = "CheckAlways";
    /**
     * `Detached` means that the change detector sub tree is not a part of the main tree and
     * should be skipped.
     */
    ChangeDetectorStatus[ChangeDetectorStatus["Detached"] = 3] = "Detached";
    /**
     * `Errored` means that the change detector encountered an error checking a binding
     * or calling a directive lifecycle method and is now in an inconsistent state. Change
     * detectors in this state will no longer detect changes.
     */
    ChangeDetectorStatus[ChangeDetectorStatus["Errored"] = 4] = "Errored";
    /**
     * `Destroyed` means that the change detector is destroyed.
     */
    ChangeDetectorStatus[ChangeDetectorStatus["Destroyed"] = 5] = "Destroyed";
  })(exports.ChangeDetectorStatus || (exports.ChangeDetectorStatus = {}));
  var ChangeDetectorStatus = exports.ChangeDetectorStatus;
  /**
   * List of possible {@link ChangeDetectionStrategy} values.
   */
  exports.CHANGE_DETECTION_STRATEGY_VALUES = [ChangeDetectionStrategy.OnPush, ChangeDetectionStrategy.Default];
  /**
   * List of possible {@link ChangeDetectorStatus} values.
   */
  exports.CHANGE_DETECTOR_STATUS_VALUES = [ChangeDetectorStatus.CheckOnce, ChangeDetectorStatus.Checked, ChangeDetectorStatus.CheckAlways, ChangeDetectorStatus.Detached, ChangeDetectorStatus.Errored, ChangeDetectorStatus.Destroyed];
  function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
    return lang_1.isBlank(changeDetectionStrategy) || changeDetectionStrategy === ChangeDetectionStrategy.Default;
  }
  exports.isDefaultChangeDetectionStrategy = isDefaultChangeDetectionStrategy;
  

  return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/change_detection/change_detection.js', ['./differs/default_iterable_differ', './differs/default_keyvalue_differ', './differs/iterable_differs', './differs/keyvalue_differs', './change_detection_util', './change_detector_ref', './constants', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var default_iterable_differ_1 = $__require('./differs/default_iterable_differ');
  var default_keyvalue_differ_1 = $__require('./differs/default_keyvalue_differ');
  var iterable_differs_1 = $__require('./differs/iterable_differs');
  var keyvalue_differs_1 = $__require('./differs/keyvalue_differs');
  var change_detection_util_1 = $__require('./change_detection_util');
  exports.SimpleChange = change_detection_util_1.SimpleChange;
  exports.UNINITIALIZED = change_detection_util_1.UNINITIALIZED;
  exports.ValueUnwrapper = change_detection_util_1.ValueUnwrapper;
  exports.WrappedValue = change_detection_util_1.WrappedValue;
  exports.devModeEqual = change_detection_util_1.devModeEqual;
  exports.looseIdentical = change_detection_util_1.looseIdentical;
  var change_detector_ref_1 = $__require('./change_detector_ref');
  exports.ChangeDetectorRef = change_detector_ref_1.ChangeDetectorRef;
  var constants_1 = $__require('./constants');
  exports.CHANGE_DETECTION_STRATEGY_VALUES = constants_1.CHANGE_DETECTION_STRATEGY_VALUES;
  exports.ChangeDetectionStrategy = constants_1.ChangeDetectionStrategy;
  exports.ChangeDetectorStatus = constants_1.ChangeDetectorStatus;
  exports.isDefaultChangeDetectionStrategy = constants_1.isDefaultChangeDetectionStrategy;
  var default_iterable_differ_2 = $__require('./differs/default_iterable_differ');
  exports.CollectionChangeRecord = default_iterable_differ_2.CollectionChangeRecord;
  exports.DefaultIterableDifferFactory = default_iterable_differ_2.DefaultIterableDifferFactory;
  var default_iterable_differ_3 = $__require('./differs/default_iterable_differ');
  exports.DefaultIterableDiffer = default_iterable_differ_3.DefaultIterableDiffer;
  var default_keyvalue_differ_2 = $__require('./differs/default_keyvalue_differ');
  exports.DefaultKeyValueDifferFactory = default_keyvalue_differ_2.DefaultKeyValueDifferFactory;
  exports.KeyValueChangeRecord = default_keyvalue_differ_2.KeyValueChangeRecord;
  var iterable_differs_2 = $__require('./differs/iterable_differs');
  exports.IterableDiffers = iterable_differs_2.IterableDiffers;
  var keyvalue_differs_2 = $__require('./differs/keyvalue_differs');
  exports.KeyValueDiffers = keyvalue_differs_2.KeyValueDiffers;
  /**
   * Structural diffing for `Object`s and `Map`s.
   */
  exports.keyValDiff = [new default_keyvalue_differ_1.DefaultKeyValueDifferFactory()];
  /**
   * Structural diffing for `Iterable` types such as `Array`s.
   */
  exports.iterableDiff = [new default_iterable_differ_1.DefaultIterableDifferFactory()];
  exports.defaultIterableDiffers = new iterable_differs_1.IterableDiffers(exports.iterableDiff);
  exports.defaultKeyValueDiffers = new keyvalue_differs_1.KeyValueDiffers(exports.keyValDiff);
  

  return module.exports;
});
System.registerDynamic("npm:@angular/core@2.0.0-rc.5/src/di/metadata.js", ["../facade/lang", "reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var lang_1 = $__require("../facade/lang");
    /**
     * A parameter metadata that specifies a dependency.
     *
     * ### Example ([live demo](http://plnkr.co/edit/6uHYJK?p=preview))
     *
     * ```typescript
     * class Engine {}
     *
     * @Injectable()
     * class Car {
     *   engine;
     *   constructor(@Inject("MyEngine") engine:Engine) {
     *     this.engine = engine;
     *   }
     * }
     *
     * var injector = Injector.resolveAndCreate([
     *  {provide: "MyEngine", useClass: Engine},
     *  Car
     * ]);
     *
     * expect(injector.get(Car).engine instanceof Engine).toBe(true);
     * ```
     *
     * When `@Inject()` is not present, {@link Injector} will use the type annotation of the parameter.
     *
     * ### Example
     *
     * ```typescript
     * class Engine {}
     *
     * @Injectable()
     * class Car {
     *   constructor(public engine: Engine) {} //same as constructor(@Inject(Engine) engine:Engine)
     * }
     *
     * var injector = Injector.resolveAndCreate([Engine, Car]);
     * expect(injector.get(Car).engine instanceof Engine).toBe(true);
     * ```
     * @stable
     */
    var InjectMetadata = function () {
        function InjectMetadata(token) {
            this.token = token;
        }
        InjectMetadata.prototype.toString = function () {
            return "@Inject(" + lang_1.stringify(this.token) + ")";
        };
        return InjectMetadata;
    }();
    exports.InjectMetadata = InjectMetadata;
    /**
     * A parameter metadata that marks a dependency as optional. {@link Injector} provides `null` if
     * the dependency is not found.
     *
     * ### Example ([live demo](http://plnkr.co/edit/AsryOm?p=preview))
     *
     * ```typescript
     * class Engine {}
     *
     * @Injectable()
     * class Car {
     *   engine;
     *   constructor(@Optional() engine:Engine) {
     *     this.engine = engine;
     *   }
     * }
     *
     * var injector = Injector.resolveAndCreate([Car]);
     * expect(injector.get(Car).engine).toBeNull();
     * ```
     * @stable
     */
    var OptionalMetadata = function () {
        function OptionalMetadata() {}
        OptionalMetadata.prototype.toString = function () {
            return "@Optional()";
        };
        return OptionalMetadata;
    }();
    exports.OptionalMetadata = OptionalMetadata;
    /**
     * `DependencyMetadata` is used by the framework to extend DI.
     * This is internal to Angular and should not be used directly.
     * @stable
     */
    var DependencyMetadata = function () {
        function DependencyMetadata() {}
        Object.defineProperty(DependencyMetadata.prototype, "token", {
            get: function () {
                return null;
            },
            enumerable: true,
            configurable: true
        });
        return DependencyMetadata;
    }();
    exports.DependencyMetadata = DependencyMetadata;
    /**
     * A marker metadata that marks a class as available to {@link Injector} for creation.
     *
     * ### Example ([live demo](http://plnkr.co/edit/Wk4DMQ?p=preview))
     *
     * ```typescript
     * @Injectable()
     * class UsefulService {}
     *
     * @Injectable()
     * class NeedsService {
     *   constructor(public service:UsefulService) {}
     * }
     *
     * var injector = Injector.resolveAndCreate([NeedsService, UsefulService]);
     * expect(injector.get(NeedsService).service instanceof UsefulService).toBe(true);
     * ```
     * {@link Injector} will throw {@link NoAnnotationError} when trying to instantiate a class that
     * does not have `@Injectable` marker, as shown in the example below.
     *
     * ```typescript
     * class UsefulService {}
     *
     * class NeedsService {
     *   constructor(public service:UsefulService) {}
     * }
     *
     * var injector = Injector.resolveAndCreate([NeedsService, UsefulService]);
     * expect(() => injector.get(NeedsService)).toThrowError();
     * ```
     * @stable
     */
    var InjectableMetadata = function () {
        function InjectableMetadata() {}
        return InjectableMetadata;
    }();
    exports.InjectableMetadata = InjectableMetadata;
    /**
     * Specifies that an {@link Injector} should retrieve a dependency only from itself.
     *
     * ### Example ([live demo](http://plnkr.co/edit/NeagAg?p=preview))
     *
     * ```typescript
     * class Dependency {
     * }
     *
     * @Injectable()
     * class NeedsDependency {
     *   dependency;
     *   constructor(@Self() dependency:Dependency) {
     *     this.dependency = dependency;
     *   }
     * }
     *
     * var inj = Injector.resolveAndCreate([Dependency, NeedsDependency]);
     * var nd = inj.get(NeedsDependency);
     *
     * expect(nd.dependency instanceof Dependency).toBe(true);
     *
     * var inj = Injector.resolveAndCreate([Dependency]);
     * var child = inj.resolveAndCreateChild([NeedsDependency]);
     * expect(() => child.get(NeedsDependency)).toThrowError();
     * ```
     * @stable
     */
    var SelfMetadata = function () {
        function SelfMetadata() {}
        SelfMetadata.prototype.toString = function () {
            return "@Self()";
        };
        return SelfMetadata;
    }();
    exports.SelfMetadata = SelfMetadata;
    /**
     * Specifies that the dependency resolution should start from the parent injector.
     *
     * ### Example ([live demo](http://plnkr.co/edit/Wchdzb?p=preview))
     *
     * ```typescript
     * class Dependency {
     * }
     *
     * @Injectable()
     * class NeedsDependency {
     *   dependency;
     *   constructor(@SkipSelf() dependency:Dependency) {
     *     this.dependency = dependency;
     *   }
     * }
     *
     * var parent = Injector.resolveAndCreate([Dependency]);
     * var child = parent.resolveAndCreateChild([NeedsDependency]);
     * expect(child.get(NeedsDependency).dependency instanceof Depedency).toBe(true);
     *
     * var inj = Injector.resolveAndCreate([Dependency, NeedsDependency]);
     * expect(() => inj.get(NeedsDependency)).toThrowError();
     * ```
     * @stable
     */
    var SkipSelfMetadata = function () {
        function SkipSelfMetadata() {}
        SkipSelfMetadata.prototype.toString = function () {
            return "@SkipSelf()";
        };
        return SkipSelfMetadata;
    }();
    exports.SkipSelfMetadata = SkipSelfMetadata;
    /**
     * Specifies that an injector should retrieve a dependency from any injector until reaching the
     * closest host.
     *
     * In Angular, a component element is automatically declared as a host for all the injectors in
     * its view.
     *
     * ### Example ([live demo](http://plnkr.co/edit/GX79pV?p=preview))
     *
     * In the following example `App` contains `ParentCmp`, which contains `ChildDirective`.
     * So `ParentCmp` is the host of `ChildDirective`.
     *
     * `ChildDirective` depends on two services: `HostService` and `OtherService`.
     * `HostService` is defined at `ParentCmp`, and `OtherService` is defined at `App`.
     *
     *```typescript
     * class OtherService {}
     * class HostService {}
     *
     * @Directive({
     *   selector: 'child-directive'
     * })
     * class ChildDirective {
     *   constructor(@Optional() @Host() os:OtherService, @Optional() @Host() hs:HostService){
     *     console.log("os is null", os);
     *     console.log("hs is NOT null", hs);
     *   }
     * }
     *
     * @Component({
     *   selector: 'parent-cmp',
     *   providers: [HostService],
     *   template: `
     *     Dir: <child-directive></child-directive>
     *   `,
     *   directives: [ChildDirective]
     * })
     * class ParentCmp {
     * }
     *
     * @Component({
     *   selector: 'app',
     *   providers: [OtherService],
     *   template: `
     *     Parent: <parent-cmp></parent-cmp>
     *   `,
     *   directives: [ParentCmp]
     * })
     * class App {
     * }
     *
     * bootstrap(App);
     *```
     * @stable
     */
    var HostMetadata = function () {
        function HostMetadata() {}
        HostMetadata.prototype.toString = function () {
            return "@Host()";
        };
        return HostMetadata;
    }();
    exports.HostMetadata = HostMetadata;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/di/decorators.js', ['../util/decorators', './metadata', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var decorators_1 = $__require('../util/decorators');
  var metadata_1 = $__require('./metadata');
  /**
   * Factory for creating {@link InjectMetadata}.
   * @stable
   * @Annotation
   */
  exports.Inject = decorators_1.makeParamDecorator(metadata_1.InjectMetadata);
  /**
   * Factory for creating {@link OptionalMetadata}.
   * @stable
   * @Annotation
   */
  exports.Optional = decorators_1.makeParamDecorator(metadata_1.OptionalMetadata);
  /**
   * Factory for creating {@link InjectableMetadata}.
   * @stable
   * @Annotation
   */
  exports.Injectable = decorators_1.makeDecorator(metadata_1.InjectableMetadata);
  /**
   * Factory for creating {@link SelfMetadata}.
   * @stable
   * @Annotation
   */
  exports.Self = decorators_1.makeParamDecorator(metadata_1.SelfMetadata);
  /**
   * Factory for creating {@link HostMetadata}.
   * @stable
   * @Annotation
   */
  exports.Host = decorators_1.makeParamDecorator(metadata_1.HostMetadata);
  /**
   * Factory for creating {@link SkipSelfMetadata}.
   * @stable
   * @Annotation
   */
  exports.SkipSelf = decorators_1.makeParamDecorator(metadata_1.SkipSelfMetadata);
  

  return module.exports;
});
System.registerDynamic("npm:@angular/core@2.0.0-rc.5/src/linker/element_ref.js", ["reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";
  /**
   * A wrapper around a native element inside of a View.
   *
   * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM
   * element.
   *
   * @security Permitting direct access to the DOM can make your application more vulnerable to
   * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the
   * [Security Guide](http://g.co/ng/security).
   *
   * @stable
   */
  // Note: We don't expose things like `Injector`, `ViewContainer`, ... here,
  // i.e. users have to ask for what they need. With that, we can build better analysis tools
  // and could do better codegen in the future.

  var define,
      global = this || self,
      GLOBAL = global;
  var ElementRef = function () {
    function ElementRef(nativeElement) {
      this.nativeElement = nativeElement;
    }
    return ElementRef;
  }();
  exports.ElementRef = ElementRef;
  

  return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/profile/wtf_impl.js', ['../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var lang_1 = $__require('../facade/lang');
    var trace;
    var events;
    function detectWTF() {
        var wtf = lang_1.global['wtf'];
        if (wtf) {
            trace = wtf['trace'];
            if (trace) {
                events = trace['events'];
                return true;
            }
        }
        return false;
    }
    exports.detectWTF = detectWTF;
    function createScope(signature, flags) {
        if (flags === void 0) {
            flags = null;
        }
        return events.createScope(signature, flags);
    }
    exports.createScope = createScope;
    function leave(scope, returnValue) {
        trace.leaveScope(scope, returnValue);
        return returnValue;
    }
    exports.leave = leave;
    function startTimeRange(rangeType, action) {
        return trace.beginTimeRange(rangeType, action);
    }
    exports.startTimeRange = startTimeRange;
    function endTimeRange(range) {
        trace.endTimeRange(range);
    }
    exports.endTimeRange = endTimeRange;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/core@2.0.0-rc.5/src/profile/profile.js", ["./wtf_impl", "reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var wtf_impl_1 = $__require("./wtf_impl");
  /**
   * True if WTF is enabled.
   */
  exports.wtfEnabled = wtf_impl_1.detectWTF();
  function noopScope(arg0, arg1) {
    return null;
  }
  /**
   * Create trace scope.
   *
   * Scopes must be strictly nested and are analogous to stack frames, but
   * do not have to follow the stack frames. Instead it is recommended that they follow logical
   * nesting. You may want to use
   * [Event
   * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)
   * as they are defined in WTF.
   *
   * Used to mark scope entry. The return value is used to leave the scope.
   *
   *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');
   *
   *     someMethod() {
   *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI
   *        // DO SOME WORK HERE
   *        return wtfLeave(s, 123); // Return value 123
   *     }
   *
   * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can
   * negatively impact the performance of your application. For this reason we recommend that
   * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and
   * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to
   * exception, will produce incorrect trace, but presence of exception signifies logic error which
   * needs to be fixed before the app should be profiled. Add try-finally only when you expect that
   * an exception is expected during normal execution while profiling.
   *
   * @experimental
   */
  exports.wtfCreateScope = exports.wtfEnabled ? wtf_impl_1.createScope : function (signature, flags) {
    return noopScope;
  };
  /**
   * Used to mark end of Scope.
   *
   * - `scope` to end.
   * - `returnValue` (optional) to be passed to the WTF.
   *
   * Returns the `returnValue for easy chaining.
   * @experimental
   */
  exports.wtfLeave = exports.wtfEnabled ? wtf_impl_1.leave : function (s, r) {
    return r;
  };
  /**
   * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.
   * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been
   * enabled.
   *
   *     someMethod() {
   *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');
   *        var future = new Future.delay(5).then((_) {
   *          wtfEndTimeRange(s);
   *        });
   *     }
   * @experimental
   */
  exports.wtfStartTimeRange = exports.wtfEnabled ? wtf_impl_1.startTimeRange : function (rangeType, action) {
    return null;
  };
  /**
   * Ends a async time range operation.
   * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been
   * enabled.
   * @experimental
   */
  exports.wtfEndTimeRange = exports.wtfEnabled ? wtf_impl_1.endTimeRange : function (r) {
    return null;
  };
  

  return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/linker/view_container_ref.js', ['../facade/collection', '../facade/exceptions', '../facade/lang', '../profile/profile', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var collection_1 = $__require('../facade/collection');
    var exceptions_1 = $__require('../facade/exceptions');
    var lang_1 = $__require('../facade/lang');
    var profile_1 = $__require('../profile/profile');
    /**
     * Represents a container where one or more Views can be attached.
     *
     * The container can contain two kinds of Views. Host Views, created by instantiating a
     * {@link Component} via {@link #createComponent}, and Embedded Views, created by instantiating an
     * {@link TemplateRef Embedded Template} via {@link #createEmbeddedView}.
     *
     * The location of the View Container within the containing View is specified by the Anchor
     * `element`. Each View Container can have only one Anchor Element and each Anchor Element can only
     * have a single View Container.
     *
     * Root elements of Views attached to this container become siblings of the Anchor Element in
     * the Rendered View.
     *
     * To access a `ViewContainerRef` of an Element, you can either place a {@link Directive} injected
     * with `ViewContainerRef` on the Element, or you obtain it via a {@link ViewChild} query.
     * @stable
     */
    var ViewContainerRef = function () {
        function ViewContainerRef() {}
        Object.defineProperty(ViewContainerRef.prototype, "element", {
            /**
             * Anchor element that specifies the location of this container in the containing View.
             * <!-- TODO: rename to anchorElement -->
             */
            get: function () {
                return exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewContainerRef.prototype, "injector", {
            get: function () {
                return exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewContainerRef.prototype, "parentInjector", {
            get: function () {
                return exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewContainerRef.prototype, "length", {
            /**
             * Returns the number of Views currently attached to this container.
             */
            get: function () {
                return exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        ;
        return ViewContainerRef;
    }();
    exports.ViewContainerRef = ViewContainerRef;
    var ViewContainerRef_ = function () {
        function ViewContainerRef_(_element) {
            this._element = _element;
            /** @internal */
            this._createComponentInContainerScope = profile_1.wtfCreateScope('ViewContainerRef#createComponent()');
            /** @internal */
            this._insertScope = profile_1.wtfCreateScope('ViewContainerRef#insert()');
            /** @internal */
            this._removeScope = profile_1.wtfCreateScope('ViewContainerRef#remove()');
            /** @internal */
            this._detachScope = profile_1.wtfCreateScope('ViewContainerRef#detach()');
        }
        ViewContainerRef_.prototype.get = function (index) {
            return this._element.nestedViews[index].ref;
        };
        Object.defineProperty(ViewContainerRef_.prototype, "length", {
            get: function () {
                var views = this._element.nestedViews;
                return lang_1.isPresent(views) ? views.length : 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewContainerRef_.prototype, "element", {
            get: function () {
                return this._element.elementRef;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewContainerRef_.prototype, "injector", {
            get: function () {
                return this._element.injector;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewContainerRef_.prototype, "parentInjector", {
            get: function () {
                return this._element.parentInjector;
            },
            enumerable: true,
            configurable: true
        });
        // TODO(rado): profile and decide whether bounds checks should be added
        // to the methods below.
        ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, context, index) {
            if (context === void 0) {
                context = null;
            }
            if (index === void 0) {
                index = -1;
            }
            var viewRef = templateRef.createEmbeddedView(context);
            this.insert(viewRef, index);
            return viewRef;
        };
        ViewContainerRef_.prototype.createComponent = function (componentFactory, index, injector, projectableNodes) {
            if (index === void 0) {
                index = -1;
            }
            if (injector === void 0) {
                injector = null;
            }
            if (projectableNodes === void 0) {
                projectableNodes = null;
            }
            var s = this._createComponentInContainerScope();
            var contextInjector = lang_1.isPresent(injector) ? injector : this._element.parentInjector;
            var componentRef = componentFactory.create(contextInjector, projectableNodes);
            this.insert(componentRef.hostView, index);
            return profile_1.wtfLeave(s, componentRef);
        };
        // TODO(i): refactor insert+remove into move
        ViewContainerRef_.prototype.insert = function (viewRef, index) {
            if (index === void 0) {
                index = -1;
            }
            var s = this._insertScope();
            if (index == -1) index = this.length;
            var viewRef_ = viewRef;
            this._element.attachView(viewRef_.internalView, index);
            return profile_1.wtfLeave(s, viewRef_);
        };
        ViewContainerRef_.prototype.move = function (viewRef, currentIndex) {
            var s = this._insertScope();
            if (currentIndex == -1) return;
            var viewRef_ = viewRef;
            this._element.moveView(viewRef_.internalView, currentIndex);
            return profile_1.wtfLeave(s, viewRef_);
        };
        ViewContainerRef_.prototype.indexOf = function (viewRef) {
            return collection_1.ListWrapper.indexOf(this._element.nestedViews, viewRef.internalView);
        };
        // TODO(i): rename to destroy
        ViewContainerRef_.prototype.remove = function (index) {
            if (index === void 0) {
                index = -1;
            }
            var s = this._removeScope();
            if (index == -1) index = this.length - 1;
            var view = this._element.detachView(index);
            view.destroy();
            // view is intentionally not returned to the client.
            profile_1.wtfLeave(s);
        };
        // TODO(i): refactor insert+remove into move
        ViewContainerRef_.prototype.detach = function (index) {
            if (index === void 0) {
                index = -1;
            }
            var s = this._detachScope();
            if (index == -1) index = this.length - 1;
            var view = this._element.detachView(index);
            return profile_1.wtfLeave(s, view.ref);
        };
        ViewContainerRef_.prototype.clear = function () {
            for (var i = this.length - 1; i >= 0; i--) {
                this.remove(i);
            }
        };
        return ViewContainerRef_;
    }();
    exports.ViewContainerRef_ = ViewContainerRef_;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/core@2.0.0-rc.5/src/linker/view_type.js", ["reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    (function (ViewType) {
        // A view that contains the host element with bound component directive.
        // Contains a COMPONENT view
        ViewType[ViewType["HOST"] = 0] = "HOST";
        // The view of the component
        // Can contain 0 to n EMBEDDED views
        ViewType[ViewType["COMPONENT"] = 1] = "COMPONENT";
        // A view that is embedded into another View via a <template> element
        // inside of a COMPONENT view
        ViewType[ViewType["EMBEDDED"] = 2] = "EMBEDDED";
    })(exports.ViewType || (exports.ViewType = {}));
    var ViewType = exports.ViewType;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/linker/element.js', ['../facade/collection', '../facade/exceptions', '../facade/lang', './element_ref', './view_container_ref', './view_type', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var collection_1 = $__require('../facade/collection');
    var exceptions_1 = $__require('../facade/exceptions');
    var lang_1 = $__require('../facade/lang');
    var element_ref_1 = $__require('./element_ref');
    var view_container_ref_1 = $__require('./view_container_ref');
    var view_type_1 = $__require('./view_type');
    /**
     * An AppElement is created for elements that have a ViewContainerRef,
     * a nested component or a <template> element to keep data around
     * that is needed for later instantiations.
     */
    var AppElement = function () {
        function AppElement(index, parentIndex, parentView, nativeElement) {
            this.index = index;
            this.parentIndex = parentIndex;
            this.parentView = parentView;
            this.nativeElement = nativeElement;
            this.nestedViews = null;
            this.componentView = null;
        }
        Object.defineProperty(AppElement.prototype, "elementRef", {
            get: function () {
                return new element_ref_1.ElementRef(this.nativeElement);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppElement.prototype, "vcRef", {
            get: function () {
                return new view_container_ref_1.ViewContainerRef_(this);
            },
            enumerable: true,
            configurable: true
        });
        AppElement.prototype.initComponent = function (component, componentConstructorViewQueries, view) {
            this.component = component;
            this.componentConstructorViewQueries = componentConstructorViewQueries;
            this.componentView = view;
        };
        Object.defineProperty(AppElement.prototype, "parentInjector", {
            get: function () {
                return this.parentView.injector(this.parentIndex);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppElement.prototype, "injector", {
            get: function () {
                return this.parentView.injector(this.index);
            },
            enumerable: true,
            configurable: true
        });
        AppElement.prototype.mapNestedViews = function (nestedViewClass, callback) {
            var result = [];
            if (lang_1.isPresent(this.nestedViews)) {
                this.nestedViews.forEach(function (nestedView) {
                    if (nestedView.clazz === nestedViewClass) {
                        result.push(callback(nestedView));
                    }
                });
            }
            return result;
        };
        AppElement.prototype.moveView = function (view, currentIndex) {
            var previousIndex = this.nestedViews.indexOf(view);
            if (view.type === view_type_1.ViewType.COMPONENT) {
                throw new exceptions_1.BaseException("Component views can't be moved!");
            }
            var nestedViews = this.nestedViews;
            if (nestedViews == null) {
                nestedViews = [];
                this.nestedViews = nestedViews;
            }
            collection_1.ListWrapper.removeAt(nestedViews, previousIndex);
            collection_1.ListWrapper.insert(nestedViews, currentIndex, view);
            var refRenderNode;
            if (currentIndex > 0) {
                var prevView = nestedViews[currentIndex - 1];
                refRenderNode = prevView.lastRootNode;
            } else {
                refRenderNode = this.nativeElement;
            }
            if (lang_1.isPresent(refRenderNode)) {
                view.renderer.attachViewAfter(refRenderNode, view.flatRootNodes);
            }
            view.markContentChildAsMoved(this);
        };
        AppElement.prototype.attachView = function (view, viewIndex) {
            if (view.type === view_type_1.ViewType.COMPONENT) {
                throw new exceptions_1.BaseException("Component views can't be moved!");
            }
            var nestedViews = this.nestedViews;
            if (nestedViews == null) {
                nestedViews = [];
                this.nestedViews = nestedViews;
            }
            collection_1.ListWrapper.insert(nestedViews, viewIndex, view);
            var refRenderNode;
            if (viewIndex > 0) {
                var prevView = nestedViews[viewIndex - 1];
                refRenderNode = prevView.lastRootNode;
            } else {
                refRenderNode = this.nativeElement;
            }
            if (lang_1.isPresent(refRenderNode)) {
                view.renderer.attachViewAfter(refRenderNode, view.flatRootNodes);
            }
            view.addToContentChildren(this);
        };
        AppElement.prototype.detachView = function (viewIndex) {
            var view = collection_1.ListWrapper.removeAt(this.nestedViews, viewIndex);
            if (view.type === view_type_1.ViewType.COMPONENT) {
                throw new exceptions_1.BaseException("Component views can't be moved!");
            }
            view.detach();
            view.removeFromContentChildren(this);
            return view;
        };
        return AppElement;
    }();
    exports.AppElement = AppElement;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/change_detection/change_detection_util.js', ['../facade/collection', '../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var collection_1 = $__require('../facade/collection');
    var lang_1 = $__require('../facade/lang');
    var lang_2 = $__require('../facade/lang');
    exports.looseIdentical = lang_2.looseIdentical;
    exports.UNINITIALIZED = {
        toString: function () {
            return 'CD_INIT_VALUE';
        }
    };
    function devModeEqual(a, b) {
        if (collection_1.isListLikeIterable(a) && collection_1.isListLikeIterable(b)) {
            return collection_1.areIterablesEqual(a, b, devModeEqual);
        } else if (!collection_1.isListLikeIterable(a) && !lang_1.isPrimitive(a) && !collection_1.isListLikeIterable(b) && !lang_1.isPrimitive(b)) {
            return true;
        } else {
            return lang_1.looseIdentical(a, b);
        }
    }
    exports.devModeEqual = devModeEqual;
    /**
     * Indicates that the result of a {@link PipeMetadata} transformation has changed even though the
     * reference
     * has not changed.
     *
     * The wrapped value will be unwrapped by change detection, and the unwrapped value will be stored.
     *
     * Example:
     *
     * ```
     * if (this._latestValue === this._latestReturnedValue) {
     *    return this._latestReturnedValue;
     *  } else {
     *    this._latestReturnedValue = this._latestValue;
     *    return WrappedValue.wrap(this._latestValue); // this will force update
     *  }
     * ```
     * @stable
     */
    var WrappedValue = function () {
        function WrappedValue(wrapped) {
            this.wrapped = wrapped;
        }
        WrappedValue.wrap = function (value) {
            return new WrappedValue(value);
        };
        return WrappedValue;
    }();
    exports.WrappedValue = WrappedValue;
    /**
     * Helper class for unwrapping WrappedValue s
     */
    var ValueUnwrapper = function () {
        function ValueUnwrapper() {
            this.hasWrappedValue = false;
        }
        ValueUnwrapper.prototype.unwrap = function (value) {
            if (value instanceof WrappedValue) {
                this.hasWrappedValue = true;
                return value.wrapped;
            }
            return value;
        };
        ValueUnwrapper.prototype.reset = function () {
            this.hasWrappedValue = false;
        };
        return ValueUnwrapper;
    }();
    exports.ValueUnwrapper = ValueUnwrapper;
    /**
     * Represents a basic change from a previous to a new value.
     * @stable
     */
    var SimpleChange = function () {
        function SimpleChange(previousValue, currentValue) {
            this.previousValue = previousValue;
            this.currentValue = currentValue;
        }
        /**
         * Check whether the new value is the first value assigned.
         */
        SimpleChange.prototype.isFirstChange = function () {
            return this.previousValue === exports.UNINITIALIZED;
        };
        return SimpleChange;
    }();
    exports.SimpleChange = SimpleChange;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/linker/exceptions.js', ['../change_detection/change_detection_util', '../facade/exceptions', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var change_detection_util_1 = $__require('../change_detection/change_detection_util');
    var exceptions_1 = $__require('../facade/exceptions');
    /**
     * An error thrown if application changes model breaking the top-down data flow.
     *
     * This exception is only thrown in dev mode.
     *
     * <!-- TODO: Add a link once the dev mode option is configurable -->
     *
     * ### Example
     *
     * ```typescript
     * @Component({
     *   selector: 'parent',
     *   template: `
     *     <child [prop]="parentProp"></child>
     *   `,
     *   directives: [forwardRef(() => Child)]
     * })
     * class Parent {
     *   parentProp = "init";
     * }
     *
     * @Directive({selector: 'child', inputs: ['prop']})
     * class Child {
     *   constructor(public parent: Parent) {}
     *
     *   set prop(v) {
     *     // this updates the parent property, which is disallowed during change detection
     *     // this will result in ExpressionChangedAfterItHasBeenCheckedException
     *     this.parent.parentProp = "updated";
     *   }
     * }
     * ```
     * @stable
     */
    var ExpressionChangedAfterItHasBeenCheckedException = function (_super) {
        __extends(ExpressionChangedAfterItHasBeenCheckedException, _super);
        function ExpressionChangedAfterItHasBeenCheckedException(oldValue, currValue, context) {
            var msg = "Expression has changed after it was checked. Previous value: '" + oldValue + "'. Current value: '" + currValue + "'.";
            if (oldValue === change_detection_util_1.UNINITIALIZED) {
                msg += " It seems like the view has been created after its parent and its children have been dirty checked." + " Has it been created in a change detection hook ?";
            }
            _super.call(this, msg);
        }
        return ExpressionChangedAfterItHasBeenCheckedException;
    }(exceptions_1.BaseException);
    exports.ExpressionChangedAfterItHasBeenCheckedException = ExpressionChangedAfterItHasBeenCheckedException;
    /**
     * Thrown when an exception was raised during view creation, change detection or destruction.
     *
     * This error wraps the original exception to attach additional contextual information that can
     * be useful for debugging.
     * @stable
     */
    var ViewWrappedException = function (_super) {
        __extends(ViewWrappedException, _super);
        function ViewWrappedException(originalException, originalStack, context) {
            _super.call(this, "Error in " + context.source, originalException, originalStack, context);
        }
        return ViewWrappedException;
    }(exceptions_1.WrappedException);
    exports.ViewWrappedException = ViewWrappedException;
    /**
     * Thrown when a destroyed view is used.
     *
     * This error indicates a bug in the framework.
     *
     * This is an internal Angular error.
     * @stable
     */
    var ViewDestroyedException = function (_super) {
        __extends(ViewDestroyedException, _super);
        function ViewDestroyedException(details) {
            _super.call(this, "Attempt to use a destroyed view: " + details);
        }
        return ViewDestroyedException;
    }(exceptions_1.BaseException);
    exports.ViewDestroyedException = ViewDestroyedException;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/linker/view_utils.js', ['../application_tokens', '../change_detection/change_detection', '../change_detection/change_detection_util', '../di/decorators', '../facade/collection', '../facade/exceptions', '../facade/lang', '../render/api', '../security', './element', './exceptions', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var application_tokens_1 = $__require('../application_tokens');
    var change_detection_1 = $__require('../change_detection/change_detection');
    var change_detection_util_1 = $__require('../change_detection/change_detection_util');
    var decorators_1 = $__require('../di/decorators');
    var collection_1 = $__require('../facade/collection');
    var exceptions_1 = $__require('../facade/exceptions');
    var lang_1 = $__require('../facade/lang');
    var api_1 = $__require('../render/api');
    var security_1 = $__require('../security');
    var element_1 = $__require('./element');
    var exceptions_2 = $__require('./exceptions');
    var ViewUtils = function () {
        function ViewUtils(_renderer, _appId, sanitizer) {
            this._renderer = _renderer;
            this._appId = _appId;
            this._nextCompTypeId = 0;
            this.sanitizer = sanitizer;
        }
        /**
         * Used by the generated code
         */
        // TODO (matsko): add typing for the animation function
        ViewUtils.prototype.createRenderComponentType = function (templateUrl, slotCount, encapsulation, styles, animations) {
            return new api_1.RenderComponentType(this._appId + "-" + this._nextCompTypeId++, templateUrl, slotCount, encapsulation, styles, animations);
        };
        /** @internal */
        ViewUtils.prototype.renderComponent = function (renderComponentType) {
            return this._renderer.renderComponent(renderComponentType);
        };
        /** @nocollapse */
        ViewUtils.decorators = [{ type: decorators_1.Injectable }];
        /** @nocollapse */
        ViewUtils.ctorParameters = [{ type: api_1.RootRenderer }, { type: undefined, decorators: [{ type: decorators_1.Inject, args: [application_tokens_1.APP_ID] }] }, { type: security_1.SanitizationService }];
        return ViewUtils;
    }();
    exports.ViewUtils = ViewUtils;
    function flattenNestedViewRenderNodes(nodes) {
        return _flattenNestedViewRenderNodes(nodes, []);
    }
    exports.flattenNestedViewRenderNodes = flattenNestedViewRenderNodes;
    function _flattenNestedViewRenderNodes(nodes, renderNodes) {
        for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            if (node instanceof element_1.AppElement) {
                var appEl = node;
                renderNodes.push(appEl.nativeElement);
                if (lang_1.isPresent(appEl.nestedViews)) {
                    for (var k = 0; k < appEl.nestedViews.length; k++) {
                        _flattenNestedViewRenderNodes(appEl.nestedViews[k].rootNodesOrAppElements, renderNodes);
                    }
                }
            } else {
                renderNodes.push(node);
            }
        }
        return renderNodes;
    }
    var EMPTY_ARR = [];
    function ensureSlotCount(projectableNodes, expectedSlotCount) {
        var res;
        if (lang_1.isBlank(projectableNodes)) {
            res = EMPTY_ARR;
        } else if (projectableNodes.length < expectedSlotCount) {
            var givenSlotCount = projectableNodes.length;
            res = collection_1.ListWrapper.createFixedSize(expectedSlotCount);
            for (var i = 0; i < expectedSlotCount; i++) {
                res[i] = i < givenSlotCount ? projectableNodes[i] : EMPTY_ARR;
            }
        } else {
            res = projectableNodes;
        }
        return res;
    }
    exports.ensureSlotCount = ensureSlotCount;
    exports.MAX_INTERPOLATION_VALUES = 9;
    function interpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {
        switch (valueCount) {
            case 1:
                return c0 + _toStringWithNull(a1) + c1;
            case 2:
                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;
            case 3:
                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3;
            case 4:
                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4;
            case 5:
                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;
            case 6:
                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;
            case 7:
                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7;
            case 8:
                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;
            case 9:
                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;
            default:
                throw new exceptions_1.BaseException("Does not support more than 9 expressions");
        }
    }
    exports.interpolate = interpolate;
    function _toStringWithNull(v) {
        return v != null ? v.toString() : '';
    }
    function checkBinding(throwOnChange, oldValue, newValue) {
        if (throwOnChange) {
            if (!change_detection_1.devModeEqual(oldValue, newValue)) {
                throw new exceptions_2.ExpressionChangedAfterItHasBeenCheckedException(oldValue, newValue, null);
            }
            return false;
        } else {
            return !lang_1.looseIdentical(oldValue, newValue);
        }
    }
    exports.checkBinding = checkBinding;
    function castByValue(input, value) {
        return input;
    }
    exports.castByValue = castByValue;
    exports.EMPTY_ARRAY = [];
    exports.EMPTY_MAP = {};
    function pureProxy1(fn) {
        var result;
        var v0 = change_detection_util_1.UNINITIALIZED;
        return function (p0) {
            if (!lang_1.looseIdentical(v0, p0)) {
                v0 = p0;
                result = fn(p0);
            }
            return result;
        };
    }
    exports.pureProxy1 = pureProxy1;
    function pureProxy2(fn) {
        var result;
        var v0 = change_detection_util_1.UNINITIALIZED;
        var v1 = change_detection_util_1.UNINITIALIZED;
        return function (p0, p1) {
            if (!lang_1.looseIdentical(v0, p0) || !lang_1.looseIdentical(v1, p1)) {
                v0 = p0;
                v1 = p1;
                result = fn(p0, p1);
            }
            return result;
        };
    }
    exports.pureProxy2 = pureProxy2;
    function pureProxy3(fn) {
        var result;
        var v0 = change_detection_util_1.UNINITIALIZED;
        var v1 = change_detection_util_1.UNINITIALIZED;
        var v2 = change_detection_util_1.UNINITIALIZED;
        return function (p0, p1, p2) {
            if (!lang_1.looseIdentical(v0, p0) || !lang_1.looseIdentical(v1, p1) || !lang_1.looseIdentical(v2, p2)) {
                v0 = p0;
                v1 = p1;
                v2 = p2;
                result = fn(p0, p1, p2);
            }
            return result;
        };
    }
    exports.pureProxy3 = pureProxy3;
    function pureProxy4(fn) {
        var result;
        var v0, v1, v2, v3;
        v0 = v1 = v2 = v3 = change_detection_util_1.UNINITIALIZED;
        return function (p0, p1, p2, p3) {
            if (!lang_1.looseIdentical(v0, p0) || !lang_1.looseIdentical(v1, p1) || !lang_1.looseIdentical(v2, p2) || !lang_1.looseIdentical(v3, p3)) {
                v0 = p0;
                v1 = p1;
                v2 = p2;
                v3 = p3;
                result = fn(p0, p1, p2, p3);
            }
            return result;
        };
    }
    exports.pureProxy4 = pureProxy4;
    function pureProxy5(fn) {
        var result;
        var v0, v1, v2, v3, v4;
        v0 = v1 = v2 = v3 = v4 = change_detection_util_1.UNINITIALIZED;
        return function (p0, p1, p2, p3, p4) {
            if (!lang_1.looseIdentical(v0, p0) || !lang_1.looseIdentical(v1, p1) || !lang_1.looseIdentical(v2, p2) || !lang_1.looseIdentical(v3, p3) || !lang_1.looseIdentical(v4, p4)) {
                v0 = p0;
                v1 = p1;
                v2 = p2;
                v3 = p3;
                v4 = p4;
                result = fn(p0, p1, p2, p3, p4);
            }
            return result;
        };
    }
    exports.pureProxy5 = pureProxy5;
    function pureProxy6(fn) {
        var result;
        var v0, v1, v2, v3, v4, v5;
        v0 = v1 = v2 = v3 = v4 = v5 = change_detection_util_1.UNINITIALIZED;
        return function (p0, p1, p2, p3, p4, p5) {
            if (!lang_1.looseIdentical(v0, p0) || !lang_1.looseIdentical(v1, p1) || !lang_1.looseIdentical(v2, p2) || !lang_1.looseIdentical(v3, p3) || !lang_1.looseIdentical(v4, p4) || !lang_1.looseIdentical(v5, p5)) {
                v0 = p0;
                v1 = p1;
                v2 = p2;
                v3 = p3;
                v4 = p4;
                v5 = p5;
                result = fn(p0, p1, p2, p3, p4, p5);
            }
            return result;
        };
    }
    exports.pureProxy6 = pureProxy6;
    function pureProxy7(fn) {
        var result;
        var v0, v1, v2, v3, v4, v5, v6;
        v0 = v1 = v2 = v3 = v4 = v5 = v6 = change_detection_util_1.UNINITIALIZED;
        return function (p0, p1, p2, p3, p4, p5, p6) {
            if (!lang_1.looseIdentical(v0, p0) || !lang_1.looseIdentical(v1, p1) || !lang_1.looseIdentical(v2, p2) || !lang_1.looseIdentical(v3, p3) || !lang_1.looseIdentical(v4, p4) || !lang_1.looseIdentical(v5, p5) || !lang_1.looseIdentical(v6, p6)) {
                v0 = p0;
                v1 = p1;
                v2 = p2;
                v3 = p3;
                v4 = p4;
                v5 = p5;
                v6 = p6;
                result = fn(p0, p1, p2, p3, p4, p5, p6);
            }
            return result;
        };
    }
    exports.pureProxy7 = pureProxy7;
    function pureProxy8(fn) {
        var result;
        var v0, v1, v2, v3, v4, v5, v6, v7;
        v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = change_detection_util_1.UNINITIALIZED;
        return function (p0, p1, p2, p3, p4, p5, p6, p7) {
            if (!lang_1.looseIdentical(v0, p0) || !lang_1.looseIdentical(v1, p1) || !lang_1.looseIdentical(v2, p2) || !lang_1.looseIdentical(v3, p3) || !lang_1.looseIdentical(v4, p4) || !lang_1.looseIdentical(v5, p5) || !lang_1.looseIdentical(v6, p6) || !lang_1.looseIdentical(v7, p7)) {
                v0 = p0;
                v1 = p1;
                v2 = p2;
                v3 = p3;
                v4 = p4;
                v5 = p5;
                v6 = p6;
                v7 = p7;
                result = fn(p0, p1, p2, p3, p4, p5, p6, p7);
            }
            return result;
        };
    }
    exports.pureProxy8 = pureProxy8;
    function pureProxy9(fn) {
        var result;
        var v0, v1, v2, v3, v4, v5, v6, v7, v8;
        v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = change_detection_util_1.UNINITIALIZED;
        return function (p0, p1, p2, p3, p4, p5, p6, p7, p8) {
            if (!lang_1.looseIdentical(v0, p0) || !lang_1.looseIdentical(v1, p1) || !lang_1.looseIdentical(v2, p2) || !lang_1.looseIdentical(v3, p3) || !lang_1.looseIdentical(v4, p4) || !lang_1.looseIdentical(v5, p5) || !lang_1.looseIdentical(v6, p6) || !lang_1.looseIdentical(v7, p7) || !lang_1.looseIdentical(v8, p8)) {
                v0 = p0;
                v1 = p1;
                v2 = p2;
                v3 = p3;
                v4 = p4;
                v5 = p5;
                v6 = p6;
                v7 = p7;
                v8 = p8;
                result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8);
            }
            return result;
        };
    }
    exports.pureProxy9 = pureProxy9;
    function pureProxy10(fn) {
        var result;
        var v0, v1, v2, v3, v4, v5, v6, v7, v8, v9;
        v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = v9 = change_detection_util_1.UNINITIALIZED;
        return function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
            if (!lang_1.looseIdentical(v0, p0) || !lang_1.looseIdentical(v1, p1) || !lang_1.looseIdentical(v2, p2) || !lang_1.looseIdentical(v3, p3) || !lang_1.looseIdentical(v4, p4) || !lang_1.looseIdentical(v5, p5) || !lang_1.looseIdentical(v6, p6) || !lang_1.looseIdentical(v7, p7) || !lang_1.looseIdentical(v8, p8) || !lang_1.looseIdentical(v9, p9)) {
                v0 = p0;
                v1 = p1;
                v2 = p2;
                v3 = p3;
                v4 = p4;
                v5 = p5;
                v6 = p6;
                v7 = p7;
                v8 = p8;
                v9 = p9;
                result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
            }
            return result;
        };
    }
    exports.pureProxy10 = pureProxy10;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/core@2.0.0-rc.5/src/metadata/lifecycle_hooks.js", ["reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";
  /**
   * @stable
   */

  var define,
      global = this || self,
      GLOBAL = global;
  (function (LifecycleHooks) {
    LifecycleHooks[LifecycleHooks["OnInit"] = 0] = "OnInit";
    LifecycleHooks[LifecycleHooks["OnDestroy"] = 1] = "OnDestroy";
    LifecycleHooks[LifecycleHooks["DoCheck"] = 2] = "DoCheck";
    LifecycleHooks[LifecycleHooks["OnChanges"] = 3] = "OnChanges";
    LifecycleHooks[LifecycleHooks["AfterContentInit"] = 4] = "AfterContentInit";
    LifecycleHooks[LifecycleHooks["AfterContentChecked"] = 5] = "AfterContentChecked";
    LifecycleHooks[LifecycleHooks["AfterViewInit"] = 6] = "AfterViewInit";
    LifecycleHooks[LifecycleHooks["AfterViewChecked"] = 7] = "AfterViewChecked";
  })(exports.LifecycleHooks || (exports.LifecycleHooks = {}));
  var LifecycleHooks = exports.LifecycleHooks;
  exports.LIFECYCLE_HOOKS_VALUES = [LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges, LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit, LifecycleHooks.AfterViewChecked];
  /**
   * Lifecycle hooks are guaranteed to be called in the following order:
   * - `OnChanges` (if any bindings have changed),
   * - `OnInit` (after the first check only),
   * - `DoCheck`,
   * - `AfterContentInit`,
   * - `AfterContentChecked`,
   * - `AfterViewInit`,
   * - `AfterViewChecked`,
   * - `OnDestroy` (at the very end before destruction)
   */
  /**
   * Implement this interface to get notified when any data-bound property of your directive changes.
   *
   * `ngOnChanges` is called right after the data-bound properties have been checked and before view
   * and content children are checked if at least one of them has changed.
   *
   * The `changes` parameter contains an entry for each of the changed data-bound property. The key is
   * the property name and the value is an instance of {@link SimpleChange}.
   *
   * ### Example ([live example](http://plnkr.co/edit/AHrB6opLqHDBPkt4KpdT?p=preview)):
   *
   * ```typescript
   * @Component({
   *   selector: 'my-cmp',
   *   template: `<p>myProp = {{myProp}}</p>`
   * })
   * class MyComponent implements OnChanges {
   *   @Input() myProp: any;
   *
   *   ngOnChanges(changes: SimpleChanges) {
   *     console.log('ngOnChanges - myProp = ' + changes['myProp'].currentValue);
   *   }
   * }
   *
   * @Component({
   *   selector: 'app',
   *   template: `
   *     <button (click)="value = value + 1">Change MyComponent</button>
   *     <my-cmp [my-prop]="value"></my-cmp>`,
   *   directives: [MyComponent]
   * })
   * export class App {
   *   value = 0;
   * }
   *
   * bootstrap(App).catch(err => console.error(err));
   * ```
   * @stable
   */
  var OnChanges = function () {
    function OnChanges() {}
    return OnChanges;
  }();
  exports.OnChanges = OnChanges;
  /**
   * Implement this interface to execute custom initialization logic after your directive's
   * data-bound properties have been initialized.
   *
   * `ngOnInit` is called right after the directive's data-bound properties have been checked for the
   * first time, and before any of its children have been checked. It is invoked only once when the
   * directive is instantiated.
   *
   * ### Example ([live example](http://plnkr.co/edit/1MBypRryXd64v4pV03Yn?p=preview))
   *
   * ```typescript
   * @Component({
   *   selector: 'my-cmp',
   *   template: `<p>my-component</p>`
   * })
   * class MyComponent implements OnInit, OnDestroy {
   *   ngOnInit() {
   *     console.log('ngOnInit');
   *   }
   *
   *   ngOnDestroy() {
   *     console.log('ngOnDestroy');
   *   }
   * }
   *
   * @Component({
   *   selector: 'app',
   *   template: `
   *     <button (click)="hasChild = !hasChild">
   *       {{hasChild ? 'Destroy' : 'Create'}} MyComponent
   *     </button>
   *     <my-cmp *ngIf="hasChild"></my-cmp>`,
   *   directives: [MyComponent, NgIf]
   * })
   * export class App {
   *   hasChild = true;
   * }
   *
   * bootstrap(App).catch(err => console.error(err));
   *  ```
   * @stable
   */
  var OnInit = function () {
    function OnInit() {}
    return OnInit;
  }();
  exports.OnInit = OnInit;
  /**
   * Implement this interface to supplement the default change detection algorithm in your directive.
   *
   * `ngDoCheck` gets called to check the changes in the directives in addition to the default
   * algorithm.
   *
   * The default change detection algorithm looks for differences by comparing bound-property values
   * by reference across change detection runs.
   *
   * Note that a directive typically should not use both `DoCheck` and {@link OnChanges} to respond to
   * changes on the same input. `ngOnChanges` will continue to be called when the default change
   * detector
   * detects changes, so it is usually unnecessary to respond to changes on the same input in both
   * hooks.
   * Reaction to the changes have to be handled from within the `ngDoCheck` callback.
   *
   * You can use {@link KeyValueDiffers} and {@link IterableDiffers} to help add your custom check
   * mechanisms.
   *
   * ### Example ([live demo](http://plnkr.co/edit/QpnIlF0CR2i5bcYbHEUJ?p=preview))
   *
   * In the following example `ngDoCheck` uses an {@link IterableDiffers} to detect the updates to the
   * array `list`:
   *
   * ```typescript
   * @Component({
   *   selector: 'custom-check',
   *   template: `
   *     <p>Changes:</p>
   *     <ul>
   *       <li *ngFor="let line of logs">{{line}}</li>
   *     </ul>`,
   *   directives: [NgFor]
   * })
   * class CustomCheckComponent implements DoCheck {
   *   @Input() list: any[];
   *   differ: any;
   *   logs = [];
   *
   *   constructor(differs: IterableDiffers) {
   *     this.differ = differs.find([]).create(null);
   *   }
   *
   *   ngDoCheck() {
   *     var changes = this.differ.diff(this.list);
   *
   *     if (changes) {
   *       changes.forEachAddedItem(r => this.logs.push('added ' + r.item));
   *       changes.forEachRemovedItem(r => this.logs.push('removed ' + r.item))
   *     }
   *   }
   * }
   *
   * @Component({
   *   selector: 'app',
   *   template: `
   *     <button (click)="list.push(list.length)">Push</button>
   *     <button (click)="list.pop()">Pop</button>
   *     <custom-check [list]="list"></custom-check>`,
   *   directives: [CustomCheckComponent]
   * })
   * export class App {
   *   list = [];
   * }
   * ```
   * @stable
   */
  var DoCheck = function () {
    function DoCheck() {}
    return DoCheck;
  }();
  exports.DoCheck = DoCheck;
  /**
   * Implement this interface to get notified when your directive is destroyed.
   *
   * `ngOnDestroy` callback is typically used for any custom cleanup that needs to occur when the
   * instance is destroyed
   *
   * ### Example ([live example](http://plnkr.co/edit/1MBypRryXd64v4pV03Yn?p=preview))
   *
   * ```typesript
   * @Component({
   *   selector: 'my-cmp',
   *   template: `<p>my-component</p>`
   * })
   * class MyComponent implements OnInit, OnDestroy {
   *   ngOnInit() {
   *     console.log('ngOnInit');
   *   }
   *
   *   ngOnDestroy() {
   *     console.log('ngOnDestroy');
   *   }
   * }
   *
   * @Component({
   *   selector: 'app',
   *   template: `
   *     <button (click)="hasChild = !hasChild">
   *       {{hasChild ? 'Destroy' : 'Create'}} MyComponent
   *     </button>
   *     <my-cmp *ngIf="hasChild"></my-cmp>`,
   *   directives: [MyComponent, NgIf]
   * })
   * export class App {
   *   hasChild = true;
   * }
   *
   * bootstrap(App).catch(err => console.error(err));
   * ```
   *
   *
   * To create a stateful Pipe, you should implement this interface and set the `pure`
   * parameter to `false` in the {@link PipeMetadata}.
   *
   * A stateful pipe may produce different output, given the same input. It is
   * likely that a stateful pipe may contain state that should be cleaned up when
   * a binding is destroyed. For example, a subscription to a stream of data may need to
   * be disposed, or an interval may need to be cleared.
   *
   * ### Example ([live demo](http://plnkr.co/edit/i8pm5brO4sPaLxBx56MR?p=preview))
   *
   * In this example, a pipe is created to countdown its input value, updating it every
   * 50ms. Because it maintains an internal interval, it automatically clears
   * the interval when the binding is destroyed or the countdown completes.
   *
   * ```
   * import {OnDestroy, Pipe, PipeTransform} from '@angular/core'
   * @Pipe({name: 'countdown', pure: false})
   * class CountDown implements PipeTransform, OnDestroy {
   *   remainingTime:Number;
   *   interval:SetInterval;
   *   ngOnDestroy() {
   *     if (this.interval) {
   *       clearInterval(this.interval);
   *     }
   *   }
   *   transform(value: any, args: any[] = []) {
   *     if (!parseInt(value, 10)) return null;
   *     if (typeof this.remainingTime !== 'number') {
   *       this.remainingTime = parseInt(value, 10);
   *     }
   *     if (!this.interval) {
   *       this.interval = setInterval(() => {
   *         this.remainingTime-=50;
   *         if (this.remainingTime <= 0) {
   *           this.remainingTime = 0;
   *           clearInterval(this.interval);
   *           delete this.interval;
   *         }
   *       }, 50);
   *     }
   *     return this.remainingTime;
   *   }
   * }
   * ```
   *
   * Invoking `{{ 10000 | countdown }}` would cause the value to be decremented by 50,
   * every 50ms, until it reaches 0.
   *
   * @stable
   */
  var OnDestroy = function () {
    function OnDestroy() {}
    return OnDestroy;
  }();
  exports.OnDestroy = OnDestroy;
  /**
   * Implement this interface to get notified when your directive's content has been fully
   * initialized.
   *
   * ### Example ([live demo](http://plnkr.co/edit/plamXUpsLQbIXpViZhUO?p=preview))
   *
   * ```typescript
   * @Component({
   *   selector: 'child-cmp',
   *   template: `{{where}} child`
   * })
   * class ChildComponent {
   *   @Input() where: string;
   * }
   *
   * @Component({
   *   selector: 'parent-cmp',
   *   template: `<ng-content></ng-content>`
   * })
   * class ParentComponent implements AfterContentInit {
   *   @ContentChild(ChildComponent) contentChild: ChildComponent;
   *
   *   constructor() {
   *     // contentChild is not initialized yet
   *     console.log(this.getMessage(this.contentChild));
   *   }
   *
   *   ngAfterContentInit() {
   *     // contentChild is updated after the content has been checked
   *     console.log('AfterContentInit: ' + this.getMessage(this.contentChild));
   *   }
   *
   *   private getMessage(cmp: ChildComponent): string {
   *     return cmp ? cmp.where + ' child' : 'no child';
   *   }
   * }
   *
   * @Component({
   *   selector: 'app',
   *   template: `
   *     <parent-cmp>
   *       <child-cmp where="content"></child-cmp>
   *     </parent-cmp>`,
   *   directives: [ParentComponent, ChildComponent]
   * })
   * export class App {
   * }
   *
   * bootstrap(App).catch(err => console.error(err));
   * ```
   * @stable
   */
  var AfterContentInit = function () {
    function AfterContentInit() {}
    return AfterContentInit;
  }();
  exports.AfterContentInit = AfterContentInit;
  /**
   * Implement this interface to get notified after every check of your directive's content.
   *
   * ### Example ([live demo](http://plnkr.co/edit/tGdrytNEKQnecIPkD7NU?p=preview))
   *
   * ```typescript
   * @Component({selector: 'child-cmp', template: `{{where}} child`})
   * class ChildComponent {
   *   @Input() where: string;
   * }
   *
   * @Component({selector: 'parent-cmp', template: `<ng-content></ng-content>`})
   * class ParentComponent implements AfterContentChecked {
   *   @ContentChild(ChildComponent) contentChild: ChildComponent;
   *
   *   constructor() {
   *     // contentChild is not initialized yet
   *     console.log(this.getMessage(this.contentChild));
   *   }
   *
   *   ngAfterContentChecked() {
   *     // contentChild is updated after the content has been checked
   *     console.log('AfterContentChecked: ' + this.getMessage(this.contentChild));
   *   }
   *
   *   private getMessage(cmp: ChildComponent): string {
   *     return cmp ? cmp.where + ' child' : 'no child';
   *   }
   * }
   *
   * @Component({
   *   selector: 'app',
   *   template: `
   *     <parent-cmp>
   *       <button (click)="hasContent = !hasContent">Toggle content child</button>
   *       <child-cmp *ngIf="hasContent" where="content"></child-cmp>
   *     </parent-cmp>`,
   *   directives: [NgIf, ParentComponent, ChildComponent]
   * })
   * export class App {
   *   hasContent = true;
   * }
   *
   * bootstrap(App).catch(err => console.error(err));
   * ```
   * @stable
   */
  var AfterContentChecked = function () {
    function AfterContentChecked() {}
    return AfterContentChecked;
  }();
  exports.AfterContentChecked = AfterContentChecked;
  /**
   * Implement this interface to get notified when your component's view has been fully initialized.
   *
   * ### Example ([live demo](http://plnkr.co/edit/LhTKVMEM0fkJgyp4CI1W?p=preview))
   *
   * ```typescript
   * @Component({selector: 'child-cmp', template: `{{where}} child`})
   * class ChildComponent {
   *   @Input() where: string;
   * }
   *
   * @Component({
   *   selector: 'parent-cmp',
   *   template: `<child-cmp where="view"></child-cmp>`,
   *   directives: [ChildComponent]
   * })
   * class ParentComponent implements AfterViewInit {
   *   @ViewChild(ChildComponent) viewChild: ChildComponent;
   *
   *   constructor() {
   *     // viewChild is not initialized yet
   *     console.log(this.getMessage(this.viewChild));
   *   }
   *
   *   ngAfterViewInit() {
   *     // viewChild is updated after the view has been initialized
   *     console.log('ngAfterViewInit: ' + this.getMessage(this.viewChild));
   *   }
   *
   *   private getMessage(cmp: ChildComponent): string {
   *     return cmp ? cmp.where + ' child' : 'no child';
   *   }
   * }
   *
   * @Component({
   *   selector: 'app',
   *   template: `<parent-cmp></parent-cmp>`,
   *   directives: [ParentComponent]
   * })
   * export class App {
   * }
   *
   * bootstrap(App).catch(err => console.error(err));
   * ```
   * @stable
   */
  var AfterViewInit = function () {
    function AfterViewInit() {}
    return AfterViewInit;
  }();
  exports.AfterViewInit = AfterViewInit;
  /**
   * Implement this interface to get notified after every check of your component's view.
   *
   * ### Example ([live demo](http://plnkr.co/edit/0qDGHcPQkc25CXhTNzKU?p=preview))
   *
   * ```typescript
   * @Component({selector: 'child-cmp', template: `{{where}} child`})
   * class ChildComponent {
   *   @Input() where: string;
   * }
   *
   * @Component({
   *   selector: 'parent-cmp',
   *   template: `
   *     <button (click)="showView = !showView">Toggle view child</button>
   *     <child-cmp *ngIf="showView" where="view"></child-cmp>`,
   *   directives: [NgIf, ChildComponent]
   * })
   * class ParentComponent implements AfterViewChecked {
   *   @ViewChild(ChildComponent) viewChild: ChildComponent;
   *   showView = true;
   *
   *   constructor() {
   *     // viewChild is not initialized yet
   *     console.log(this.getMessage(this.viewChild));
   *   }
   *
   *   ngAfterViewChecked() {
   *     // viewChild is updated after the view has been checked
   *     console.log('AfterViewChecked: ' + this.getMessage(this.viewChild));
   *   }
   *
   *   private getMessage(cmp: ChildComponent): string {
   *     return cmp ? cmp.where + ' child' : 'no child';
   *   }
   * }
   *
   * @Component({
   *   selector: 'app',
   *   template: `<parent-cmp></parent-cmp>`,
   *   directives: [ParentComponent]
   * })
   * export class App {
   * }
   *
   * bootstrap(App).catch(err => console.error(err));
   * ```
   * @stable
   */
  var AfterViewChecked = function () {
    function AfterViewChecked() {}
    return AfterViewChecked;
  }();
  exports.AfterViewChecked = AfterViewChecked;
  

  return module.exports;
});
System.registerDynamic("npm:@angular/core@2.0.0-rc.5/src/metadata/view.js", ["reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";
  /**
   * Defines template and style encapsulation options available for Component's {@link Component}.
   *
   * See {@link ViewMetadata#encapsulation}.
   * @stable
   */

  var define,
      global = this || self,
      GLOBAL = global;
  (function (ViewEncapsulation) {
    /**
     * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host
     * Element and pre-processing the style rules provided via
     * {@link ViewMetadata#styles} or {@link ViewMetadata#stylesUrls}, and adding the new Host Element
     * attribute to all selectors.
     *
     * This is the default option.
     */
    ViewEncapsulation[ViewEncapsulation["Emulated"] = 0] = "Emulated";
    /**
     * Use the native encapsulation mechanism of the renderer.
     *
     * For the DOM this means using [Shadow DOM](https://w3c.github.io/webcomponents/spec/shadow/) and
     * creating a ShadowRoot for Component's Host Element.
     */
    ViewEncapsulation[ViewEncapsulation["Native"] = 1] = "Native";
    /**
     * Don't provide any template or style encapsulation.
     */
    ViewEncapsulation[ViewEncapsulation["None"] = 2] = "None";
  })(exports.ViewEncapsulation || (exports.ViewEncapsulation = {}));
  var ViewEncapsulation = exports.ViewEncapsulation;
  exports.VIEW_ENCAPSULATION_VALUES = [ViewEncapsulation.Emulated, ViewEncapsulation.Native, ViewEncapsulation.None];
  /**
   * Metadata properties available for configuring Views.
   *
   * Each Angular component requires a single `@Component` and at least one `@View` annotation. The
   * `@View` annotation specifies the HTML template to use, and lists the directives that are active
   * within the template.
   *
   * When a component is instantiated, the template is loaded into the component's shadow root, and
   * the expressions and statements in the template are evaluated against the component.
   *
   * For details on the `@Component` annotation, see {@link ComponentMetadata}.
   *
   * ### Example
   *
   * ```
   * @Component({
   *   selector: 'greet',
   *   template: 'Hello {{name}}!',
   *   directives: [GreetUser, Bold]
   * })
   * class Greet {
   *   name: string;
   *
   *   constructor() {
   *     this.name = 'World';
   *   }
   * }
   * ```
   *
   * @deprecated Use ComponentMetadata instead.
   */
  var ViewMetadata = function () {
    function ViewMetadata(_a) {
      var _b = _a === void 0 ? {} : _a,
          templateUrl = _b.templateUrl,
          template = _b.template,
          directives = _b.directives,
          pipes = _b.pipes,
          encapsulation = _b.encapsulation,
          styles = _b.styles,
          styleUrls = _b.styleUrls,
          animations = _b.animations,
          interpolation = _b.interpolation;
      this.templateUrl = templateUrl;
      this.template = template;
      this.styleUrls = styleUrls;
      this.styles = styles;
      this.directives = directives;
      this.pipes = pipes;
      this.encapsulation = encapsulation;
      this.animations = animations;
      this.interpolation = interpolation;
    }
    return ViewMetadata;
  }();
  exports.ViewMetadata = ViewMetadata;
  

  return module.exports;
});
System.registerDynamic("npm:@angular/core@2.0.0-rc.5/src/profile/wtf_init.js", ["reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";
  /**
   * This is here because DART requires it. It is noop in JS.
   */

  var define,
      global = this || self,
      GLOBAL = global;
  function wtfInit() {}
  exports.wtfInit = wtfInit;
  

  return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/reflection/reflector.js', ['../facade/collection', '../facade/exceptions', '../facade/lang', './reflector_reader', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var collection_1 = $__require('../facade/collection');
    var exceptions_1 = $__require('../facade/exceptions');
    var lang_1 = $__require('../facade/lang');
    var reflector_reader_1 = $__require('./reflector_reader');
    /**
     * Reflective information about a symbol, including annotations, interfaces, and other metadata.
     */
    var ReflectionInfo = function () {
        function ReflectionInfo(annotations, parameters, factory, interfaces, propMetadata) {
            this.annotations = annotations;
            this.parameters = parameters;
            this.factory = factory;
            this.interfaces = interfaces;
            this.propMetadata = propMetadata;
        }
        return ReflectionInfo;
    }();
    exports.ReflectionInfo = ReflectionInfo;
    /**
     * Provides access to reflection data about symbols. Used internally by Angular
     * to power dependency injection and compilation.
     */
    var Reflector = function (_super) {
        __extends(Reflector, _super);
        function Reflector(reflectionCapabilities) {
            _super.call(this);
            /** @internal */
            this._injectableInfo = new collection_1.Map();
            /** @internal */
            this._getters = new collection_1.Map();
            /** @internal */
            this._setters = new collection_1.Map();
            /** @internal */
            this._methods = new collection_1.Map();
            this._usedKeys = null;
            this.reflectionCapabilities = reflectionCapabilities;
        }
        Reflector.prototype.updateCapabilities = function (caps) {
            this.reflectionCapabilities = caps;
        };
        Reflector.prototype.isReflectionEnabled = function () {
            return this.reflectionCapabilities.isReflectionEnabled();
        };
        /**
         * Causes `this` reflector to track keys used to access
         * {@link ReflectionInfo} objects.
         */
        Reflector.prototype.trackUsage = function () {
            this._usedKeys = new collection_1.Set();
        };
        /**
         * Lists types for which reflection information was not requested since
         * {@link #trackUsage} was called. This list could later be audited as
         * potential dead code.
         */
        Reflector.prototype.listUnusedKeys = function () {
            var _this = this;
            if (this._usedKeys == null) {
                throw new exceptions_1.BaseException('Usage tracking is disabled');
            }
            var allTypes = collection_1.MapWrapper.keys(this._injectableInfo);
            return allTypes.filter(function (key) {
                return !collection_1.SetWrapper.has(_this._usedKeys, key);
            });
        };
        Reflector.prototype.registerFunction = function (func, funcInfo) {
            this._injectableInfo.set(func, funcInfo);
        };
        Reflector.prototype.registerType = function (type, typeInfo) {
            this._injectableInfo.set(type, typeInfo);
        };
        Reflector.prototype.registerGetters = function (getters) {
            _mergeMaps(this._getters, getters);
        };
        Reflector.prototype.registerSetters = function (setters) {
            _mergeMaps(this._setters, setters);
        };
        Reflector.prototype.registerMethods = function (methods) {
            _mergeMaps(this._methods, methods);
        };
        Reflector.prototype.factory = function (type) {
            if (this._containsReflectionInfo(type)) {
                var res = this._getReflectionInfo(type).factory;
                return lang_1.isPresent(res) ? res : null;
            } else {
                return this.reflectionCapabilities.factory(type);
            }
        };
        Reflector.prototype.parameters = function (typeOrFunc) {
            if (this._injectableInfo.has(typeOrFunc)) {
                var res = this._getReflectionInfo(typeOrFunc).parameters;
                return lang_1.isPresent(res) ? res : [];
            } else {
                return this.reflectionCapabilities.parameters(typeOrFunc);
            }
        };
        Reflector.prototype.annotations = function (typeOrFunc) {
            if (this._injectableInfo.has(typeOrFunc)) {
                var res = this._getReflectionInfo(typeOrFunc).annotations;
                return lang_1.isPresent(res) ? res : [];
            } else {
                return this.reflectionCapabilities.annotations(typeOrFunc);
            }
        };
        Reflector.prototype.propMetadata = function (typeOrFunc) {
            if (this._injectableInfo.has(typeOrFunc)) {
                var res = this._getReflectionInfo(typeOrFunc).propMetadata;
                return lang_1.isPresent(res) ? res : {};
            } else {
                return this.reflectionCapabilities.propMetadata(typeOrFunc);
            }
        };
        Reflector.prototype.interfaces = function (type) {
            if (this._injectableInfo.has(type)) {
                var res = this._getReflectionInfo(type).interfaces;
                return lang_1.isPresent(res) ? res : [];
            } else {
                return this.reflectionCapabilities.interfaces(type);
            }
        };
        Reflector.prototype.hasLifecycleHook = function (type, lcInterface, lcProperty) {
            var interfaces = this.interfaces(type);
            if (interfaces.indexOf(lcInterface) !== -1) {
                return true;
            } else {
                return this.reflectionCapabilities.hasLifecycleHook(type, lcInterface, lcProperty);
            }
        };
        Reflector.prototype.getter = function (name) {
            if (this._getters.has(name)) {
                return this._getters.get(name);
            } else {
                return this.reflectionCapabilities.getter(name);
            }
        };
        Reflector.prototype.setter = function (name) {
            if (this._setters.has(name)) {
                return this._setters.get(name);
            } else {
                return this.reflectionCapabilities.setter(name);
            }
        };
        Reflector.prototype.method = function (name) {
            if (this._methods.has(name)) {
                return this._methods.get(name);
            } else {
                return this.reflectionCapabilities.method(name);
            }
        };
        /** @internal */
        Reflector.prototype._getReflectionInfo = function (typeOrFunc) {
            if (lang_1.isPresent(this._usedKeys)) {
                this._usedKeys.add(typeOrFunc);
            }
            return this._injectableInfo.get(typeOrFunc);
        };
        /** @internal */
        Reflector.prototype._containsReflectionInfo = function (typeOrFunc) {
            return this._injectableInfo.has(typeOrFunc);
        };
        Reflector.prototype.importUri = function (type) {
            return this.reflectionCapabilities.importUri(type);
        };
        return Reflector;
    }(reflector_reader_1.ReflectorReader);
    exports.Reflector = Reflector;
    function _mergeMaps(target, config) {
        collection_1.StringMapWrapper.forEach(config, function (v, k) {
            return target.set(k, v);
        });
    }
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/reflection/reflection.js', ['./reflection_capabilities', './reflector', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var reflection_capabilities_1 = $__require('./reflection_capabilities');
  var reflector_1 = $__require('./reflector');
  var reflector_2 = $__require('./reflector');
  exports.ReflectionInfo = reflector_2.ReflectionInfo;
  exports.Reflector = reflector_2.Reflector;
  /**
   * The {@link Reflector} used internally in Angular to access metadata
   * about symbols.
   */
  exports.reflector = new reflector_1.Reflector(new reflection_capabilities_1.ReflectionCapabilities());
  

  return module.exports;
});
System.registerDynamic("npm:@angular/core@2.0.0-rc.5/src/reflection/reflection_capabilities.js", ["../facade/lang", "reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var lang_1 = $__require("../facade/lang");
    var ReflectionCapabilities = function () {
        function ReflectionCapabilities(reflect) {
            this._reflect = lang_1.isPresent(reflect) ? reflect : lang_1.global.Reflect;
        }
        ReflectionCapabilities.prototype.isReflectionEnabled = function () {
            return true;
        };
        ReflectionCapabilities.prototype.factory = function (t) {
            switch (t.length) {
                case 0:
                    return function () {
                        return new t();
                    };
                case 1:
                    return function (a1) {
                        return new t(a1);
                    };
                case 2:
                    return function (a1, a2) {
                        return new t(a1, a2);
                    };
                case 3:
                    return function (a1, a2, a3) {
                        return new t(a1, a2, a3);
                    };
                case 4:
                    return function (a1, a2, a3, a4) {
                        return new t(a1, a2, a3, a4);
                    };
                case 5:
                    return function (a1, a2, a3, a4, a5) {
                        return new t(a1, a2, a3, a4, a5);
                    };
                case 6:
                    return function (a1, a2, a3, a4, a5, a6) {
                        return new t(a1, a2, a3, a4, a5, a6);
                    };
                case 7:
                    return function (a1, a2, a3, a4, a5, a6, a7) {
                        return new t(a1, a2, a3, a4, a5, a6, a7);
                    };
                case 8:
                    return function (a1, a2, a3, a4, a5, a6, a7, a8) {
                        return new t(a1, a2, a3, a4, a5, a6, a7, a8);
                    };
                case 9:
                    return function (a1, a2, a3, a4, a5, a6, a7, a8, a9) {
                        return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9);
                    };
                case 10:
                    return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) {
                        return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
                    };
                case 11:
                    return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) {
                        return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
                    };
                case 12:
                    return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12) {
                        return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                    };
                case 13:
                    return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13) {
                        return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
                    };
                case 14:
                    return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) {
                        return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
                    };
                case 15:
                    return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) {
                        return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
                    };
                case 16:
                    return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16) {
                        return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
                    };
                case 17:
                    return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17) {
                        return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
                    };
                case 18:
                    return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18) {
                        return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
                    };
                case 19:
                    return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19) {
                        return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
                    };
                case 20:
                    return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20) {
                        return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
                    };
            }
            ;
            throw new Error("Cannot create a factory for '" + lang_1.stringify(t) + "' because its constructor has more than 20 arguments");
        };
        /** @internal */
        ReflectionCapabilities.prototype._zipTypesAndAnnotations = function (paramTypes /** TODO #9100 */, paramAnnotations /** TODO #9100 */) {
            var result;
            if (typeof paramTypes === 'undefined') {
                result = new Array(paramAnnotations.length);
            } else {
                result = new Array(paramTypes.length);
            }
            for (var i = 0; i < result.length; i++) {
                // TS outputs Object for parameters without types, while Traceur omits
                // the annotations. For now we preserve the Traceur behavior to aid
                // migration, but this can be revisited.
                if (typeof paramTypes === 'undefined') {
                    result[i] = [];
                } else if (paramTypes[i] != Object) {
                    result[i] = [paramTypes[i]];
                } else {
                    result[i] = [];
                }
                if (lang_1.isPresent(paramAnnotations) && lang_1.isPresent(paramAnnotations[i])) {
                    result[i] = result[i].concat(paramAnnotations[i]);
                }
            }
            return result;
        };
        ReflectionCapabilities.prototype.parameters = function (typeOrFunc) {
            // Prefer the direct API.
            if (lang_1.isPresent(typeOrFunc.parameters)) {
                return typeOrFunc.parameters;
            }
            // API of tsickle for lowering decorators to properties on the class.
            if (lang_1.isPresent(typeOrFunc.ctorParameters)) {
                var ctorParameters = typeOrFunc.ctorParameters;
                var paramTypes_1 = ctorParameters.map(function (ctorParam /** TODO #9100 */) {
                    return ctorParam && ctorParam.type;
                });
                var paramAnnotations_1 = ctorParameters.map(function (ctorParam /** TODO #9100 */) {
                    return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);
                });
                return this._zipTypesAndAnnotations(paramTypes_1, paramAnnotations_1);
            }
            // API for metadata created by invoking the decorators.
            if (lang_1.isPresent(this._reflect) && lang_1.isPresent(this._reflect.getMetadata)) {
                var paramAnnotations = this._reflect.getMetadata('parameters', typeOrFunc);
                var paramTypes = this._reflect.getMetadata('design:paramtypes', typeOrFunc);
                if (lang_1.isPresent(paramTypes) || lang_1.isPresent(paramAnnotations)) {
                    return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
                }
            }
            // The array has to be filled with `undefined` because holes would be skipped by `some`
            var parameters = new Array(typeOrFunc.length);
            parameters.fill(undefined);
            return parameters;
        };
        ReflectionCapabilities.prototype.annotations = function (typeOrFunc) {
            // Prefer the direct API.
            if (lang_1.isPresent(typeOrFunc.annotations)) {
                var annotations = typeOrFunc.annotations;
                if (lang_1.isFunction(annotations) && annotations.annotations) {
                    annotations = annotations.annotations;
                }
                return annotations;
            }
            // API of tsickle for lowering decorators to properties on the class.
            if (lang_1.isPresent(typeOrFunc.decorators)) {
                return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);
            }
            // API for metadata created by invoking the decorators.
            if (lang_1.isPresent(this._reflect) && lang_1.isPresent(this._reflect.getMetadata)) {
                var annotations = this._reflect.getMetadata('annotations', typeOrFunc);
                if (lang_1.isPresent(annotations)) return annotations;
            }
            return [];
        };
        ReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {
            // Prefer the direct API.
            if (lang_1.isPresent(typeOrFunc.propMetadata)) {
                var propMetadata = typeOrFunc.propMetadata;
                if (lang_1.isFunction(propMetadata) && propMetadata.propMetadata) {
                    propMetadata = propMetadata.propMetadata;
                }
                return propMetadata;
            }
            // API of tsickle for lowering decorators to properties on the class.
            if (lang_1.isPresent(typeOrFunc.propDecorators)) {
                var propDecorators_1 = typeOrFunc.propDecorators;
                var propMetadata_1 = {};
                Object.keys(propDecorators_1).forEach(function (prop) {
                    propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);
                });
                return propMetadata_1;
            }
            // API for metadata created by invoking the decorators.
            if (lang_1.isPresent(this._reflect) && lang_1.isPresent(this._reflect.getMetadata)) {
                var propMetadata = this._reflect.getMetadata('propMetadata', typeOrFunc);
                if (lang_1.isPresent(propMetadata)) return propMetadata;
            }
            return {};
        };
        // Note: JavaScript does not support to query for interfaces during runtime.
        // However, we can't throw here as the reflector will always call this method
        // when asked for a lifecycle interface as this is what we check in Dart.
        ReflectionCapabilities.prototype.interfaces = function (type) {
            return [];
        };
        ReflectionCapabilities.prototype.hasLifecycleHook = function (type, lcInterface, lcProperty) {
            if (!(type instanceof lang_1.Type)) return false;
            var proto = type.prototype;
            return !!proto[lcProperty];
        };
        ReflectionCapabilities.prototype.getter = function (name) {
            return new Function('o', 'return o.' + name + ';');
        };
        ReflectionCapabilities.prototype.setter = function (name) {
            return new Function('o', 'v', 'return o.' + name + ' = v;');
        };
        ReflectionCapabilities.prototype.method = function (name) {
            var functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);";
            return new Function('o', 'args', functionBody);
        };
        // There is not a concept of import uri in Js, but this is useful in developing Dart applications.
        ReflectionCapabilities.prototype.importUri = function (type) {
            // StaticSymbol
            if (typeof type === 'object' && type['filePath']) {
                return type['filePath'];
            }
            // Runtime type
            return "./" + lang_1.stringify(type);
        };
        return ReflectionCapabilities;
    }();
    exports.ReflectionCapabilities = ReflectionCapabilities;
    function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
        if (!decoratorInvocations) {
            return [];
        }
        return decoratorInvocations.map(function (decoratorInvocation) {
            var decoratorType = decoratorInvocation.type;
            var annotationCls = decoratorType.annotationCls;
            var annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
            var annotation = Object.create(annotationCls.prototype);
            annotationCls.apply(annotation, annotationArgs);
            return annotation;
        });
    }
    

    return module.exports;
});
System.registerDynamic("npm:@angular/core@2.0.0-rc.5/src/reflection/reflector_reader.js", ["reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";
  /**
   * Provides read-only access to reflection data about symbols. Used internally by Angular
   * to power dependency injection and compilation.
   */

  var define,
      global = this || self,
      GLOBAL = global;
  var ReflectorReader = function () {
    function ReflectorReader() {}
    return ReflectorReader;
  }();
  exports.ReflectorReader = ReflectorReader;
  

  return module.exports;
});
System.registerDynamic("npm:@angular/core@2.0.0-rc.5/src/render/api.js", ["../facade/exceptions", "reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var exceptions_1 = $__require("../facade/exceptions");
    /**
     * @experimental
     */
    // TODO (matsko): add typing for the animation function
    var RenderComponentType = function () {
        function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {
            this.id = id;
            this.templateUrl = templateUrl;
            this.slotCount = slotCount;
            this.encapsulation = encapsulation;
            this.styles = styles;
            this.animations = animations;
        }
        return RenderComponentType;
    }();
    exports.RenderComponentType = RenderComponentType;
    var RenderDebugInfo = function () {
        function RenderDebugInfo() {}
        Object.defineProperty(RenderDebugInfo.prototype, "injector", {
            get: function () {
                return exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderDebugInfo.prototype, "component", {
            get: function () {
                return exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderDebugInfo.prototype, "providerTokens", {
            get: function () {
                return exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderDebugInfo.prototype, "references", {
            get: function () {
                return exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderDebugInfo.prototype, "context", {
            get: function () {
                return exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderDebugInfo.prototype, "source", {
            get: function () {
                return exceptions_1.unimplemented();
            },
            enumerable: true,
            configurable: true
        });
        return RenderDebugInfo;
    }();
    exports.RenderDebugInfo = RenderDebugInfo;
    /**
     * @experimental
     */
    var Renderer = function () {
        function Renderer() {}
        return Renderer;
    }();
    exports.Renderer = Renderer;
    /**
     * Injectable service that provides a low-level interface for modifying the UI.
     *
     * Use this service to bypass Angular's templating and make custom UI changes that can't be
     * expressed declaratively. For example if you need to set a property or an attribute whose name is
     * not statically known, use {@link #setElementProperty} or {@link #setElementAttribute}
     * respectively.
     *
     * If you are implementing a custom renderer, you must implement this interface.
     *
     * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.
     * @experimental
     */
    var RootRenderer = function () {
        function RootRenderer() {}
        return RootRenderer;
    }();
    exports.RootRenderer = RootRenderer;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/util/decorators.js', ['../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var lang_1 = $__require('../facade/lang');
    var _nextClassId = 0;
    function extractAnnotation(annotation) {
        if (lang_1.isFunction(annotation) && annotation.hasOwnProperty('annotation')) {
            // it is a decorator, extract annotation
            annotation = annotation.annotation;
        }
        return annotation;
    }
    function applyParams(fnOrArray, key) {
        if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function || fnOrArray === Number || fnOrArray === Array) {
            throw new Error("Can not use native " + lang_1.stringify(fnOrArray) + " as constructor");
        }
        if (lang_1.isFunction(fnOrArray)) {
            return fnOrArray;
        } else if (fnOrArray instanceof Array) {
            var annotations = fnOrArray;
            var annoLength = annotations.length - 1;
            var fn = fnOrArray[annoLength];
            if (!lang_1.isFunction(fn)) {
                throw new Error("Last position of Class method array must be Function in key " + key + " was '" + lang_1.stringify(fn) + "'");
            }
            if (annoLength != fn.length) {
                throw new Error("Number of annotations (" + annoLength + ") does not match number of arguments (" + fn.length + ") in the function: " + lang_1.stringify(fn));
            }
            var paramsAnnotations = [];
            for (var i = 0, ii = annotations.length - 1; i < ii; i++) {
                var paramAnnotations = [];
                paramsAnnotations.push(paramAnnotations);
                var annotation = annotations[i];
                if (annotation instanceof Array) {
                    for (var j = 0; j < annotation.length; j++) {
                        paramAnnotations.push(extractAnnotation(annotation[j]));
                    }
                } else if (lang_1.isFunction(annotation)) {
                    paramAnnotations.push(extractAnnotation(annotation));
                } else {
                    paramAnnotations.push(annotation);
                }
            }
            Reflect.defineMetadata('parameters', paramsAnnotations, fn);
            return fn;
        } else {
            throw new Error("Only Function or Array is supported in Class definition for key '" + key + "' is '" + lang_1.stringify(fnOrArray) + "'");
        }
    }
    /**
     * Provides a way for expressing ES6 classes with parameter annotations in ES5.
     *
     * ## Basic Example
     *
     * ```
     * var Greeter = ng.Class({
     *   constructor: function(name) {
     *     this.name = name;
     *   },
     *
     *   greet: function() {
     *     alert('Hello ' + this.name + '!');
     *   }
     * });
     * ```
     *
     * is equivalent to ES6:
     *
     * ```
     * class Greeter {
     *   constructor(name) {
     *     this.name = name;
     *   }
     *
     *   greet() {
     *     alert('Hello ' + this.name + '!');
     *   }
     * }
     * ```
     *
     * or equivalent to ES5:
     *
     * ```
     * var Greeter = function (name) {
     *   this.name = name;
     * }
     *
     * Greeter.prototype.greet = function () {
     *   alert('Hello ' + this.name + '!');
     * }
     * ```
     *
     * ### Example with parameter annotations
     *
     * ```
     * var MyService = ng.Class({
     *   constructor: [String, [new Query(), QueryList], function(name, queryList) {
     *     ...
     *   }]
     * });
     * ```
     *
     * is equivalent to ES6:
     *
     * ```
     * class MyService {
     *   constructor(name: string, @Query() queryList: QueryList) {
     *     ...
     *   }
     * }
     * ```
     *
     * ### Example with inheritance
     *
     * ```
     * var Shape = ng.Class({
     *   constructor: (color) {
     *     this.color = color;
     *   }
     * });
     *
     * var Square = ng.Class({
     *   extends: Shape,
     *   constructor: function(color, size) {
     *     Shape.call(this, color);
     *     this.size = size;
     *   }
     * });
     * ```
     * @stable
     */
    function Class(clsDef) {
        var constructor = applyParams(clsDef.hasOwnProperty('constructor') ? clsDef.constructor : undefined, 'constructor');
        var proto = constructor.prototype;
        if (clsDef.hasOwnProperty('extends')) {
            if (lang_1.isFunction(clsDef.extends)) {
                constructor.prototype = proto = Object.create(clsDef.extends.prototype);
            } else {
                throw new Error("Class definition 'extends' property must be a constructor function was: " + lang_1.stringify(clsDef.extends));
            }
        }
        for (var key in clsDef) {
            if (key != 'extends' && key != 'prototype' && clsDef.hasOwnProperty(key)) {
                proto[key] = applyParams(clsDef[key], key);
            }
        }
        if (this && this.annotations instanceof Array) {
            Reflect.defineMetadata('annotations', this.annotations, constructor);
        }
        if (!constructor['name']) {
            constructor['overriddenName'] = "class" + _nextClassId++;
        }
        return constructor;
    }
    exports.Class = Class;
    var Reflect = lang_1.global.Reflect;
    // Throw statement at top-level is disallowed by closure compiler in ES6 input.
    // Wrap in an IIFE as a work-around.
    (function checkReflect() {
        if (!(Reflect && Reflect.getMetadata)) {
            throw 'reflect-metadata shim is required when using class decorators';
        }
    })();
    function makeDecorator(annotationCls, chainFn) {
        if (chainFn === void 0) {
            chainFn = null;
        }
        function DecoratorFactory(objOrType) {
            var annotationInstance = new annotationCls(objOrType);
            if (this instanceof annotationCls) {
                return annotationInstance;
            } else {
                var chainAnnotation = lang_1.isFunction(this) && this.annotations instanceof Array ? this.annotations : [];
                chainAnnotation.push(annotationInstance);
                var TypeDecorator = function TypeDecorator(cls) {
                    var annotations = Reflect.getOwnMetadata('annotations', cls) || [];
                    annotations.push(annotationInstance);
                    Reflect.defineMetadata('annotations', annotations, cls);
                    return cls;
                };
                TypeDecorator.annotations = chainAnnotation;
                TypeDecorator.Class = Class;
                if (chainFn) chainFn(TypeDecorator);
                return TypeDecorator;
            }
        }
        DecoratorFactory.prototype = Object.create(annotationCls.prototype);
        DecoratorFactory.annotationCls = annotationCls;
        return DecoratorFactory;
    }
    exports.makeDecorator = makeDecorator;
    function makeParamDecorator(annotationCls) {
        function ParamDecoratorFactory() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var annotationInstance = Object.create(annotationCls.prototype);
            annotationCls.apply(annotationInstance, args);
            if (this instanceof annotationCls) {
                return annotationInstance;
            } else {
                ParamDecorator.annotation = annotationInstance;
                return ParamDecorator;
            }
            function ParamDecorator(cls, unusedKey, index) {
                var parameters = Reflect.getMetadata('parameters', cls) || [];
                // there might be gaps if some in between parameters do not have annotations.
                // we pad with nulls.
                while (parameters.length <= index) {
                    parameters.push(null);
                }
                parameters[index] = parameters[index] || [];
                var annotationsForParam = parameters[index];
                annotationsForParam.push(annotationInstance);
                Reflect.defineMetadata('parameters', parameters, cls);
                return cls;
            }
        }
        ParamDecoratorFactory.prototype = Object.create(annotationCls.prototype);
        ParamDecoratorFactory.annotationCls = annotationCls;
        return ParamDecoratorFactory;
    }
    exports.makeParamDecorator = makeParamDecorator;
    function makePropDecorator(annotationCls) {
        function PropDecoratorFactory() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var decoratorInstance = Object.create(annotationCls.prototype);
            annotationCls.apply(decoratorInstance, args);
            if (this instanceof annotationCls) {
                return decoratorInstance;
            } else {
                return function PropDecorator(target, name) {
                    var meta = Reflect.getOwnMetadata('propMetadata', target.constructor) || {};
                    meta[name] = meta[name] || [];
                    meta[name].unshift(decoratorInstance);
                    Reflect.defineMetadata('propMetadata', meta, target.constructor);
                };
            }
        }
        PropDecoratorFactory.prototype = Object.create(annotationCls.prototype);
        PropDecoratorFactory.annotationCls = annotationCls;
        return PropDecoratorFactory;
    }
    exports.makePropDecorator = makePropDecorator;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/private_export.js', ['./src/animation/animation_constants', './src/animation/animation_group_player', './src/animation/animation_keyframe', './src/animation/animation_player', './src/animation/animation_sequence_player', './src/animation/animation_style_util', './src/animation/animation_styles', './src/change_detection/change_detection_util', './src/change_detection/constants', './src/console', './src/debug/debug_renderer', './src/di/provider_util', './src/di/reflective_provider', './src/linker/component_factory_resolver', './src/linker/debug_context', './src/linker/element', './src/linker/ng_module_factory', './src/linker/template_ref', './src/linker/view', './src/linker/view_type', './src/linker/view_utils', './src/metadata/lifecycle_hooks', './src/metadata/view', './src/profile/wtf_init', './src/reflection/reflection', './src/reflection/reflection_capabilities', './src/reflection/reflector_reader', './src/render/api', './src/util/decorators'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var animation_constants_1 = $__require('./src/animation/animation_constants');
    var animation_group_player_1 = $__require('./src/animation/animation_group_player');
    var animation_keyframe_1 = $__require('./src/animation/animation_keyframe');
    var animation_player_1 = $__require('./src/animation/animation_player');
    var animation_sequence_player_1 = $__require('./src/animation/animation_sequence_player');
    var animationUtils = $__require('./src/animation/animation_style_util');
    var animation_styles_1 = $__require('./src/animation/animation_styles');
    var change_detection_util = $__require('./src/change_detection/change_detection_util');
    var constants = $__require('./src/change_detection/constants');
    var console = $__require('./src/console');
    var debug = $__require('./src/debug/debug_renderer');
    var provider_util = $__require('./src/di/provider_util');
    var reflective_provider = $__require('./src/di/reflective_provider');
    var component_factory_resolver = $__require('./src/linker/component_factory_resolver');
    var debug_context = $__require('./src/linker/debug_context');
    var element = $__require('./src/linker/element');
    var ng_module_factory = $__require('./src/linker/ng_module_factory');
    var template_ref = $__require('./src/linker/template_ref');
    var view = $__require('./src/linker/view');
    var view_type = $__require('./src/linker/view_type');
    var view_utils = $__require('./src/linker/view_utils');
    var lifecycle_hooks = $__require('./src/metadata/lifecycle_hooks');
    var metadata_view = $__require('./src/metadata/view');
    var wtf_init = $__require('./src/profile/wtf_init');
    var reflection = $__require('./src/reflection/reflection');
    var reflection_capabilities = $__require('./src/reflection/reflection_capabilities');
    var reflector_reader = $__require('./src/reflection/reflector_reader');
    var api = $__require('./src/render/api');
    var decorators = $__require('./src/util/decorators');
    exports.__core_private__ = {
        isDefaultChangeDetectionStrategy: constants.isDefaultChangeDetectionStrategy,
        ChangeDetectorStatus: constants.ChangeDetectorStatus,
        CHANGE_DETECTION_STRATEGY_VALUES: constants.CHANGE_DETECTION_STRATEGY_VALUES,
        constructDependencies: reflective_provider.constructDependencies,
        LifecycleHooks: lifecycle_hooks.LifecycleHooks,
        LIFECYCLE_HOOKS_VALUES: lifecycle_hooks.LIFECYCLE_HOOKS_VALUES,
        ReflectorReader: reflector_reader.ReflectorReader,
        CodegenComponentFactoryResolver: component_factory_resolver.CodegenComponentFactoryResolver,
        AppElement: element.AppElement,
        AppView: view.AppView,
        DebugAppView: view.DebugAppView,
        NgModuleInjector: ng_module_factory.NgModuleInjector,
        ViewType: view_type.ViewType,
        MAX_INTERPOLATION_VALUES: view_utils.MAX_INTERPOLATION_VALUES,
        checkBinding: view_utils.checkBinding,
        flattenNestedViewRenderNodes: view_utils.flattenNestedViewRenderNodes,
        interpolate: view_utils.interpolate,
        ViewUtils: view_utils.ViewUtils,
        VIEW_ENCAPSULATION_VALUES: metadata_view.VIEW_ENCAPSULATION_VALUES,
        DebugContext: debug_context.DebugContext,
        StaticNodeDebugInfo: debug_context.StaticNodeDebugInfo,
        devModeEqual: change_detection_util.devModeEqual,
        UNINITIALIZED: change_detection_util.UNINITIALIZED,
        ValueUnwrapper: change_detection_util.ValueUnwrapper,
        RenderDebugInfo: api.RenderDebugInfo,
        TemplateRef_: template_ref.TemplateRef_,
        wtfInit: wtf_init.wtfInit,
        ReflectionCapabilities: reflection_capabilities.ReflectionCapabilities,
        makeDecorator: decorators.makeDecorator,
        DebugDomRootRenderer: debug.DebugDomRootRenderer,
        createProvider: provider_util.createProvider,
        isProviderLiteral: provider_util.isProviderLiteral,
        EMPTY_ARRAY: view_utils.EMPTY_ARRAY,
        EMPTY_MAP: view_utils.EMPTY_MAP,
        pureProxy1: view_utils.pureProxy1,
        pureProxy2: view_utils.pureProxy2,
        pureProxy3: view_utils.pureProxy3,
        pureProxy4: view_utils.pureProxy4,
        pureProxy5: view_utils.pureProxy5,
        pureProxy6: view_utils.pureProxy6,
        pureProxy7: view_utils.pureProxy7,
        pureProxy8: view_utils.pureProxy8,
        pureProxy9: view_utils.pureProxy9,
        pureProxy10: view_utils.pureProxy10,
        castByValue: view_utils.castByValue,
        Console: console.Console,
        reflector: reflection.reflector,
        Reflector: reflection.Reflector,
        NoOpAnimationPlayer: animation_player_1.NoOpAnimationPlayer,
        AnimationPlayer: animation_player_1.AnimationPlayer,
        AnimationSequencePlayer: animation_sequence_player_1.AnimationSequencePlayer,
        AnimationGroupPlayer: animation_group_player_1.AnimationGroupPlayer,
        AnimationKeyframe: animation_keyframe_1.AnimationKeyframe,
        prepareFinalAnimationStyles: animationUtils.prepareFinalAnimationStyles,
        balanceAnimationKeyframes: animationUtils.balanceAnimationKeyframes,
        flattenStyles: animationUtils.flattenStyles,
        clearStyles: animationUtils.clearStyles,
        renderStyles: animationUtils.renderStyles,
        collectAndResolveStyles: animationUtils.collectAndResolveStyles,
        AnimationStyles: animation_styles_1.AnimationStyles,
        ANY_STATE: animation_constants_1.ANY_STATE,
        DEFAULT_STATE: animation_constants_1.DEFAULT_STATE,
        EMPTY_STATE: animation_constants_1.EMPTY_STATE,
        FILL_STYLE_FLAG: animation_constants_1.FILL_STYLE_FLAG
    };
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/animation/metadata.js', ['../facade/exceptions', '../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var exceptions_1 = $__require('../facade/exceptions');
    var lang_1 = $__require('../facade/lang');
    /**
     * @experimental Animation support is experimental.
     */
    exports.AUTO_STYLE = '*';
    /**
     * Metadata representing the entry of animations.
     * Instances of this class are provided via the animation DSL when the {@link trigger trigger
     * animation function} is called.
     *
     * @experimental Animation support is experimental.
     */
    var AnimationEntryMetadata = function () {
        function AnimationEntryMetadata(name, definitions) {
            this.name = name;
            this.definitions = definitions;
        }
        return AnimationEntryMetadata;
    }();
    exports.AnimationEntryMetadata = AnimationEntryMetadata;
    /**
     * @experimental Animation support is experimental.
     */
    var AnimationStateMetadata = function () {
        function AnimationStateMetadata() {}
        return AnimationStateMetadata;
    }();
    exports.AnimationStateMetadata = AnimationStateMetadata;
    /**
     * Metadata representing the entry of animations.
     * Instances of this class are provided via the animation DSL when the {@link state state animation
     * function} is called.
     *
     * @experimental Animation support is experimental.
     */
    var AnimationStateDeclarationMetadata = function (_super) {
        __extends(AnimationStateDeclarationMetadata, _super);
        function AnimationStateDeclarationMetadata(stateNameExpr, styles) {
            _super.call(this);
            this.stateNameExpr = stateNameExpr;
            this.styles = styles;
        }
        return AnimationStateDeclarationMetadata;
    }(AnimationStateMetadata);
    exports.AnimationStateDeclarationMetadata = AnimationStateDeclarationMetadata;
    /**
     * Metadata representing the entry of animations.
     * Instances of this class are provided via the animation DSL when the
     * {@link transition transition animation function} is called.
     *
     * @experimental Animation support is experimental.
     */
    var AnimationStateTransitionMetadata = function (_super) {
        __extends(AnimationStateTransitionMetadata, _super);
        function AnimationStateTransitionMetadata(stateChangeExpr, steps) {
            _super.call(this);
            this.stateChangeExpr = stateChangeExpr;
            this.steps = steps;
        }
        return AnimationStateTransitionMetadata;
    }(AnimationStateMetadata);
    exports.AnimationStateTransitionMetadata = AnimationStateTransitionMetadata;
    /**
     * @experimental Animation support is experimental.
     */
    var AnimationMetadata = function () {
        function AnimationMetadata() {}
        return AnimationMetadata;
    }();
    exports.AnimationMetadata = AnimationMetadata;
    /**
     * Metadata representing the entry of animations.
     * Instances of this class are provided via the animation DSL when the {@link keyframes keyframes
     * animation function} is called.
     *
     * @experimental Animation support is experimental.
     */
    var AnimationKeyframesSequenceMetadata = function (_super) {
        __extends(AnimationKeyframesSequenceMetadata, _super);
        function AnimationKeyframesSequenceMetadata(steps) {
            _super.call(this);
            this.steps = steps;
        }
        return AnimationKeyframesSequenceMetadata;
    }(AnimationMetadata);
    exports.AnimationKeyframesSequenceMetadata = AnimationKeyframesSequenceMetadata;
    /**
     * Metadata representing the entry of animations.
     * Instances of this class are provided via the animation DSL when the {@link style style animation
     * function} is called.
     *
     * @experimental Animation support is experimental.
     */
    var AnimationStyleMetadata = function (_super) {
        __extends(AnimationStyleMetadata, _super);
        function AnimationStyleMetadata(styles, offset) {
            if (offset === void 0) {
                offset = null;
            }
            _super.call(this);
            this.styles = styles;
            this.offset = offset;
        }
        return AnimationStyleMetadata;
    }(AnimationMetadata);
    exports.AnimationStyleMetadata = AnimationStyleMetadata;
    /**
     * Metadata representing the entry of animations.
     * Instances of this class are provided via the animation DSL when the {@link animate animate
     * animation function} is called.
     *
     * @experimental Animation support is experimental.
     */
    var AnimationAnimateMetadata = function (_super) {
        __extends(AnimationAnimateMetadata, _super);
        function AnimationAnimateMetadata(timings, styles) {
            _super.call(this);
            this.timings = timings;
            this.styles = styles;
        }
        return AnimationAnimateMetadata;
    }(AnimationMetadata);
    exports.AnimationAnimateMetadata = AnimationAnimateMetadata;
    /**
     * @experimental Animation support is experimental.
     */
    var AnimationWithStepsMetadata = function (_super) {
        __extends(AnimationWithStepsMetadata, _super);
        function AnimationWithStepsMetadata() {
            _super.call(this);
        }
        Object.defineProperty(AnimationWithStepsMetadata.prototype, "steps", {
            get: function () {
                throw new exceptions_1.BaseException('NOT IMPLEMENTED: Base Class');
            },
            enumerable: true,
            configurable: true
        });
        return AnimationWithStepsMetadata;
    }(AnimationMetadata);
    exports.AnimationWithStepsMetadata = AnimationWithStepsMetadata;
    /**
     * Metadata representing the entry of animations.
     * Instances of this class are provided via the animation DSL when the {@link sequence sequence
     * animation function} is called.
     *
     * @experimental Animation support is experimental.
     */
    var AnimationSequenceMetadata = function (_super) {
        __extends(AnimationSequenceMetadata, _super);
        function AnimationSequenceMetadata(_steps) {
            _super.call(this);
            this._steps = _steps;
        }
        Object.defineProperty(AnimationSequenceMetadata.prototype, "steps", {
            get: function () {
                return this._steps;
            },
            enumerable: true,
            configurable: true
        });
        return AnimationSequenceMetadata;
    }(AnimationWithStepsMetadata);
    exports.AnimationSequenceMetadata = AnimationSequenceMetadata;
    /**
     * Metadata representing the entry of animations.
     * Instances of this class are provided via the animation DSL when the {@link group group animation
     * function} is called.
     *
     * @experimental Animation support is experimental.
     */
    var AnimationGroupMetadata = function (_super) {
        __extends(AnimationGroupMetadata, _super);
        function AnimationGroupMetadata(_steps) {
            _super.call(this);
            this._steps = _steps;
        }
        Object.defineProperty(AnimationGroupMetadata.prototype, "steps", {
            get: function () {
                return this._steps;
            },
            enumerable: true,
            configurable: true
        });
        return AnimationGroupMetadata;
    }(AnimationWithStepsMetadata);
    exports.AnimationGroupMetadata = AnimationGroupMetadata;
    /**
     * `animate` is an animation-specific function that is designed to be used inside of Angular2's
     * animation
     * DSL language. If this information is new, please navigate to the
     * {@link ComponentMetadata#animations-anchor component animations metadata
     * page} to gain a better understanding of how animations in Angular2 are used.
     *
     * `animate` specifies an animation step that will apply the provided `styles` data for a given
     * amount of
     * time based on the provided `timing` expression value. Calls to `animate` are expected to be
     * used within {@link sequence an animation sequence}, {@link group group}, or {@link transition
     * transition}.
     *
     * ### Usage
     *
     * The `animate` function accepts two input parameters: `timing` and `styles`:
     *
     * - `timing` is a string based value that can be a combination of a duration with optional
     * delay and easing values. The format for the expression breaks down to `duration delay easing`
     * (therefore a value such as `1s 100ms ease-out` will be parse itself into `duration=1000,
     * delay=100, easing=ease-out`.
     * If a numeric value is provided then that will be used as the `duration` value in millisecond
     * form.
     * - `styles` is the style input data which can either be a call to {@link style style} or {@link
     * keyframes keyframes}.
     * If left empty then the styles from the destination state will be collected and used (this is
     * useful when
     * describing an animation step that will complete an animation by {@link
     * transition#the-final-animate-call animating to the final state}).
     *
     * ```typescript
     * // various functions for specifying timing data
     * animate(500, style(...))
     * animate("1s", style(...))
     * animate("100ms 0.5s", style(...))
     * animate("5s ease", style(...))
     * animate("5s 10ms cubic-bezier(.17,.67,.88,.1)", style(...))
     *
     * // either style() of keyframes() can be used
     * animate(500, style({ background: "red" }))
     * animate(500, keyframes([
     *   style({ background: "blue" })),
     *   style({ background: "red" }))
     * ])
     * ```
     *
     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
     *
     * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
     *
     * @experimental Animation support is experimental.
     */
    function animate(timing, styles) {
        if (styles === void 0) {
            styles = null;
        }
        var stylesEntry = styles;
        if (!lang_1.isPresent(stylesEntry)) {
            var EMPTY_STYLE = {};
            stylesEntry = new AnimationStyleMetadata([EMPTY_STYLE], 1);
        }
        return new AnimationAnimateMetadata(timing, stylesEntry);
    }
    exports.animate = animate;
    /**
     * `group` is an animation-specific function that is designed to be used inside of Angular2's
     * animation
     * DSL language. If this information is new, please navigate to the
     * {@link ComponentMetadata#animations-anchor component animations metadata
     * page} to gain a better understanding of how animations in Angular2 are used.
     *
     * `group` specifies a list of animation steps that are all run in parallel. Grouped animations
     * are useful when a series of styles must be animated/closed off
     * at different statrting/ending times.
     *
     * The `group` function can either be used within a {@link sequence sequence} or a {@link transition
     * transition}
     * and it will only continue to the next instruction once all of the inner animation steps
     * have completed.
     *
     * ### Usage
     *
     * The `steps` data that is passed into the `group` animation function can either consist
     * of {@link style style} or {@link animate animate} function calls. Each call to `style()` or
     * `animate()`
     * within a group will be executed instantly (use {@link keyframes keyframes} or a
     * {@link animate#usage animate() with a delay value} to offset styles to be applied at a later
     * time).
     *
     * ```typescript
     * group([
     *   animate("1s", { background: "black" }))
     *   animate("2s", { color: "white" }))
     * ])
     * ```
     *
     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
     *
     * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
     *
     * @experimental Animation support is experimental.
     */
    function group(steps) {
        return new AnimationGroupMetadata(steps);
    }
    exports.group = group;
    /**
     * `sequence` is an animation-specific function that is designed to be used inside of Angular2's
     * animation
     * DSL language. If this information is new, please navigate to the
     * {@link ComponentMetadata#animations-anchor component animations metadata
     * page} to gain a better understanding of how animations in Angular2 are used.
     *
     * `sequence` Specifies a list of animation steps that are run one by one. (`sequence` is used
     * by default when an array is passed as animation data into {@link transition transition}.)
     *
     * The `sequence` function can either be used within a {@link group group} or a {@link transition
     * transition}
     * and it will only continue to the next instruction once each of the inner animation steps
     * have completed.
     *
     * To perform animation styling in parallel with other animation steps then
     * have a look at the {@link group group} animation function.
     *
     * ### Usage
     *
     * The `steps` data that is passed into the `sequence` animation function can either consist
     * of {@link style style} or {@link animate animate} function calls. A call to `style()` will apply
     * the
     * provided styling data immediately while a call to `animate()` will apply its styling
     * data over a given time depending on its timing data.
     *
     * ```typescript
     * sequence([
     *   style({ opacity: 0 })),
     *   animate("1s", { opacity: 1 }))
     * ])
     * ```
     *
     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
     *
     * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
     *
     * @experimental Animation support is experimental.
     */
    function sequence(steps) {
        return new AnimationSequenceMetadata(steps);
    }
    exports.sequence = sequence;
    /**
     * `style` is an animation-specific function that is designed to be used inside of Angular2's
     * animation
     * DSL language. If this information is new, please navigate to the
     * {@link ComponentMetadata#animations-anchor component animations metadata
     * page} to gain a better understanding of how animations in Angular2 are used.
     *
     * `style` declares a key/value object containing CSS properties/styles that can then
     * be used for {@link state animation states}, within an {@link sequence animation sequence}, or as
     * styling data for both {@link animate animate} and {@link keyframes keyframes}.
     *
     * ### Usage
     *
     * `style` takes in a key/value string map as data and expects one or more CSS property/value
     * pairs to be defined.
     *
     * ```typescript
     * // string values are used for css properties
     * style({ background: "red", color: "blue" })
     *
     * // numerical (pixel) values are also supported
     * style({ width: 100, height: 0 })
     * ```
     *
     * #### Auto-styles (using `*`)
     *
     * When an asterix (`*`) character is used as a value then it will be detected from the element
     * being animated
     * and applied as animation data when the animation starts.
     *
     * This feature proves useful for a state depending on layout and/or environment factors; in such
     * cases
     * the styles are calculated just before the animation starts.
     *
     * ```typescript
     * // the steps below will animate from 0 to the
     * // actual height of the element
     * style({ height: 0 }),
     * animate("1s", style({ height: "*" }))
     * ```
     *
     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
     *
     * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
     *
     * @experimental Animation support is experimental.
     */
    function style(tokens) {
        var input;
        var offset = null;
        if (lang_1.isString(tokens)) {
            input = [tokens];
        } else {
            if (lang_1.isArray(tokens)) {
                input = tokens;
            } else {
                input = [tokens];
            }
            input.forEach(function (entry) {
                var entryOffset = entry['offset'];
                if (lang_1.isPresent(entryOffset)) {
                    offset = offset == null ? lang_1.NumberWrapper.parseFloat(entryOffset) : offset;
                }
            });
        }
        return new AnimationStyleMetadata(input, offset);
    }
    exports.style = style;
    /**
     * `state` is an animation-specific function that is designed to be used inside of Angular2's
     * animation
     * DSL language. If this information is new, please navigate to the
     * {@link ComponentMetadata#animations-anchor component animations metadata
     * page} to gain a better understanding of how animations in Angular2 are used.
     *
     * `state` declares an animation state within the given trigger. When a state is
     * active within a component then its associated styles will persist on
     * the element that the trigger is attached to (even when the animation ends).
     *
     * To animate between states, have a look at the animation {@link transition transition}
     * DSL function. To register states to an animation trigger please have a look
     * at the {@link trigger trigger} function.
     *
     * #### The `void` state
     *
     * The `void` state value is a reserved word that angular uses to determine when the element is not
     * apart
     * of the application anymore (e.g. when an `ngIf` evaluates to false then the state of the
     * associated element
     * is void).
     *
     * #### The `*` (default) state
     *
     * The `*` state (when styled) is a fallback state that will be used if
     * the state that is being animated is not declared within the trigger.
     *
     * ### Usage
     *
     * `state` will declare an animation state with its associated styles
     * within the given trigger.
     *
     * - `stateNameExpr` can be one or more state names separated by commas.
     * - `styles` refers to the {@link style styling data} that will be persisted on the element once
     * the state
     * has been reached.
     *
     * ```typescript
     * // "void" is a reserved name for a state and is used to represent
     * // the state in which an element is detached from from the application.
     * state("void", style({ height: 0 }))
     *
     * // user-defined states
     * state("closed", style({ height: 0 }))
     * state("open, visible", style({ height: "*" }))
     * ```
     *
     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
     *
     * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
     *
     * @experimental Animation support is experimental.
     */
    function state(stateNameExpr, styles) {
        return new AnimationStateDeclarationMetadata(stateNameExpr, styles);
    }
    exports.state = state;
    /**
     * `keyframes` is an animation-specific function that is designed to be used inside of Angular2's
     * animation
     * DSL language. If this information is new, please navigate to the
     * {@link ComponentMetadata#animations-anchor component animations metadata
     * page} to gain a better understanding of how animations in Angular2 are used.
     *
     * `keyframes` specifies a collection of {@link style style} entries each optionally characterized
     * by an `offset` value.
     *
     * ### Usage
     *
     * The `keyframes` animation function is designed to be used alongside the {@link animate animate}
     * animation function. Instead of applying animations from where they are
     * currently to their destination, keyframes can describe how each style entry is applied
     * and at what point within the animation arc (much like CSS Keyframe Animations do).
     *
     * For each `style()` entry an `offset` value can be set. Doing so allows to specifiy at
     * what percentage of the animate time the styles will be applied.
     *
     * ```typescript
     * // the provided offset values describe when each backgroundColor value is applied.
     * animate("5s", keyframes([
     *   style({ backgroundColor: "red", offset: 0 }),
     *   style({ backgroundColor: "blue", offset: 0.2 }),
     *   style({ backgroundColor: "orange", offset: 0.3 }),
     *   style({ backgroundColor: "black", offset: 1 })
     * ]))
     * ```
     *
     * Alternatively, if there are no `offset` values used within the style entries then the offsets
     * will
     * be calculated automatically.
     *
     * ```typescript
     * animate("5s", keyframes([
     *   style({ backgroundColor: "red" }) // offset = 0
     *   style({ backgroundColor: "blue" }) // offset = 0.33
     *   style({ backgroundColor: "orange" }) // offset = 0.66
     *   style({ backgroundColor: "black" }) // offset = 1
     * ]))
     * ```
     *
     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
     *
     * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
     *
     * @experimental Animation support is experimental.
     */
    function keyframes(steps) {
        return new AnimationKeyframesSequenceMetadata(steps);
    }
    exports.keyframes = keyframes;
    /**
     * `transition` is an animation-specific function that is designed to be used inside of Angular2's
     * animation
     * DSL language. If this information is new, please navigate to the
     * {@link ComponentMetadata#animations-anchor component animations metadata
     * page} to gain a better understanding of how animations in Angular2 are used.
     *
     * `transition` declares the {@link sequence sequence of animation steps} that will be run when the
     * provided
     * `stateChangeExpr` value is satisfied. The `stateChangeExpr` consists of a `state1 => state2`
     * which consists
     * of two known states (use an asterix (`*`) to refer to a dynamic starting and/or ending state).
     *
     * Animation transitions are placed within an {@link trigger animation trigger}. For an transition
     * to animate to
     * a state value and persist its styles then one or more {@link state animation states} is expected
     * to be defined.
     *
     * ### Usage
     *
     * An animation transition is kicked off the `stateChangeExpr` predicate evaluates to true based on
     * what the
     * previous state is and what the current state has become. In other words, if a transition is
     * defined that
     * matches the old/current state criteria then the associated animation will be triggered.
     *
     * ```typescript
     * // all transition/state changes are defined within an animation trigger
     * trigger("myAnimationTrigger", [
     *   // if a state is defined then its styles will be persisted when the
     *   // animation has fully completed itself
     *   state("on", style({ background: "green" })),
     *   state("off", style({ background: "grey" })),
     *
     *   // a transition animation that will be kicked off when the state value
     *   // bound to "myAnimationTrigger" changes from "on" to "off"
     *   transition("on => off", animate(500)),
     *
     *   // it is also possible to do run the same animation for both directions
     *   transition("on <=> off", animate(500)),
     *
     *   // or to define multiple states pairs separated by commas
     *   transition("on => off, off => void", animate(500)),
     *
     *   // this is a catch-all state change for when an element is inserted into
     *   // the page and the destination state is unknown
     *   transition("void => *", [
     *     style({ opacity: 0 }),
     *     animate(500)
     *   ]),
     *
     *   // this will capture a state change between any states
     *   transition("* => *", animate("1s 0s")),
     * ])
     * ```
     *
     * The template associated with this component will make use of the `myAnimationTrigger`
     * animation trigger by binding to an element within its template code.
     *
     * ```html
     * <!-- somewhere inside of my-component-tpl.html -->
     * <div [@myAnimationTrigger]="myStatusExp">...</div>
     * ```
     *
     * #### The final `animate` call
     *
     * If the final step within the transition steps is a call to `animate()` that **only**
     * uses a timing value with **no style data** then it will be automatically used as the final
     * animation
     * arc for the element to animate itself to the final state. This involves an automatic mix of
     * adding/removing CSS styles so that the element will be in the exact state it should be for the
     * applied state to be presented correctly.
     *
     * ```
     * // start off by hiding the element, but make sure that it animates properly to whatever state
     * // is currently active for "myAnimationTrigger"
     * transition("void => *", [
     *   style({ opacity: 0 }),
     *   animate(500)
     * ])
     * ```
     *
     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
     *
     * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
     *
     * @experimental Animation support is experimental.
     */
    function transition(stateChangeExpr, steps) {
        var animationData = lang_1.isArray(steps) ? new AnimationSequenceMetadata(steps) : steps;
        return new AnimationStateTransitionMetadata(stateChangeExpr, animationData);
    }
    exports.transition = transition;
    /**
     * `trigger` is an animation-specific function that is designed to be used inside of Angular2's
     * animation
     * DSL language. If this information is new, please navigate to the
     * {@link ComponentMetadata#animations-anchor component animations metadata
     * page} to gain a better understanding of how animations in Angular2 are used.
     *
     * `trigger` Creates an animation trigger which will a list of {@link state state} and {@link
     * transition transition}
     * entries that will be evaluated when the expression bound to the trigger changes.
     *
     * Triggers are registered within the component annotation data under the
     * {@link ComponentMetadata#animations-anchor animations section}. An animation trigger can
     * be placed on an element within a template by referencing the name of the
     * trigger followed by the expression value that the trigger is bound to
     * (in the form of `[@triggerName]="expression"`.
     *
     * ### Usage
     *
     * `trigger` will create an animation trigger reference based on the provided `name` value.
     * The provided `animation` value is expected to be an array consisting of {@link state state} and
     * {@link transition transition}
     * declarations.
     *
     * ```typescript
     * @Component({
     *   selector: 'my-component',
     *   templateUrl: 'my-component-tpl.html',
     *   animations: [
     *     trigger("myAnimationTrigger", [
     *       state(...),
     *       state(...),
     *       transition(...),
     *       transition(...)
     *     ])
     *   ]
     * })
     * class MyComponent {
     *   myStatusExp = "something";
     * }
     * ```
     *
     * The template associated with this component will make use of the `myAnimationTrigger`
     * animation trigger by binding to an element within its template code.
     *
     * ```html
     * <!-- somewhere inside of my-component-tpl.html -->
     * <div [@myAnimationTrigger]="myStatusExp">...</div>
     * ```
     *
     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
     *
     * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
     *
     * @experimental Animation support is experimental.
     */
    function trigger(name, animation) {
        return new AnimationEntryMetadata(name, animation);
    }
    exports.trigger = trigger;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/core@2.0.0-rc.5/src/facade/base_wrapped_exception.js", ["reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * A base class for the WrappedException that can be used to identify
     * a WrappedException from ExceptionHandler without adding circular
     * dependency.
     */
    var BaseWrappedException = function (_super) {
        __extends(BaseWrappedException, _super);
        function BaseWrappedException(message) {
            _super.call(this, message);
        }
        Object.defineProperty(BaseWrappedException.prototype, "wrapperMessage", {
            get: function () {
                return '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseWrappedException.prototype, "wrapperStack", {
            get: function () {
                return null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseWrappedException.prototype, "originalException", {
            get: function () {
                return null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseWrappedException.prototype, "originalStack", {
            get: function () {
                return null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseWrappedException.prototype, "context", {
            get: function () {
                return null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseWrappedException.prototype, "message", {
            get: function () {
                return '';
            },
            enumerable: true,
            configurable: true
        });
        return BaseWrappedException;
    }(Error);
    exports.BaseWrappedException = BaseWrappedException;
    

    return module.exports;
});
System.registerDynamic("npm:@angular/core@2.0.0-rc.5/src/facade/collection.js", ["./lang", "reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var lang_1 = $__require("./lang");
    exports.Map = lang_1.global.Map;
    exports.Set = lang_1.global.Set;
    // Safari and Internet Explorer do not support the iterable parameter to the
    // Map constructor.  We work around that by manually adding the items.
    var createMapFromPairs = function () {
        try {
            if (new exports.Map([[1, 2]]).size === 1) {
                return function createMapFromPairs(pairs) {
                    return new exports.Map(pairs);
                };
            }
        } catch (e) {}
        return function createMapAndPopulateFromPairs(pairs) {
            var map = new exports.Map();
            for (var i = 0; i < pairs.length; i++) {
                var pair = pairs[i];
                map.set(pair[0], pair[1]);
            }
            return map;
        };
    }();
    var createMapFromMap = function () {
        try {
            if (new exports.Map(new exports.Map())) {
                return function createMapFromMap(m) {
                    return new exports.Map(m);
                };
            }
        } catch (e) {}
        return function createMapAndPopulateFromMap(m) {
            var map = new exports.Map();
            m.forEach(function (v, k) {
                map.set(k, v);
            });
            return map;
        };
    }();
    var _clearValues = function () {
        if (new exports.Map().keys().next) {
            return function _clearValues(m) {
                var keyIterator = m.keys();
                var k;
                while (!(k = keyIterator.next()).done) {
                    m.set(k.value, null);
                }
            };
        } else {
            return function _clearValuesWithForeEach(m) {
                m.forEach(function (v, k) {
                    m.set(k, null);
                });
            };
        }
    }();
    // Safari doesn't implement MapIterator.next(), which is used is Traceur's polyfill of Array.from
    // TODO(mlaval): remove the work around once we have a working polyfill of Array.from
    var _arrayFromMap = function () {
        try {
            if (new exports.Map().values().next) {
                return function createArrayFromMap(m, getValues) {
                    return getValues ? Array.from(m.values()) : Array.from(m.keys());
                };
            }
        } catch (e) {}
        return function createArrayFromMapWithForeach(m, getValues) {
            var res = ListWrapper.createFixedSize(m.size),
                i = 0;
            m.forEach(function (v, k) {
                res[i] = getValues ? v : k;
                i++;
            });
            return res;
        };
    }();
    var MapWrapper = function () {
        function MapWrapper() {}
        MapWrapper.clone = function (m) {
            return createMapFromMap(m);
        };
        MapWrapper.createFromStringMap = function (stringMap) {
            var result = new exports.Map();
            for (var prop in stringMap) {
                result.set(prop, stringMap[prop]);
            }
            return result;
        };
        MapWrapper.toStringMap = function (m) {
            var r = {};
            m.forEach(function (v, k) {
                return r[k] = v;
            });
            return r;
        };
        MapWrapper.createFromPairs = function (pairs) {
            return createMapFromPairs(pairs);
        };
        MapWrapper.clearValues = function (m) {
            _clearValues(m);
        };
        MapWrapper.iterable = function (m) {
            return m;
        };
        MapWrapper.keys = function (m) {
            return _arrayFromMap(m, false);
        };
        MapWrapper.values = function (m) {
            return _arrayFromMap(m, true);
        };
        return MapWrapper;
    }();
    exports.MapWrapper = MapWrapper;
    /**
     * Wraps Javascript Objects
     */
    var StringMapWrapper = function () {
        function StringMapWrapper() {}
        StringMapWrapper.create = function () {
            // Note: We are not using Object.create(null) here due to
            // performance!
            // http://jsperf.com/ng2-object-create-null
            return {};
        };
        StringMapWrapper.contains = function (map, key) {
            return map.hasOwnProperty(key);
        };
        StringMapWrapper.get = function (map, key) {
            return map.hasOwnProperty(key) ? map[key] : undefined;
        };
        StringMapWrapper.set = function (map, key, value) {
            map[key] = value;
        };
        StringMapWrapper.keys = function (map) {
            return Object.keys(map);
        };
        StringMapWrapper.values = function (map) {
            return Object.keys(map).map(function (k) {
                return map[k];
            });
        };
        StringMapWrapper.isEmpty = function (map) {
            for (var prop in map) {
                return false;
            }
            return true;
        };
        StringMapWrapper.delete = function (map, key) {
            delete map[key];
        };
        StringMapWrapper.forEach = function (map, callback) {
            for (var _i = 0, _a = Object.keys(map); _i < _a.length; _i++) {
                var k = _a[_i];
                callback(map[k], k);
            }
        };
        StringMapWrapper.merge = function (m1, m2) {
            var m = {};
            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
                var k = _a[_i];
                m[k] = m1[k];
            }
            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
                var k = _c[_b];
                m[k] = m2[k];
            }
            return m;
        };
        StringMapWrapper.equals = function (m1, m2) {
            var k1 = Object.keys(m1);
            var k2 = Object.keys(m2);
            if (k1.length != k2.length) {
                return false;
            }
            var key;
            for (var i = 0; i < k1.length; i++) {
                key = k1[i];
                if (m1[key] !== m2[key]) {
                    return false;
                }
            }
            return true;
        };
        return StringMapWrapper;
    }();
    exports.StringMapWrapper = StringMapWrapper;
    var ListWrapper = function () {
        function ListWrapper() {}
        // JS has no way to express a statically fixed size list, but dart does so we
        // keep both methods.
        ListWrapper.createFixedSize = function (size) {
            return new Array(size);
        };
        ListWrapper.createGrowableSize = function (size) {
            return new Array(size);
        };
        ListWrapper.clone = function (array) {
            return array.slice(0);
        };
        ListWrapper.forEachWithIndex = function (array, fn) {
            for (var i = 0; i < array.length; i++) {
                fn(array[i], i);
            }
        };
        ListWrapper.first = function (array) {
            if (!array) return null;
            return array[0];
        };
        ListWrapper.last = function (array) {
            if (!array || array.length == 0) return null;
            return array[array.length - 1];
        };
        ListWrapper.indexOf = function (array, value, startIndex) {
            if (startIndex === void 0) {
                startIndex = 0;
            }
            return array.indexOf(value, startIndex);
        };
        ListWrapper.contains = function (list, el) {
            return list.indexOf(el) !== -1;
        };
        ListWrapper.reversed = function (array) {
            var a = ListWrapper.clone(array);
            return a.reverse();
        };
        ListWrapper.concat = function (a, b) {
            return a.concat(b);
        };
        ListWrapper.insert = function (list, index, value) {
            list.splice(index, 0, value);
        };
        ListWrapper.removeAt = function (list, index) {
            var res = list[index];
            list.splice(index, 1);
            return res;
        };
        ListWrapper.removeAll = function (list, items) {
            for (var i = 0; i < items.length; ++i) {
                var index = list.indexOf(items[i]);
                list.splice(index, 1);
            }
        };
        ListWrapper.remove = function (list, el) {
            var index = list.indexOf(el);
            if (index > -1) {
                list.splice(index, 1);
                return true;
            }
            return false;
        };
        ListWrapper.clear = function (list) {
            list.length = 0;
        };
        ListWrapper.isEmpty = function (list) {
            return list.length == 0;
        };
        ListWrapper.fill = function (list, value, start, end) {
            if (start === void 0) {
                start = 0;
            }
            if (end === void 0) {
                end = null;
            }
            list.fill(value, start, end === null ? list.length : end);
        };
        ListWrapper.equals = function (a, b) {
            if (a.length != b.length) return false;
            for (var i = 0; i < a.length; ++i) {
                if (a[i] !== b[i]) return false;
            }
            return true;
        };
        ListWrapper.slice = function (l, from, to) {
            if (from === void 0) {
                from = 0;
            }
            if (to === void 0) {
                to = null;
            }
            return l.slice(from, to === null ? undefined : to);
        };
        ListWrapper.splice = function (l, from, length) {
            return l.splice(from, length);
        };
        ListWrapper.sort = function (l, compareFn) {
            if (lang_1.isPresent(compareFn)) {
                l.sort(compareFn);
            } else {
                l.sort();
            }
        };
        ListWrapper.toString = function (l) {
            return l.toString();
        };
        ListWrapper.toJSON = function (l) {
            return JSON.stringify(l);
        };
        ListWrapper.maximum = function (list, predicate) {
            if (list.length == 0) {
                return null;
            }
            var solution = null;
            var maxValue = -Infinity;
            for (var index = 0; index < list.length; index++) {
                var candidate = list[index];
                if (lang_1.isBlank(candidate)) {
                    continue;
                }
                var candidateValue = predicate(candidate);
                if (candidateValue > maxValue) {
                    solution = candidate;
                    maxValue = candidateValue;
                }
            }
            return solution;
        };
        ListWrapper.flatten = function (list) {
            var target = [];
            _flattenArray(list, target);
            return target;
        };
        ListWrapper.addAll = function (list, source) {
            for (var i = 0; i < source.length; i++) {
                list.push(source[i]);
            }
        };
        return ListWrapper;
    }();
    exports.ListWrapper = ListWrapper;
    function _flattenArray(source, target) {
        if (lang_1.isPresent(source)) {
            for (var i = 0; i < source.length; i++) {
                var item = source[i];
                if (lang_1.isArray(item)) {
                    _flattenArray(item, target);
                } else {
                    target.push(item);
                }
            }
        }
        return target;
    }
    function isListLikeIterable(obj) {
        if (!lang_1.isJsObject(obj)) return false;
        return lang_1.isArray(obj) || !(obj instanceof exports.Map) && lang_1.getSymbolIterator() in obj; // JS Iterable have a Symbol.iterator prop
    }
    exports.isListLikeIterable = isListLikeIterable;
    function areIterablesEqual(a, b, comparator) {
        var iterator1 = a[lang_1.getSymbolIterator()]();
        var iterator2 = b[lang_1.getSymbolIterator()]();
        while (true) {
            var item1 = iterator1.next();
            var item2 = iterator2.next();
            if (item1.done && item2.done) return true;
            if (item1.done || item2.done) return false;
            if (!comparator(item1.value, item2.value)) return false;
        }
    }
    exports.areIterablesEqual = areIterablesEqual;
    function iterateListLike(obj, fn) {
        if (lang_1.isArray(obj)) {
            for (var i = 0; i < obj.length; i++) {
                fn(obj[i]);
            }
        } else {
            var iterator = obj[lang_1.getSymbolIterator()]();
            var item;
            while (!(item = iterator.next()).done) {
                fn(item.value);
            }
        }
    }
    exports.iterateListLike = iterateListLike;
    // Safari and Internet Explorer do not support the iterable parameter to the
    // Set constructor.  We work around that by manually adding the items.
    var createSetFromList = function () {
        var test = new exports.Set([1, 2, 3]);
        if (test.size === 3) {
            return function createSetFromList(lst) {
                return new exports.Set(lst);
            };
        } else {
            return function createSetAndPopulateFromList(lst) {
                var res = new exports.Set(lst);
                if (res.size !== lst.length) {
                    for (var i = 0; i < lst.length; i++) {
                        res.add(lst[i]);
                    }
                }
                return res;
            };
        }
    }();
    var SetWrapper = function () {
        function SetWrapper() {}
        SetWrapper.createFromList = function (lst) {
            return createSetFromList(lst);
        };
        SetWrapper.has = function (s, key) {
            return s.has(key);
        };
        SetWrapper.delete = function (m, k) {
            m.delete(k);
        };
        return SetWrapper;
    }();
    exports.SetWrapper = SetWrapper;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/facade/exception_handler.js', ['./base_wrapped_exception', './collection', './lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var base_wrapped_exception_1 = $__require('./base_wrapped_exception');
    var collection_1 = $__require('./collection');
    var lang_1 = $__require('./lang');
    var _ArrayLogger = function () {
        function _ArrayLogger() {
            this.res = [];
        }
        _ArrayLogger.prototype.log = function (s) {
            this.res.push(s);
        };
        _ArrayLogger.prototype.logError = function (s) {
            this.res.push(s);
        };
        _ArrayLogger.prototype.logGroup = function (s) {
            this.res.push(s);
        };
        _ArrayLogger.prototype.logGroupEnd = function () {};
        ;
        return _ArrayLogger;
    }();
    /**
     * Provides a hook for centralized exception handling.
     *
     * The default implementation of `ExceptionHandler` prints error messages to the `Console`. To
     * intercept error handling,
     * write a custom exception handler that replaces this default as appropriate for your app.
     *
     * ### Example
     *
     * ```javascript
     *
     * class MyExceptionHandler implements ExceptionHandler {
     *   call(error, stackTrace = null, reason = null) {
     *     // do something with the exception
     *   }
     * }
     *
     * bootstrap(MyApp, [{provide: ExceptionHandler, useClass: MyExceptionHandler}])
     *
     * ```
     * @stable
     */
    var ExceptionHandler = function () {
        function ExceptionHandler(_logger, _rethrowException) {
            if (_rethrowException === void 0) {
                _rethrowException = true;
            }
            this._logger = _logger;
            this._rethrowException = _rethrowException;
        }
        ExceptionHandler.exceptionToString = function (exception, stackTrace, reason) {
            if (stackTrace === void 0) {
                stackTrace = null;
            }
            if (reason === void 0) {
                reason = null;
            }
            var l = new _ArrayLogger();
            var e = new ExceptionHandler(l, false);
            e.call(exception, stackTrace, reason);
            return l.res.join('\n');
        };
        ExceptionHandler.prototype.call = function (exception, stackTrace, reason) {
            if (stackTrace === void 0) {
                stackTrace = null;
            }
            if (reason === void 0) {
                reason = null;
            }
            var originalException = this._findOriginalException(exception);
            var originalStack = this._findOriginalStack(exception);
            var context = this._findContext(exception);
            this._logger.logGroup("EXCEPTION: " + this._extractMessage(exception));
            if (lang_1.isPresent(stackTrace) && lang_1.isBlank(originalStack)) {
                this._logger.logError('STACKTRACE:');
                this._logger.logError(this._longStackTrace(stackTrace));
            }
            if (lang_1.isPresent(reason)) {
                this._logger.logError("REASON: " + reason);
            }
            if (lang_1.isPresent(originalException)) {
                this._logger.logError("ORIGINAL EXCEPTION: " + this._extractMessage(originalException));
            }
            if (lang_1.isPresent(originalStack)) {
                this._logger.logError('ORIGINAL STACKTRACE:');
                this._logger.logError(this._longStackTrace(originalStack));
            }
            if (lang_1.isPresent(context)) {
                this._logger.logError('ERROR CONTEXT:');
                this._logger.logError(context);
            }
            this._logger.logGroupEnd();
            // We rethrow exceptions, so operations like 'bootstrap' will result in an error
            // when an exception happens. If we do not rethrow, bootstrap will always succeed.
            if (this._rethrowException) throw exception;
        };
        /** @internal */
        ExceptionHandler.prototype._extractMessage = function (exception) {
            return exception instanceof base_wrapped_exception_1.BaseWrappedException ? exception.wrapperMessage : exception.toString();
        };
        /** @internal */
        ExceptionHandler.prototype._longStackTrace = function (stackTrace) {
            return collection_1.isListLikeIterable(stackTrace) ? stackTrace.join('\n\n-----async gap-----\n') : stackTrace.toString();
        };
        /** @internal */
        ExceptionHandler.prototype._findContext = function (exception) {
            try {
                if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
                return lang_1.isPresent(exception.context) ? exception.context : this._findContext(exception.originalException);
            } catch (e) {
                // exception.context can throw an exception. if it happens, we ignore the context.
                return null;
            }
        };
        /** @internal */
        ExceptionHandler.prototype._findOriginalException = function (exception) {
            if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
            var e = exception.originalException;
            while (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
                e = e.originalException;
            }
            return e;
        };
        /** @internal */
        ExceptionHandler.prototype._findOriginalStack = function (exception) {
            if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
            var e = exception;
            var stack = exception.originalStack;
            while (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
                e = e.originalException;
                if (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
                    stack = e.originalStack;
                }
            }
            return stack;
        };
        return ExceptionHandler;
    }();
    exports.ExceptionHandler = ExceptionHandler;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/facade/exceptions.js', ['./base_wrapped_exception', './exception_handler', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var base_wrapped_exception_1 = $__require('./base_wrapped_exception');
    var exception_handler_1 = $__require('./exception_handler');
    var exception_handler_2 = $__require('./exception_handler');
    exports.ExceptionHandler = exception_handler_2.ExceptionHandler;
    /**
     * @stable
     */
    var BaseException = function (_super) {
        __extends(BaseException, _super);
        function BaseException(message) {
            if (message === void 0) {
                message = '--';
            }
            _super.call(this, message);
            this.message = message;
            this.stack = new Error(message).stack;
        }
        BaseException.prototype.toString = function () {
            return this.message;
        };
        return BaseException;
    }(Error);
    exports.BaseException = BaseException;
    /**
     * Wraps an exception and provides additional context or information.
     * @stable
     */
    var WrappedException = function (_super) {
        __extends(WrappedException, _super);
        function WrappedException(_wrapperMessage, _originalException /** TODO #9100 */, _originalStack /** TODO #9100 */, _context /** TODO #9100 */) {
            _super.call(this, _wrapperMessage);
            this._wrapperMessage = _wrapperMessage;
            this._originalException = _originalException;
            this._originalStack = _originalStack;
            this._context = _context;
            this._wrapperStack = new Error(_wrapperMessage).stack;
        }
        Object.defineProperty(WrappedException.prototype, "wrapperMessage", {
            get: function () {
                return this._wrapperMessage;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WrappedException.prototype, "wrapperStack", {
            get: function () {
                return this._wrapperStack;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WrappedException.prototype, "originalException", {
            get: function () {
                return this._originalException;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WrappedException.prototype, "originalStack", {
            get: function () {
                return this._originalStack;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WrappedException.prototype, "context", {
            get: function () {
                return this._context;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WrappedException.prototype, "message", {
            get: function () {
                return exception_handler_1.ExceptionHandler.exceptionToString(this);
            },
            enumerable: true,
            configurable: true
        });
        WrappedException.prototype.toString = function () {
            return this.message;
        };
        return WrappedException;
    }(base_wrapped_exception_1.BaseWrappedException);
    exports.WrappedException = WrappedException;
    function makeTypeError(message) {
        return new TypeError(message);
    }
    exports.makeTypeError = makeTypeError;
    function unimplemented() {
        throw new BaseException('unimplemented');
    }
    exports.unimplemented = unimplemented;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/facade/lang.js', ['reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var globalScope;
    if (typeof window === 'undefined') {
        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
            globalScope = self;
        } else {
            globalScope = global;
        }
    } else {
        globalScope = window;
    }
    function scheduleMicroTask(fn) {
        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
    }
    exports.scheduleMicroTask = scheduleMicroTask;
    // Need to declare a new variable for global here since TypeScript
    // exports the original value of the symbol.
    var _global = globalScope;
    exports.global = _global;
    /**
     * Runtime representation a type that a Component or other object is instances of.
     *
     * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by
     * the `MyCustomComponent` constructor function.
     *
     * @stable
     */
    exports.Type = Function;
    function getTypeNameForDebugging(type) {
        if (type['name']) {
            return type['name'];
        }
        return typeof type;
    }
    exports.getTypeNameForDebugging = getTypeNameForDebugging;
    exports.Math = _global.Math;
    exports.Date = _global.Date;
    // TODO: remove calls to assert in production environment
    // Note: Can't just export this and import in in other files
    // as `assert` is a reserved keyword in Dart
    _global.assert = function assert(condition) {
        // TODO: to be fixed properly via #2830, noop for now
    };
    function isPresent(obj) {
        return obj !== undefined && obj !== null;
    }
    exports.isPresent = isPresent;
    function isBlank(obj) {
        return obj === undefined || obj === null;
    }
    exports.isBlank = isBlank;
    function isBoolean(obj) {
        return typeof obj === 'boolean';
    }
    exports.isBoolean = isBoolean;
    function isNumber(obj) {
        return typeof obj === 'number';
    }
    exports.isNumber = isNumber;
    function isString(obj) {
        return typeof obj === 'string';
    }
    exports.isString = isString;
    function isFunction(obj) {
        return typeof obj === 'function';
    }
    exports.isFunction = isFunction;
    function isType(obj) {
        return isFunction(obj);
    }
    exports.isType = isType;
    function isStringMap(obj) {
        return typeof obj === 'object' && obj !== null;
    }
    exports.isStringMap = isStringMap;
    var STRING_MAP_PROTO = Object.getPrototypeOf({});
    function isStrictStringMap(obj) {
        return isStringMap(obj) && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
    }
    exports.isStrictStringMap = isStrictStringMap;
    function isPromise(obj) {
        // allow any Promise/A+ compliant thenable.
        // It's up to the caller to ensure that obj.then conforms to the spec
        return isPresent(obj) && isFunction(obj.then);
    }
    exports.isPromise = isPromise;
    function isArray(obj) {
        return Array.isArray(obj);
    }
    exports.isArray = isArray;
    function isDate(obj) {
        return obj instanceof exports.Date && !isNaN(obj.valueOf());
    }
    exports.isDate = isDate;
    function noop() {}
    exports.noop = noop;
    function stringify(token) {
        if (typeof token === 'string') {
            return token;
        }
        if (token === undefined || token === null) {
            return '' + token;
        }
        if (token.overriddenName) {
            return token.overriddenName;
        }
        if (token.name) {
            return token.name;
        }
        var res = token.toString();
        var newLineIndex = res.indexOf('\n');
        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
    }
    exports.stringify = stringify;
    // serialize / deserialize enum exist only for consistency with dart API
    // enums in typescript don't need to be serialized
    function serializeEnum(val) {
        return val;
    }
    exports.serializeEnum = serializeEnum;
    function deserializeEnum(val, values) {
        return val;
    }
    exports.deserializeEnum = deserializeEnum;
    function resolveEnumToken(enumValue, val) {
        return enumValue[val];
    }
    exports.resolveEnumToken = resolveEnumToken;
    var StringWrapper = function () {
        function StringWrapper() {}
        StringWrapper.fromCharCode = function (code) {
            return String.fromCharCode(code);
        };
        StringWrapper.charCodeAt = function (s, index) {
            return s.charCodeAt(index);
        };
        StringWrapper.split = function (s, regExp) {
            return s.split(regExp);
        };
        StringWrapper.equals = function (s, s2) {
            return s === s2;
        };
        StringWrapper.stripLeft = function (s, charVal) {
            if (s && s.length) {
                var pos = 0;
                for (var i = 0; i < s.length; i++) {
                    if (s[i] != charVal) break;
                    pos++;
                }
                s = s.substring(pos);
            }
            return s;
        };
        StringWrapper.stripRight = function (s, charVal) {
            if (s && s.length) {
                var pos = s.length;
                for (var i = s.length - 1; i >= 0; i--) {
                    if (s[i] != charVal) break;
                    pos--;
                }
                s = s.substring(0, pos);
            }
            return s;
        };
        StringWrapper.replace = function (s, from, replace) {
            return s.replace(from, replace);
        };
        StringWrapper.replaceAll = function (s, from, replace) {
            return s.replace(from, replace);
        };
        StringWrapper.slice = function (s, from, to) {
            if (from === void 0) {
                from = 0;
            }
            if (to === void 0) {
                to = null;
            }
            return s.slice(from, to === null ? undefined : to);
        };
        StringWrapper.replaceAllMapped = function (s, from, cb) {
            return s.replace(from, function () {
                var matches = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    matches[_i - 0] = arguments[_i];
                }
                // Remove offset & string from the result array
                matches.splice(-2, 2);
                // The callback receives match, p1, ..., pn
                return cb(matches);
            });
        };
        StringWrapper.contains = function (s, substr) {
            return s.indexOf(substr) != -1;
        };
        StringWrapper.compare = function (a, b) {
            if (a < b) {
                return -1;
            } else if (a > b) {
                return 1;
            } else {
                return 0;
            }
        };
        return StringWrapper;
    }();
    exports.StringWrapper = StringWrapper;
    var StringJoiner = function () {
        function StringJoiner(parts) {
            if (parts === void 0) {
                parts = [];
            }
            this.parts = parts;
        }
        StringJoiner.prototype.add = function (part) {
            this.parts.push(part);
        };
        StringJoiner.prototype.toString = function () {
            return this.parts.join('');
        };
        return StringJoiner;
    }();
    exports.StringJoiner = StringJoiner;
    var NumberParseError = function (_super) {
        __extends(NumberParseError, _super);
        function NumberParseError(message) {
            _super.call(this);
            this.message = message;
        }
        NumberParseError.prototype.toString = function () {
            return this.message;
        };
        return NumberParseError;
    }(Error);
    exports.NumberParseError = NumberParseError;
    var NumberWrapper = function () {
        function NumberWrapper() {}
        NumberWrapper.toFixed = function (n, fractionDigits) {
            return n.toFixed(fractionDigits);
        };
        NumberWrapper.equal = function (a, b) {
            return a === b;
        };
        NumberWrapper.parseIntAutoRadix = function (text) {
            var result = parseInt(text);
            if (isNaN(result)) {
                throw new NumberParseError('Invalid integer literal when parsing ' + text);
            }
            return result;
        };
        NumberWrapper.parseInt = function (text, radix) {
            if (radix == 10) {
                if (/^(\-|\+)?[0-9]+$/.test(text)) {
                    return parseInt(text, radix);
                }
            } else if (radix == 16) {
                if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
                    return parseInt(text, radix);
                }
            } else {
                var result = parseInt(text, radix);
                if (!isNaN(result)) {
                    return result;
                }
            }
            throw new NumberParseError('Invalid integer literal when parsing ' + text + ' in base ' + radix);
        };
        // TODO: NaN is a valid literal but is returned by parseFloat to indicate an error.
        NumberWrapper.parseFloat = function (text) {
            return parseFloat(text);
        };
        Object.defineProperty(NumberWrapper, "NaN", {
            get: function () {
                return NaN;
            },
            enumerable: true,
            configurable: true
        });
        NumberWrapper.isNumeric = function (value) {
            return !isNaN(value - parseFloat(value));
        };
        NumberWrapper.isNaN = function (value) {
            return isNaN(value);
        };
        NumberWrapper.isInteger = function (value) {
            return Number.isInteger(value);
        };
        return NumberWrapper;
    }();
    exports.NumberWrapper = NumberWrapper;
    exports.RegExp = _global.RegExp;
    var FunctionWrapper = function () {
        function FunctionWrapper() {}
        FunctionWrapper.apply = function (fn, posArgs) {
            return fn.apply(null, posArgs);
        };
        FunctionWrapper.bind = function (fn, scope) {
            return fn.bind(scope);
        };
        return FunctionWrapper;
    }();
    exports.FunctionWrapper = FunctionWrapper;
    // JS has NaN !== NaN
    function looseIdentical(a, b) {
        return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
    }
    exports.looseIdentical = looseIdentical;
    // JS considers NaN is the same as NaN for map Key (while NaN !== NaN otherwise)
    // see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map
    function getMapKey(value) {
        return value;
    }
    exports.getMapKey = getMapKey;
    function normalizeBlank(obj) {
        return isBlank(obj) ? null : obj;
    }
    exports.normalizeBlank = normalizeBlank;
    function normalizeBool(obj) {
        return isBlank(obj) ? false : obj;
    }
    exports.normalizeBool = normalizeBool;
    function isJsObject(o) {
        return o !== null && (typeof o === 'function' || typeof o === 'object');
    }
    exports.isJsObject = isJsObject;
    function print(obj) {
        console.log(obj);
    }
    exports.print = print;
    function warn(obj) {
        console.warn(obj);
    }
    exports.warn = warn;
    // Can't be all uppercase as our transpiler would think it is a special directive...
    var Json = function () {
        function Json() {}
        Json.parse = function (s) {
            return _global.JSON.parse(s);
        };
        Json.stringify = function (data) {
            // Dart doesn't take 3 arguments
            return _global.JSON.stringify(data, null, 2);
        };
        return Json;
    }();
    exports.Json = Json;
    var DateWrapper = function () {
        function DateWrapper() {}
        DateWrapper.create = function (year, month, day, hour, minutes, seconds, milliseconds) {
            if (month === void 0) {
                month = 1;
            }
            if (day === void 0) {
                day = 1;
            }
            if (hour === void 0) {
                hour = 0;
            }
            if (minutes === void 0) {
                minutes = 0;
            }
            if (seconds === void 0) {
                seconds = 0;
            }
            if (milliseconds === void 0) {
                milliseconds = 0;
            }
            return new exports.Date(year, month - 1, day, hour, minutes, seconds, milliseconds);
        };
        DateWrapper.fromISOString = function (str) {
            return new exports.Date(str);
        };
        DateWrapper.fromMillis = function (ms) {
            return new exports.Date(ms);
        };
        DateWrapper.toMillis = function (date) {
            return date.getTime();
        };
        DateWrapper.now = function () {
            return new exports.Date();
        };
        DateWrapper.toJson = function (date) {
            return date.toJSON();
        };
        return DateWrapper;
    }();
    exports.DateWrapper = DateWrapper;
    function setValueOnPath(global, path, value) {
        var parts = path.split('.');
        var obj = global;
        while (parts.length > 1) {
            var name = parts.shift();
            if (obj.hasOwnProperty(name) && isPresent(obj[name])) {
                obj = obj[name];
            } else {
                obj = obj[name] = {};
            }
        }
        if (obj === undefined || obj === null) {
            obj = {};
        }
        obj[parts.shift()] = value;
    }
    exports.setValueOnPath = setValueOnPath;
    var _symbolIterator = null;
    function getSymbolIterator() {
        if (isBlank(_symbolIterator)) {
            if (isPresent(globalScope.Symbol) && isPresent(Symbol.iterator)) {
                _symbolIterator = Symbol.iterator;
            } else {
                // es6-shim specific logic
                var keys = Object.getOwnPropertyNames(Map.prototype);
                for (var i = 0; i < keys.length; ++i) {
                    var key = keys[i];
                    if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {
                        _symbolIterator = key;
                    }
                }
            }
        }
        return _symbolIterator;
    }
    exports.getSymbolIterator = getSymbolIterator;
    function evalExpression(sourceUrl, expr, declarations, vars) {
        var fnBody = declarations + "\nreturn " + expr + "\n//# sourceURL=" + sourceUrl;
        var fnArgNames = [];
        var fnArgValues = [];
        for (var argName in vars) {
            fnArgNames.push(argName);
            fnArgValues.push(vars[argName]);
        }
        return new (Function.bind.apply(Function, [void 0].concat(fnArgNames.concat(fnBody))))().apply(void 0, fnArgValues);
    }
    exports.evalExpression = evalExpression;
    function isPrimitive(obj) {
        return !isJsObject(obj);
    }
    exports.isPrimitive = isPrimitive;
    function hasConstructor(value, type) {
        return value.constructor === type;
    }
    exports.hasConstructor = hasConstructor;
    function escape(s) {
        return _global.encodeURI(s);
    }
    exports.escape = escape;
    function escapeRegExp(s) {
        return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
    }
    exports.escapeRegExp = escapeRegExp;
    

    return module.exports;
});
System.registerDynamic('npm:@angular/core@2.0.0-rc.5/src/animation/animation_player.js', ['../facade/exceptions', '../facade/lang', 'reflect-metadata', 'zone.js'], true, function ($__require, exports, module) {
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var exceptions_1 = $__require('../facade/exceptions');
    var lang_1 = $__require('../facade/lang');
    /**
     * @experimental Animation support is experimental.
     */
    var AnimationPlayer = function () {
        function AnimationPlayer() {}
        Object.defineProperty(AnimationPlayer.prototype, "parentPlayer", {
            get: function () {
                throw new exceptions_1.BaseException('NOT IMPLEMENTED: Base Class');
            },
            set: function (player) {
                throw new exceptions_1.BaseException('NOT IMPLEMENTED: Base Class');
            },
            enumerable: true,
            configurable: true
        });
        return AnimationPlayer;
    }();
    exports.AnimationPlayer = AnimationPlayer;
    var NoOpAnimationPlayer = function () {
        function NoOpAnimationPlayer() {
            var _this = this;
            this._subscriptions = [];
            this._started = false;
            this.parentPlayer = null;
            lang_1.scheduleMicroTask(function () {
                return _this._onFinish();
            });
        }
        /** @internal */
        NoOpAnimationPlayer.prototype._onFinish = function () {
            this._subscriptions.forEach(function (entry) {
                entry();
            });
            this._subscriptions = [];
        };
        NoOpAnimationPlayer.prototype.onDone = function (fn) {
            this._subscriptions.push(fn);
        };
        NoOpAnimationPlayer.prototype.hasStarted = function () {
            return this._started;
        };
        NoOpAnimationPlayer.prototype.init = function () {};
        NoOpAnimationPlayer.prototype.play = function () {
            this._started = true;
        };
        NoOpAnimationPlayer.prototype.pause = function () {};
        NoOpAnimationPlayer.prototype.restart = function () {};
        NoOpAnimationPlayer.prototype.finish = function () {
            this._onFinish();
        };
        NoOpAnimationPlayer.prototype.destroy = function () {};
        NoOpAnimationPlayer.prototype.reset = function () {};
        NoOpAnimationPlayer.prototype.setPosition = function (p /** TODO #9100 */) {};
        NoOpAnimationPlayer.prototype.getPosition = function () {
            return 0;
        };
        return NoOpAnimationPlayer;
    }();
    exports.NoOpAnimationPlayer = NoOpAnimationPlayer;
    

    return module.exports;
});
System.registerDynamic("npm:reflect-metadata@0.1.8.json", [], false, function() {
  return {
    "main": "Reflect.js",
    "map": {
      "crypto": "@empty"
    },
    "format": "cjs",
    "meta": {
      "*.json": {
        "format": "json"
      },
      "temp/test/spec.d.ts": {
        "format": "esm"
      },
      "test/reflect/reflect-definemetadata.ts": {
        "format": "esm"
      },
      "test/reflect/reflect-deletemetadata.ts": {
        "format": "esm"
      },
      "test/reflect/reflect-getmetadata.ts": {
        "format": "esm"
      },
      "test/reflect/reflect-getmetadatakeys.ts": {
        "format": "esm"
      },
      "test/reflect/reflect-getownmetadata.ts": {
        "format": "esm"
      },
      "test/reflect/reflect-getownmetadatakeys.ts": {
        "format": "esm"
      },
      "test/reflect/reflect-hasmetadata.ts": {
        "format": "esm"
      },
      "test/reflect/reflect-hasownmetadata.ts": {
        "format": "esm"
      },
      "test/reflect/reflect-metadata.ts": {
        "format": "esm"
      },
      "test/run.ts": {
        "format": "esm"
      },
      "test/spec.ts": {
        "format": "esm"
      },
      "typings.d.ts": {
        "format": "esm"
      }
    }
  };
});

System.registerDynamic("npm:reflect-metadata@0.1.8/Reflect.js", [], true, function ($__require, exports, module) {
    var define,
        global = this || self,
        GLOBAL = global;
    /*! *****************************************************************************
    Copyright (C) Microsoft. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0
    
    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.
    
    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var Reflect;
    (function (Reflect) {
        "use strict";

        var hasOwn = Object.prototype.hasOwnProperty;
        // feature test for Object.create support
        var supportsCreate = typeof Object.create === "function";
        // feature test for __proto__ support
        var supportsProto = function () {
            var sentinel = {};
            function __() {}
            __.prototype = sentinel;
            var instance = new __();
            return instance.__proto__ === sentinel;
        }();
        // create an object in dictionary mode (a.k.a. "slow" mode in v8)
        var createDictionary = supportsCreate ? function () {
            return MakeDictionary(Object.create(null));
        } : supportsProto ? function () {
            return MakeDictionary({ __proto__: null });
        } : function () {
            return MakeDictionary({});
        };
        var HashMap;
        (function (HashMap) {
            var downLevel = !supportsCreate && !supportsProto;
            HashMap.has = downLevel ? function (map, key) {
                return hasOwn.call(map, key);
            } : function (map, key) {
                return key in map;
            };
            HashMap.get = downLevel ? function (map, key) {
                return hasOwn.call(map, key) ? map[key] : undefined;
            } : function (map, key) {
                return map[key];
            };
        })(HashMap || (HashMap = {}));
        // Load global or shim versions of Map, Set, and WeakMap
        var functionPrototype = Object.getPrototypeOf(Function);
        var _Map = typeof Map === "function" ? Map : CreateMapPolyfill();
        var _Set = typeof Set === "function" ? Set : CreateSetPolyfill();
        var _WeakMap = typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
        // [[Metadata]] internal slot
        var Metadata = new _WeakMap();
        /**
          * Applies a set of decorators to a property of a target object.
          * @param decorators An array of decorators.
          * @param target The target object.
          * @param targetKey (Optional) The property key to decorate.
          * @param targetDescriptor (Optional) The property descriptor for the target key
          * @remarks Decorators are applied in reverse order.
          * @example
          *
          *     class Example {
          *         // property declarations are not part of ES6, though they are valid in TypeScript:
          *         // static staticProperty;
          *         // property;
          *
          *         constructor(p) { }
          *         static staticMethod(p) { }
          *         method(p) { }
          *     }
          *
          *     // constructor
          *     Example = Reflect.decorate(decoratorsArray, Example);
          *
          *     // property (on constructor)
          *     Reflect.decorate(decoratorsArray, Example, "staticProperty");
          *
          *     // property (on prototype)
          *     Reflect.decorate(decoratorsArray, Example.prototype, "property");
          *
          *     // method (on constructor)
          *     Object.defineProperty(Example, "staticMethod",
          *         Reflect.decorate(decoratorsArray, Example, "staticMethod",
          *             Object.getOwnPropertyDescriptor(Example, "staticMethod")));
          *
          *     // method (on prototype)
          *     Object.defineProperty(Example.prototype, "method",
          *         Reflect.decorate(decoratorsArray, Example.prototype, "method",
          *             Object.getOwnPropertyDescriptor(Example.prototype, "method")));
          *
          */
        function decorate(decorators, target, targetKey, targetDescriptor) {
            if (!IsUndefined(targetDescriptor)) {
                if (!IsArray(decorators)) throw new TypeError();
                if (!IsObject(target)) throw new TypeError();
                if (IsUndefined(targetKey)) throw new TypeError();
                if (!IsObject(targetDescriptor)) throw new TypeError();
                targetKey = ToPropertyKey(targetKey);
                return DecoratePropertyWithDescriptor(decorators, target, targetKey, targetDescriptor);
            } else if (!IsUndefined(targetKey)) {
                if (!IsArray(decorators)) throw new TypeError();
                if (!IsObject(target)) throw new TypeError();
                targetKey = ToPropertyKey(targetKey);
                return DecoratePropertyWithoutDescriptor(decorators, target, targetKey);
            } else {
                if (!IsArray(decorators)) throw new TypeError();
                if (!IsConstructor(target)) throw new TypeError();
                return DecorateConstructor(decorators, target);
            }
        }
        Reflect.decorate = decorate;
        /**
          * A default metadata decorator factory that can be used on a class, class member, or parameter.
          * @param metadataKey The key for the metadata entry.
          * @param metadataValue The value for the metadata entry.
          * @returns A decorator function.
          * @remarks
          * If `metadataKey` is already defined for the target and target key, the
          * metadataValue for that key will be overwritten.
          * @example
          *
          *     // constructor
          *     @Reflect.metadata(key, value)
          *     class Example {
          *     }
          *
          *     // property (on constructor, TypeScript only)
          *     class Example {
          *         @Reflect.metadata(key, value)
          *         static staticProperty;
          *     }
          *
          *     // property (on prototype, TypeScript only)
          *     class Example {
          *         @Reflect.metadata(key, value)
          *         property;
          *     }
          *
          *     // method (on constructor)
          *     class Example {
          *         @Reflect.metadata(key, value)
          *         static staticMethod() { }
          *     }
          *
          *     // method (on prototype)
          *     class Example {
          *         @Reflect.metadata(key, value)
          *         method() { }
          *     }
          *
          */
        function metadata(metadataKey, metadataValue) {
            function decorator(target, targetKey) {
                if (!IsUndefined(targetKey)) {
                    if (!IsObject(target)) throw new TypeError();
                    targetKey = ToPropertyKey(targetKey);
                    OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);
                } else {
                    if (!IsConstructor(target)) throw new TypeError();
                    OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, /*targetKey*/undefined);
                }
            }
            return decorator;
        }
        Reflect.metadata = metadata;
        /**
          * Define a unique metadata entry on the target.
          * @param metadataKey A key used to store and retrieve metadata.
          * @param metadataValue A value that contains attached metadata.
          * @param target The target object on which to define metadata.
          * @param targetKey (Optional) The property key for the target.
          * @example
          *
          *     class Example {
          *         // property declarations are not part of ES6, though they are valid in TypeScript:
          *         // static staticProperty;
          *         // property;
          *
          *         constructor(p) { }
          *         static staticMethod(p) { }
          *         method(p) { }
          *     }
          *
          *     // constructor
          *     Reflect.defineMetadata("custom:annotation", options, Example);
          *
          *     // property (on constructor)
          *     Reflect.defineMetadata("custom:annotation", options, Example, "staticProperty");
          *
          *     // property (on prototype)
          *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "property");
          *
          *     // method (on constructor)
          *     Reflect.defineMetadata("custom:annotation", options, Example, "staticMethod");
          *
          *     // method (on prototype)
          *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "method");
          *
          *     // decorator factory as metadata-producing annotation.
          *     function MyAnnotation(options): Decorator {
          *         return (target, key?) => Reflect.defineMetadata("custom:annotation", options, target, key);
          *     }
          *
          */
        function defineMetadata(metadataKey, metadataValue, target, targetKey) {
            if (!IsObject(target)) throw new TypeError();
            if (!IsUndefined(targetKey)) targetKey = ToPropertyKey(targetKey);
            return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);
        }
        Reflect.defineMetadata = defineMetadata;
        /**
          * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.
          * @param metadataKey A key used to store and retrieve metadata.
          * @param target The target object on which the metadata is defined.
          * @param targetKey (Optional) The property key for the target.
          * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.
          * @example
          *
          *     class Example {
          *         // property declarations are not part of ES6, though they are valid in TypeScript:
          *         // static staticProperty;
          *         // property;
          *
          *         constructor(p) { }
          *         static staticMethod(p) { }
          *         method(p) { }
          *     }
          *
          *     // constructor
          *     result = Reflect.hasMetadata("custom:annotation", Example);
          *
          *     // property (on constructor)
          *     result = Reflect.hasMetadata("custom:annotation", Example, "staticProperty");
          *
          *     // property (on prototype)
          *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "property");
          *
          *     // method (on constructor)
          *     result = Reflect.hasMetadata("custom:annotation", Example, "staticMethod");
          *
          *     // method (on prototype)
          *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "method");
          *
          */
        function hasMetadata(metadataKey, target, targetKey) {
            if (!IsObject(target)) throw new TypeError();
            if (!IsUndefined(targetKey)) targetKey = ToPropertyKey(targetKey);
            return OrdinaryHasMetadata(metadataKey, target, targetKey);
        }
        Reflect.hasMetadata = hasMetadata;
        /**
          * Gets a value indicating whether the target object has the provided metadata key defined.
          * @param metadataKey A key used to store and retrieve metadata.
          * @param target The target object on which the metadata is defined.
          * @param targetKey (Optional) The property key for the target.
          * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.
          * @example
          *
          *     class Example {
          *         // property declarations are not part of ES6, though they are valid in TypeScript:
          *         // static staticProperty;
          *         // property;
          *
          *         constructor(p) { }
          *         static staticMethod(p) { }
          *         method(p) { }
          *     }
          *
          *     // constructor
          *     result = Reflect.hasOwnMetadata("custom:annotation", Example);
          *
          *     // property (on constructor)
          *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticProperty");
          *
          *     // property (on prototype)
          *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "property");
          *
          *     // method (on constructor)
          *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticMethod");
          *
          *     // method (on prototype)
          *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "method");
          *
          */
        function hasOwnMetadata(metadataKey, target, targetKey) {
            if (!IsObject(target)) throw new TypeError();
            if (!IsUndefined(targetKey)) targetKey = ToPropertyKey(targetKey);
            return OrdinaryHasOwnMetadata(metadataKey, target, targetKey);
        }
        Reflect.hasOwnMetadata = hasOwnMetadata;
        /**
          * Gets the metadata value for the provided metadata key on the target object or its prototype chain.
          * @param metadataKey A key used to store and retrieve metadata.
          * @param target The target object on which the metadata is defined.
          * @param targetKey (Optional) The property key for the target.
          * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
          * @example
          *
          *     class Example {
          *         // property declarations are not part of ES6, though they are valid in TypeScript:
          *         // static staticProperty;
          *         // property;
          *
          *         constructor(p) { }
          *         static staticMethod(p) { }
          *         method(p) { }
          *     }
          *
          *     // constructor
          *     result = Reflect.getMetadata("custom:annotation", Example);
          *
          *     // property (on constructor)
          *     result = Reflect.getMetadata("custom:annotation", Example, "staticProperty");
          *
          *     // property (on prototype)
          *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "property");
          *
          *     // method (on constructor)
          *     result = Reflect.getMetadata("custom:annotation", Example, "staticMethod");
          *
          *     // method (on prototype)
          *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "method");
          *
          */
        function getMetadata(metadataKey, target, targetKey) {
            if (!IsObject(target)) throw new TypeError();
            if (!IsUndefined(targetKey)) targetKey = ToPropertyKey(targetKey);
            return OrdinaryGetMetadata(metadataKey, target, targetKey);
        }
        Reflect.getMetadata = getMetadata;
        /**
          * Gets the metadata value for the provided metadata key on the target object.
          * @param metadataKey A key used to store and retrieve metadata.
          * @param target The target object on which the metadata is defined.
          * @param targetKey (Optional) The property key for the target.
          * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
          * @example
          *
          *     class Example {
          *         // property declarations are not part of ES6, though they are valid in TypeScript:
          *         // static staticProperty;
          *         // property;
          *
          *         constructor(p) { }
          *         static staticMethod(p) { }
          *         method(p) { }
          *     }
          *
          *     // constructor
          *     result = Reflect.getOwnMetadata("custom:annotation", Example);
          *
          *     // property (on constructor)
          *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticProperty");
          *
          *     // property (on prototype)
          *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "property");
          *
          *     // method (on constructor)
          *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticMethod");
          *
          *     // method (on prototype)
          *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "method");
          *
          */
        function getOwnMetadata(metadataKey, target, targetKey) {
            if (!IsObject(target)) throw new TypeError();
            if (!IsUndefined(targetKey)) targetKey = ToPropertyKey(targetKey);
            return OrdinaryGetOwnMetadata(metadataKey, target, targetKey);
        }
        Reflect.getOwnMetadata = getOwnMetadata;
        /**
          * Gets the metadata keys defined on the target object or its prototype chain.
          * @param target The target object on which the metadata is defined.
          * @param targetKey (Optional) The property key for the target.
          * @returns An array of unique metadata keys.
          * @example
          *
          *     class Example {
          *         // property declarations are not part of ES6, though they are valid in TypeScript:
          *         // static staticProperty;
          *         // property;
          *
          *         constructor(p) { }
          *         static staticMethod(p) { }
          *         method(p) { }
          *     }
          *
          *     // constructor
          *     result = Reflect.getMetadataKeys(Example);
          *
          *     // property (on constructor)
          *     result = Reflect.getMetadataKeys(Example, "staticProperty");
          *
          *     // property (on prototype)
          *     result = Reflect.getMetadataKeys(Example.prototype, "property");
          *
          *     // method (on constructor)
          *     result = Reflect.getMetadataKeys(Example, "staticMethod");
          *
          *     // method (on prototype)
          *     result = Reflect.getMetadataKeys(Example.prototype, "method");
          *
          */
        function getMetadataKeys(target, targetKey) {
            if (!IsObject(target)) throw new TypeError();
            if (!IsUndefined(targetKey)) targetKey = ToPropertyKey(targetKey);
            return OrdinaryMetadataKeys(target, targetKey);
        }
        Reflect.getMetadataKeys = getMetadataKeys;
        /**
          * Gets the unique metadata keys defined on the target object.
          * @param target The target object on which the metadata is defined.
          * @param targetKey (Optional) The property key for the target.
          * @returns An array of unique metadata keys.
          * @example
          *
          *     class Example {
          *         // property declarations are not part of ES6, though they are valid in TypeScript:
          *         // static staticProperty;
          *         // property;
          *
          *         constructor(p) { }
          *         static staticMethod(p) { }
          *         method(p) { }
          *     }
          *
          *     // constructor
          *     result = Reflect.getOwnMetadataKeys(Example);
          *
          *     // property (on constructor)
          *     result = Reflect.getOwnMetadataKeys(Example, "staticProperty");
          *
          *     // property (on prototype)
          *     result = Reflect.getOwnMetadataKeys(Example.prototype, "property");
          *
          *     // method (on constructor)
          *     result = Reflect.getOwnMetadataKeys(Example, "staticMethod");
          *
          *     // method (on prototype)
          *     result = Reflect.getOwnMetadataKeys(Example.prototype, "method");
          *
          */
        function getOwnMetadataKeys(target, targetKey) {
            if (!IsObject(target)) throw new TypeError();
            if (!IsUndefined(targetKey)) targetKey = ToPropertyKey(targetKey);
            return OrdinaryOwnMetadataKeys(target, targetKey);
        }
        Reflect.getOwnMetadataKeys = getOwnMetadataKeys;
        /**
          * Deletes the metadata entry from the target object with the provided key.
          * @param metadataKey A key used to store and retrieve metadata.
          * @param target The target object on which the metadata is defined.
          * @param targetKey (Optional) The property key for the target.
          * @returns `true` if the metadata entry was found and deleted; otherwise, false.
          * @example
          *
          *     class Example {
          *         // property declarations are not part of ES6, though they are valid in TypeScript:
          *         // static staticProperty;
          *         // property;
          *
          *         constructor(p) { }
          *         static staticMethod(p) { }
          *         method(p) { }
          *     }
          *
          *     // constructor
          *     result = Reflect.deleteMetadata("custom:annotation", Example);
          *
          *     // property (on constructor)
          *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticProperty");
          *
          *     // property (on prototype)
          *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "property");
          *
          *     // method (on constructor)
          *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticMethod");
          *
          *     // method (on prototype)
          *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "method");
          *
          */
        function deleteMetadata(metadataKey, target, targetKey) {
            // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#deletemetadata-metadatakey-p-
            if (!IsObject(target)) throw new TypeError();
            if (!IsUndefined(targetKey)) targetKey = ToPropertyKey(targetKey);
            var metadataMap = GetOrCreateMetadataMap(target, targetKey, /*create*/false);
            if (IsUndefined(metadataMap)) return false;
            if (!metadataMap.delete(metadataKey)) return false;
            if (metadataMap.size > 0) return true;
            var targetMetadata = Metadata.get(target);
            targetMetadata.delete(targetKey);
            if (targetMetadata.size > 0) return true;
            Metadata.delete(target);
            return true;
        }
        Reflect.deleteMetadata = deleteMetadata;
        function DecorateConstructor(decorators, target) {
            for (var i = decorators.length - 1; i >= 0; --i) {
                var decorator = decorators[i];
                var decorated = decorator(target);
                if (!IsUndefined(decorated)) {
                    if (!IsConstructor(decorated)) throw new TypeError();
                    target = decorated;
                }
            }
            return target;
        }
        function DecoratePropertyWithDescriptor(decorators, target, propertyKey, descriptor) {
            for (var i = decorators.length - 1; i >= 0; --i) {
                var decorator = decorators[i];
                var decorated = decorator(target, propertyKey, descriptor);
                if (!IsUndefined(decorated)) {
                    if (!IsObject(decorated)) throw new TypeError();
                    descriptor = decorated;
                }
            }
            return descriptor;
        }
        function DecoratePropertyWithoutDescriptor(decorators, target, propertyKey) {
            for (var i = decorators.length - 1; i >= 0; --i) {
                var decorator = decorators[i];
                decorator(target, propertyKey);
            }
        }
        // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#getorcreatemetadatamap--o-p-create-
        function GetOrCreateMetadataMap(target, targetKey, create) {
            var targetMetadata = Metadata.get(target);
            if (!targetMetadata) {
                if (!create) return undefined;
                targetMetadata = new _Map();
                Metadata.set(target, targetMetadata);
            }
            var keyMetadata = targetMetadata.get(targetKey);
            if (!keyMetadata) {
                if (!create) return undefined;
                keyMetadata = new _Map();
                targetMetadata.set(targetKey, keyMetadata);
            }
            return keyMetadata;
        }
        // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinaryhasmetadata--metadatakey-o-p-
        function OrdinaryHasMetadata(MetadataKey, O, P) {
            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
            if (hasOwn) return true;
            var parent = GetPrototypeOf(O);
            return parent !== null ? OrdinaryHasMetadata(MetadataKey, parent, P) : false;
        }
        // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinaryhasownmetadata--metadatakey-o-p-
        function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
            var metadataMap = GetOrCreateMetadataMap(O, P, /*create*/false);
            return metadataMap !== undefined && Boolean(metadataMap.has(MetadataKey));
        }
        // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinarygetmetadata--metadatakey-o-p-
        function OrdinaryGetMetadata(MetadataKey, O, P) {
            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
            if (hasOwn) return OrdinaryGetOwnMetadata(MetadataKey, O, P);
            var parent = GetPrototypeOf(O);
            return parent !== null ? OrdinaryGetMetadata(MetadataKey, parent, P) : undefined;
        }
        // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinarygetownmetadata--metadatakey-o-p-
        function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
            var metadataMap = GetOrCreateMetadataMap(O, P, /*create*/false);
            return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
        }
        // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinarydefineownmetadata--metadatakey-metadatavalue-o-p-
        function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
            var metadataMap = GetOrCreateMetadataMap(O, P, /*create*/true);
            metadataMap.set(MetadataKey, MetadataValue);
        }
        // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinarymetadatakeys--o-p-
        function OrdinaryMetadataKeys(O, P) {
            var ownKeys = OrdinaryOwnMetadataKeys(O, P);
            var parent = GetPrototypeOf(O);
            if (parent === null) return ownKeys;
            var parentKeys = OrdinaryMetadataKeys(parent, P);
            if (parentKeys.length <= 0) return ownKeys;
            if (ownKeys.length <= 0) return parentKeys;
            var keys = new _Set();
            for (var _i = 0; _i < ownKeys.length; _i++) {
                var key = ownKeys[_i];
                keys.add(key);
            }
            for (var _a = 0; _a < parentKeys.length; _a++) {
                var key = parentKeys[_a];
                keys.add(key);
            }
            return getKeys(keys);
        }
        // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinaryownmetadatakeys--o-p-
        function OrdinaryOwnMetadataKeys(target, targetKey) {
            var metadataMap = GetOrCreateMetadataMap(target, targetKey, /*create*/false);
            var keys = [];
            if (metadataMap) forEach(metadataMap, function (_, key) {
                return keys.push(key);
            });
            return keys;
        }
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-undefined-type
        function IsUndefined(x) {
            return x === undefined;
        }
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isarray
        function IsArray(x) {
            return Array.isArray ? Array.isArray(x) : x instanceof Array || Object.prototype.toString.call(x) === "[object Array]";
        }
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object-type
        function IsObject(x) {
            return typeof x === "object" ? x !== null : typeof x === "function";
        }
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isconstructor
        function IsConstructor(x) {
            return typeof x === "function";
        }
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-symbol-type
        function IsSymbol(x) {
            return typeof x === "symbol";
        }
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-topropertykey
        function ToPropertyKey(value) {
            return IsSymbol(value) ? value : String(value);
        }
        function GetPrototypeOf(O) {
            var proto = Object.getPrototypeOf(O);
            if (typeof O !== "function" || O === functionPrototype) return proto;
            // TypeScript doesn't set __proto__ in ES5, as it's non-standard.
            // Try to determine the superclass Exampleonstructor. Compatible implementations
            // must either set __proto__ on a subclass Exampleonstructor to the superclass Exampleonstructor,
            // or ensure each class has a valid `constructor` property on its prototype that
            // points back to the constructor.
            // If this is not the same as Function.[[Prototype]], then this is definately inherited.
            // This is the case when in ES6 or when using __proto__ in a compatible browser.
            if (proto !== functionPrototype) return proto;
            // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.
            var prototype = O.prototype;
            var prototypeProto = prototype && Object.getPrototypeOf(prototype);
            if (prototypeProto == null || prototypeProto === Object.prototype) return proto;
            // If the constructor was not a function, then we cannot determine the heritage.
            var constructor = prototypeProto.constructor;
            if (typeof constructor !== "function") return proto;
            // If we have some kind of self-reference, then we cannot determine the heritage.
            if (constructor === O) return proto;
            // we have a pretty good guess at the heritage.
            return constructor;
        }
        function IteratorStep(iterator) {
            var result = iterator.next();
            return result.done ? undefined : result;
        }
        function IteratorClose(iterator) {
            var f = iterator["return"];
            if (f) f.call(iterator);
        }
        function forEach(source, callback, thisArg) {
            var entries = source.entries;
            if (typeof entries === "function") {
                var iterator = entries.call(source);
                var result;
                try {
                    while (result = IteratorStep(iterator)) {
                        var _a = result.value,
                            key = _a[0],
                            value = _a[1];
                        callback.call(thisArg, value, key, source);
                    }
                } finally {
                    if (result) IteratorClose(iterator);
                }
            } else {
                var forEach_1 = source.forEach;
                if (typeof forEach_1 === "function") {
                    forEach_1.call(source, callback, thisArg);
                }
            }
        }
        function getKeys(source) {
            var keys = [];
            forEach(source, function (_, key) {
                keys.push(key);
            });
            return keys;
        }
        // naive MapIterator shim
        function CreateMapIterator(keys, values, kind) {
            var index = 0;
            return {
                next: function () {
                    if ((keys || values) && index < (keys || values).length) {
                        var current = index++;
                        switch (kind) {
                            case "key":
                                return { value: keys[current], done: false };
                            case "value":
                                return { value: values[current], done: false };
                            case "key+value":
                                return { value: [keys[current], values[current]], done: false };
                        }
                    }
                    keys = undefined;
                    values = undefined;
                    return { value: undefined, done: true };
                },
                "throw": function (error) {
                    if (keys || values) {
                        keys = undefined;
                        values = undefined;
                    }
                    throw error;
                },
                "return": function (value) {
                    if (keys || values) {
                        keys = undefined;
                        values = undefined;
                    }
                    return { value: value, done: true };
                }
            };
        }
        // naive Map shim
        function CreateMapPolyfill() {
            var cacheSentinel = {};
            return function () {
                function Map() {
                    this._keys = [];
                    this._values = [];
                    this._cacheKey = cacheSentinel;
                    this._cacheIndex = -2;
                }
                Object.defineProperty(Map.prototype, "size", {
                    get: function () {
                        return this._keys.length;
                    },
                    enumerable: true,
                    configurable: true
                });
                Map.prototype.has = function (key) {
                    return this._find(key, /*insert*/false) >= 0;
                };
                Map.prototype.get = function (key) {
                    var index = this._find(key, /*insert*/false);
                    return index >= 0 ? this._values[index] : undefined;
                };
                Map.prototype.set = function (key, value) {
                    var index = this._find(key, /*insert*/true);
                    this._values[index] = value;
                    return this;
                };
                Map.prototype.delete = function (key) {
                    var index = this._find(key, /*insert*/false);
                    if (index >= 0) {
                        var size = this._keys.length;
                        for (var i = index + 1; i < size; i++) {
                            this._keys[i - 1] = this._keys[i];
                            this._values[i - 1] = this._values[i];
                        }
                        this._keys.length--;
                        this._values.length--;
                        this._cacheKey = cacheSentinel;
                        this._cacheIndex = -2;
                        return true;
                    }
                    return false;
                };
                Map.prototype.clear = function () {
                    this._keys.length = 0;
                    this._values.length = 0;
                    this._cacheKey = cacheSentinel;
                    this._cacheIndex = -2;
                };
                Map.prototype.keys = function () {
                    return CreateMapIterator(this._keys, /*values*/undefined, "key");
                };
                Map.prototype.values = function () {
                    return CreateMapIterator( /*keys*/undefined, this._values, "value");
                };
                Map.prototype.entries = function () {
                    return CreateMapIterator(this._keys, this._values, "key+value");
                };
                Map.prototype._find = function (key, insert) {
                    if (this._cacheKey === key) return this._cacheIndex;
                    var index = this._keys.indexOf(key);
                    if (index < 0 && insert) {
                        index = this._keys.length;
                        this._keys.push(key);
                        this._values.push(undefined);
                    }
                    return this._cacheKey = key, this._cacheIndex = index;
                };
                return Map;
            }();
        }
        // naive Set shim
        function CreateSetPolyfill() {
            return function () {
                function Set() {
                    this._map = new _Map();
                }
                Object.defineProperty(Set.prototype, "size", {
                    get: function () {
                        return this._map.size;
                    },
                    enumerable: true,
                    configurable: true
                });
                Set.prototype.has = function (value) {
                    return this._map.has(value);
                };
                Set.prototype.add = function (value) {
                    return this._map.set(value, value), this;
                };
                Set.prototype.delete = function (value) {
                    return this._map.delete(value);
                };
                Set.prototype.clear = function () {
                    this._map.clear();
                };
                Set.prototype.keys = function () {
                    return this._map.keys();
                };
                Set.prototype.values = function () {
                    return this._map.values();
                };
                Set.prototype.entries = function () {
                    return this._map.entries();
                };
                return Set;
            }();
        }
        // naive WeakMap shim
        function CreateWeakMapPolyfill() {
            var UUID_SIZE = 16;
            var keys = createDictionary();
            var rootKey = CreateUniqueKey();
            return function () {
                function WeakMap() {
                    this._key = CreateUniqueKey();
                }
                WeakMap.prototype.has = function (target) {
                    var table = GetOrCreateWeakMapTable(target, /*create*/false);
                    return table !== undefined ? HashMap.has(table, this._key) : false;
                };
                WeakMap.prototype.get = function (target) {
                    var table = GetOrCreateWeakMapTable(target, /*create*/false);
                    return table !== undefined ? HashMap.get(table, this._key) : undefined;
                };
                WeakMap.prototype.set = function (target, value) {
                    var table = GetOrCreateWeakMapTable(target, /*create*/true);
                    table[this._key] = value;
                    return this;
                };
                WeakMap.prototype.delete = function (target) {
                    var table = GetOrCreateWeakMapTable(target, /*create*/false);
                    return table !== undefined ? delete table[this._key] : false;
                };
                WeakMap.prototype.clear = function () {
                    // NOTE: not a real clear, just makes the previous data unreachable
                    this._key = CreateUniqueKey();
                };
                return WeakMap;
            }();
            function FillRandomBytes(buffer, size) {
                for (var i = 0; i < size; ++i) buffer[i] = Math.random() * 0xff | 0;
                return buffer;
            }
            function GenRandomBytes(size) {
                if (typeof Uint8Array === "function") {
                    if (typeof crypto !== "undefined") return crypto.getRandomValues(new Uint8Array(size));
                    if (typeof msCrypto !== "undefined") return msCrypto.getRandomValues(new Uint8Array(size));
                    return FillRandomBytes(new Uint8Array(size), size);
                }
                return FillRandomBytes(new Array(size), size);
            }
            function CreateUUID() {
                var data = GenRandomBytes(UUID_SIZE);
                // mark as random - RFC 4122 § 4.4
                data[6] = data[6] & 0x4f | 0x40;
                data[8] = data[8] & 0xbf | 0x80;
                var result = "";
                for (var offset = 0; offset < UUID_SIZE; ++offset) {
                    var byte = data[offset];
                    if (offset === 4 || offset === 6 || offset === 8) result += "-";
                    if (byte < 16) result += "0";
                    result += byte.toString(16).toLowerCase();
                }
                return result;
            }
            function CreateUniqueKey() {
                var key;
                do key = "@@WeakMap@@" + CreateUUID(); while (HashMap.has(keys, key));
                keys[key] = true;
                return key;
            }
            function GetOrCreateWeakMapTable(target, create) {
                if (!hasOwn.call(target, rootKey)) {
                    if (!create) return undefined;
                    Object.defineProperty(target, rootKey, { value: createDictionary() });
                }
                return target[rootKey];
            }
        }
        // uses a heuristic used by v8 and chakra to force an object into dictionary mode.
        function MakeDictionary(obj) {
            obj.__DICTIONARY_MODE__ = 1;
            delete obj.____DICTIONARY_MODE__;
            return obj;
        }
        // patch global Reflect
        (function (__global) {
            if (typeof __global.Reflect !== "undefined") {
                if (__global.Reflect !== Reflect) {
                    for (var p in Reflect) {
                        if (hasOwn.call(Reflect, p)) {
                            __global.Reflect[p] = Reflect[p];
                        }
                    }
                }
            } else {
                __global.Reflect = Reflect;
            }
        })(typeof window !== "undefined" ? window : typeof WorkerGlobalScope !== "undefined" ? self : typeof global !== "undefined" ? global : Function("return this;")());
    })(Reflect || (Reflect = {}));
    

    return module.exports;
});
System.registerDynamic("github:jspm/nodelibs-process@0.2.0-alpha.json", [], false, function() {
  return {
    "main": "./process.js"
  };
});

System.registerDynamic('github:jspm/nodelibs-process@0.2.0-alpha/process.js', ['@system-env'], true, function ($__require, exports, module) {
    var define,
        global = this || self,
        GLOBAL = global;
    // From https://github.com/defunctzombie/node-process/blob/master/browser.js
    // shim for using process in browser

    var productionEnv = $__require('@system-env').production;

    var process = module.exports = {};
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;

    function cleanUpNextTick() {
        draining = false;
        if (currentQueue.length) {
            queue = currentQueue.concat(queue);
        } else {
            queueIndex = -1;
        }
        if (queue.length) {
            drainQueue();
        }
    }

    function drainQueue() {
        if (draining) {
            return;
        }
        var timeout = setTimeout(cleanUpNextTick);
        draining = true;

        var len = queue.length;
        while (len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
                if (currentQueue) {
                    currentQueue[queueIndex].run();
                }
            }
            queueIndex = -1;
            len = queue.length;
        }
        currentQueue = null;
        draining = false;
        clearTimeout(timeout);
    }

    process.nextTick = function (fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
                args[i - 1] = arguments[i];
            }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
            setTimeout(drainQueue, 0);
        }
    };

    // v8 likes predictible objects
    function Item(fun, array) {
        this.fun = fun;
        this.array = array;
    }
    Item.prototype.run = function () {
        this.fun.apply(null, this.array);
    };
    process.title = 'browser';
    process.browser = true;
    process.env = {
        NODE_ENV: productionEnv ? 'production' : 'development'
    };
    process.argv = [];
    process.version = ''; // empty string to avoid regexp issues
    process.versions = {};

    function noop() {}

    process.on = noop;
    process.addListener = noop;
    process.once = noop;
    process.off = noop;
    process.removeListener = noop;
    process.removeAllListeners = noop;
    process.emit = noop;

    process.binding = function (name) {
        throw new Error('process.binding is not supported');
    };

    process.cwd = function () {
        return '/';
    };
    process.chdir = function (dir) {
        throw new Error('process.chdir is not supported');
    };
    process.umask = function () {
        return 0;
    };
    return module.exports;
});
System.registerDynamic("npm:zone.js@0.6.12.json", [], false, function() {
  return {
    "main": "dist/zone-node.js",
    "format": "cjs",
    "meta": {
      "*": {
        "globals": {
          "process": "process"
        }
      },
      "*.json": {
        "format": "json"
      },
      "lib/browser/define-property.ts": {
        "format": "esm"
      },
      "lib/browser/event-target.ts": {
        "format": "esm"
      }
    },
    "map": {
      "./dist/zone-node.js": {
        "browser": "./dist/zone.js"
      }
    }
  };
});

System.registerDynamic("npm:zone.js@0.6.12/dist/zone.js", ["process"], true, function ($__require, exports, module) {
	var process = $__require("process");
	var define,
	    global = this || self,
	    GLOBAL = global;
	/******/(function (modules) {
		// webpackBootstrap
		/******/ // The module cache
		/******/var installedModules = {};

		/******/ // The require function
		/******/function __webpack_require__(moduleId) {

			/******/ // Check if module is in cache
			/******/if (installedModules[moduleId])
				/******/return installedModules[moduleId].exports;

			/******/ // Create a new module (and put it into the cache)
			/******/var module = installedModules[moduleId] = {
				/******/exports: {},
				/******/id: moduleId,
				/******/loaded: false
				/******/ };

			/******/ // Execute the module function
			/******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

			/******/ // Flag the module as loaded
			/******/module.loaded = true;

			/******/ // Return the exports of the module
			/******/return module.exports;
			/******/
		}

		/******/ // expose the modules object (__webpack_modules__)
		/******/__webpack_require__.m = modules;

		/******/ // expose the module cache
		/******/__webpack_require__.c = installedModules;

		/******/ // __webpack_public_path__
		/******/__webpack_require__.p = "";

		/******/ // Load entry module and return exports
		/******/return __webpack_require__(0);
		/******/
	})(
	/************************************************************************/
	/******/[
	/* 0 */
	/***/function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function (global) {
			"use strict";

			__webpack_require__(1);
			var event_target_1 = __webpack_require__(2);
			var define_property_1 = __webpack_require__(4);
			var register_element_1 = __webpack_require__(5);
			var property_descriptor_1 = __webpack_require__(6);
			var timers_1 = __webpack_require__(8);
			var utils_1 = __webpack_require__(3);
			var set = 'set';
			var clear = 'clear';
			var blockingMethods = ['alert', 'prompt', 'confirm'];
			var _global = typeof window == 'undefined' ? global : window;
			timers_1.patchTimer(_global, set, clear, 'Timeout');
			timers_1.patchTimer(_global, set, clear, 'Interval');
			timers_1.patchTimer(_global, set, clear, 'Immediate');
			timers_1.patchTimer(_global, 'request', 'cancelMacroTask', 'AnimationFrame');
			timers_1.patchTimer(_global, 'mozRequest', 'mozCancel', 'AnimationFrame');
			timers_1.patchTimer(_global, 'webkitRequest', 'webkitCancel', 'AnimationFrame');
			for (var i = 0; i < blockingMethods.length; i++) {
				var name = blockingMethods[i];
				utils_1.patchMethod(_global, name, function (delegate, symbol, name) {
					return function (s, args) {
						return Zone.current.run(delegate, _global, args, name);
					};
				});
			}
			event_target_1.eventTargetPatch(_global);
			property_descriptor_1.propertyDescriptorPatch(_global);
			utils_1.patchClass('MutationObserver');
			utils_1.patchClass('WebKitMutationObserver');
			utils_1.patchClass('FileReader');
			define_property_1.propertyPatch();
			register_element_1.registerElementPatch(_global);
			// Treat XMLHTTPRequest as a macrotask.
			patchXHR(_global);
			var XHR_TASK = utils_1.zoneSymbol('xhrTask');
			function patchXHR(window) {
				function findPendingTask(target) {
					var pendingTask = target[XHR_TASK];
					return pendingTask;
				}
				function scheduleTask(task) {
					var data = task.data;
					data.target.addEventListener('readystatechange', function () {
						if (data.target.readyState === XMLHttpRequest.DONE) {
							if (!data.aborted) {
								task.invoke();
							}
						}
					});
					var storedTask = data.target[XHR_TASK];
					if (!storedTask) {
						data.target[XHR_TASK] = task;
					}
					setNative.apply(data.target, data.args);
					return task;
				}
				function placeholderCallback() {}
				function clearTask(task) {
					var data = task.data;
					// Note - ideally, we would call data.target.removeEventListener here, but it's too late
					// to prevent it from firing. So instead, we store info for the event listener.
					data.aborted = true;
					return clearNative.apply(data.target, data.args);
				}
				var setNative = utils_1.patchMethod(window.XMLHttpRequest.prototype, 'send', function () {
					return function (self, args) {
						var zone = Zone.current;
						var options = {
							target: self,
							isPeriodic: false,
							delay: null,
							args: args,
							aborted: false
						};
						return zone.scheduleMacroTask('XMLHttpRequest.send', placeholderCallback, options, scheduleTask, clearTask);
					};
				});
				var clearNative = utils_1.patchMethod(window.XMLHttpRequest.prototype, 'abort', function (delegate) {
					return function (self, args) {
						var task = findPendingTask(self);
						if (task && typeof task.type == 'string') {
							// If the XHR has already completed, do nothing.
							if (task.cancelFn == null) {
								return;
							}
							task.zone.cancelTask(task);
						}
						// Otherwise, we are trying to abort an XHR which has not yet been sent, so there is no task to cancel. Do nothing.
					};
				});
			}
			/// GEO_LOCATION
			if (_global['navigator'] && _global['navigator'].geolocation) {
				utils_1.patchPrototype(_global['navigator'].geolocation, ['getCurrentPosition', 'watchPosition']);
			}

			/* WEBPACK VAR INJECTION */
		}).call(exports, function () {
			return this;
		}());

		/***/
	},
	/* 1 */
	/***/function (module, exports) {

		/* WEBPACK VAR INJECTION */(function (global) {
			;
			;
			var Zone = function (global) {
				var Zone = function () {
					function Zone(parent, zoneSpec) {
						this._properties = null;
						this._parent = parent;
						this._name = zoneSpec ? zoneSpec.name || 'unnamed' : '<root>';
						this._properties = zoneSpec && zoneSpec.properties || {};
						this._zoneDelegate = new ZoneDelegate(this, this._parent && this._parent._zoneDelegate, zoneSpec);
					}
					Object.defineProperty(Zone, "current", {
						get: function () {
							return _currentZone;
						},
						enumerable: true,
						configurable: true
					});
					;
					Object.defineProperty(Zone, "currentTask", {
						get: function () {
							return _currentTask;
						},
						enumerable: true,
						configurable: true
					});
					;
					Object.defineProperty(Zone.prototype, "parent", {
						get: function () {
							return this._parent;
						},
						enumerable: true,
						configurable: true
					});
					;
					Object.defineProperty(Zone.prototype, "name", {
						get: function () {
							return this._name;
						},
						enumerable: true,
						configurable: true
					});
					;
					Zone.prototype.get = function (key) {
						var current = this;
						while (current) {
							if (current._properties.hasOwnProperty(key)) {
								return current._properties[key];
							}
							current = current._parent;
						}
					};
					Zone.prototype.fork = function (zoneSpec) {
						if (!zoneSpec) throw new Error('ZoneSpec required!');
						return this._zoneDelegate.fork(this, zoneSpec);
					};
					Zone.prototype.wrap = function (callback, source) {
						if (typeof callback !== 'function') {
							throw new Error('Expecting function got: ' + callback);
						}
						var _callback = this._zoneDelegate.intercept(this, callback, source);
						var zone = this;
						return function () {
							return zone.runGuarded(_callback, this, arguments, source);
						};
					};
					Zone.prototype.run = function (callback, applyThis, applyArgs, source) {
						if (applyThis === void 0) {
							applyThis = null;
						}
						if (applyArgs === void 0) {
							applyArgs = null;
						}
						if (source === void 0) {
							source = null;
						}
						var oldZone = _currentZone;
						_currentZone = this;
						try {
							return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
						} finally {
							_currentZone = oldZone;
						}
					};
					Zone.prototype.runGuarded = function (callback, applyThis, applyArgs, source) {
						if (applyThis === void 0) {
							applyThis = null;
						}
						if (applyArgs === void 0) {
							applyArgs = null;
						}
						if (source === void 0) {
							source = null;
						}
						var oldZone = _currentZone;
						_currentZone = this;
						try {
							try {
								return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
							} catch (error) {
								if (this._zoneDelegate.handleError(this, error)) {
									throw error;
								}
							}
						} finally {
							_currentZone = oldZone;
						}
					};
					Zone.prototype.runTask = function (task, applyThis, applyArgs) {
						task.runCount++;
						if (task.zone != this) throw new Error('A task can only be run in the zone which created it! (Creation: ' + task.zone.name + '; Execution: ' + this.name + ')');
						var previousTask = _currentTask;
						_currentTask = task;
						var oldZone = _currentZone;
						_currentZone = this;
						try {
							if (task.type == 'macroTask' && task.data && !task.data.isPeriodic) {
								task.cancelFn = null;
							}
							try {
								return this._zoneDelegate.invokeTask(this, task, applyThis, applyArgs);
							} catch (error) {
								if (this._zoneDelegate.handleError(this, error)) {
									throw error;
								}
							}
						} finally {
							_currentZone = oldZone;
							_currentTask = previousTask;
						}
					};
					Zone.prototype.scheduleMicroTask = function (source, callback, data, customSchedule) {
						return this._zoneDelegate.scheduleTask(this, new ZoneTask('microTask', this, source, callback, data, customSchedule, null));
					};
					Zone.prototype.scheduleMacroTask = function (source, callback, data, customSchedule, customCancel) {
						return this._zoneDelegate.scheduleTask(this, new ZoneTask('macroTask', this, source, callback, data, customSchedule, customCancel));
					};
					Zone.prototype.scheduleEventTask = function (source, callback, data, customSchedule, customCancel) {
						return this._zoneDelegate.scheduleTask(this, new ZoneTask('eventTask', this, source, callback, data, customSchedule, customCancel));
					};
					Zone.prototype.cancelTask = function (task) {
						var value = this._zoneDelegate.cancelTask(this, task);
						task.runCount = -1;
						task.cancelFn = null;
						return value;
					};
					Zone.__symbol__ = __symbol__;
					return Zone;
				}();
				;
				var ZoneDelegate = function () {
					function ZoneDelegate(zone, parentDelegate, zoneSpec) {
						this._taskCounts = { microTask: 0, macroTask: 0, eventTask: 0 };
						this.zone = zone;
						this._parentDelegate = parentDelegate;
						this._forkZS = zoneSpec && (zoneSpec && zoneSpec.onFork ? zoneSpec : parentDelegate._forkZS);
						this._forkDlgt = zoneSpec && (zoneSpec.onFork ? parentDelegate : parentDelegate._forkDlgt);
						this._interceptZS = zoneSpec && (zoneSpec.onIntercept ? zoneSpec : parentDelegate._interceptZS);
						this._interceptDlgt = zoneSpec && (zoneSpec.onIntercept ? parentDelegate : parentDelegate._interceptDlgt);
						this._invokeZS = zoneSpec && (zoneSpec.onInvoke ? zoneSpec : parentDelegate._invokeZS);
						this._invokeDlgt = zoneSpec && (zoneSpec.onInvoke ? parentDelegate : parentDelegate._invokeDlgt);
						this._handleErrorZS = zoneSpec && (zoneSpec.onHandleError ? zoneSpec : parentDelegate._handleErrorZS);
						this._handleErrorDlgt = zoneSpec && (zoneSpec.onHandleError ? parentDelegate : parentDelegate._handleErrorDlgt);
						this._scheduleTaskZS = zoneSpec && (zoneSpec.onScheduleTask ? zoneSpec : parentDelegate._scheduleTaskZS);
						this._scheduleTaskDlgt = zoneSpec && (zoneSpec.onScheduleTask ? parentDelegate : parentDelegate._scheduleTaskDlgt);
						this._invokeTaskZS = zoneSpec && (zoneSpec.onInvokeTask ? zoneSpec : parentDelegate._invokeTaskZS);
						this._invokeTaskDlgt = zoneSpec && (zoneSpec.onInvokeTask ? parentDelegate : parentDelegate._invokeTaskDlgt);
						this._cancelTaskZS = zoneSpec && (zoneSpec.onCancelTask ? zoneSpec : parentDelegate._cancelTaskZS);
						this._cancelTaskDlgt = zoneSpec && (zoneSpec.onCancelTask ? parentDelegate : parentDelegate._cancelTaskDlgt);
						this._hasTaskZS = zoneSpec && (zoneSpec.onHasTask ? zoneSpec : parentDelegate._hasTaskZS);
						this._hasTaskDlgt = zoneSpec && (zoneSpec.onHasTask ? parentDelegate : parentDelegate._hasTaskDlgt);
					}
					ZoneDelegate.prototype.fork = function (targetZone, zoneSpec) {
						return this._forkZS ? this._forkZS.onFork(this._forkDlgt, this.zone, targetZone, zoneSpec) : new Zone(targetZone, zoneSpec);
					};
					ZoneDelegate.prototype.intercept = function (targetZone, callback, source) {
						return this._interceptZS ? this._interceptZS.onIntercept(this._interceptDlgt, this.zone, targetZone, callback, source) : callback;
					};
					ZoneDelegate.prototype.invoke = function (targetZone, callback, applyThis, applyArgs, source) {
						return this._invokeZS ? this._invokeZS.onInvoke(this._invokeDlgt, this.zone, targetZone, callback, applyThis, applyArgs, source) : callback.apply(applyThis, applyArgs);
					};
					ZoneDelegate.prototype.handleError = function (targetZone, error) {
						return this._handleErrorZS ? this._handleErrorZS.onHandleError(this._handleErrorDlgt, this.zone, targetZone, error) : true;
					};
					ZoneDelegate.prototype.scheduleTask = function (targetZone, task) {
						try {
							if (this._scheduleTaskZS) {
								return this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt, this.zone, targetZone, task);
							} else if (task.scheduleFn) {
								task.scheduleFn(task);
							} else if (task.type == 'microTask') {
								scheduleMicroTask(task);
							} else {
								throw new Error('Task is missing scheduleFn.');
							}
							return task;
						} finally {
							if (targetZone == this.zone) {
								this._updateTaskCount(task.type, 1);
							}
						}
					};
					ZoneDelegate.prototype.invokeTask = function (targetZone, task, applyThis, applyArgs) {
						try {
							return this._invokeTaskZS ? this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt, this.zone, targetZone, task, applyThis, applyArgs) : task.callback.apply(applyThis, applyArgs);
						} finally {
							if (targetZone == this.zone && task.type != 'eventTask' && !(task.data && task.data.isPeriodic)) {
								this._updateTaskCount(task.type, -1);
							}
						}
					};
					ZoneDelegate.prototype.cancelTask = function (targetZone, task) {
						var value;
						if (this._cancelTaskZS) {
							value = this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt, this.zone, targetZone, task);
						} else if (!task.cancelFn) {
							throw new Error('Task does not support cancellation, or is already canceled.');
						} else {
							value = task.cancelFn(task);
						}
						if (targetZone == this.zone) {
							// this should not be in the finally block, because exceptions assume not canceled.
							this._updateTaskCount(task.type, -1);
						}
						return value;
					};
					ZoneDelegate.prototype.hasTask = function (targetZone, isEmpty) {
						return this._hasTaskZS && this._hasTaskZS.onHasTask(this._hasTaskDlgt, this.zone, targetZone, isEmpty);
					};
					ZoneDelegate.prototype._updateTaskCount = function (type, count) {
						var counts = this._taskCounts;
						var prev = counts[type];
						var next = counts[type] = prev + count;
						if (next < 0) {
							throw new Error('More tasks executed then were scheduled.');
						}
						if (prev == 0 || next == 0) {
							var isEmpty = {
								microTask: counts.microTask > 0,
								macroTask: counts.macroTask > 0,
								eventTask: counts.eventTask > 0,
								change: type
							};
							try {
								this.hasTask(this.zone, isEmpty);
							} finally {
								if (this._parentDelegate) {
									this._parentDelegate._updateTaskCount(type, count);
								}
							}
						}
					};
					return ZoneDelegate;
				}();
				var ZoneTask = function () {
					function ZoneTask(type, zone, source, callback, options, scheduleFn, cancelFn) {
						this.runCount = 0;
						this.type = type;
						this.zone = zone;
						this.source = source;
						this.data = options;
						this.scheduleFn = scheduleFn;
						this.cancelFn = cancelFn;
						this.callback = callback;
						var self = this;
						this.invoke = function () {
							try {
								return zone.runTask(self, this, arguments);
							} finally {
								drainMicroTaskQueue();
							}
						};
					}
					return ZoneTask;
				}();
				function __symbol__(name) {
					return '__zone_symbol__' + name;
				}
				;
				var symbolSetTimeout = __symbol__('setTimeout');
				var symbolPromise = __symbol__('Promise');
				var symbolThen = __symbol__('then');
				var _currentZone = new Zone(null, null);
				var _currentTask = null;
				var _microTaskQueue = [];
				var _isDrainingMicrotaskQueue = false;
				var _uncaughtPromiseErrors = [];
				var _drainScheduled = false;
				function scheduleQueueDrain() {
					if (!_drainScheduled && !_currentTask && _microTaskQueue.length == 0) {
						// We are not running in Task, so we need to kickstart the microtask queue.
						if (global[symbolPromise]) {
							global[symbolPromise].resolve(0)[symbolThen](drainMicroTaskQueue);
						} else {
							global[symbolSetTimeout](drainMicroTaskQueue, 0);
						}
					}
				}
				function scheduleMicroTask(task) {
					scheduleQueueDrain();
					_microTaskQueue.push(task);
				}
				function consoleError(e) {
					var rejection = e && e.rejection;
					if (rejection) {
						console.error('Unhandled Promise rejection:', rejection instanceof Error ? rejection.message : rejection, '; Zone:', e.zone.name, '; Task:', e.task && e.task.source, '; Value:', rejection);
					}
					console.error(e);
				}
				function drainMicroTaskQueue() {
					if (!_isDrainingMicrotaskQueue) {
						_isDrainingMicrotaskQueue = true;
						while (_microTaskQueue.length) {
							var queue = _microTaskQueue;
							_microTaskQueue = [];
							for (var i = 0; i < queue.length; i++) {
								var task = queue[i];
								try {
									task.zone.runTask(task, null, null);
								} catch (e) {
									consoleError(e);
								}
							}
						}
						while (_uncaughtPromiseErrors.length) {
							var uncaughtPromiseErrors = _uncaughtPromiseErrors;
							_uncaughtPromiseErrors = [];
							var _loop_1 = function (i) {
								var uncaughtPromiseError = uncaughtPromiseErrors[i];
								try {
									uncaughtPromiseError.zone.runGuarded(function () {
										throw uncaughtPromiseError;
									});
								} catch (e) {
									consoleError(e);
								}
							};
							for (var i = 0; i < uncaughtPromiseErrors.length; i++) {
								_loop_1(i);
							}
						}
						_isDrainingMicrotaskQueue = false;
						_drainScheduled = false;
					}
				}
				function isThenable(value) {
					return value && value.then;
				}
				function forwardResolution(value) {
					return value;
				}
				function forwardRejection(rejection) {
					return ZoneAwarePromise.reject(rejection);
				}
				var symbolState = __symbol__('state');
				var symbolValue = __symbol__('value');
				var source = 'Promise.then';
				var UNRESOLVED = null;
				var RESOLVED = true;
				var REJECTED = false;
				var REJECTED_NO_CATCH = 0;
				function makeResolver(promise, state) {
					return function (v) {
						resolvePromise(promise, state, v);
						// Do not return value or you will break the Promise spec.
					};
				}
				function resolvePromise(promise, state, value) {
					if (promise[symbolState] === UNRESOLVED) {
						if (value instanceof ZoneAwarePromise && value[symbolState] !== UNRESOLVED) {
							clearRejectedNoCatch(value);
							resolvePromise(promise, value[symbolState], value[symbolValue]);
						} else if (isThenable(value)) {
							value.then(makeResolver(promise, state), makeResolver(promise, false));
						} else {
							promise[symbolState] = state;
							var queue = promise[symbolValue];
							promise[symbolValue] = value;
							for (var i = 0; i < queue.length;) {
								scheduleResolveOrReject(promise, queue[i++], queue[i++], queue[i++], queue[i++]);
							}
							if (queue.length == 0 && state == REJECTED) {
								promise[symbolState] = REJECTED_NO_CATCH;
								try {
									throw new Error("Uncaught (in promise): " + value);
								} catch (e) {
									var error = e;
									error.rejection = value;
									error.promise = promise;
									error.zone = Zone.current;
									error.task = Zone.currentTask;
									_uncaughtPromiseErrors.push(error);
									scheduleQueueDrain();
								}
							}
						}
					}
					// Resolving an already resolved promise is a noop.
					return promise;
				}
				function clearRejectedNoCatch(promise) {
					if (promise[symbolState] === REJECTED_NO_CATCH) {
						promise[symbolState] = REJECTED;
						for (var i = 0; i < _uncaughtPromiseErrors.length; i++) {
							if (promise === _uncaughtPromiseErrors[i].promise) {
								_uncaughtPromiseErrors.splice(i, 1);
								break;
							}
						}
					}
				}
				function scheduleResolveOrReject(promise, zone, chainPromise, onFulfilled, onRejected) {
					clearRejectedNoCatch(promise);
					var delegate = promise[symbolState] ? onFulfilled || forwardResolution : onRejected || forwardRejection;
					zone.scheduleMicroTask(source, function () {
						try {
							resolvePromise(chainPromise, true, zone.run(delegate, null, [promise[symbolValue]]));
						} catch (error) {
							resolvePromise(chainPromise, false, error);
						}
					});
				}
				var ZoneAwarePromise = function () {
					function ZoneAwarePromise(executor) {
						var promise = this;
						promise[symbolState] = UNRESOLVED;
						promise[symbolValue] = []; // queue;
						try {
							executor && executor(makeResolver(promise, RESOLVED), makeResolver(promise, REJECTED));
						} catch (e) {
							resolvePromise(promise, false, e);
						}
					}
					ZoneAwarePromise.resolve = function (value) {
						return resolvePromise(new this(null), RESOLVED, value);
					};
					ZoneAwarePromise.reject = function (error) {
						return resolvePromise(new this(null), REJECTED, error);
					};
					ZoneAwarePromise.race = function (values) {
						var resolve;
						var reject;
						var promise = new this(function (res, rej) {
							resolve = res;reject = rej;
						});
						function onResolve(value) {
							promise && (promise = null || resolve(value));
						}
						function onReject(error) {
							promise && (promise = null || reject(error));
						}
						for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
							var value = values_1[_i];
							if (!isThenable(value)) {
								value = this.resolve(value);
							}
							value.then(onResolve, onReject);
						}
						return promise;
					};
					ZoneAwarePromise.all = function (values) {
						var resolve;
						var reject;
						var promise = new this(function (res, rej) {
							resolve = res;reject = rej;
						});
						var count = 0;
						var resolvedValues = [];
						function onReject(error) {
							promise && reject(error);promise = null;
						}
						for (var _i = 0, values_2 = values; _i < values_2.length; _i++) {
							var value = values_2[_i];
							if (!isThenable(value)) {
								value = this.resolve(value);
							}
							value.then(function (index) {
								return function (value) {
									resolvedValues[index] = value;
									count--;
									if (promise && !count) {
										resolve(resolvedValues);
									}
									promise == null;
								};
							}(count), onReject);
							count++;
						}
						if (!count) resolve(resolvedValues);
						return promise;
					};
					ZoneAwarePromise.prototype.then = function (onFulfilled, onRejected) {
						var chainPromise = new ZoneAwarePromise(null);
						var zone = Zone.current;
						if (this[symbolState] == UNRESOLVED) {
							this[symbolValue].push(zone, chainPromise, onFulfilled, onRejected);
						} else {
							scheduleResolveOrReject(this, zone, chainPromise, onFulfilled, onRejected);
						}
						return chainPromise;
					};
					ZoneAwarePromise.prototype.catch = function (onRejected) {
						return this.then(null, onRejected);
					};
					return ZoneAwarePromise;
				}();
				var NativePromise = global[__symbol__('Promise')] = global.Promise;
				global.Promise = ZoneAwarePromise;
				if (NativePromise) {
					var NativePromiseProtototype = NativePromise.prototype;
					var NativePromiseThen_1 = NativePromiseProtototype[__symbol__('then')] = NativePromiseProtototype.then;
					NativePromiseProtototype.then = function (onResolve, onReject) {
						var nativePromise = this;
						return new ZoneAwarePromise(function (resolve, reject) {
							NativePromiseThen_1.call(nativePromise, resolve, reject);
						}).then(onResolve, onReject);
					};
				}
				return global.Zone = Zone;
			}(typeof window === 'undefined' ? global : window);

			/* WEBPACK VAR INJECTION */
		}).call(exports, function () {
			return this;
		}());

		/***/
	},
	/* 2 */
	/***/function (module, exports, __webpack_require__) {

		"use strict";

		var utils_1 = __webpack_require__(3);
		var WTF_ISSUE_555 = 'Anchor,Area,Audio,BR,Base,BaseFont,Body,Button,Canvas,Content,DList,Directory,Div,Embed,FieldSet,Font,Form,Frame,FrameSet,HR,Head,Heading,Html,IFrame,Image,Input,Keygen,LI,Label,Legend,Link,Map,Marquee,Media,Menu,Meta,Meter,Mod,OList,Object,OptGroup,Option,Output,Paragraph,Pre,Progress,Quote,Script,Select,Source,Span,Style,TableCaption,TableCell,TableCol,Table,TableRow,TableSection,TextArea,Title,Track,UList,Unknown,Video';
		var NO_EVENT_TARGET = 'ApplicationCache,EventSource,FileReader,InputMethodContext,MediaController,MessagePort,Node,Performance,SVGElementInstance,SharedWorker,TextTrack,TextTrackCue,TextTrackList,WebKitNamedFlow,Worker,WorkerGlobalScope,XMLHttpRequest,XMLHttpRequestEventTarget,XMLHttpRequestUpload,IDBRequest,IDBOpenDBRequest,IDBDatabase,IDBTransaction,IDBCursor,DBIndex'.split(',');
		var EVENT_TARGET = 'EventTarget';
		function eventTargetPatch(_global) {
			var apis = [];
			var isWtf = _global['wtf'];
			if (isWtf) {
				// Workaround for: https://github.com/google/tracing-framework/issues/555
				apis = WTF_ISSUE_555.split(',').map(function (v) {
					return 'HTML' + v + 'Element';
				}).concat(NO_EVENT_TARGET);
			} else if (_global[EVENT_TARGET]) {
				apis.push(EVENT_TARGET);
			} else {
				// Note: EventTarget is not available in all browsers,
				// if it's not available, we instead patch the APIs in the IDL that inherit from EventTarget
				apis = NO_EVENT_TARGET;
			}
			for (var i = 0; i < apis.length; i++) {
				var type = _global[apis[i]];
				utils_1.patchEventTargetMethods(type && type.prototype);
			}
		}
		exports.eventTargetPatch = eventTargetPatch;

		/***/
	},
	/* 3 */
	/***/function (module, exports) {

		/* WEBPACK VAR INJECTION */(function (global) {
			/**
   * Suppress closure compiler errors about unknown 'process' variable
   * @fileoverview
   * @suppress {undefinedVars}
   */
			"use strict";

			exports.zoneSymbol = Zone['__symbol__'];
			var _global = typeof window == 'undefined' ? global : window;
			function bindArguments(args, source) {
				for (var i = args.length - 1; i >= 0; i--) {
					if (typeof args[i] === 'function') {
						args[i] = Zone.current.wrap(args[i], source + '_' + i);
					}
				}
				return args;
			}
			exports.bindArguments = bindArguments;
			;
			function patchPrototype(prototype, fnNames) {
				var source = prototype.constructor['name'];
				var _loop_1 = function (i) {
					var name_1 = fnNames[i];
					var delegate = prototype[name_1];
					if (delegate) {
						prototype[name_1] = function (delegate) {
							return function () {
								return delegate.apply(this, bindArguments(arguments, source + '.' + name_1));
							};
						}(delegate);
					}
				};
				for (var i = 0; i < fnNames.length; i++) {
					_loop_1(i);
				}
			}
			exports.patchPrototype = patchPrototype;
			;
			exports.isWebWorker = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;
			exports.isNode = typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';
			exports.isBrowser = !exports.isNode && !exports.isWebWorker && !!(typeof window !== 'undefined' && window['HTMLElement']);
			function patchProperty(obj, prop) {
				var desc = Object.getOwnPropertyDescriptor(obj, prop) || {
					enumerable: true,
					configurable: true
				};
				// A property descriptor cannot have getter/setter and be writable
				// deleting the writable and value properties avoids this error:
				//
				// TypeError: property descriptors must not specify a value or be writable when a
				// getter or setter has been specified
				delete desc.writable;
				delete desc.value;
				// substr(2) cuz 'onclick' -> 'click', etc
				var eventName = prop.substr(2);
				var _prop = '_' + prop;
				desc.set = function (fn) {
					if (this[_prop]) {
						this.removeEventListener(eventName, this[_prop]);
					}
					if (typeof fn === 'function') {
						var wrapFn = function (event) {
							var result;
							result = fn.apply(this, arguments);
							if (result != undefined && !result) event.preventDefault();
						};
						this[_prop] = wrapFn;
						this.addEventListener(eventName, wrapFn, false);
					} else {
						this[_prop] = null;
					}
				};
				desc.get = function () {
					return this[_prop];
				};
				Object.defineProperty(obj, prop, desc);
			}
			exports.patchProperty = patchProperty;
			;
			function patchOnProperties(obj, properties) {
				var onProperties = [];
				for (var prop in obj) {
					if (prop.substr(0, 2) == 'on') {
						onProperties.push(prop);
					}
				}
				for (var j = 0; j < onProperties.length; j++) {
					patchProperty(obj, onProperties[j]);
				}
				if (properties) {
					for (var i = 0; i < properties.length; i++) {
						patchProperty(obj, 'on' + properties[i]);
					}
				}
			}
			exports.patchOnProperties = patchOnProperties;
			;
			var EVENT_TASKS = exports.zoneSymbol('eventTasks');
			var ADD_EVENT_LISTENER = 'addEventListener';
			var REMOVE_EVENT_LISTENER = 'removeEventListener';
			var SYMBOL_ADD_EVENT_LISTENER = exports.zoneSymbol(ADD_EVENT_LISTENER);
			var SYMBOL_REMOVE_EVENT_LISTENER = exports.zoneSymbol(REMOVE_EVENT_LISTENER);
			function findExistingRegisteredTask(target, handler, name, capture, remove) {
				var eventTasks = target[EVENT_TASKS];
				if (eventTasks) {
					for (var i = 0; i < eventTasks.length; i++) {
						var eventTask = eventTasks[i];
						var data = eventTask.data;
						if (data.handler === handler && data.useCapturing === capture && data.eventName === name) {
							if (remove) {
								eventTasks.splice(i, 1);
							}
							return eventTask;
						}
					}
				}
				return null;
			}
			function attachRegisteredEvent(target, eventTask) {
				var eventTasks = target[EVENT_TASKS];
				if (!eventTasks) {
					eventTasks = target[EVENT_TASKS] = [];
				}
				eventTasks.push(eventTask);
			}
			function scheduleEventListener(eventTask) {
				var meta = eventTask.data;
				attachRegisteredEvent(meta.target, eventTask);
				return meta.target[SYMBOL_ADD_EVENT_LISTENER](meta.eventName, eventTask.invoke, meta.useCapturing);
			}
			function cancelEventListener(eventTask) {
				var meta = eventTask.data;
				findExistingRegisteredTask(meta.target, eventTask.invoke, meta.eventName, meta.useCapturing, true);
				meta.target[SYMBOL_REMOVE_EVENT_LISTENER](meta.eventName, eventTask.invoke, meta.useCapturing);
			}
			function zoneAwareAddEventListener(self, args) {
				var eventName = args[0];
				var handler = args[1];
				var useCapturing = args[2] || false;
				// - Inside a Web Worker, `this` is undefined, the context is `global`
				// - When `addEventListener` is called on the global context in strict mode, `this` is undefined
				// see https://github.com/angular/zone.js/issues/190
				var target = self || _global;
				var delegate = null;
				if (typeof handler == 'function') {
					delegate = handler;
				} else if (handler && handler.handleEvent) {
					delegate = function (event) {
						return handler.handleEvent(event);
					};
				}
				var validZoneHandler = false;
				try {
					// In cross site contexts (such as WebDriver frameworks like Selenium),
					// accessing the handler object here will cause an exception to be thrown which
					// will fail tests prematurely.
					validZoneHandler = handler && handler.toString() === "[object FunctionWrapper]";
				} catch (e) {
					// Returning nothing here is fine, because objects in a cross-site context are unusable
					return;
				}
				// Ignore special listeners of IE11 & Edge dev tools, see https://github.com/angular/zone.js/issues/150
				if (!delegate || validZoneHandler) {
					return target[SYMBOL_ADD_EVENT_LISTENER](eventName, handler, useCapturing);
				}
				var eventTask = findExistingRegisteredTask(target, handler, eventName, useCapturing, false);
				if (eventTask) {
					// we already registered, so this will have noop.
					return target[SYMBOL_ADD_EVENT_LISTENER](eventName, eventTask.invoke, useCapturing);
				}
				var zone = Zone.current;
				var source = target.constructor['name'] + '.addEventListener:' + eventName;
				var data = {
					target: target,
					eventName: eventName,
					name: eventName,
					useCapturing: useCapturing,
					handler: handler
				};
				zone.scheduleEventTask(source, delegate, data, scheduleEventListener, cancelEventListener);
			}
			function zoneAwareRemoveEventListener(self, args) {
				var eventName = args[0];
				var handler = args[1];
				var useCapturing = args[2] || false;
				// - Inside a Web Worker, `this` is undefined, the context is `global`
				// - When `addEventListener` is called on the global context in strict mode, `this` is undefined
				// see https://github.com/angular/zone.js/issues/190
				var target = self || _global;
				var eventTask = findExistingRegisteredTask(target, handler, eventName, useCapturing, true);
				if (eventTask) {
					eventTask.zone.cancelTask(eventTask);
				} else {
					target[SYMBOL_REMOVE_EVENT_LISTENER](eventName, handler, useCapturing);
				}
			}
			function patchEventTargetMethods(obj) {
				if (obj && obj.addEventListener) {
					patchMethod(obj, ADD_EVENT_LISTENER, function () {
						return zoneAwareAddEventListener;
					});
					patchMethod(obj, REMOVE_EVENT_LISTENER, function () {
						return zoneAwareRemoveEventListener;
					});
					return true;
				} else {
					return false;
				}
			}
			exports.patchEventTargetMethods = patchEventTargetMethods;
			;
			var originalInstanceKey = exports.zoneSymbol('originalInstance');
			// wrap some native API on `window`
			function patchClass(className) {
				var OriginalClass = _global[className];
				if (!OriginalClass) return;
				_global[className] = function () {
					var a = bindArguments(arguments, className);
					switch (a.length) {
						case 0:
							this[originalInstanceKey] = new OriginalClass();
							break;
						case 1:
							this[originalInstanceKey] = new OriginalClass(a[0]);
							break;
						case 2:
							this[originalInstanceKey] = new OriginalClass(a[0], a[1]);
							break;
						case 3:
							this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2]);
							break;
						case 4:
							this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2], a[3]);
							break;
						default:
							throw new Error('Arg list too long.');
					}
				};
				var instance = new OriginalClass(function () {});
				var prop;
				for (prop in instance) {
					(function (prop) {
						if (typeof instance[prop] === 'function') {
							_global[className].prototype[prop] = function () {
								return this[originalInstanceKey][prop].apply(this[originalInstanceKey], arguments);
							};
						} else {
							Object.defineProperty(_global[className].prototype, prop, {
								set: function (fn) {
									if (typeof fn === 'function') {
										this[originalInstanceKey][prop] = Zone.current.wrap(fn, className + '.' + prop);
									} else {
										this[originalInstanceKey][prop] = fn;
									}
								},
								get: function () {
									return this[originalInstanceKey][prop];
								}
							});
						}
					})(prop);
				}
				for (prop in OriginalClass) {
					if (prop !== 'prototype' && OriginalClass.hasOwnProperty(prop)) {
						_global[className][prop] = OriginalClass[prop];
					}
				}
			}
			exports.patchClass = patchClass;
			;
			function createNamedFn(name, delegate) {
				try {
					return Function('f', "return function " + name + "(){return f(this, arguments)}")(delegate);
				} catch (e) {
					// if we fail, we must be CSP, just return delegate.
					return function () {
						return delegate(this, arguments);
					};
				}
			}
			exports.createNamedFn = createNamedFn;
			function patchMethod(target, name, patchFn) {
				var proto = target;
				while (proto && !proto.hasOwnProperty(name)) {
					proto = Object.getPrototypeOf(proto);
				}
				if (!proto && target[name]) {
					// somehow we did not find it, but we can see it. This happens on IE for Window properties.
					proto = target;
				}
				var delegateName = exports.zoneSymbol(name);
				var delegate;
				if (proto && !(delegate = proto[delegateName])) {
					delegate = proto[delegateName] = proto[name];
					proto[name] = createNamedFn(name, patchFn(delegate, delegateName, name));
				}
				return delegate;
			}
			exports.patchMethod = patchMethod;

			/* WEBPACK VAR INJECTION */
		}).call(exports, function () {
			return this;
		}());

		/***/
	},
	/* 4 */
	/***/function (module, exports, __webpack_require__) {

		"use strict";

		var utils_1 = __webpack_require__(3);
		/*
   * This is necessary for Chrome and Chrome mobile, to enable
   * things like redefining `createdCallback` on an element.
   */
		var _defineProperty = Object.defineProperty;
		var _getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
		var _create = Object.create;
		var unconfigurablesKey = utils_1.zoneSymbol('unconfigurables');
		function propertyPatch() {
			Object.defineProperty = function (obj, prop, desc) {
				if (isUnconfigurable(obj, prop)) {
					throw new TypeError('Cannot assign to read only property \'' + prop + '\' of ' + obj);
				}
				if (prop !== 'prototype') {
					desc = rewriteDescriptor(obj, prop, desc);
				}
				return _defineProperty(obj, prop, desc);
			};
			Object.defineProperties = function (obj, props) {
				Object.keys(props).forEach(function (prop) {
					Object.defineProperty(obj, prop, props[prop]);
				});
				return obj;
			};
			Object.create = function (obj, proto) {
				if (typeof proto === 'object') {
					Object.keys(proto).forEach(function (prop) {
						proto[prop] = rewriteDescriptor(obj, prop, proto[prop]);
					});
				}
				return _create(obj, proto);
			};
			Object.getOwnPropertyDescriptor = function (obj, prop) {
				var desc = _getOwnPropertyDescriptor(obj, prop);
				if (isUnconfigurable(obj, prop)) {
					desc.configurable = false;
				}
				return desc;
			};
		}
		exports.propertyPatch = propertyPatch;
		;
		function _redefineProperty(obj, prop, desc) {
			desc = rewriteDescriptor(obj, prop, desc);
			return _defineProperty(obj, prop, desc);
		}
		exports._redefineProperty = _redefineProperty;
		;
		function isUnconfigurable(obj, prop) {
			return obj && obj[unconfigurablesKey] && obj[unconfigurablesKey][prop];
		}
		function rewriteDescriptor(obj, prop, desc) {
			desc.configurable = true;
			if (!desc.configurable) {
				if (!obj[unconfigurablesKey]) {
					_defineProperty(obj, unconfigurablesKey, { writable: true, value: {} });
				}
				obj[unconfigurablesKey][prop] = true;
			}
			return desc;
		}

		/***/
	},
	/* 5 */
	/***/function (module, exports, __webpack_require__) {

		"use strict";

		var define_property_1 = __webpack_require__(4);
		var utils_1 = __webpack_require__(3);
		function registerElementPatch(_global) {
			if (!utils_1.isBrowser || !('registerElement' in _global.document)) {
				return;
			}
			var _registerElement = document.registerElement;
			var callbacks = ['createdCallback', 'attachedCallback', 'detachedCallback', 'attributeChangedCallback'];
			document.registerElement = function (name, opts) {
				if (opts && opts.prototype) {
					callbacks.forEach(function (callback) {
						var source = 'Document.registerElement::' + callback;
						if (opts.prototype.hasOwnProperty(callback)) {
							var descriptor = Object.getOwnPropertyDescriptor(opts.prototype, callback);
							if (descriptor && descriptor.value) {
								descriptor.value = Zone.current.wrap(descriptor.value, source);
								define_property_1._redefineProperty(opts.prototype, callback, descriptor);
							} else {
								opts.prototype[callback] = Zone.current.wrap(opts.prototype[callback], source);
							}
						} else if (opts.prototype[callback]) {
							opts.prototype[callback] = Zone.current.wrap(opts.prototype[callback], source);
						}
					});
				}
				return _registerElement.apply(document, [name, opts]);
			};
		}
		exports.registerElementPatch = registerElementPatch;

		/***/
	},
	/* 6 */
	/***/function (module, exports, __webpack_require__) {

		"use strict";

		var webSocketPatch = __webpack_require__(7);
		var utils_1 = __webpack_require__(3);
		var eventNames = 'copy cut paste abort blur focus canplay canplaythrough change click contextmenu dblclick drag dragend dragenter dragleave dragover dragstart drop durationchange emptied ended input invalid keydown keypress keyup load loadeddata loadedmetadata loadstart message mousedown mouseenter mouseleave mousemove mouseout mouseover mouseup pause play playing progress ratechange reset scroll seeked seeking select show stalled submit suspend timeupdate volumechange waiting mozfullscreenchange mozfullscreenerror mozpointerlockchange mozpointerlockerror error webglcontextrestored webglcontextlost webglcontextcreationerror'.split(' ');
		function propertyDescriptorPatch(_global) {
			if (utils_1.isNode) {
				return;
			}
			var supportsWebSocket = typeof WebSocket !== 'undefined';
			if (canPatchViaPropertyDescriptor()) {
				// for browsers that we can patch the descriptor:  Chrome & Firefox
				if (utils_1.isBrowser) {
					utils_1.patchOnProperties(HTMLElement.prototype, eventNames);
				}
				utils_1.patchOnProperties(XMLHttpRequest.prototype, null);
				if (typeof IDBIndex !== 'undefined') {
					utils_1.patchOnProperties(IDBIndex.prototype, null);
					utils_1.patchOnProperties(IDBRequest.prototype, null);
					utils_1.patchOnProperties(IDBOpenDBRequest.prototype, null);
					utils_1.patchOnProperties(IDBDatabase.prototype, null);
					utils_1.patchOnProperties(IDBTransaction.prototype, null);
					utils_1.patchOnProperties(IDBCursor.prototype, null);
				}
				if (supportsWebSocket) {
					utils_1.patchOnProperties(WebSocket.prototype, null);
				}
			} else {
				// Safari, Android browsers (Jelly Bean)
				patchViaCapturingAllTheEvents();
				utils_1.patchClass('XMLHttpRequest');
				if (supportsWebSocket) {
					webSocketPatch.apply(_global);
				}
			}
		}
		exports.propertyDescriptorPatch = propertyDescriptorPatch;
		function canPatchViaPropertyDescriptor() {
			if (utils_1.isBrowser && !Object.getOwnPropertyDescriptor(HTMLElement.prototype, 'onclick') && typeof Element !== 'undefined') {
				// WebKit https://bugs.webkit.org/show_bug.cgi?id=134364
				// IDL interface attributes are not configurable
				var desc = Object.getOwnPropertyDescriptor(Element.prototype, 'onclick');
				if (desc && !desc.configurable) return false;
			}
			Object.defineProperty(XMLHttpRequest.prototype, 'onreadystatechange', {
				get: function () {
					return true;
				}
			});
			var req = new XMLHttpRequest();
			var result = !!req.onreadystatechange;
			Object.defineProperty(XMLHttpRequest.prototype, 'onreadystatechange', {});
			return result;
		}
		;
		var unboundKey = utils_1.zoneSymbol('unbound');
		// Whenever any eventListener fires, we check the eventListener target and all parents
		// for `onwhatever` properties and replace them with zone-bound functions
		// - Chrome (for now)
		function patchViaCapturingAllTheEvents() {
			var _loop_1 = function (i) {
				var property = eventNames[i];
				var onproperty = 'on' + property;
				document.addEventListener(property, function (event) {
					var elt = event.target,
					    bound,
					    source;
					if (elt) {
						source = elt.constructor['name'] + '.' + onproperty;
					} else {
						source = 'unknown.' + onproperty;
					}
					while (elt) {
						if (elt[onproperty] && !elt[onproperty][unboundKey]) {
							bound = Zone.current.wrap(elt[onproperty], source);
							bound[unboundKey] = elt[onproperty];
							elt[onproperty] = bound;
						}
						elt = elt.parentElement;
					}
				}, true);
			};
			for (var i = 0; i < eventNames.length; i++) {
				_loop_1(i);
			}
			;
		}
		;

		/***/
	},
	/* 7 */
	/***/function (module, exports, __webpack_require__) {

		"use strict";

		var utils_1 = __webpack_require__(3);
		// we have to patch the instance since the proto is non-configurable
		function apply(_global) {
			var WS = _global.WebSocket;
			// On Safari window.EventTarget doesn't exist so need to patch WS add/removeEventListener
			// On older Chrome, no need since EventTarget was already patched
			if (!_global.EventTarget) {
				utils_1.patchEventTargetMethods(WS.prototype);
			}
			_global.WebSocket = function (a, b) {
				var socket = arguments.length > 1 ? new WS(a, b) : new WS(a);
				var proxySocket;
				// Safari 7.0 has non-configurable own 'onmessage' and friends properties on the socket instance
				var onmessageDesc = Object.getOwnPropertyDescriptor(socket, 'onmessage');
				if (onmessageDesc && onmessageDesc.configurable === false) {
					proxySocket = Object.create(socket);
					['addEventListener', 'removeEventListener', 'send', 'close'].forEach(function (propName) {
						proxySocket[propName] = function () {
							return socket[propName].apply(socket, arguments);
						};
					});
				} else {
					// we can patch the real socket
					proxySocket = socket;
				}
				utils_1.patchOnProperties(proxySocket, ['close', 'error', 'message', 'open']);
				return proxySocket;
			};
			for (var prop in WS) {
				_global.WebSocket[prop] = WS[prop];
			}
		}
		exports.apply = apply;

		/***/
	},
	/* 8 */
	/***/function (module, exports, __webpack_require__) {

		"use strict";

		var utils_1 = __webpack_require__(3);
		function patchTimer(window, setName, cancelName, nameSuffix) {
			var setNative = null;
			var clearNative = null;
			setName += nameSuffix;
			cancelName += nameSuffix;
			function scheduleTask(task) {
				var data = task.data;
				data.args[0] = task.invoke;
				data.handleId = setNative.apply(window, data.args);
				return task;
			}
			function clearTask(task) {
				return clearNative(task.data.handleId);
			}
			setNative = utils_1.patchMethod(window, setName, function (delegate) {
				return function (self, args) {
					if (typeof args[0] === 'function') {
						var zone = Zone.current;
						var options = {
							handleId: null,
							isPeriodic: nameSuffix === 'Interval',
							delay: nameSuffix === 'Timeout' || nameSuffix === 'Interval' ? args[1] || 0 : null,
							args: args
						};
						return zone.scheduleMacroTask(setName, args[0], options, scheduleTask, clearTask);
					} else {
						// cause an error by calling it directly.
						return delegate.apply(window, args);
					}
				};
			});
			clearNative = utils_1.patchMethod(window, cancelName, function (delegate) {
				return function (self, args) {
					var task = args[0];
					if (task && typeof task.type === 'string') {
						if (task.cancelFn && task.data.isPeriodic || task.runCount === 0) {
							// Do not cancel already canceled functions
							task.zone.cancelTask(task);
						}
					} else {
						// cause an error by calling it directly.
						delegate.apply(window, args);
					}
				};
			});
		}
		exports.patchTimer = patchTimer;

		/***/
	}
	/******/]);
	return module.exports;
});
System.registerDynamic("npm:@angular/core@2.0.0-rc.5/src/security.js", ["reflect-metadata", "zone.js"], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";
  /**
   * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property
   * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly
   * handled.
   *
   * See DomSanitizationService for more details on security in Angular applications.
   *
   * @stable
   */

  var define,
      global = this || self,
      GLOBAL = global;
  (function (SecurityContext) {
    SecurityContext[SecurityContext["NONE"] = 0] = "NONE";
    SecurityContext[SecurityContext["HTML"] = 1] = "HTML";
    SecurityContext[SecurityContext["STYLE"] = 2] = "STYLE";
    SecurityContext[SecurityContext["SCRIPT"] = 3] = "SCRIPT";
    SecurityContext[SecurityContext["URL"] = 4] = "URL";
    SecurityContext[SecurityContext["RESOURCE_URL"] = 5] = "RESOURCE_URL";
  })(exports.SecurityContext || (exports.SecurityContext = {}));
  var SecurityContext = exports.SecurityContext;
  /**
   * SanitizationService is used by the views to sanitize potentially dangerous values.
   *
   * @stable
   */
  var SanitizationService = function () {
    function SanitizationService() {}
    return SanitizationService;
  }();
  exports.SanitizationService = SanitizationService;
  

  return module.exports;
});
System.registerDynamic("npm:@angular/core@2.0.0-rc.5.json", [], false, function() {
  return {
    "main": "index.js",
    "meta": {
      "src/*.js": {
        "deps": [
          "reflect-metadata",
          "zone.js"
        ]
      }
    },
    "format": "cjs"
  };
});

System.registerDynamic('npm:@angular/core@2.0.0-rc.5/index.js', ['./src/metadata', './src/util', './src/di', './src/application_ref', './src/application_tokens', './src/application_init', './src/zone', './src/render', './src/linker', './src/debug/debug_node', './src/testability/testability', './src/change_detection', './src/platform_directives_and_pipes', './src/platform_core_providers', './src/application_module', './src/profile/profile', './src/facade/lang', './src/facade/async', './src/facade/exceptions', './private_export', './src/animation/metadata', './src/animation/animation_player', './src/security'], true, function ($__require, exports, module) {
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
  }
  /**
   * @module
   * @description
   * Entry point from which you should import all public core APIs.
   */
  __export($__require('./src/metadata'));
  __export($__require('./src/util'));
  __export($__require('./src/di'));
  var application_ref_1 = $__require('./src/application_ref');
  exports.createPlatform = application_ref_1.createPlatform;
  exports.assertPlatform = application_ref_1.assertPlatform;
  exports.disposePlatform = application_ref_1.disposePlatform;
  exports.getPlatform = application_ref_1.getPlatform;
  exports.coreBootstrap = application_ref_1.coreBootstrap;
  exports.coreLoadAndBootstrap = application_ref_1.coreLoadAndBootstrap;
  exports.PlatformRef = application_ref_1.PlatformRef;
  exports.ApplicationRef = application_ref_1.ApplicationRef;
  exports.enableProdMode = application_ref_1.enableProdMode;
  exports.lockRunMode = application_ref_1.lockRunMode;
  exports.isDevMode = application_ref_1.isDevMode;
  exports.createPlatformFactory = application_ref_1.createPlatformFactory;
  var application_tokens_1 = $__require('./src/application_tokens');
  exports.APP_ID = application_tokens_1.APP_ID;
  exports.PACKAGE_ROOT_URL = application_tokens_1.PACKAGE_ROOT_URL;
  exports.PLATFORM_INITIALIZER = application_tokens_1.PLATFORM_INITIALIZER;
  exports.APP_BOOTSTRAP_LISTENER = application_tokens_1.APP_BOOTSTRAP_LISTENER;
  var application_init_1 = $__require('./src/application_init');
  exports.APP_INITIALIZER = application_init_1.APP_INITIALIZER;
  exports.ApplicationInitStatus = application_init_1.ApplicationInitStatus;
  __export($__require('./src/zone'));
  __export($__require('./src/render'));
  __export($__require('./src/linker'));
  var debug_node_1 = $__require('./src/debug/debug_node');
  exports.DebugElement = debug_node_1.DebugElement;
  exports.DebugNode = debug_node_1.DebugNode;
  exports.asNativeElements = debug_node_1.asNativeElements;
  exports.getDebugNode = debug_node_1.getDebugNode;
  __export($__require('./src/testability/testability'));
  __export($__require('./src/change_detection'));
  __export($__require('./src/platform_directives_and_pipes'));
  __export($__require('./src/platform_core_providers'));
  var application_module_1 = $__require('./src/application_module');
  exports.APPLICATION_COMMON_PROVIDERS = application_module_1.APPLICATION_COMMON_PROVIDERS;
  exports.ApplicationModule = application_module_1.ApplicationModule;
  var profile_1 = $__require('./src/profile/profile');
  exports.wtfCreateScope = profile_1.wtfCreateScope;
  exports.wtfLeave = profile_1.wtfLeave;
  exports.wtfStartTimeRange = profile_1.wtfStartTimeRange;
  exports.wtfEndTimeRange = profile_1.wtfEndTimeRange;
  var lang_1 = $__require('./src/facade/lang');
  exports.Type = lang_1.Type;
  var async_1 = $__require('./src/facade/async');
  exports.EventEmitter = async_1.EventEmitter;
  var exceptions_1 = $__require('./src/facade/exceptions');
  exports.ExceptionHandler = exceptions_1.ExceptionHandler;
  exports.WrappedException = exceptions_1.WrappedException;
  exports.BaseException = exceptions_1.BaseException;
  __export($__require('./private_export'));
  __export($__require('./src/animation/metadata'));
  var animation_player_1 = $__require('./src/animation/animation_player');
  exports.AnimationPlayer = animation_player_1.AnimationPlayer;
  var security_1 = $__require('./src/security');
  exports.SanitizationService = security_1.SanitizationService;
  exports.SecurityContext = security_1.SecurityContext;
  

  return module.exports;
});
System.registerDynamic("npm:@angular2-material/toolbar@2.0.0-alpha.5-2.json", [], false, function() {
  return {
    "main": "toolbar.js",
    "format": "cjs",
    "meta": {
      "*.json": {
        "format": "json"
      }
    }
  };
});

System.registerDynamic("npm:@angular2-material/toolbar@2.0.0-alpha.5-2/toolbar.js", ["@angular/core"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("@angular/core");
    var core_2 = $__require("@angular/core");
    var core_3 = $__require("@angular/core");
    var MdToolbar = function () {
        function MdToolbar(elementRef, renderer) {
            this.elementRef = elementRef;
            this.renderer = renderer;
        }
        Object.defineProperty(MdToolbar.prototype, "color", {
            get: function () {
                return this._color;
            },
            set: function (value) {
                this._updateColor(value);
            },
            enumerable: true,
            configurable: true
        });
        MdToolbar.prototype._updateColor = function (newColor) {
            this._setElementColor(this._color, false);
            this._setElementColor(newColor, true);
            this._color = newColor;
        };
        MdToolbar.prototype._setElementColor = function (color, isAdd) {
            if (color != null && color != '') {
                this.renderer.setElementClass(this.elementRef.nativeElement, "md-" + color, isAdd);
            }
        };
        __decorate([core_1.Input(), __metadata('design:type', String)], MdToolbar.prototype, "color", null);
        MdToolbar = __decorate([core_1.Component({
            moduleId: module.id,
            selector: 'md-toolbar',
            template: "<div class=\"md-toolbar-layout\"> <md-toolbar-row> <ng-content></ng-content> </md-toolbar-row> <ng-content select=\"md-toolbar-row\"></ng-content> </div>",
            styles: ["/** * Mixin that creates a new stacking context. * see https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context */ /** * This mixin hides an element visually. * That means it's still accessible for screen-readers but not visible in view. */ /** * Forces an element to grow to fit floated contents; used as as an alternative to * `overflow: hidden;` because it doesn't cut off contents. */ /** * A mixin, which generates temporary ink ripple on a given component. * When $bindToParent is set to true, it will check for the focused class on the same selector as you included * that mixin. * It is also possible to specify the color palette of the temporary ripple. By default it uses the * accent palette for its background. */ :host { display: -webkit-box; display: -webkit-flex; display: -ms-flexbox; display: flex; box-sizing: border-box; width: 100%; min-height: 64px; font-size: 20px; font-weight: 400; font-family: Roboto, \"Helvetica Neue\", sans-serif; padding: 0 16px; -webkit-box-orient: vertical; -webkit-box-direction: normal; -webkit-flex-direction: column; -ms-flex-direction: column; flex-direction: column; background: whitesmoke; color: rgba(0, 0, 0, 0.87); } :host.md-primary { background: #009688; color: white; } :host.md-accent { background: #9c27b0; color: rgba(255, 255, 255, 0.870588); } :host.md-warn { background: #f44336; color: white; } :host md-toolbar-row { display: -webkit-box; display: -webkit-flex; display: -ms-flexbox; display: flex; box-sizing: border-box; width: 100%; height: 64px; -webkit-box-orient: horizontal; -webkit-box-direction: normal; -webkit-flex-direction: row; -ms-flex-direction: row; flex-direction: row; -webkit-box-align: center; -webkit-align-items: center; -ms-flex-align: center; align-items: center; } "],
            changeDetection: core_1.ChangeDetectionStrategy.OnPush
        }), __metadata('design:paramtypes', [core_3.ElementRef, core_2.Renderer])], MdToolbar);
        return MdToolbar;
    }();
    exports.MdToolbar = MdToolbar;
    exports.MD_TOOLBAR_DIRECTIVES = [MdToolbar];
    

    return module.exports;
});
System.registerDynamic("github:systemjs/plugin-text@0.0.8.json", [], false, function() {
  return {
    "main": "text"
  };
});

System.register("catundercover/components/footer/footer.component.html!github:systemjs/plugin-text@0.0.8/text.js", [], function (_export, _context) {
  "use strict";

  return {
    setters: [],
    execute: function () {
      _export("default", "<md-toolbar class=\"footer\">\n        <span class=\"footer__social\">\n            <a href=\"{{sNetwork.url}}\" title=\"{{sNetwork.title}}\" class=\"footer__social_item\" *ngFor=\"let sNetwork of socialNetworks\">\n                <span class=\"footer__social_item_icon {{sNetwork.class}}\"></span>\n            </a>\n        </span>\n\n    <span class=\"footer__contact\">\n            <span class=\"msg\">INTERESTED IN COLLABORATING?</span>\n            <span class=\"mailto\"><a href=\"mailto:corinaciripitca@gmail.com\">DROP ME A LINE</a></span>\n        </span>\n</md-toolbar>");
    }
  };
});
'use strict';

System.register('catundercover/components/footer/footer.component.js', ['npm:systemjs-plugin-babel@0.0.12/babel-helpers/classCallCheck.js', 'npm:systemjs-plugin-babel@0.0.12/babel-helpers/createClass.js', '@angular/core', '@angular/router', '@angular2-material/toolbar', './footer.component.html!text', './footer.component.less!'], function (_export, _context) {
    "use strict";

    var _classCallCheck, _createClass, Component, ViewEncapsulation, ROUTER_DIRECTIVES, MD_TOOLBAR_DIRECTIVES, componentTemplate, componentStyles, FooterComponent;

    return {
        setters: [function (_npmSystemjsPluginBabel0012BabelHelpersClassCallCheckJs) {
            _classCallCheck = _npmSystemjsPluginBabel0012BabelHelpersClassCallCheckJs.default;
        }, function (_npmSystemjsPluginBabel0012BabelHelpersCreateClassJs) {
            _createClass = _npmSystemjsPluginBabel0012BabelHelpersCreateClassJs.default;
        }, function (_angularCore) {
            Component = _angularCore.Component;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
        }, function (_angularRouter) {
            ROUTER_DIRECTIVES = _angularRouter.ROUTER_DIRECTIVES;
        }, function (_angular2MaterialToolbar) {
            MD_TOOLBAR_DIRECTIVES = _angular2MaterialToolbar.MD_TOOLBAR_DIRECTIVES;
        }, function (_footerComponentHtmlText) {
            componentTemplate = _footerComponentHtmlText.default;
        }, function (_footerComponentLess) {
            componentStyles = _footerComponentLess.default;
        }],
        execute: function () {
            FooterComponent = function () {
                _createClass(FooterComponent, null, [{
                    key: 'annotations',
                    get: function get() {
                        return [new Component({
                            selector: 'footer',
                            template: componentTemplate,
                            styles: [componentStyles],
                            directives: [ROUTER_DIRECTIVES, MD_TOOLBAR_DIRECTIVES],
                            encapsulation: ViewEncapsulation.None
                        })];
                    }
                }]);

                function FooterComponent() {
                    _classCallCheck(this, FooterComponent);

                    this.socialNetworks = [{
                        title: 'Pinteres',
                        class: 'pinterest',
                        url: 'http://katrotz.space'
                    }, {
                        title: 'Instagram',
                        class: 'instagram',
                        url: 'http://katrotz.space'
                    }, {
                        title: 'Facebook',
                        class: 'facebook',
                        url: 'http://katrotz.space'
                    }, {
                        title: 'Linkedin',
                        class: 'linkedin',
                        url: 'http://katrotz.space'
                    }];
                }

                return FooterComponent;
            }();

            _export('default', FooterComponent);
        }
    };
});
'use strict';

System.register('catundercover/components/catundercover/catundercover.component.js', ['npm:systemjs-plugin-babel@0.0.12/babel-helpers/classCallCheck.js', 'npm:systemjs-plugin-babel@0.0.12/babel-helpers/createClass.js', '@angular/core', '@angular/router', './../navbar/navbar.component', './../footer/footer.component', './catundercover.component.less!'], function (_export, _context) {
    "use strict";

    var _classCallCheck, _createClass, Component, ViewEncapsulation, ROUTER_DIRECTIVES, NavbarComponent, FooterComponent, componentStyles, CatUndercoverComponent;

    return {
        setters: [function (_npmSystemjsPluginBabel0012BabelHelpersClassCallCheckJs) {
            _classCallCheck = _npmSystemjsPluginBabel0012BabelHelpersClassCallCheckJs.default;
        }, function (_npmSystemjsPluginBabel0012BabelHelpersCreateClassJs) {
            _createClass = _npmSystemjsPluginBabel0012BabelHelpersCreateClassJs.default;
        }, function (_angularCore) {
            Component = _angularCore.Component;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
        }, function (_angularRouter) {
            ROUTER_DIRECTIVES = _angularRouter.ROUTER_DIRECTIVES;
        }, function (_navbarNavbarComponent) {
            NavbarComponent = _navbarNavbarComponent.default;
        }, function (_footerFooterComponent) {
            FooterComponent = _footerFooterComponent.default;
        }, function (_catundercoverComponentLess) {
            componentStyles = _catundercoverComponentLess.default;
        }],
        execute: function () {
            CatUndercoverComponent = function () {
                function CatUndercoverComponent() {
                    _classCallCheck(this, CatUndercoverComponent);
                }

                _createClass(CatUndercoverComponent, null, [{
                    key: 'annotations',
                    get: function get() {
                        return [new Component({
                            selector: 'catundercover',
                            template: '\n                    <section class="hr top"></section>\n                    <navbar></navbar>\n                    <div id="main" class="main">\n                        <router-outlet></router-outlet>\n                    </div>\n                    <footer></footer>\n                    <section class="hr bottom"></section>\n                ',
                            styles: [componentStyles],
                            directives: [ROUTER_DIRECTIVES, NavbarComponent, FooterComponent],
                            encapsulation: ViewEncapsulation.None
                        })];
                    }
                }]);

                return CatUndercoverComponent;
            }();

            _export('default', CatUndercoverComponent);
        }
    };
});
'use strict';

System.register('catundercover/index.js', ['@angular/core', '@angular/platform-browser-dynamic', '@ngrx/store', './reducers/index', './routes/index', './components/catundercover/catundercover.component'], function (_export, _context) {
    "use strict";

    var NgModule, Component, View, enableProdMode, ViewEncapsulation, ngBootstrapBrowser, provideStore, reducers, state, APP_ROUTER_PROVIDERS, CatUndercoverComponent;
    function run() {
        // enableProdMode();

        return ngBootstrapBrowser(CatUndercoverComponent, [APP_ROUTER_PROVIDERS, provideStore(reducers, state)]);
    }

    _export('run', run);

    return {
        setters: [function (_angularCore) {
            NgModule = _angularCore.NgModule;
            Component = _angularCore.Component;
            View = _angularCore.View;
            enableProdMode = _angularCore.enableProdMode;
            ViewEncapsulation = _angularCore.ViewEncapsulation;
        }, function (_angularPlatformBrowserDynamic) {
            ngBootstrapBrowser = _angularPlatformBrowserDynamic.bootstrap;
        }, function (_ngrxStore) {
            provideStore = _ngrxStore.provideStore;
        }, function (_reducersIndex) {
            reducers = _reducersIndex.reducers;
            state = _reducersIndex.state;
        }, function (_routesIndex) {
            APP_ROUTER_PROVIDERS = _routesIndex.default;
        }, function (_componentsCatundercoverCatundercoverComponent) {
            CatUndercoverComponent = _componentsCatundercoverCatundercoverComponent.default;
        }],
        execute: function () {}
    };
});
System.registerDynamic("github:katrotz/systemjs-less-plugin@1.8.5.json", [], false, function() {
  return {
    "main": "less"
  };
});

System.registerDynamic('github:katrotz/systemjs-less-plugin@1.8.5/less.js', [], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  if (typeof window !== 'undefined') {

    // Failing to set this will hide the DOM body
    // See also http://stackoverflow.com/questions/35702313/whats-adding-style-type-text-cssbody-display-none-important-style
    window.less = {
      async: true
    };

    var head = document.getElementsByTagName('head')[0];

    // get all injected style tags in the page
    var styles = document.getElementsByTagName('style');
    var styleIds = [];
    for (var i = 0; i < styles.length; i++) {
      if (!styles[i].hasAttribute("data-href")) {
        continue;
      }
      styleIds.push(styles[i].getAttribute("data-href"));
    }

    var loadStyle = function (url, less_browser) {

      return new Promise(function (resolve, reject) {
        var request = new XMLHttpRequest();
        request.open('GET', url, true);
        request.onload = function () {
          if (request.responseText) {
            //request.status >= 200 && request.status < 400) {
            // Success!
            var responseData = request.responseText;

            //render it using less
            less_browser.render(responseData, {
              filename: url,
              rootpath: url.replace(/[^\/]*$/, '')
            }).then(function (data) {
              resolve(data.css);
            });
          } else {
            // We reached our target server, but it returned an error
            reject();
          }
        };

        request.onerror = function (e) {
          reject(e);
        };

        request.send();
      });
    };

    exports.fetch = function (load) {
      // don't reload styles loaded in the head
      for (var j = 0; i < styleIds.length; j++) {
        if (load.address === styleIds[j]) {
          return '';
        }
      }
      //var less_browser = require('less.js');
      return this.import('./lessjs/less.browser.js', {
        name: module.id
      }).then(function (less_browser) {
        return loadStyle(load.address, less_browser);
      });
    };

    exports.translate = function (load) {
      // Read SystemJS configurations of the plugin
      var lessOptions = this.lessOptions || {};

      var appendStyles = lessOptions.append;

      if (appendStyles) {
        //inject it into the head as a style tag
        var style = document.createElement('style');
        style.textContent = load.source + '/*# sourceURL=' + load.address + '*/';
        style.setAttribute('type', 'text/css');
        //store original type in the data-type attribute
        style.setAttribute('data-type', 'text/less');
        //store the url in the data-href attribute
        style.setAttribute('data-href', load.address);
        head.appendChild(style);

        load.metadata.format = 'defined';
      } else {
        if (this.builder || this.transpiler) {
          load.metadata.format = 'esm';
          return 'export default ' + JSON.stringify(load.source) + ';';
        }

        load.metadata.format = 'amd';
        return 'def' + 'ine(function() {\nreturn ' + JSON.stringify(load.source) + ';\n});';
      }
    };
  } else {

    // var getBuilder = function (loader) {
    //   return loader.import('./less-builder.js', {
    //     name: module.id
    //   });
    // };
    //
    //
    // // setting format = 'defined' means we're managing our own output
    // exports.translate = function (load) {
    //   load.metadata.format = 'defined';
    // };
    //
    // exports.bundle = function (loads, opts) {
    //   var _this = this;
    //   if (_this.buildCSS === false) {
    //     return '';
    //   }
    //   return getBuilder(_this)
    //     .then(function (builder) {
    //       return builder.bundle.call(_this, loads, opts);
    //     });
    // };
    //
    // exports.listAssets = function (loads, compileOpts, outputOpts) {
    //   var _this = this;
    //   return getBuilder(_this)
    //     .then(function (builder) {
    //       return builder.listAssets.call(_this, loads, compileOpts, outputOpts);
    //     });
    // };
  }
  return module.exports;
});
//# sourceMappingURL=catundercover.js.map